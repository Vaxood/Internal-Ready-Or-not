#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WeaponWheel_MagazineDisplay

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C
// 0x00A0 (0x0300 - 0x0260)
class UW_WeaponWheel_MagazineDisplay_C final  : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UVerticalBox*                           Container_MagSlot;                                 // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UImage*>                         Mags;                                              // 0x0270(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class ABaseMagazineWeapon*                    MagazineWeapon;                                    // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalMags;                                         // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAmmo;                                           // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EmptyMags;                                         // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IconSize;                                          // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UW_WeaponWheel_MagazineSlot_C*>  MagSlots;                                          // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          bOnlyShowOneSlot;                                  // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4457[0x3];                                     // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxMagsPerSlot;                                    // 0x02AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMap<int32, int32>                            SlotIndexToMags;                                   // 0x02B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_W_WeaponWheel_MagazineDisplay(int32 EntryPoint, bool K2Node_Event_IsDesignTime, const struct FGeometry& K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, int32 CallFunc_GetMagazineCount_ReturnValue, float CallFunc_GetAmmoInMagazine_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue);
	void PreConstruct(bool IsDesignTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void CreateMag(class UW_WeaponWheel_MagazineSlot_C*& MagSlot);
	void CreateMagOutline(class UW_WeaponWheel_MagazineSlot_C*& MagSlot);
	void CreateMags(int32 CurrentIndex, class UW_WeaponWheel_MagazineSlot_C* CurrentMagSlot, bool Temp_bool_Variable, int32 Temp_int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_Variable_1, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_1, bool CallFunc_Greater_IntInt_ReturnValue, int32 CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_GetMaxSlots_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, class UW_WeaponWheel_MagazineSlot_C* CallFunc_CreateMagSlot_ReturnValue, int32 Temp_int_Variable_1, int32 CallFunc_Add_IntInt_ReturnValue_1, bool CallFunc_LessEqual_IntInt_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_1, int32 CallFunc_Array_LastIndex_ReturnValue, const struct FMargin& K2Node_MakeStruct_Margin, class UImage* CallFunc_Array_Get_Item, class UHorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_GetMagazineCount_ReturnValue, class AShotgun* K2Node_DynamicCast_AsShotgun, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Divide_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue_2);
	void Initialize(class ABaseMagazineWeapon* InMagazineWeapon, float Param_IconSize);
	void UpdateMagIcon(int32 MagIndex, float CurrentAmmo, class UW_WeaponWheel_MagazineSlot_C* CallFunc_Array_Get_Item, float CallFunc_MapRangeClamped_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Clamp_ReturnValue, class UImage* CallFunc_GetMag_Return_Value, class UMaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, bool CallFunc_IsValid_ReturnValue);
	class UW_WeaponWheel_MagazineSlot_C* CreateMagSlot(const struct FSlateChildSize& K2Node_MakeStruct_SlateChildSize, class UW_WeaponWheel_MagazineSlot_C* CallFunc_SpawnObject_ReturnValue, class UVerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, class UVerticalBoxSlot* CallFunc_SlotAsVerticalBoxSlot_ReturnValue);
	int32 GetMaxSlots(bool Temp_bool_Variable, int32 CallFunc_Percent_IntInt_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 K2Node_Select_Default);
	void PopulateSlotIndexToMagsMap(bool Temp_bool_Variable, bool Temp_bool_Variable_1, bool Temp_bool_Variable_2, int32 Temp_int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int32 CallFunc_Percent_IntInt_ReturnValue, int32 CallFunc_GetMaxSlots_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue_1, int32 K2Node_Select_Default_1);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_WeaponWheel_MagazineDisplay_C">();
	}
	static class UW_WeaponWheel_MagazineDisplay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_WeaponWheel_MagazineDisplay_C>();
	}
};
static_assert(alignof(UW_WeaponWheel_MagazineDisplay_C) == 0x000008, "Wrong alignment on UW_WeaponWheel_MagazineDisplay_C");
static_assert(sizeof(UW_WeaponWheel_MagazineDisplay_C) == 0x000300, "Wrong size on UW_WeaponWheel_MagazineDisplay_C");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, UberGraphFrame) == 0x000260, "Member 'UW_WeaponWheel_MagazineDisplay_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, Container_MagSlot) == 0x000268, "Member 'UW_WeaponWheel_MagazineDisplay_C::Container_MagSlot' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, Mags) == 0x000270, "Member 'UW_WeaponWheel_MagazineDisplay_C::Mags' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, MagazineWeapon) == 0x000280, "Member 'UW_WeaponWheel_MagazineDisplay_C::MagazineWeapon' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, TotalMags) == 0x000288, "Member 'UW_WeaponWheel_MagazineDisplay_C::TotalMags' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, MaxAmmo) == 0x00028C, "Member 'UW_WeaponWheel_MagazineDisplay_C::MaxAmmo' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, EmptyMags) == 0x000290, "Member 'UW_WeaponWheel_MagazineDisplay_C::EmptyMags' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, IconSize) == 0x000294, "Member 'UW_WeaponWheel_MagazineDisplay_C::IconSize' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, MagSlots) == 0x000298, "Member 'UW_WeaponWheel_MagazineDisplay_C::MagSlots' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, bOnlyShowOneSlot) == 0x0002A8, "Member 'UW_WeaponWheel_MagazineDisplay_C::bOnlyShowOneSlot' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, MaxMagsPerSlot) == 0x0002AC, "Member 'UW_WeaponWheel_MagazineDisplay_C::MaxMagsPerSlot' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_MagazineDisplay_C, SlotIndexToMags) == 0x0002B0, "Member 'UW_WeaponWheel_MagazineDisplay_C::SlotIndexToMags' has a wrong offset!");

}

