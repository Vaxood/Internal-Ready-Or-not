#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonUI

#include "Basic.hpp"

#include "CommonUI_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "CommonInput_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Slate_structs.hpp"


namespace SDK
{

// Class CommonUI.AnalogSlider
// 0x0020 (0x0518 - 0x04F8)
class UAnalogSlider final  : public USlider
{
public:
	FMulticastInlineDelegateProperty_             OnAnalogCapture;                                   // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_193B[0x10];                                    // 0x0508(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnalogSlider">();
	}
	static class UAnalogSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnalogSlider>();
	}
};
static_assert(alignof(UAnalogSlider) == 0x000008, "Wrong alignment on UAnalogSlider");
static_assert(sizeof(UAnalogSlider) == 0x000518, "Wrong size on UAnalogSlider");
static_assert(offsetof(UAnalogSlider, OnAnalogCapture) == 0x0004F8, "Member 'UAnalogSlider::OnAnalogCapture' has a wrong offset!");

// Class CommonUI.CommonActionHandlerInterface
// 0x0000 (0x0028 - 0x0028)
class ICommonActionHandlerInterface final  : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonActionHandlerInterface">();
	}
	static class ICommonActionHandlerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICommonActionHandlerInterface>();
	}
};
static_assert(alignof(ICommonActionHandlerInterface) == 0x000008, "Wrong alignment on ICommonActionHandlerInterface");
static_assert(sizeof(ICommonActionHandlerInterface) == 0x000028, "Wrong size on ICommonActionHandlerInterface");

// Class CommonUI.CommonActionWidget
// 0x0218 (0x0320 - 0x0108)
class UCommonActionWidget final  : public UWidget
{
public:
	FMulticastInlineDelegateProperty_             OnInputMethodChanged;                              // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ProgressMaterialBrush;                             // 0x0118(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   ProgressMaterialParam;                             // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            IconRimBrush;                                      // 0x01A8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            InputActions;                                      // 0x0230(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_193C[0x8];                                     // 0x0240(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ProgressDynamicMaterial;                           // 0x0248(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_193D[0xD0];                                    // 0x0250(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInputMethodChanged__DelegateSignature(bool bUsingGamepad);
	void SetIconRimBrush(const struct FSlateBrush& InIconRimBrush);
	void SetInputAction(const struct FDataTableRowHandle& InputActionRow);
	void SetInputActions(const TArray<struct FDataTableRowHandle>& NewInputActions);

	class FText GetDisplayText() const;
	struct FSlateBrush GetIcon() const;
	bool IsHeldAction() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonActionWidget">();
	}
	static class UCommonActionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonActionWidget>();
	}
};
static_assert(alignof(UCommonActionWidget) == 0x000008, "Wrong alignment on UCommonActionWidget");
static_assert(sizeof(UCommonActionWidget) == 0x000320, "Wrong size on UCommonActionWidget");
static_assert(offsetof(UCommonActionWidget, OnInputMethodChanged) == 0x000108, "Member 'UCommonActionWidget::OnInputMethodChanged' has a wrong offset!");
static_assert(offsetof(UCommonActionWidget, ProgressMaterialBrush) == 0x000118, "Member 'UCommonActionWidget::ProgressMaterialBrush' has a wrong offset!");
static_assert(offsetof(UCommonActionWidget, ProgressMaterialParam) == 0x0001A0, "Member 'UCommonActionWidget::ProgressMaterialParam' has a wrong offset!");
static_assert(offsetof(UCommonActionWidget, IconRimBrush) == 0x0001A8, "Member 'UCommonActionWidget::IconRimBrush' has a wrong offset!");
static_assert(offsetof(UCommonActionWidget, InputActions) == 0x000230, "Member 'UCommonActionWidget::InputActions' has a wrong offset!");
static_assert(offsetof(UCommonActionWidget, ProgressDynamicMaterial) == 0x000248, "Member 'UCommonActionWidget::ProgressDynamicMaterial' has a wrong offset!");

// Class CommonUI.CommonUserWidget
// 0x0028 (0x0288 - 0x0260)
class UCommonUserWidget : public UUserWidget
{
public:
	bool                                          bConsumePointerInput;                              // 0x0260(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_193E[0x27];                                    // 0x0261(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetConsumePointerInput(bool bInConsumePointerInput);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUserWidget">();
	}
	static class UCommonUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUserWidget>();
	}
};
static_assert(alignof(UCommonUserWidget) == 0x000008, "Wrong alignment on UCommonUserWidget");
static_assert(sizeof(UCommonUserWidget) == 0x000288, "Wrong size on UCommonUserWidget");
static_assert(offsetof(UCommonUserWidget, bConsumePointerInput) == 0x000260, "Member 'UCommonUserWidget::bConsumePointerInput' has a wrong offset!");

// Class CommonUI.CommonActivatableWidget
// 0x0098 (0x0320 - 0x0288)
class UCommonActivatableWidget : public UCommonUserWidget
{
public:
	bool                                          bAutoActivate;                                     // 0x0288(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBackHandler;                                    // 0x0289(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSupportsActivationFocus;                          // 0x028A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsModal;                                          // 0x028B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoRestoreFocus;                                 // 0x028C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSetVisibilityOnActivated;                         // 0x028D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESlateVisibility                              ActivatedVisibility;                               // 0x028E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSetVisibilityOnDeactivated;                       // 0x028F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESlateVisibility                              DeactivatedVisibility;                             // 0x0290(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_193F[0x7];                                     // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnWidgetActivated;                              // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             BP_OnWidgetDeactivated;                            // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	bool                                          bIsActive;                                         // 0x02B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1940[0x67];                                    // 0x02B9(0x0067)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateWidget();
	void BP_OnActivated();
	void BP_OnDeactivated();
	bool BP_OnHandleBackAction();
	void DeactivateWidget();

	class UWidget* BP_GetDesiredFocusTarget() const;
	bool IsActivated() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonActivatableWidget">();
	}
	static class UCommonActivatableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonActivatableWidget>();
	}
};
static_assert(alignof(UCommonActivatableWidget) == 0x000008, "Wrong alignment on UCommonActivatableWidget");
static_assert(sizeof(UCommonActivatableWidget) == 0x000320, "Wrong size on UCommonActivatableWidget");
static_assert(offsetof(UCommonActivatableWidget, bAutoActivate) == 0x000288, "Member 'UCommonActivatableWidget::bAutoActivate' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidget, bIsBackHandler) == 0x000289, "Member 'UCommonActivatableWidget::bIsBackHandler' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidget, bSupportsActivationFocus) == 0x00028A, "Member 'UCommonActivatableWidget::bSupportsActivationFocus' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidget, bIsModal) == 0x00028B, "Member 'UCommonActivatableWidget::bIsModal' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidget, bAutoRestoreFocus) == 0x00028C, "Member 'UCommonActivatableWidget::bAutoRestoreFocus' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidget, bSetVisibilityOnActivated) == 0x00028D, "Member 'UCommonActivatableWidget::bSetVisibilityOnActivated' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidget, ActivatedVisibility) == 0x00028E, "Member 'UCommonActivatableWidget::ActivatedVisibility' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidget, bSetVisibilityOnDeactivated) == 0x00028F, "Member 'UCommonActivatableWidget::bSetVisibilityOnDeactivated' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidget, DeactivatedVisibility) == 0x000290, "Member 'UCommonActivatableWidget::DeactivatedVisibility' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidget, BP_OnWidgetActivated) == 0x000298, "Member 'UCommonActivatableWidget::BP_OnWidgetActivated' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidget, BP_OnWidgetDeactivated) == 0x0002A8, "Member 'UCommonActivatableWidget::BP_OnWidgetDeactivated' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidget, bIsActive) == 0x0002B8, "Member 'UCommonActivatableWidget::bIsActive' has a wrong offset!");

// Class CommonUI.CommonActivatableWidgetContainerBase
// 0x0100 (0x0208 - 0x0108)
class UCommonActivatableWidgetContainerBase : public UWidget
{
public:
	ECommonSwitcherTransition                     TransitionType;                                    // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETransitionCurve                              TransitionCurveType;                               // 0x0109(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1941[0x2];                                     // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionDuration;                                // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCommonActivatableWidget*>       WidgetList;                                        // 0x0110(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UCommonActivatableWidget*               DisplayedWidget;                                   // 0x0120(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FUserWidgetPool                        GeneratedWidgetsPool;                              // 0x0128(0x0080)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1942[0x60];                                    // 0x01A8(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCommonActivatableWidget* BP_AddWidget(TSubclassOf<class UCommonActivatableWidget> ActivatableWidgetClass);
	void ClearWidgets();
	void RemoveWidget(class UCommonActivatableWidget* WidgetToRemove);

	class UCommonActivatableWidget* GetActiveWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonActivatableWidgetContainerBase">();
	}
	static class UCommonActivatableWidgetContainerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonActivatableWidgetContainerBase>();
	}
};
static_assert(alignof(UCommonActivatableWidgetContainerBase) == 0x000008, "Wrong alignment on UCommonActivatableWidgetContainerBase");
static_assert(sizeof(UCommonActivatableWidgetContainerBase) == 0x000208, "Wrong size on UCommonActivatableWidgetContainerBase");
static_assert(offsetof(UCommonActivatableWidgetContainerBase, TransitionType) == 0x000108, "Member 'UCommonActivatableWidgetContainerBase::TransitionType' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidgetContainerBase, TransitionCurveType) == 0x000109, "Member 'UCommonActivatableWidgetContainerBase::TransitionCurveType' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidgetContainerBase, TransitionDuration) == 0x00010C, "Member 'UCommonActivatableWidgetContainerBase::TransitionDuration' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidgetContainerBase, WidgetList) == 0x000110, "Member 'UCommonActivatableWidgetContainerBase::WidgetList' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidgetContainerBase, DisplayedWidget) == 0x000120, "Member 'UCommonActivatableWidgetContainerBase::DisplayedWidget' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidgetContainerBase, GeneratedWidgetsPool) == 0x000128, "Member 'UCommonActivatableWidgetContainerBase::GeneratedWidgetsPool' has a wrong offset!");

// Class CommonUI.CommonActivatableWidgetStack
// 0x0010 (0x0218 - 0x0208)
class UCommonActivatableWidgetStack final  : public UCommonActivatableWidgetContainerBase
{
public:
	TSubclassOf<class UCommonActivatableWidget>   RootContentWidgetClass;                            // 0x0208(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonActivatableWidget*               RootContentWidget;                                 // 0x0210(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonActivatableWidgetStack">();
	}
	static class UCommonActivatableWidgetStack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonActivatableWidgetStack>();
	}
};
static_assert(alignof(UCommonActivatableWidgetStack) == 0x000008, "Wrong alignment on UCommonActivatableWidgetStack");
static_assert(sizeof(UCommonActivatableWidgetStack) == 0x000218, "Wrong size on UCommonActivatableWidgetStack");
static_assert(offsetof(UCommonActivatableWidgetStack, RootContentWidgetClass) == 0x000208, "Member 'UCommonActivatableWidgetStack::RootContentWidgetClass' has a wrong offset!");
static_assert(offsetof(UCommonActivatableWidgetStack, RootContentWidget) == 0x000210, "Member 'UCommonActivatableWidgetStack::RootContentWidget' has a wrong offset!");

// Class CommonUI.CommonActivatableWidgetQueue
// 0x0000 (0x0208 - 0x0208)
class UCommonActivatableWidgetQueue final  : public UCommonActivatableWidgetContainerBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonActivatableWidgetQueue">();
	}
	static class UCommonActivatableWidgetQueue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonActivatableWidgetQueue>();
	}
};
static_assert(alignof(UCommonActivatableWidgetQueue) == 0x000008, "Wrong alignment on UCommonActivatableWidgetQueue");
static_assert(sizeof(UCommonActivatableWidgetQueue) == 0x000208, "Wrong size on UCommonActivatableWidgetQueue");

// Class CommonUI.CommonAnimatedSwitcher
// 0x0058 (0x0190 - 0x0138)
class UCommonAnimatedSwitcher : public UWidgetSwitcher
{
public:
	uint8                                         Pad_1943[0x18];                                    // 0x0138(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	ECommonSwitcherTransition                     TransitionType;                                    // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETransitionCurve                              TransitionCurveType;                               // 0x0151(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1944[0x2];                                     // 0x0152(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionDuration;                                // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1945[0x38];                                    // 0x0158(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateNextWidget(bool bCanWrap);
	void ActivatePreviousWidget(bool bCanWrap);
	void SetDisableTransitionAnimation(bool bDisableAnimation);

	bool HasWidgets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonAnimatedSwitcher">();
	}
	static class UCommonAnimatedSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonAnimatedSwitcher>();
	}
};
static_assert(alignof(UCommonAnimatedSwitcher) == 0x000008, "Wrong alignment on UCommonAnimatedSwitcher");
static_assert(sizeof(UCommonAnimatedSwitcher) == 0x000190, "Wrong size on UCommonAnimatedSwitcher");
static_assert(offsetof(UCommonAnimatedSwitcher, TransitionType) == 0x000150, "Member 'UCommonAnimatedSwitcher::TransitionType' has a wrong offset!");
static_assert(offsetof(UCommonAnimatedSwitcher, TransitionCurveType) == 0x000151, "Member 'UCommonAnimatedSwitcher::TransitionCurveType' has a wrong offset!");
static_assert(offsetof(UCommonAnimatedSwitcher, TransitionDuration) == 0x000154, "Member 'UCommonAnimatedSwitcher::TransitionDuration' has a wrong offset!");

// Class CommonUI.CommonActivatableWidgetSwitcher
// 0x0000 (0x0190 - 0x0190)
class UCommonActivatableWidgetSwitcher final  : public UCommonAnimatedSwitcher
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonActivatableWidgetSwitcher">();
	}
	static class UCommonActivatableWidgetSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonActivatableWidgetSwitcher>();
	}
};
static_assert(alignof(UCommonActivatableWidgetSwitcher) == 0x000008, "Wrong alignment on UCommonActivatableWidgetSwitcher");
static_assert(sizeof(UCommonActivatableWidgetSwitcher) == 0x000190, "Wrong size on UCommonActivatableWidgetSwitcher");

// Class CommonUI.CommonBorderStyle
// 0x0088 (0x00B0 - 0x0028)
class UCommonBorderStyle final  : public UObject
{
public:
	struct FSlateBrush                            Background;                                        // 0x0028(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	void GetBackgroundBrush(struct FSlateBrush* Brush) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonBorderStyle">();
	}
	static class UCommonBorderStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonBorderStyle>();
	}
};
static_assert(alignof(UCommonBorderStyle) == 0x000008, "Wrong alignment on UCommonBorderStyle");
static_assert(sizeof(UCommonBorderStyle) == 0x0000B0, "Wrong size on UCommonBorderStyle");
static_assert(offsetof(UCommonBorderStyle, Background) == 0x000028, "Member 'UCommonBorderStyle::Background' has a wrong offset!");

// Class CommonUI.CommonBorder
// 0x0020 (0x0290 - 0x0270)
class UCommonBorder : public UBorder
{
public:
	TSubclassOf<class UCommonBorderStyle>         Style;                                             // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReducePaddingBySafezone;                          // 0x0278(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1946[0x3];                                     // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                MinimumPadding;                                    // 0x027C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1947[0x4];                                     // 0x028C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetStyle(TSubclassOf<class UCommonBorderStyle> InStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonBorder">();
	}
	static class UCommonBorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonBorder>();
	}
};
static_assert(alignof(UCommonBorder) == 0x000008, "Wrong alignment on UCommonBorder");
static_assert(sizeof(UCommonBorder) == 0x000290, "Wrong size on UCommonBorder");
static_assert(offsetof(UCommonBorder, Style) == 0x000270, "Member 'UCommonBorder::Style' has a wrong offset!");
static_assert(offsetof(UCommonBorder, bReducePaddingBySafezone) == 0x000278, "Member 'UCommonBorder::bReducePaddingBySafezone' has a wrong offset!");
static_assert(offsetof(UCommonBorder, MinimumPadding) == 0x00027C, "Member 'UCommonBorder::MinimumPadding' has a wrong offset!");

// Class CommonUI.CommonBoundActionBar
// 0x0010 (0x01E8 - 0x01D8)
class UCommonBoundActionBar final  : public UDynamicEntryBoxBase
{
public:
	TSubclassOf<class UCommonBoundActionButton>   ActionButtonClass;                                 // 0x01D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bDisplayOwningPlayerActionsOnly;                   // 0x01E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1948[0x7];                                     // 0x01E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDisplayOwningPlayerActionsOnly(bool bShouldOnlyDisplayOwningPlayerActions);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonBoundActionBar">();
	}
	static class UCommonBoundActionBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonBoundActionBar>();
	}
};
static_assert(alignof(UCommonBoundActionBar) == 0x000008, "Wrong alignment on UCommonBoundActionBar");
static_assert(sizeof(UCommonBoundActionBar) == 0x0001E8, "Wrong size on UCommonBoundActionBar");
static_assert(offsetof(UCommonBoundActionBar, ActionButtonClass) == 0x0001D8, "Member 'UCommonBoundActionBar::ActionButtonClass' has a wrong offset!");
static_assert(offsetof(UCommonBoundActionBar, bDisplayOwningPlayerActionsOnly) == 0x0001E0, "Member 'UCommonBoundActionBar::bDisplayOwningPlayerActionsOnly' has a wrong offset!");

// Class CommonUI.CommonButtonBase
// 0x0938 (0x0BC0 - 0x0288)
class UCommonButtonBase : public UCommonUserWidget
{
public:
	int32                                         MinWidth;                                          // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MinHeight;                                         // 0x028C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCommonButtonStyle>         Style;                                             // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHideInputAction;                                  // 0x0298(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1949[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateSound                            PressedSlateSoundOverride;                         // 0x02A0(0x0018)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSlateSound                            HoveredSlateSoundOverride;                         // 0x02B8(0x0018)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         bApplyAlphaOnDisable : 1;                          // 0x02D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSelectable : 1;                                   // 0x02D0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShouldSelectUponReceivingFocus : 1;               // 0x02D0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bInteractableWhenSelected : 1;                     // 0x02D0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bToggleable : 1;                                   // 0x02D0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bDisplayInputActionWhenNotInteractable : 1;        // 0x02D0(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHideInputActionWithKeyboard : 1;                  // 0x02D0(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShouldUseFallbackDefaultInputAction : 1;          // 0x02D0(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_194A[0x1];                                     // 0x02D1(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EButtonClickMethod                            ClickMethod;                                       // 0x02D2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonTouchMethod                            TouchMethod;                                       // 0x02D3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonPressMethod                            PressMethod;                                       // 0x02D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194B[0x3];                                     // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InputPriority;                                     // 0x02D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194C[0x4];                                     // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    TriggeringInputAction;                             // 0x02E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	uint8                                         Pad_194D[0x10];                                    // 0x02F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelectedChangedBase;                             // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnButtonBaseClicked;                               // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnButtonBaseDoubleClicked;                         // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnButtonBaseHovered;                               // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnButtonBaseUnhovered;                             // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnButtonBasePressed;                               // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnButtonBaseReleased;                              // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_194E[0x4];                                     // 0x0370(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsPersistentBinding;                              // 0x0374(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ECommonInputMode                              InputModeOverride;                                 // 0x0375(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_194F[0x32];                                    // 0x0376(0x0032)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SingleMaterialStyleMID;                            // 0x03A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FButtonStyle                           NormalStyle;                                       // 0x03B0(0x0278)(NativeAccessSpecifierPrivate)
	struct FButtonStyle                           SelectedStyle;                                     // 0x0628(0x0278)(NativeAccessSpecifierPrivate)
	struct FButtonStyle                           DisabledStyle;                                     // 0x08A0(0x0278)(NativeAccessSpecifierPrivate)
	uint8                                         bStopDoubleClickPropagation : 1;                   // 0x0B18(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_1950[0x9F];                                    // 0x0B19(0x009F)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonActionWidget*                    InputActionWidget;                                 // 0x0BB8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_OnClicked();
	void BP_OnDeselected();
	void BP_OnDisabled();
	void BP_OnDoubleClicked();
	void BP_OnEnabled();
	void BP_OnHovered();
	void BP_OnSelected();
	void BP_OnUnhovered();
	void ClearSelection();
	void DisableButtonWithReason(class FText& DisabledReason);
	void HandleButtonClicked();
	void HandleButtonPressed();
	void HandleButtonReleased();
	void HandleFocusReceived();
	void HandleTriggeringActionCommited(bool* bPassThrough);
	void NativeOnActionComplete();
	void NativeOnActionProgress(float HeldPercent);
	void OnActionComplete();
	void OnActionProgress(float HeldPercent);
	void OnCurrentTextStyleChanged();
	void OnInputMethodChanged(ECommonInputType CurrentInputType);
	void OnTriggeredInputActionChanged(struct FDataTableRowHandle& NewTriggeredAction);
	void SetClickMethod(EButtonClickMethod InClickMethod);
	void SetHoveredSoundOverride(class USoundBase* Sound);
	void SetInputActionProgressMaterial(struct FSlateBrush& InProgressMaterialBrush, class FName& InProgressMaterialParam);
	void SetIsFocusable(bool bInIsFocusable);
	void SetIsInteractableWhenSelected(bool bInInteractableWhenSelected);
	void SetIsInteractionEnabled(bool bInIsInteractionEnabled);
	void SetIsSelectable(bool bInIsSelectable);
	void SetIsSelected(bool InSelected, bool bGiveClickFeedback);
	void SetIsToggleable(bool bInIsToggleable);
	void SetMinDimensions(int32 InMinWidth, int32 InMinHeight);
	void SetPressedSoundOverride(class USoundBase* Sound);
	void SetPressMethod(EButtonPressMethod InPressMethod);
	void SetSelectedInternal(bool bInSelected, bool bAllowSound, bool bBroadcast);
	void SetShouldSelectUponReceivingFocus(bool bInShouldSelectUponReceivingFocus);
	void SetShouldUseFallbackDefaultInputAction(bool bInShouldUseFallbackDefaultInputAction);
	void SetStyle(TSubclassOf<class UCommonButtonStyle> InStyle);
	void SetTouchMethod(EButtonTouchMethod InTouchMethod);
	void SetTriggeredInputAction(struct FDataTableRowHandle& InputActionRow);
	void SetTriggeringInputAction(struct FDataTableRowHandle& InputActionRow);
	void StopDoubleClickPropagation();

	void GetCurrentButtonPadding(struct FMargin* OutButtonPadding) const;
	void GetCurrentCustomPadding(struct FMargin* OutCustomPadding) const;
	class UCommonTextStyle* GetCurrentTextStyle() const;
	TSubclassOf<class UCommonTextStyle> GetCurrentTextStyleClass() const;
	bool GetInputAction(struct FDataTableRowHandle* InputActionRow) const;
	bool GetIsFocusable() const;
	bool GetSelected() const;
	bool GetShouldSelectUponReceivingFocus() const;
	class UMaterialInstanceDynamic* GetSingleMaterialStyleMID() const;
	class UCommonButtonStyle* GetStyle() const;
	bool IsInteractionEnabled() const;
	bool IsPressed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonButtonBase">();
	}
	static class UCommonButtonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonButtonBase>();
	}
};
static_assert(alignof(UCommonButtonBase) == 0x000008, "Wrong alignment on UCommonButtonBase");
static_assert(sizeof(UCommonButtonBase) == 0x000BC0, "Wrong size on UCommonButtonBase");
static_assert(offsetof(UCommonButtonBase, MinWidth) == 0x000288, "Member 'UCommonButtonBase::MinWidth' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, MinHeight) == 0x00028C, "Member 'UCommonButtonBase::MinHeight' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, Style) == 0x000290, "Member 'UCommonButtonBase::Style' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, bHideInputAction) == 0x000298, "Member 'UCommonButtonBase::bHideInputAction' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, PressedSlateSoundOverride) == 0x0002A0, "Member 'UCommonButtonBase::PressedSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, HoveredSlateSoundOverride) == 0x0002B8, "Member 'UCommonButtonBase::HoveredSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, ClickMethod) == 0x0002D2, "Member 'UCommonButtonBase::ClickMethod' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, TouchMethod) == 0x0002D3, "Member 'UCommonButtonBase::TouchMethod' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, PressMethod) == 0x0002D4, "Member 'UCommonButtonBase::PressMethod' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, InputPriority) == 0x0002D8, "Member 'UCommonButtonBase::InputPriority' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, TriggeringInputAction) == 0x0002E0, "Member 'UCommonButtonBase::TriggeringInputAction' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, OnSelectedChangedBase) == 0x000300, "Member 'UCommonButtonBase::OnSelectedChangedBase' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, OnButtonBaseClicked) == 0x000310, "Member 'UCommonButtonBase::OnButtonBaseClicked' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, OnButtonBaseDoubleClicked) == 0x000320, "Member 'UCommonButtonBase::OnButtonBaseDoubleClicked' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, OnButtonBaseHovered) == 0x000330, "Member 'UCommonButtonBase::OnButtonBaseHovered' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, OnButtonBaseUnhovered) == 0x000340, "Member 'UCommonButtonBase::OnButtonBaseUnhovered' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, OnButtonBasePressed) == 0x000350, "Member 'UCommonButtonBase::OnButtonBasePressed' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, OnButtonBaseReleased) == 0x000360, "Member 'UCommonButtonBase::OnButtonBaseReleased' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, bIsPersistentBinding) == 0x000374, "Member 'UCommonButtonBase::bIsPersistentBinding' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, InputModeOverride) == 0x000375, "Member 'UCommonButtonBase::InputModeOverride' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, SingleMaterialStyleMID) == 0x0003A8, "Member 'UCommonButtonBase::SingleMaterialStyleMID' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, NormalStyle) == 0x0003B0, "Member 'UCommonButtonBase::NormalStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, SelectedStyle) == 0x000628, "Member 'UCommonButtonBase::SelectedStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, DisabledStyle) == 0x0008A0, "Member 'UCommonButtonBase::DisabledStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonBase, InputActionWidget) == 0x000BB8, "Member 'UCommonButtonBase::InputActionWidget' has a wrong offset!");

// Class CommonUI.CommonBoundActionButton
// 0x0010 (0x0BD0 - 0x0BC0)
class UCommonBoundActionButton : public UCommonButtonBase
{
public:
	class UCommonTextBlock*                       Text_ActionName;                                   // 0x0BC0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1952[0x8];                                     // 0x0BC8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnUpdateInputAction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonBoundActionButton">();
	}
	static class UCommonBoundActionButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonBoundActionButton>();
	}
};
static_assert(alignof(UCommonBoundActionButton) == 0x000008, "Wrong alignment on UCommonBoundActionButton");
static_assert(sizeof(UCommonBoundActionButton) == 0x000BD0, "Wrong size on UCommonBoundActionButton");
static_assert(offsetof(UCommonBoundActionButton, Text_ActionName) == 0x000BC0, "Member 'UCommonBoundActionButton::Text_ActionName' has a wrong offset!");

// Class CommonUI.CommonButtonStyle
// 0x0558 (0x0580 - 0x0028)
class UCommonButtonStyle : public UObject
{
public:
	bool                                          bSingleMaterial;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1953[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            SingleMaterialBrush;                               // 0x0030(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalBase;                                        // 0x00B8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalHovered;                                     // 0x0140(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalPressed;                                     // 0x01C8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SelectedBase;                                      // 0x0250(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SelectedHovered;                                   // 0x02D8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SelectedPressed;                                   // 0x0360(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Disabled;                                          // 0x03E8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMargin                                ButtonPadding;                                     // 0x0470(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                CustomPadding;                                     // 0x0480(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MinWidth;                                          // 0x0490(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinHeight;                                         // 0x0494(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           NormalTextStyle;                                   // 0x0498(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           NormalHoveredTextStyle;                            // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           NormalPressedTextStyle;                            // 0x04A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           SelectedTextStyle;                                 // 0x04B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           SelectedHoveredTextStyle;                          // 0x04B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           SelectedPressedTextStyle;                          // 0x04C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           DisabledTextStyle;                                 // 0x04C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSlateSound;                                 // 0x04D0(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	struct FCommonButtonStyleOptionalSlateSound   SelectedPressedSlateSound;                         // 0x04E8(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FCommonButtonStyleOptionalSlateSound   DisabledPressedSlateSound;                         // 0x0508(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSlateSound;                                 // 0x0528(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	struct FCommonButtonStyleOptionalSlateSound   SelectedHoveredSlateSound;                         // 0x0540(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FCommonButtonStyleOptionalSlateSound   DisabledHoveredSlateSound;                         // 0x0560(0x0020)(NoDestructor, NativeAccessSpecifierPublic)

public:
	void GetButtonPadding(struct FMargin* OutButtonPadding) const;
	void GetCustomPadding(struct FMargin* OutCustomPadding) const;
	void GetDisabledBrush(struct FSlateBrush* Brush) const;
	class UCommonTextStyle* GetDisabledTextStyle() const;
	void GetMaterialBrush(struct FSlateBrush* Brush) const;
	void GetNormalBaseBrush(struct FSlateBrush* Brush) const;
	void GetNormalHoveredBrush(struct FSlateBrush* Brush) const;
	class UCommonTextStyle* GetNormalHoveredTextStyle() const;
	void GetNormalPressedBrush(struct FSlateBrush* Brush) const;
	class UCommonTextStyle* GetNormalPressedTextStyle() const;
	class UCommonTextStyle* GetNormalTextStyle() const;
	void GetSelectedBaseBrush(struct FSlateBrush* Brush) const;
	void GetSelectedHoveredBrush(struct FSlateBrush* Brush) const;
	class UCommonTextStyle* GetSelectedHoveredTextStyle() const;
	void GetSelectedPressedBrush(struct FSlateBrush* Brush) const;
	class UCommonTextStyle* GetSelectedPressedTextStyle() const;
	class UCommonTextStyle* GetSelectedTextStyle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonButtonStyle">();
	}
	static class UCommonButtonStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonButtonStyle>();
	}
};
static_assert(alignof(UCommonButtonStyle) == 0x000008, "Wrong alignment on UCommonButtonStyle");
static_assert(sizeof(UCommonButtonStyle) == 0x000580, "Wrong size on UCommonButtonStyle");
static_assert(offsetof(UCommonButtonStyle, bSingleMaterial) == 0x000028, "Member 'UCommonButtonStyle::bSingleMaterial' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SingleMaterialBrush) == 0x000030, "Member 'UCommonButtonStyle::SingleMaterialBrush' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, NormalBase) == 0x0000B8, "Member 'UCommonButtonStyle::NormalBase' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, NormalHovered) == 0x000140, "Member 'UCommonButtonStyle::NormalHovered' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, NormalPressed) == 0x0001C8, "Member 'UCommonButtonStyle::NormalPressed' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedBase) == 0x000250, "Member 'UCommonButtonStyle::SelectedBase' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedHovered) == 0x0002D8, "Member 'UCommonButtonStyle::SelectedHovered' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedPressed) == 0x000360, "Member 'UCommonButtonStyle::SelectedPressed' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, Disabled) == 0x0003E8, "Member 'UCommonButtonStyle::Disabled' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, ButtonPadding) == 0x000470, "Member 'UCommonButtonStyle::ButtonPadding' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, CustomPadding) == 0x000480, "Member 'UCommonButtonStyle::CustomPadding' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, MinWidth) == 0x000490, "Member 'UCommonButtonStyle::MinWidth' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, MinHeight) == 0x000494, "Member 'UCommonButtonStyle::MinHeight' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, NormalTextStyle) == 0x000498, "Member 'UCommonButtonStyle::NormalTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, NormalHoveredTextStyle) == 0x0004A0, "Member 'UCommonButtonStyle::NormalHoveredTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, NormalPressedTextStyle) == 0x0004A8, "Member 'UCommonButtonStyle::NormalPressedTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedTextStyle) == 0x0004B0, "Member 'UCommonButtonStyle::SelectedTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedHoveredTextStyle) == 0x0004B8, "Member 'UCommonButtonStyle::SelectedHoveredTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedPressedTextStyle) == 0x0004C0, "Member 'UCommonButtonStyle::SelectedPressedTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, DisabledTextStyle) == 0x0004C8, "Member 'UCommonButtonStyle::DisabledTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, PressedSlateSound) == 0x0004D0, "Member 'UCommonButtonStyle::PressedSlateSound' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedPressedSlateSound) == 0x0004E8, "Member 'UCommonButtonStyle::SelectedPressedSlateSound' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, DisabledPressedSlateSound) == 0x000508, "Member 'UCommonButtonStyle::DisabledPressedSlateSound' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, HoveredSlateSound) == 0x000528, "Member 'UCommonButtonStyle::HoveredSlateSound' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedHoveredSlateSound) == 0x000540, "Member 'UCommonButtonStyle::SelectedHoveredSlateSound' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, DisabledHoveredSlateSound) == 0x000560, "Member 'UCommonButtonStyle::DisabledHoveredSlateSound' has a wrong offset!");

// Class CommonUI.CommonButtonInternalBase
// 0x0060 (0x0488 - 0x0428)
class UCommonButtonInternalBase final  : public UButton
{
public:
	uint8                                         Pad_1954[0x10];                                    // 0x0428(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDoubleClicked;                                   // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1955[0x10];                                    // 0x0448(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinWidth;                                          // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MinHeight;                                         // 0x045C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bButtonEnabled;                                    // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInteractionEnabled;                               // 0x0461(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1956[0x26];                                    // 0x0462(0x0026)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonButtonInternalBase">();
	}
	static class UCommonButtonInternalBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonButtonInternalBase>();
	}
};
static_assert(alignof(UCommonButtonInternalBase) == 0x000008, "Wrong alignment on UCommonButtonInternalBase");
static_assert(sizeof(UCommonButtonInternalBase) == 0x000488, "Wrong size on UCommonButtonInternalBase");
static_assert(offsetof(UCommonButtonInternalBase, OnDoubleClicked) == 0x000438, "Member 'UCommonButtonInternalBase::OnDoubleClicked' has a wrong offset!");
static_assert(offsetof(UCommonButtonInternalBase, MinWidth) == 0x000458, "Member 'UCommonButtonInternalBase::MinWidth' has a wrong offset!");
static_assert(offsetof(UCommonButtonInternalBase, MinHeight) == 0x00045C, "Member 'UCommonButtonInternalBase::MinHeight' has a wrong offset!");
static_assert(offsetof(UCommonButtonInternalBase, bButtonEnabled) == 0x000460, "Member 'UCommonButtonInternalBase::bButtonEnabled' has a wrong offset!");
static_assert(offsetof(UCommonButtonInternalBase, bInteractionEnabled) == 0x000461, "Member 'UCommonButtonInternalBase::bInteractionEnabled' has a wrong offset!");

// Class CommonUI.CommonWidgetGroupBase
// 0x0000 (0x0028 - 0x0028)
class UCommonWidgetGroupBase : public UObject
{
public:
	void AddWidget(class UWidget* InWidget);
	void RemoveAll();
	void RemoveWidget(class UWidget* InWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonWidgetGroupBase">();
	}
	static class UCommonWidgetGroupBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonWidgetGroupBase>();
	}
};
static_assert(alignof(UCommonWidgetGroupBase) == 0x000008, "Wrong alignment on UCommonWidgetGroupBase");
static_assert(sizeof(UCommonWidgetGroupBase) == 0x000028, "Wrong size on UCommonWidgetGroupBase");

// Class CommonUI.CommonButtonGroupBase
// 0x00E8 (0x0110 - 0x0028)
class UCommonButtonGroupBase final  : public UCommonWidgetGroupBase
{
public:
	FMulticastInlineDelegateProperty_             OnSelectedButtonBaseChanged;                       // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1957[0x18];                                    // 0x0038(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHoveredButtonBaseChanged;                        // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1958[0x18];                                    // 0x0060(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnButtonBaseClicked;                               // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1959[0x18];                                    // 0x0088(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnButtonBaseDoubleClicked;                         // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_195A[0x18];                                    // 0x00B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelectionCleared;                                // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_195B[0x18];                                    // 0x00D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSelectionRequired;                                // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_195C[0x1F];                                    // 0x00F1(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeselectAll();
	void OnButtonBaseHovered(class UCommonButtonBase* BaseButton);
	void OnButtonBaseUnhovered(class UCommonButtonBase* BaseButton);
	void OnHandleButtonBaseClicked(class UCommonButtonBase* BaseButton);
	void OnHandleButtonBaseDoubleClicked(class UCommonButtonBase* BaseButton);
	void OnSelectionStateChangedBase(class UCommonButtonBase* BaseButton, bool bIsSelected);
	void SelectButtonAtIndex(int32 ButtonIndex);
	void SelectNextButton(bool bAllowWrap);
	void SelectPreviousButton(bool bAllowWrap);
	void SetSelectionRequired(bool bRequireSelection);

	int32 FindButtonIndex(class UCommonButtonBase* ButtonToFind) const;
	class UCommonButtonBase* GetButtonBaseAtIndex(int32 Param_Index) const;
	int32 GetButtonCount() const;
	int32 GetHoveredButtonIndex() const;
	class UCommonButtonBase* GetSelectedButtonBase() const;
	int32 GetSelectedButtonIndex() const;
	bool HasAnyButtons() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonButtonGroupBase">();
	}
	static class UCommonButtonGroupBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonButtonGroupBase>();
	}
};
static_assert(alignof(UCommonButtonGroupBase) == 0x000008, "Wrong alignment on UCommonButtonGroupBase");
static_assert(sizeof(UCommonButtonGroupBase) == 0x000110, "Wrong size on UCommonButtonGroupBase");
static_assert(offsetof(UCommonButtonGroupBase, OnSelectedButtonBaseChanged) == 0x000028, "Member 'UCommonButtonGroupBase::OnSelectedButtonBaseChanged' has a wrong offset!");
static_assert(offsetof(UCommonButtonGroupBase, OnHoveredButtonBaseChanged) == 0x000050, "Member 'UCommonButtonGroupBase::OnHoveredButtonBaseChanged' has a wrong offset!");
static_assert(offsetof(UCommonButtonGroupBase, OnButtonBaseClicked) == 0x000078, "Member 'UCommonButtonGroupBase::OnButtonBaseClicked' has a wrong offset!");
static_assert(offsetof(UCommonButtonGroupBase, OnButtonBaseDoubleClicked) == 0x0000A0, "Member 'UCommonButtonGroupBase::OnButtonBaseDoubleClicked' has a wrong offset!");
static_assert(offsetof(UCommonButtonGroupBase, OnSelectionCleared) == 0x0000C8, "Member 'UCommonButtonGroupBase::OnSelectionCleared' has a wrong offset!");
static_assert(offsetof(UCommonButtonGroupBase, bSelectionRequired) == 0x0000F0, "Member 'UCommonButtonGroupBase::bSelectionRequired' has a wrong offset!");

// Class CommonUI.CommonCarousel
// 0x00D8 (0x0360 - 0x0288)
class UCommonCarousel : public UCommonUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnNextHandled;                                     // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPreviousHandled;                                 // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnOptionSelected;                                  // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    NextOptionInputActionData;                         // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    PreviousOptionInputActionData;                     // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoListenForInput;                               // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowWrap;                                        // 0x02D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1960[0x2];                                     // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DefaultSelection;                                  // 0x02DC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1961[0x4];                                     // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FText>                OptionMap;                                         // 0x02E8(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1962[0x8];                                     // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OptionIDs;                                         // 0x0340(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1963[0x10];                                    // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOption(class FName OptionNameID, class FText LabelText, bool Param_DefaultSelection);
	void ClearOptions();
	void HandleNextInputAction(bool* bPassThrough);
	void HandlePreviousInputAction(bool* bPassThrough);
	void NavigateNextTerminated(bool Terminated);
	void NavigatePrevTerminated(bool Terminated);
	void OnNextHandled__DelegateSignature(class FName OptionID);
	void OnOptionSelected__DelegateSignature(class FName OptionID);
	void OnPreviousHandled__DelegateSignature(class FName OptionID);
	void OptionSelected(class FName OptionNameID);
	void RemoveOption(class FName OptionNameID);
	void SetListeningForInput(bool bShouldListen);
	void SetOptionLabelTextByID(class FName OptionNameID, class FText NewLabelText);
	void SetOptions(const TMap<class FName, class FText>& NewOptions);
	void SetSelection(class FName OptionNameID);

	class FName GetOptionAtIndex(int32 Param_Index) const;
	int32 GetOptionCount() const;
	class FName GetSelection() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonCarousel">();
	}
	static class UCommonCarousel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonCarousel>();
	}
};
static_assert(alignof(UCommonCarousel) == 0x000008, "Wrong alignment on UCommonCarousel");
static_assert(sizeof(UCommonCarousel) == 0x000360, "Wrong size on UCommonCarousel");
static_assert(offsetof(UCommonCarousel, OnNextHandled) == 0x000288, "Member 'UCommonCarousel::OnNextHandled' has a wrong offset!");
static_assert(offsetof(UCommonCarousel, OnPreviousHandled) == 0x000298, "Member 'UCommonCarousel::OnPreviousHandled' has a wrong offset!");
static_assert(offsetof(UCommonCarousel, OnOptionSelected) == 0x0002A8, "Member 'UCommonCarousel::OnOptionSelected' has a wrong offset!");
static_assert(offsetof(UCommonCarousel, NextOptionInputActionData) == 0x0002B8, "Member 'UCommonCarousel::NextOptionInputActionData' has a wrong offset!");
static_assert(offsetof(UCommonCarousel, PreviousOptionInputActionData) == 0x0002C8, "Member 'UCommonCarousel::PreviousOptionInputActionData' has a wrong offset!");
static_assert(offsetof(UCommonCarousel, bAutoListenForInput) == 0x0002D8, "Member 'UCommonCarousel::bAutoListenForInput' has a wrong offset!");
static_assert(offsetof(UCommonCarousel, bAllowWrap) == 0x0002D9, "Member 'UCommonCarousel::bAllowWrap' has a wrong offset!");
static_assert(offsetof(UCommonCarousel, DefaultSelection) == 0x0002DC, "Member 'UCommonCarousel::DefaultSelection' has a wrong offset!");
static_assert(offsetof(UCommonCarousel, OptionMap) == 0x0002E8, "Member 'UCommonCarousel::OptionMap' has a wrong offset!");
static_assert(offsetof(UCommonCarousel, OptionIDs) == 0x000340, "Member 'UCommonCarousel::OptionIDs' has a wrong offset!");

// Class CommonUI.CommonCustomNavigation
// 0x0010 (0x0280 - 0x0270)
class UCommonCustomNavigation final  : public UBorder
{
public:
	TDelegate<void(EUINavigation NavigationType)> OnNavigationEvent;                                 // 0x0270(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonCustomNavigation">();
	}
	static class UCommonCustomNavigation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonCustomNavigation>();
	}
};
static_assert(alignof(UCommonCustomNavigation) == 0x000008, "Wrong alignment on UCommonCustomNavigation");
static_assert(sizeof(UCommonCustomNavigation) == 0x000280, "Wrong size on UCommonCustomNavigation");
static_assert(offsetof(UCommonCustomNavigation, OnNavigationEvent) == 0x000270, "Member 'UCommonCustomNavigation::OnNavigationEvent' has a wrong offset!");

// Class CommonUI.CommonTextBlock
// 0x0028 (0x02E8 - 0x02C0)
class UCommonTextBlock : public UTextBlock
{
public:
	TSubclassOf<class UCommonTextStyle>           Style;                                             // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UCommonTextScrollStyle>     ScrollStyle;                                       // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bDisplayAllCaps;                                   // 0x02D0(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAutoCollapseWithEmptyText;                        // 0x02D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1965[0x2];                                     // 0x02D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MobileFontSizeMultiplier;                          // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1966[0x10];                                    // 0x02D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetScrollState();
	void SetStyle(TSubclassOf<class UCommonTextStyle> InStyle);
	void SetTextCase(bool bUseAllCaps);
	void SetWrapTextWidth(int32 InWrapTextAt);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTextBlock">();
	}
	static class UCommonTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTextBlock>();
	}
};
static_assert(alignof(UCommonTextBlock) == 0x000008, "Wrong alignment on UCommonTextBlock");
static_assert(sizeof(UCommonTextBlock) == 0x0002E8, "Wrong size on UCommonTextBlock");
static_assert(offsetof(UCommonTextBlock, Style) == 0x0002C0, "Member 'UCommonTextBlock::Style' has a wrong offset!");
static_assert(offsetof(UCommonTextBlock, ScrollStyle) == 0x0002C8, "Member 'UCommonTextBlock::ScrollStyle' has a wrong offset!");
static_assert(offsetof(UCommonTextBlock, bDisplayAllCaps) == 0x0002D0, "Member 'UCommonTextBlock::bDisplayAllCaps' has a wrong offset!");
static_assert(offsetof(UCommonTextBlock, bAutoCollapseWithEmptyText) == 0x0002D1, "Member 'UCommonTextBlock::bAutoCollapseWithEmptyText' has a wrong offset!");
static_assert(offsetof(UCommonTextBlock, MobileFontSizeMultiplier) == 0x0002D4, "Member 'UCommonTextBlock::MobileFontSizeMultiplier' has a wrong offset!");

// Class CommonUI.CommonDateTimeTextBlock
// 0x0040 (0x0328 - 0x02E8)
class UCommonDateTimeTextBlock final  : public UCommonTextBlock
{
public:
	uint8                                         Pad_1967[0x40];                                    // 0x02E8(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCountDownCompletionText(class FText InCompletionText);
	void SetDateTimeValue(struct FDateTime& InDateTime, bool bShowAsCountdown, float InRefreshDelay);
	void SetTimespanValue(struct FTimespan& InTimespan);

	struct FDateTime GetDateTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonDateTimeTextBlock">();
	}
	static class UCommonDateTimeTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonDateTimeTextBlock>();
	}
};
static_assert(alignof(UCommonDateTimeTextBlock) == 0x000008, "Wrong alignment on UCommonDateTimeTextBlock");
static_assert(sizeof(UCommonDateTimeTextBlock) == 0x000328, "Wrong size on UCommonDateTimeTextBlock");

// Class CommonUI.CommonGameViewportClient
// 0x0040 (0x03A0 - 0x0360)
class UCommonGameViewportClient final  : public UGameViewportClient
{
public:
	uint8                                         Pad_1969[0x40];                                    // 0x0360(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonGameViewportClient">();
	}
	static class UCommonGameViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonGameViewportClient>();
	}
};
static_assert(alignof(UCommonGameViewportClient) == 0x000008, "Wrong alignment on UCommonGameViewportClient");
static_assert(sizeof(UCommonGameViewportClient) == 0x0003A0, "Wrong size on UCommonGameViewportClient");

// Class CommonUI.CommonHierarchicalScrollBox
// 0x0000 (0x0880 - 0x0880)
class UCommonHierarchicalScrollBox final  : public UScrollBox
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonHierarchicalScrollBox">();
	}
	static class UCommonHierarchicalScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonHierarchicalScrollBox>();
	}
};
static_assert(alignof(UCommonHierarchicalScrollBox) == 0x000008, "Wrong alignment on UCommonHierarchicalScrollBox");
static_assert(sizeof(UCommonHierarchicalScrollBox) == 0x000880, "Wrong size on UCommonHierarchicalScrollBox");

// Class CommonUI.CommonLazyImage
// 0x00C8 (0x02D8 - 0x0210)
class UCommonLazyImage final  : public UImage
{
public:
	struct FSlateBrush                            LoadingBackgroundBrush;                            // 0x0210(0x0088)(Edit, NativeAccessSpecifierPrivate)
	class FName                                   MaterialTextureParamName;                          // 0x0298(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             BP_OnLoadingStateChanged;                          // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_196A[0x28];                                    // 0x02B0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBrushFromLazyDisplayAsset(TSoftObjectPtr<class UObject>& LazyObject, bool bMatchTextureSize);
	void SetBrushFromLazyMaterial(TSoftObjectPtr<class UMaterialInterface>& LazyMaterial);
	void SetBrushFromLazyTexture(TSoftObjectPtr<class UTexture2D>& LazyTexture, bool bMatchSize);
	void SetMaterialTextureParamName(class FName TextureParamName);

	bool IsLoading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonLazyImage">();
	}
	static class UCommonLazyImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonLazyImage>();
	}
};
static_assert(alignof(UCommonLazyImage) == 0x000008, "Wrong alignment on UCommonLazyImage");
static_assert(sizeof(UCommonLazyImage) == 0x0002D8, "Wrong size on UCommonLazyImage");
static_assert(offsetof(UCommonLazyImage, LoadingBackgroundBrush) == 0x000210, "Member 'UCommonLazyImage::LoadingBackgroundBrush' has a wrong offset!");
static_assert(offsetof(UCommonLazyImage, MaterialTextureParamName) == 0x000298, "Member 'UCommonLazyImage::MaterialTextureParamName' has a wrong offset!");
static_assert(offsetof(UCommonLazyImage, BP_OnLoadingStateChanged) == 0x0002A0, "Member 'UCommonLazyImage::BP_OnLoadingStateChanged' has a wrong offset!");

// Class CommonUI.CommonLazyWidget
// 0x0108 (0x0210 - 0x0108)
class UCommonLazyWidget final  : public UWidget
{
public:
	struct FSlateBrush                            LoadingBackgroundBrush;                            // 0x0108(0x0088)(Edit, NativeAccessSpecifierPrivate)
	class UUserWidget*                            Content;                                           // 0x0190(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_196D[0x28];                                    // 0x0198(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnLoadingStateChanged;                          // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_196E[0x40];                                    // 0x01D0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLazyContent(TSoftClassPtr<class UClass> SoftWidget);

	class UUserWidget* GetContent() const;
	bool IsLoading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonLazyWidget">();
	}
	static class UCommonLazyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonLazyWidget>();
	}
};
static_assert(alignof(UCommonLazyWidget) == 0x000008, "Wrong alignment on UCommonLazyWidget");
static_assert(sizeof(UCommonLazyWidget) == 0x000210, "Wrong size on UCommonLazyWidget");
static_assert(offsetof(UCommonLazyWidget, LoadingBackgroundBrush) == 0x000108, "Member 'UCommonLazyWidget::LoadingBackgroundBrush' has a wrong offset!");
static_assert(offsetof(UCommonLazyWidget, Content) == 0x000190, "Member 'UCommonLazyWidget::Content' has a wrong offset!");
static_assert(offsetof(UCommonLazyWidget, BP_OnLoadingStateChanged) == 0x0001C0, "Member 'UCommonLazyWidget::BP_OnLoadingStateChanged' has a wrong offset!");

// Class CommonUI.CommonListView
// 0x0000 (0x0368 - 0x0368)
class UCommonListView final  : public UListView
{
public:
	void SetEntrySpacing(float InEntrySpacing);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonListView">();
	}
	static class UCommonListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonListView>();
	}
};
static_assert(alignof(UCommonListView) == 0x000008, "Wrong alignment on UCommonListView");
static_assert(sizeof(UCommonListView) == 0x000368, "Wrong size on UCommonListView");

// Class CommonUI.LoadGuardSlot
// 0x0028 (0x0060 - 0x0038)
class ULoadGuardSlot final  : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_196F[0x16];                                    // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadGuardSlot">();
	}
	static class ULoadGuardSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadGuardSlot>();
	}
};
static_assert(alignof(ULoadGuardSlot) == 0x000008, "Wrong alignment on ULoadGuardSlot");
static_assert(sizeof(ULoadGuardSlot) == 0x000060, "Wrong size on ULoadGuardSlot");
static_assert(offsetof(ULoadGuardSlot, Padding) == 0x000038, "Member 'ULoadGuardSlot::Padding' has a wrong offset!");
static_assert(offsetof(ULoadGuardSlot, HorizontalAlignment) == 0x000048, "Member 'ULoadGuardSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(ULoadGuardSlot, VerticalAlignment) == 0x000049, "Member 'ULoadGuardSlot::VerticalAlignment' has a wrong offset!");

// Class CommonUI.CommonLoadGuard
// 0x0110 (0x0230 - 0x0120)
class UCommonLoadGuard final  : public UContentWidget
{
public:
	struct FSlateBrush                            LoadingBackgroundBrush;                            // 0x0120(0x0088)(Edit, NativeAccessSpecifierPrivate)
	EHorizontalAlignment                          ThrobberAlignment;                                 // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1970[0x3];                                     // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                ThrobberPadding;                                   // 0x01AC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1971[0x4];                                     // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LoadingText;                                       // 0x01C0(0x0018)(Edit, NativeAccessSpecifierPrivate)
	TSubclassOf<class UCommonTextStyle>           TextStyle;                                         // 0x01D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             BP_OnLoadingStateChanged;                          // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                        SpinnerMaterialPath;                               // 0x01F0(0x0018)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1972[0x28];                                    // 0x0208(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_GuardAndLoadAsset(TSoftObjectPtr<class UObject>& InLazyAsset, TDelegate<void(class UObject* Object)>& OnAssetLoaded);
	void OnAssetLoaded__DelegateSignature(class UObject* Object);
	void SetIsLoading(bool bInIsLoading);
	void SetLoadingText(class FText& InLoadingText);

	bool IsLoading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonLoadGuard">();
	}
	static class UCommonLoadGuard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonLoadGuard>();
	}
};
static_assert(alignof(UCommonLoadGuard) == 0x000008, "Wrong alignment on UCommonLoadGuard");
static_assert(sizeof(UCommonLoadGuard) == 0x000230, "Wrong size on UCommonLoadGuard");
static_assert(offsetof(UCommonLoadGuard, LoadingBackgroundBrush) == 0x000120, "Member 'UCommonLoadGuard::LoadingBackgroundBrush' has a wrong offset!");
static_assert(offsetof(UCommonLoadGuard, ThrobberAlignment) == 0x0001A8, "Member 'UCommonLoadGuard::ThrobberAlignment' has a wrong offset!");
static_assert(offsetof(UCommonLoadGuard, ThrobberPadding) == 0x0001AC, "Member 'UCommonLoadGuard::ThrobberPadding' has a wrong offset!");
static_assert(offsetof(UCommonLoadGuard, LoadingText) == 0x0001C0, "Member 'UCommonLoadGuard::LoadingText' has a wrong offset!");
static_assert(offsetof(UCommonLoadGuard, TextStyle) == 0x0001D8, "Member 'UCommonLoadGuard::TextStyle' has a wrong offset!");
static_assert(offsetof(UCommonLoadGuard, BP_OnLoadingStateChanged) == 0x0001E0, "Member 'UCommonLoadGuard::BP_OnLoadingStateChanged' has a wrong offset!");
static_assert(offsetof(UCommonLoadGuard, SpinnerMaterialPath) == 0x0001F0, "Member 'UCommonLoadGuard::SpinnerMaterialPath' has a wrong offset!");

// Class CommonUI.CommonNumericTextBlock
// 0x00A0 (0x0388 - 0x02E8)
class UCommonNumericTextBlock final  : public UCommonTextBlock
{
public:
	FMulticastInlineDelegateProperty_             OnInterpolationStartedEvent;                       // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInterpolationUpdatedEvent;                       // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnOutroEvent;                                      // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInterpolationEndedEvent;                         // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         CurrentNumericValue;                               // 0x0328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonNumericType                            NumericType;                                       // 0x032C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1973[0x3];                                     // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommonNumberFormattingOptions         FormattingSpecification;                           // 0x0330(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         EaseOutInterpolationExponent;                      // 0x0344(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationUpdateInterval;                       // 0x0348(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostInterpolationShrinkDuration;                   // 0x034C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PerformSizeInterpolation;                          // 0x0350(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPercentage;                                      // 0x0351(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1974[0x36];                                    // 0x0352(0x0036)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InterpolateToValue(float TargetValue, float MaximumInterpolationDuration, float MinimumChangeRate, float OutroOffset);
	void OnInterpolationEnded__DelegateSignature(class UCommonNumericTextBlock* NumericTextBlock, bool HadCompleted);
	void OnInterpolationStarted__DelegateSignature(class UCommonNumericTextBlock* NumericTextBlock);
	void OnInterpolationUpdated__DelegateSignature(class UCommonNumericTextBlock* NumericTextBlock, float LastValue, float NewValue);
	void OnOutro__DelegateSignature(class UCommonNumericTextBlock* NumericTextBlock);
	void SetCurrentValue(float NewValue);
	void SetNumericType(ECommonNumericType InNumericType);

	float GetTargetValue() const;
	bool IsInterpolatingNumericValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonNumericTextBlock">();
	}
	static class UCommonNumericTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonNumericTextBlock>();
	}
};
static_assert(alignof(UCommonNumericTextBlock) == 0x000008, "Wrong alignment on UCommonNumericTextBlock");
static_assert(sizeof(UCommonNumericTextBlock) == 0x000388, "Wrong size on UCommonNumericTextBlock");
static_assert(offsetof(UCommonNumericTextBlock, OnInterpolationStartedEvent) == 0x0002E8, "Member 'UCommonNumericTextBlock::OnInterpolationStartedEvent' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, OnInterpolationUpdatedEvent) == 0x0002F8, "Member 'UCommonNumericTextBlock::OnInterpolationUpdatedEvent' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, OnOutroEvent) == 0x000308, "Member 'UCommonNumericTextBlock::OnOutroEvent' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, OnInterpolationEndedEvent) == 0x000318, "Member 'UCommonNumericTextBlock::OnInterpolationEndedEvent' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, CurrentNumericValue) == 0x000328, "Member 'UCommonNumericTextBlock::CurrentNumericValue' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, NumericType) == 0x00032C, "Member 'UCommonNumericTextBlock::NumericType' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, FormattingSpecification) == 0x000330, "Member 'UCommonNumericTextBlock::FormattingSpecification' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, EaseOutInterpolationExponent) == 0x000344, "Member 'UCommonNumericTextBlock::EaseOutInterpolationExponent' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, InterpolationUpdateInterval) == 0x000348, "Member 'UCommonNumericTextBlock::InterpolationUpdateInterval' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, PostInterpolationShrinkDuration) == 0x00034C, "Member 'UCommonNumericTextBlock::PostInterpolationShrinkDuration' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, PerformSizeInterpolation) == 0x000350, "Member 'UCommonNumericTextBlock::PerformSizeInterpolation' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, IsPercentage) == 0x000351, "Member 'UCommonNumericTextBlock::IsPercentage' has a wrong offset!");

// Class CommonUI.CommonPoolableWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class ICommonPoolableWidgetInterface final  : public IInterface
{
public:
	void OnAcquireFromPool();
	void OnReleaseToPool();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonPoolableWidgetInterface">();
	}
	static class ICommonPoolableWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICommonPoolableWidgetInterface>();
	}
};
static_assert(alignof(ICommonPoolableWidgetInterface) == 0x000008, "Wrong alignment on ICommonPoolableWidgetInterface");
static_assert(sizeof(ICommonPoolableWidgetInterface) == 0x000028, "Wrong size on ICommonPoolableWidgetInterface");

// Class CommonUI.CommonRichTextBlock
// 0x0038 (0x06B0 - 0x0678)
class UCommonRichTextBlock final  : public URichTextBlock
{
public:
	ERichTextInlineIconDisplayMode                InlineIconDisplayMode;                             // 0x0678(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTintInlineIcon;                                   // 0x0679(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1976[0x6];                                     // 0x067A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonTextStyle>           DefaultTextStyleOverrideClass;                     // 0x0680(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MobileTextBlockScale;                              // 0x0688(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1977[0x4];                                     // 0x068C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonTextScrollStyle>     ScrollStyle;                                       // 0x0690(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bDisplayAllCaps;                                   // 0x0698(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1978[0x17];                                    // 0x0699(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonRichTextBlock">();
	}
	static class UCommonRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonRichTextBlock>();
	}
};
static_assert(alignof(UCommonRichTextBlock) == 0x000008, "Wrong alignment on UCommonRichTextBlock");
static_assert(sizeof(UCommonRichTextBlock) == 0x0006B0, "Wrong size on UCommonRichTextBlock");
static_assert(offsetof(UCommonRichTextBlock, InlineIconDisplayMode) == 0x000678, "Member 'UCommonRichTextBlock::InlineIconDisplayMode' has a wrong offset!");
static_assert(offsetof(UCommonRichTextBlock, bTintInlineIcon) == 0x000679, "Member 'UCommonRichTextBlock::bTintInlineIcon' has a wrong offset!");
static_assert(offsetof(UCommonRichTextBlock, DefaultTextStyleOverrideClass) == 0x000680, "Member 'UCommonRichTextBlock::DefaultTextStyleOverrideClass' has a wrong offset!");
static_assert(offsetof(UCommonRichTextBlock, MobileTextBlockScale) == 0x000688, "Member 'UCommonRichTextBlock::MobileTextBlockScale' has a wrong offset!");
static_assert(offsetof(UCommonRichTextBlock, ScrollStyle) == 0x000690, "Member 'UCommonRichTextBlock::ScrollStyle' has a wrong offset!");
static_assert(offsetof(UCommonRichTextBlock, bDisplayAllCaps) == 0x000698, "Member 'UCommonRichTextBlock::bDisplayAllCaps' has a wrong offset!");

// Class CommonUI.CommonRotator
// 0x0058 (0x0C18 - 0x0BC0)
class UCommonRotator final  : public UCommonButtonBase
{
public:
	uint8                                         Pad_1979[0x10];                                    // 0x0BC0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnRotated;                                         // 0x0BD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_197A[0x18];                                    // 0x0BE0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       MyText;                                            // 0x0BF8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_197B[0x18];                                    // 0x0C00(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnOptionSelected(int32 Param_Index);
	void BP_OnOptionsPopulated(int32 Count);
	void PopulateTextLabels(const TArray<class FText>& Labels);
	void SetSelectedItem(int32 InValue);
	void ShiftTextLeft();
	void ShiftTextRight();

	int32 GetSelectedIndex() const;
	class FText GetSelectedText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonRotator">();
	}
	static class UCommonRotator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonRotator>();
	}
};
static_assert(alignof(UCommonRotator) == 0x000008, "Wrong alignment on UCommonRotator");
static_assert(sizeof(UCommonRotator) == 0x000C18, "Wrong size on UCommonRotator");
static_assert(offsetof(UCommonRotator, OnRotated) == 0x000BD0, "Member 'UCommonRotator::OnRotated' has a wrong offset!");
static_assert(offsetof(UCommonRotator, MyText) == 0x000BF8, "Member 'UCommonRotator::MyText' has a wrong offset!");

// Class CommonUI.CommonTabListWidgetBase
// 0x00D0 (0x0358 - 0x0288)
class UCommonTabListWidgetBase : public UCommonUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnTabSelected;                                     // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTabButtonCreation;                               // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTabButtonRemoval;                                // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    NextTabInputActionData;                            // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    PreviousTabInputActionData;                        // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoListenForInput;                               // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_197C[0x3];                                     // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UCommonAnimatedSwitcher> LinkedSwitcher;                                    // 0x02DC(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_197D[0x4];                                     // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonGroupBase*                 TabButtonGroup;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_197E[0x8];                                     // 0x02F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FCommonRegisteredTabInfo> RegisteredTabsByID;                                // 0x02F8(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_197F[0x10];                                    // 0x0348(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableTabWithReason(class FName TabNameID, class FText& Reason);
	class UCommonButtonBase* GetTabButtonBaseByID(class FName TabNameID);
	void HandleNextTabInputAction(bool* bPassThrough);
	void HandlePostLinkedSwitcherChanged_BP();
	void HandlePreLinkedSwitcherChanged_BP();
	void HandlePreviousTabInputAction(bool* bPassThrough);
	void HandleTabButtonSelected(class UCommonButtonBase* SelectedTabButton, int32 ButtonIndex);
	void HandleTabCreation(class FName TabNameID, class UCommonButtonBase* TabButton);
	void HandleTabRemoval(class FName TabNameID, class UCommonButtonBase* TabButton);
	void OnTabButtonCreation__DelegateSignature(class FName TabId, class UCommonButtonBase* TabButton);
	void OnTabButtonRemoval__DelegateSignature(class FName TabId, class UCommonButtonBase* TabButton);
	void OnTabSelected__DelegateSignature(class FName TabId);
	bool RegisterTab(class FName TabNameID, TSubclassOf<class UCommonButtonBase> ButtonWidgetType, class UWidget* ContentWidget);
	void RemoveAllTabs();
	bool RemoveTab(class FName TabNameID);
	bool SelectTabByID(class FName TabNameID, bool bSuppressClickFeedback);
	void SetLinkedSwitcher(class UCommonAnimatedSwitcher* CommonSwitcher);
	void SetListeningForInput(bool bShouldListen);
	void SetTabEnabled(class FName TabNameID, bool bEnable);
	void SetTabInteractionEnabled(class FName TabNameID, bool bEnable);
	void SetTabVisibility(class FName TabNameID, ESlateVisibility NewVisibility);

	class FName GetActiveTab() const;
	class UCommonAnimatedSwitcher* GetLinkedSwitcher() const;
	class FName GetSelectedTabId() const;
	int32 GetTabCount() const;
	class FName GetTabIdAtIndex(int32 Param_Index) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTabListWidgetBase">();
	}
	static class UCommonTabListWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTabListWidgetBase>();
	}
};
static_assert(alignof(UCommonTabListWidgetBase) == 0x000008, "Wrong alignment on UCommonTabListWidgetBase");
static_assert(sizeof(UCommonTabListWidgetBase) == 0x000358, "Wrong size on UCommonTabListWidgetBase");
static_assert(offsetof(UCommonTabListWidgetBase, OnTabSelected) == 0x000288, "Member 'UCommonTabListWidgetBase::OnTabSelected' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidgetBase, OnTabButtonCreation) == 0x000298, "Member 'UCommonTabListWidgetBase::OnTabButtonCreation' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidgetBase, OnTabButtonRemoval) == 0x0002A8, "Member 'UCommonTabListWidgetBase::OnTabButtonRemoval' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidgetBase, NextTabInputActionData) == 0x0002B8, "Member 'UCommonTabListWidgetBase::NextTabInputActionData' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidgetBase, PreviousTabInputActionData) == 0x0002C8, "Member 'UCommonTabListWidgetBase::PreviousTabInputActionData' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidgetBase, bAutoListenForInput) == 0x0002D8, "Member 'UCommonTabListWidgetBase::bAutoListenForInput' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidgetBase, LinkedSwitcher) == 0x0002DC, "Member 'UCommonTabListWidgetBase::LinkedSwitcher' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidgetBase, TabButtonGroup) == 0x0002E8, "Member 'UCommonTabListWidgetBase::TabButtonGroup' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidgetBase, RegisteredTabsByID) == 0x0002F8, "Member 'UCommonTabListWidgetBase::RegisteredTabsByID' has a wrong offset!");

// Class CommonUI.CommonTextStyle
// 0x0128 (0x0150 - 0x0028)
class UCommonTextStyle : public UObject
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0028(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextTransformPolicy                          TransformPolicy;                                   // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1987[0x2];                                     // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0084(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesDropShadow;                                   // 0x0094(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1988[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ShadowOffset;                                      // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Margin;                                            // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            StrikeBrush;                                       // 0x00C0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         LineHeightPercentage;                              // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1989[0x4];                                     // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetColor(struct FLinearColor* OutColor) const;
	void GetFont(struct FSlateFontInfo* OutFont) const;
	float GetLineHeightPercentage() const;
	void GetMargin(struct FMargin* OutMargin) const;
	void GetShadowColor(struct FLinearColor* OutColor) const;
	void GetShadowOffset(struct FVector2D* OutShadowOffset) const;
	void GetStrikeBrush(struct FSlateBrush* OutStrikeBrush) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTextStyle">();
	}
	static class UCommonTextStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTextStyle>();
	}
};
static_assert(alignof(UCommonTextStyle) == 0x000008, "Wrong alignment on UCommonTextStyle");
static_assert(sizeof(UCommonTextStyle) == 0x000150, "Wrong size on UCommonTextStyle");
static_assert(offsetof(UCommonTextStyle, Font) == 0x000028, "Member 'UCommonTextStyle::Font' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, TransformPolicy) == 0x000080, "Member 'UCommonTextStyle::TransformPolicy' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, Justification) == 0x000081, "Member 'UCommonTextStyle::Justification' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, Color) == 0x000084, "Member 'UCommonTextStyle::Color' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, bUsesDropShadow) == 0x000094, "Member 'UCommonTextStyle::bUsesDropShadow' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, ShadowOffset) == 0x000098, "Member 'UCommonTextStyle::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, ShadowColor) == 0x0000A0, "Member 'UCommonTextStyle::ShadowColor' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, Margin) == 0x0000B0, "Member 'UCommonTextStyle::Margin' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, StrikeBrush) == 0x0000C0, "Member 'UCommonTextStyle::StrikeBrush' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, LineHeightPercentage) == 0x000148, "Member 'UCommonTextStyle::LineHeightPercentage' has a wrong offset!");

// Class CommonUI.CommonTextScrollStyle
// 0x0018 (0x0040 - 0x0028)
class UCommonTextScrollStyle : public UObject
{
public:
	float                                         Speed;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDelay;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDelay;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInDelay;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDelay;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198A[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTextScrollStyle">();
	}
	static class UCommonTextScrollStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTextScrollStyle>();
	}
};
static_assert(alignof(UCommonTextScrollStyle) == 0x000008, "Wrong alignment on UCommonTextScrollStyle");
static_assert(sizeof(UCommonTextScrollStyle) == 0x000040, "Wrong size on UCommonTextScrollStyle");
static_assert(offsetof(UCommonTextScrollStyle, Speed) == 0x000028, "Member 'UCommonTextScrollStyle::Speed' has a wrong offset!");
static_assert(offsetof(UCommonTextScrollStyle, StartDelay) == 0x00002C, "Member 'UCommonTextScrollStyle::StartDelay' has a wrong offset!");
static_assert(offsetof(UCommonTextScrollStyle, EndDelay) == 0x000030, "Member 'UCommonTextScrollStyle::EndDelay' has a wrong offset!");
static_assert(offsetof(UCommonTextScrollStyle, FadeInDelay) == 0x000034, "Member 'UCommonTextScrollStyle::FadeInDelay' has a wrong offset!");
static_assert(offsetof(UCommonTextScrollStyle, FadeOutDelay) == 0x000038, "Member 'UCommonTextScrollStyle::FadeOutDelay' has a wrong offset!");

// Class CommonUI.CommonTileView
// 0x0000 (0x0388 - 0x0388)
class UCommonTileView final  : public UTileView
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTileView">();
	}
	static class UCommonTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTileView>();
	}
};
static_assert(alignof(UCommonTileView) == 0x000008, "Wrong alignment on UCommonTileView");
static_assert(sizeof(UCommonTileView) == 0x000388, "Wrong size on UCommonTileView");

// Class CommonUI.CommonTreeView
// 0x0000 (0x03C0 - 0x03C0)
class UCommonTreeView final  : public UTreeView
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTreeView">();
	}
	static class UCommonTreeView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTreeView>();
	}
};
static_assert(alignof(UCommonTreeView) == 0x000008, "Wrong alignment on UCommonTreeView");
static_assert(sizeof(UCommonTreeView) == 0x0003C0, "Wrong size on UCommonTreeView");

// Class CommonUI.CommonUIActionRouterBase
// 0x00D0 (0x0100 - 0x0030)
class UCommonUIActionRouterBase final  : public ULocalPlayerSubsystem
{
public:
	uint8                                         Pad_198B[0xD0];                                    // 0x0030(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUIActionRouterBase">();
	}
	static class UCommonUIActionRouterBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUIActionRouterBase>();
	}
};
static_assert(alignof(UCommonUIActionRouterBase) == 0x000008, "Wrong alignment on UCommonUIActionRouterBase");
static_assert(sizeof(UCommonUIActionRouterBase) == 0x000100, "Wrong size on UCommonUIActionRouterBase");

// Class CommonUI.CommonUIEditorSettings
// 0x0080 (0x00A8 - 0x0028)
class UCommonUIEditorSettings final  : public UObject
{
public:
	TSoftClassPtr<class UClass>                   TemplateTextStyle;                                 // 0x0028(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   TemplateButtonStyle;                               // 0x0050(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   TemplateBorderStyle;                               // 0x0078(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198C[0x8];                                     // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUIEditorSettings">();
	}
	static class UCommonUIEditorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUIEditorSettings>();
	}
};
static_assert(alignof(UCommonUIEditorSettings) == 0x000008, "Wrong alignment on UCommonUIEditorSettings");
static_assert(sizeof(UCommonUIEditorSettings) == 0x0000A8, "Wrong size on UCommonUIEditorSettings");
static_assert(offsetof(UCommonUIEditorSettings, TemplateTextStyle) == 0x000028, "Member 'UCommonUIEditorSettings::TemplateTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonUIEditorSettings, TemplateButtonStyle) == 0x000050, "Member 'UCommonUIEditorSettings::TemplateButtonStyle' has a wrong offset!");
static_assert(offsetof(UCommonUIEditorSettings, TemplateBorderStyle) == 0x000078, "Member 'UCommonUIEditorSettings::TemplateBorderStyle' has a wrong offset!");

// Class CommonUI.CommonUIInputSettings
// 0x0050 (0x0078 - 0x0028)
class UCommonUIInputSettings final  : public UObject
{
public:
	bool                                          bLinkCursorToGamepadFocus;                         // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198D[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UIActionProcessingPriority;                        // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FUIInputAction>                 InputActions;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<struct FUIInputAction>                 ActionOverrides;                                   // 0x0040(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	struct FCommonAnalogCursorSettings            AnalogCursorSettings;                              // 0x0050(0x0024)(Edit, Config, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198E[0x4];                                     // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUIInputSettings">();
	}
	static class UCommonUIInputSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUIInputSettings>();
	}
};
static_assert(alignof(UCommonUIInputSettings) == 0x000008, "Wrong alignment on UCommonUIInputSettings");
static_assert(sizeof(UCommonUIInputSettings) == 0x000078, "Wrong size on UCommonUIInputSettings");
static_assert(offsetof(UCommonUIInputSettings, bLinkCursorToGamepadFocus) == 0x000028, "Member 'UCommonUIInputSettings::bLinkCursorToGamepadFocus' has a wrong offset!");
static_assert(offsetof(UCommonUIInputSettings, UIActionProcessingPriority) == 0x00002C, "Member 'UCommonUIInputSettings::UIActionProcessingPriority' has a wrong offset!");
static_assert(offsetof(UCommonUIInputSettings, InputActions) == 0x000030, "Member 'UCommonUIInputSettings::InputActions' has a wrong offset!");
static_assert(offsetof(UCommonUIInputSettings, ActionOverrides) == 0x000040, "Member 'UCommonUIInputSettings::ActionOverrides' has a wrong offset!");
static_assert(offsetof(UCommonUIInputSettings, AnalogCursorSettings) == 0x000050, "Member 'UCommonUIInputSettings::AnalogCursorSettings' has a wrong offset!");

// Class CommonUI.CommonUILibrary
// 0x0000 (0x0028 - 0x0028)
class UCommonUILibrary final  : public UBlueprintFunctionLibrary
{
public:
	static class UWidget* FindParentWidgetOfType(class UWidget* StartingWidget, TSubclassOf<class UWidget> Type);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUILibrary">();
	}
	static class UCommonUILibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUILibrary>();
	}
};
static_assert(alignof(UCommonUILibrary) == 0x000008, "Wrong alignment on UCommonUILibrary");
static_assert(sizeof(UCommonUILibrary) == 0x000028, "Wrong size on UCommonUILibrary");

// Class CommonUI.CommonUIRichTextData
// 0x0008 (0x0030 - 0x0028)
class UCommonUIRichTextData final  : public UObject
{
public:
	class UDataTable*                             InlineIconSet;                                     // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUIRichTextData">();
	}
	static class UCommonUIRichTextData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUIRichTextData>();
	}
};
static_assert(alignof(UCommonUIRichTextData) == 0x000008, "Wrong alignment on UCommonUIRichTextData");
static_assert(sizeof(UCommonUIRichTextData) == 0x000030, "Wrong size on UCommonUIRichTextData");
static_assert(offsetof(UCommonUIRichTextData, InlineIconSet) == 0x000028, "Member 'UCommonUIRichTextData::InlineIconSet' has a wrong offset!");

// Class CommonUI.CommonUISettings
// 0x0128 (0x0150 - 0x0028)
class UCommonUISettings final  : public UObject
{
public:
	bool                                          bAutoLoadData;                                     // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198F[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 DefaultImageResourceObject;                        // 0x0030(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMaterialInterface>      DefaultThrobberMaterial;                           // 0x0058(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   DefaultRichTextDataClass;                          // 0x0080(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1990[0x8];                                     // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DefaultImageResourceObjectInstance;                // 0x00B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     DefaultThrobberMaterialInstance;                   // 0x00B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlateBrush                            DefaultThrobberBrush;                              // 0x00C0(0x0088)(Transient, NativeAccessSpecifierPrivate)
	class UCommonUIRichTextData*                  RichTextDataInstance;                              // 0x0148(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUISettings">();
	}
	static class UCommonUISettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUISettings>();
	}
};
static_assert(alignof(UCommonUISettings) == 0x000008, "Wrong alignment on UCommonUISettings");
static_assert(sizeof(UCommonUISettings) == 0x000150, "Wrong size on UCommonUISettings");
static_assert(offsetof(UCommonUISettings, bAutoLoadData) == 0x000028, "Member 'UCommonUISettings::bAutoLoadData' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, DefaultImageResourceObject) == 0x000030, "Member 'UCommonUISettings::DefaultImageResourceObject' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, DefaultThrobberMaterial) == 0x000058, "Member 'UCommonUISettings::DefaultThrobberMaterial' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, DefaultRichTextDataClass) == 0x000080, "Member 'UCommonUISettings::DefaultRichTextDataClass' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, DefaultImageResourceObjectInstance) == 0x0000B0, "Member 'UCommonUISettings::DefaultImageResourceObjectInstance' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, DefaultThrobberMaterialInstance) == 0x0000B8, "Member 'UCommonUISettings::DefaultThrobberMaterialInstance' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, DefaultThrobberBrush) == 0x0000C0, "Member 'UCommonUISettings::DefaultThrobberBrush' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, RichTextDataInstance) == 0x000148, "Member 'UCommonUISettings::RichTextDataInstance' has a wrong offset!");

// Class CommonUI.CommonUISubsystemBase
// 0x0010 (0x0040 - 0x0030)
class UCommonUISubsystemBase final  : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_1991[0x10];                                    // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FSlateBrush GetInputActionButtonIcon(struct FDataTableRowHandle& InputActionRowHandle, ECommonInputType InputType, class FName& GamepadName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUISubsystemBase">();
	}
	static class UCommonUISubsystemBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUISubsystemBase>();
	}
};
static_assert(alignof(UCommonUISubsystemBase) == 0x000008, "Wrong alignment on UCommonUISubsystemBase");
static_assert(sizeof(UCommonUISubsystemBase) == 0x000040, "Wrong size on UCommonUISubsystemBase");

// Class CommonUI.CommonVideoPlayer
// 0x0110 (0x0218 - 0x0108)
class UCommonVideoPlayer final  : public UWidget
{
public:
	class UMediaSource*                           Video;                                             // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMediaPlayer*                           MediaPlayer;                                       // 0x0110(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMediaTexture*                          MediaTexture;                                      // 0x0118(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterial*                              VideoMaterial;                                     // 0x0120(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMediaSoundComponent*                   SoundComponent;                                    // 0x0128(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlateBrush                            VideoBrush;                                        // 0x0130(0x0088)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1994[0x60];                                    // 0x01B8(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonVideoPlayer">();
	}
	static class UCommonVideoPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonVideoPlayer>();
	}
};
static_assert(alignof(UCommonVideoPlayer) == 0x000008, "Wrong alignment on UCommonVideoPlayer");
static_assert(sizeof(UCommonVideoPlayer) == 0x000218, "Wrong size on UCommonVideoPlayer");
static_assert(offsetof(UCommonVideoPlayer, Video) == 0x000108, "Member 'UCommonVideoPlayer::Video' has a wrong offset!");
static_assert(offsetof(UCommonVideoPlayer, MediaPlayer) == 0x000110, "Member 'UCommonVideoPlayer::MediaPlayer' has a wrong offset!");
static_assert(offsetof(UCommonVideoPlayer, MediaTexture) == 0x000118, "Member 'UCommonVideoPlayer::MediaTexture' has a wrong offset!");
static_assert(offsetof(UCommonVideoPlayer, VideoMaterial) == 0x000120, "Member 'UCommonVideoPlayer::VideoMaterial' has a wrong offset!");
static_assert(offsetof(UCommonVideoPlayer, SoundComponent) == 0x000128, "Member 'UCommonVideoPlayer::SoundComponent' has a wrong offset!");
static_assert(offsetof(UCommonVideoPlayer, VideoBrush) == 0x000130, "Member 'UCommonVideoPlayer::VideoBrush' has a wrong offset!");

// Class CommonUI.CommonVisibilitySwitcher
// 0x0028 (0x0158 - 0x0130)
class UCommonVisibilitySwitcher final  : public UOverlay
{
public:
	ESlateVisibility                              ShownVisibility;                                   // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1995[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActiveWidgetIndex;                                 // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoActivateSlot;                                 // 0x0138(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bActivateFirstSlotOnAdding;                        // 0x0139(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1996[0x1E];                                    // 0x013A(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateVisibleSlot();
	void DeactivateVisibleSlot();
	void DecrementActiveWidgetIndex(bool bAllowWrapping);
	void IncrementActiveWidgetIndex(bool bAllowWrapping);
	void SetActiveWidget(class UWidget* Widget);
	void SetActiveWidgetIndex(int32 Param_Index);

	class UWidget* GetActiveWidget() const;
	int32 GetActiveWidgetIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonVisibilitySwitcher">();
	}
	static class UCommonVisibilitySwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonVisibilitySwitcher>();
	}
};
static_assert(alignof(UCommonVisibilitySwitcher) == 0x000008, "Wrong alignment on UCommonVisibilitySwitcher");
static_assert(sizeof(UCommonVisibilitySwitcher) == 0x000158, "Wrong size on UCommonVisibilitySwitcher");
static_assert(offsetof(UCommonVisibilitySwitcher, ShownVisibility) == 0x000130, "Member 'UCommonVisibilitySwitcher::ShownVisibility' has a wrong offset!");
static_assert(offsetof(UCommonVisibilitySwitcher, ActiveWidgetIndex) == 0x000134, "Member 'UCommonVisibilitySwitcher::ActiveWidgetIndex' has a wrong offset!");
static_assert(offsetof(UCommonVisibilitySwitcher, bAutoActivateSlot) == 0x000138, "Member 'UCommonVisibilitySwitcher::bAutoActivateSlot' has a wrong offset!");
static_assert(offsetof(UCommonVisibilitySwitcher, bActivateFirstSlotOnAdding) == 0x000139, "Member 'UCommonVisibilitySwitcher::bActivateFirstSlotOnAdding' has a wrong offset!");

// Class CommonUI.CommonVisibilitySwitcherSlot
// 0x0010 (0x0068 - 0x0058)
class UCommonVisibilitySwitcherSlot final  : public UOverlaySlot
{
public:
	uint8                                         Pad_1997[0x10];                                    // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonVisibilitySwitcherSlot">();
	}
	static class UCommonVisibilitySwitcherSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonVisibilitySwitcherSlot>();
	}
};
static_assert(alignof(UCommonVisibilitySwitcherSlot) == 0x000008, "Wrong alignment on UCommonVisibilitySwitcherSlot");
static_assert(sizeof(UCommonVisibilitySwitcherSlot) == 0x000068, "Wrong size on UCommonVisibilitySwitcherSlot");

// Class CommonUI.CommonVisibilityWidgetBase
// 0x0058 (0x02E8 - 0x0290)
class UCommonVisibilityWidgetBase final  : public UCommonBorder
{
public:
	TMap<class FName, bool>                       VisibilityControls;                                // 0x0290(0x0050)(Edit, EditFixedSize, NativeAccessSpecifierPublic)
	bool                                          bShowForGamepad;                                   // 0x02E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForMouseAndKeyboard;                          // 0x02E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForTouch;                                     // 0x02E2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              VisibleType;                                       // 0x02E3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              HiddenType;                                        // 0x02E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1998[0x3];                                     // 0x02E5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<class FName> GetRegisteredPlatforms();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonVisibilityWidgetBase">();
	}
	static class UCommonVisibilityWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonVisibilityWidgetBase>();
	}
};
static_assert(alignof(UCommonVisibilityWidgetBase) == 0x000008, "Wrong alignment on UCommonVisibilityWidgetBase");
static_assert(sizeof(UCommonVisibilityWidgetBase) == 0x0002E8, "Wrong size on UCommonVisibilityWidgetBase");
static_assert(offsetof(UCommonVisibilityWidgetBase, VisibilityControls) == 0x000290, "Member 'UCommonVisibilityWidgetBase::VisibilityControls' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidgetBase, bShowForGamepad) == 0x0002E0, "Member 'UCommonVisibilityWidgetBase::bShowForGamepad' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidgetBase, bShowForMouseAndKeyboard) == 0x0002E1, "Member 'UCommonVisibilityWidgetBase::bShowForMouseAndKeyboard' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidgetBase, bShowForTouch) == 0x0002E2, "Member 'UCommonVisibilityWidgetBase::bShowForTouch' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidgetBase, VisibleType) == 0x0002E3, "Member 'UCommonVisibilityWidgetBase::VisibleType' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidgetBase, HiddenType) == 0x0002E4, "Member 'UCommonVisibilityWidgetBase::HiddenType' has a wrong offset!");

// Class CommonUI.CommonVisualAttachment
// 0x0018 (0x0170 - 0x0158)
class UCommonVisualAttachment final  : public USizeBox
{
public:
	struct FVector2D                              ContentAnchor;                                     // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1999[0x10];                                    // 0x0160(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonVisualAttachment">();
	}
	static class UCommonVisualAttachment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonVisualAttachment>();
	}
};
static_assert(alignof(UCommonVisualAttachment) == 0x000008, "Wrong alignment on UCommonVisualAttachment");
static_assert(sizeof(UCommonVisualAttachment) == 0x000170, "Wrong size on UCommonVisualAttachment");
static_assert(offsetof(UCommonVisualAttachment, ContentAnchor) == 0x000158, "Member 'UCommonVisualAttachment::ContentAnchor' has a wrong offset!");

// Class CommonUI.CommonWidgetCarousel
// 0x0040 (0x0160 - 0x0120)
class UCommonWidgetCarousel final  : public UPanelWidget
{
public:
	int32                                         ActiveWidgetIndex;                                 // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199A[0x4];                                     // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCurrentPageIndexChanged;                         // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_199B[0x28];                                    // 0x0138(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginAutoScrolling(float ScrollInterval);
	void EndAutoScrolling();
	void NextPage();
	void PreviousPage();
	void SetActiveWidget(class UWidget* Widget);
	void SetActiveWidgetIndex(int32 Param_Index);

	int32 GetActiveWidgetIndex() const;
	class UWidget* GetWidgetAtIndex(int32 Param_Index) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonWidgetCarousel">();
	}
	static class UCommonWidgetCarousel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonWidgetCarousel>();
	}
};
static_assert(alignof(UCommonWidgetCarousel) == 0x000008, "Wrong alignment on UCommonWidgetCarousel");
static_assert(sizeof(UCommonWidgetCarousel) == 0x000160, "Wrong size on UCommonWidgetCarousel");
static_assert(offsetof(UCommonWidgetCarousel, ActiveWidgetIndex) == 0x000120, "Member 'UCommonWidgetCarousel::ActiveWidgetIndex' has a wrong offset!");
static_assert(offsetof(UCommonWidgetCarousel, OnCurrentPageIndexChanged) == 0x000128, "Member 'UCommonWidgetCarousel::OnCurrentPageIndexChanged' has a wrong offset!");

// Class CommonUI.CommonWidgetCarouselNavBar
// 0x0048 (0x0150 - 0x0108)
class UCommonWidgetCarouselNavBar final  : public UWidget
{
public:
	TSubclassOf<class UCommonButtonBase>          ButtonWidgetType;                                  // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ButtonPadding;                                     // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_199D[0x10];                                    // 0x0120(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonWidgetCarousel*                  LinkedCarousel;                                    // 0x0130(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonGroupBase*                 ButtonGroup;                                       // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCommonButtonBase*>              Buttons;                                           // 0x0140(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void HandleButtonClicked(class UCommonButtonBase* AssociatedButton, int32 ButtonIndex);
	void HandlePageChanged(class UCommonWidgetCarousel* CommonCarousel, int32 PageIndex);
	void SetLinkedCarousel(class UCommonWidgetCarousel* CommonCarousel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonWidgetCarouselNavBar">();
	}
	static class UCommonWidgetCarouselNavBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonWidgetCarouselNavBar>();
	}
};
static_assert(alignof(UCommonWidgetCarouselNavBar) == 0x000008, "Wrong alignment on UCommonWidgetCarouselNavBar");
static_assert(sizeof(UCommonWidgetCarouselNavBar) == 0x000150, "Wrong size on UCommonWidgetCarouselNavBar");
static_assert(offsetof(UCommonWidgetCarouselNavBar, ButtonWidgetType) == 0x000108, "Member 'UCommonWidgetCarouselNavBar::ButtonWidgetType' has a wrong offset!");
static_assert(offsetof(UCommonWidgetCarouselNavBar, ButtonPadding) == 0x000110, "Member 'UCommonWidgetCarouselNavBar::ButtonPadding' has a wrong offset!");
static_assert(offsetof(UCommonWidgetCarouselNavBar, LinkedCarousel) == 0x000130, "Member 'UCommonWidgetCarouselNavBar::LinkedCarousel' has a wrong offset!");
static_assert(offsetof(UCommonWidgetCarouselNavBar, ButtonGroup) == 0x000138, "Member 'UCommonWidgetCarouselNavBar::ButtonGroup' has a wrong offset!");
static_assert(offsetof(UCommonWidgetCarouselNavBar, Buttons) == 0x000140, "Member 'UCommonWidgetCarouselNavBar::Buttons' has a wrong offset!");

}

