#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LiveLinkMvnPlugin

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "LiveLinkComponents_classes.hpp"
#include "LiveLinkMvnPlugin_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "LiveLink_classes.hpp"
#include "LiveLinkInterface_classes.hpp"


namespace SDK
{

// Class LiveLinkMvnPlugin.LiveLinkGameInstance
// 0x0018 (0x01C0 - 0x01A8)
class ULiveLinkGameInstance final  : public UGameInstance
{
public:
	uint16                                        PortNumber;                                        // 0x01A8(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19CB[0x16];                                    // 0x01AA(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkGameInstance">();
	}
	static class ULiveLinkGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkGameInstance>();
	}
};
static_assert(alignof(ULiveLinkGameInstance) == 0x000008, "Wrong alignment on ULiveLinkGameInstance");
static_assert(sizeof(ULiveLinkGameInstance) == 0x0001C0, "Wrong size on ULiveLinkGameInstance");
static_assert(offsetof(ULiveLinkGameInstance, PortNumber) == 0x0001A8, "Member 'ULiveLinkGameInstance::PortNumber' has a wrong offset!");

// Class LiveLinkMvnPlugin.LiveLinkMvnRetargetAsset
// 0x0158 (0x0180 - 0x0028)
class ULiveLinkMvnRetargetAsset final  : public ULiveLinkRetargetAsset
{
public:
	uint8                                         Pad_19CC[0x10];                                    // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EXsensRetargetNamingConvention                M_remapping_convention;                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19CD[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             M_remapping_table;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EXsensMapping, struct FRemappingRowHandle> M_remapping_rows;                                  // 0x0048(0x0050)(Edit, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          M_skeletal_mesh;                                   // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19CE[0xC8];                                    // 0x00A0(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          TPoseAnimation;                                    // 0x0168(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsForwardY;                                        // 0x0170(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19CF[0xF];                                     // 0x0171(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FName GetCustomRemappedBoneName(EXsensMapping Bone) const;
	class FName GetRemappedBoneNameByConvention(EXsensMapping Bone, EXsensRetargetNamingConvention Convention) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkMvnRetargetAsset">();
	}
	static class ULiveLinkMvnRetargetAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkMvnRetargetAsset>();
	}
};
static_assert(alignof(ULiveLinkMvnRetargetAsset) == 0x000008, "Wrong alignment on ULiveLinkMvnRetargetAsset");
static_assert(sizeof(ULiveLinkMvnRetargetAsset) == 0x000180, "Wrong size on ULiveLinkMvnRetargetAsset");
static_assert(offsetof(ULiveLinkMvnRetargetAsset, M_remapping_convention) == 0x000038, "Member 'ULiveLinkMvnRetargetAsset::M_remapping_convention' has a wrong offset!");
static_assert(offsetof(ULiveLinkMvnRetargetAsset, M_remapping_table) == 0x000040, "Member 'ULiveLinkMvnRetargetAsset::M_remapping_table' has a wrong offset!");
static_assert(offsetof(ULiveLinkMvnRetargetAsset, M_remapping_rows) == 0x000048, "Member 'ULiveLinkMvnRetargetAsset::M_remapping_rows' has a wrong offset!");
static_assert(offsetof(ULiveLinkMvnRetargetAsset, M_skeletal_mesh) == 0x000098, "Member 'ULiveLinkMvnRetargetAsset::M_skeletal_mesh' has a wrong offset!");
static_assert(offsetof(ULiveLinkMvnRetargetAsset, TPoseAnimation) == 0x000168, "Member 'ULiveLinkMvnRetargetAsset::TPoseAnimation' has a wrong offset!");
static_assert(offsetof(ULiveLinkMvnRetargetAsset, IsForwardY) == 0x000170, "Member 'ULiveLinkMvnRetargetAsset::IsForwardY' has a wrong offset!");

// Class LiveLinkMvnPlugin.LiveLinkMvnSourceSettings
// 0x0008 (0x00A8 - 0x00A0)
class ULiveLinkMvnSourceSettings final  : public ULiveLinkSourceSettings
{
public:
	int32                                         PortNumber;                                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D2[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkMvnSourceSettings">();
	}
	static class ULiveLinkMvnSourceSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkMvnSourceSettings>();
	}
};
static_assert(alignof(ULiveLinkMvnSourceSettings) == 0x000008, "Wrong alignment on ULiveLinkMvnSourceSettings");
static_assert(sizeof(ULiveLinkMvnSourceSettings) == 0x0000A8, "Wrong size on ULiveLinkMvnSourceSettings");
static_assert(offsetof(ULiveLinkMvnSourceSettings, PortNumber) == 0x0000A0, "Member 'ULiveLinkMvnSourceSettings::PortNumber' has a wrong offset!");

// Class LiveLinkMvnPlugin.LiveLinkMvnTransformController
// 0x0008 (0x0048 - 0x0040)
class ULiveLinkMvnTransformController final  : public ULiveLinkControllerBase
{
public:
	int32                                         SegmentIndex;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D3[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkMvnTransformController">();
	}
	static class ULiveLinkMvnTransformController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkMvnTransformController>();
	}
};
static_assert(alignof(ULiveLinkMvnTransformController) == 0x000008, "Wrong alignment on ULiveLinkMvnTransformController");
static_assert(sizeof(ULiveLinkMvnTransformController) == 0x000048, "Wrong size on ULiveLinkMvnTransformController");
static_assert(offsetof(ULiveLinkMvnTransformController, SegmentIndex) == 0x000040, "Member 'ULiveLinkMvnTransformController::SegmentIndex' has a wrong offset!");

// Class LiveLinkMvnPlugin.MvnRemoteControlManager
// 0x0000 (0x0028 - 0x0028)
class UMvnRemoteControlManager final  : public UObject
{
public:
	static void StartRecording(float _fTimeOffsetInSeconds);
	static void StopRecording(float _fTimeOffsetInSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MvnRemoteControlManager">();
	}
	static class UMvnRemoteControlManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMvnRemoteControlManager>();
	}
};
static_assert(alignof(UMvnRemoteControlManager) == 0x000008, "Wrong alignment on UMvnRemoteControlManager");
static_assert(sizeof(UMvnRemoteControlManager) == 0x000028, "Wrong size on UMvnRemoteControlManager");

}

