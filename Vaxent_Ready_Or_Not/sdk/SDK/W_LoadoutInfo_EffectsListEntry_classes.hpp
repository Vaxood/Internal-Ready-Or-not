#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_LoadoutInfo_EffectsListEntry

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_ItemEffects_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_LoadoutInfo_EffectsListEntry.W_LoadoutInfo_EffectsListEntry_C
// 0x00A8 (0x0308 - 0x0260)
class UW_LoadoutInfo_EffectsListEntry_C final  : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimReveal;                                        // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                EffectBorder;                                      // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_EffectSymbol;                                  // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_EffectText;                                    // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   EffectText;                                        // 0x0288(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   EffectSymbol;                                      // 0x02A0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           EffectColor;                                       // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PositiveColor;                                     // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NegativeColor;                                     // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_ItemEffects                        Effect;                                            // 0x02E8(0x0020)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_W_LoadoutInfo_EffectsListEntry(int32 EntryPoint, bool K2Node_Event_IsGamepad, class FName K2Node_Event_PageName, const struct FSavedLoadout& K2Node_Event_ActiveLoadout, class UW_LoadoutSlot_C* K2Node_Event_CurrentSlot, const TMap<EItemCategory, class UClass*>& K2Node_Event_ItemCategory, class UW_Loadout_C* K2Node_Event_LoadoutWidget, class FName K2Node_Event_OptionNameID, bool K2Node_Event_IsDesignTime, float K2Node_Event_Delay_1, class UUMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, float K2Node_Event_Delay, bool K2Node_Event_Collapse, class UUMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue);
	void Hide(float Delay, bool Collapse);
	void Reveal(float Delay);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void HeaderSubpageNavigation(class FName OptionNameID);
	void SetLoadoutWidget(class UW_Loadout_C* LoadoutWidget);
	void UpdateCurrentItemMap(const TMap<EItemCategory, class UClass*>& ItemCategory);
	void UpdateCurrentSlot(class UW_LoadoutSlot_C* CurrentSlot);
	void UpdateActiveLoadout(const struct FSavedLoadout& ActiveLoadout);
	void ChangePage(class FName PageName);
	void SetInputMode(bool IsGamepad);
	void SetInfo(const struct FST_ItemEffects& Param_Effect, EScrollDirection Temp_byte_Variable, EScrollDirection Temp_byte_Variable_1, class FText Temp_text_Variable, class FText Temp_text_Variable_1, const struct FLinearColor& K2Node_MakeStruct_LinearColor, const struct FLinearColor& K2Node_MakeStruct_LinearColor_1, const struct FLinearColor& K2Node_Select_Default, class FText K2Node_Select_Default_1);
	void BackPage(bool* Handled);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_LoadoutInfo_EffectsListEntry_C">();
	}
	static class UW_LoadoutInfo_EffectsListEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_LoadoutInfo_EffectsListEntry_C>();
	}
};
static_assert(alignof(UW_LoadoutInfo_EffectsListEntry_C) == 0x000008, "Wrong alignment on UW_LoadoutInfo_EffectsListEntry_C");
static_assert(sizeof(UW_LoadoutInfo_EffectsListEntry_C) == 0x000308, "Wrong size on UW_LoadoutInfo_EffectsListEntry_C");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, UberGraphFrame) == 0x000260, "Member 'UW_LoadoutInfo_EffectsListEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, AnimReveal) == 0x000268, "Member 'UW_LoadoutInfo_EffectsListEntry_C::AnimReveal' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, EffectBorder) == 0x000270, "Member 'UW_LoadoutInfo_EffectsListEntry_C::EffectBorder' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, Txt_EffectSymbol) == 0x000278, "Member 'UW_LoadoutInfo_EffectsListEntry_C::Txt_EffectSymbol' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, Txt_EffectText) == 0x000280, "Member 'UW_LoadoutInfo_EffectsListEntry_C::Txt_EffectText' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, EffectText) == 0x000288, "Member 'UW_LoadoutInfo_EffectsListEntry_C::EffectText' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, EffectSymbol) == 0x0002A0, "Member 'UW_LoadoutInfo_EffectsListEntry_C::EffectSymbol' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, EffectColor) == 0x0002B8, "Member 'UW_LoadoutInfo_EffectsListEntry_C::EffectColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, PositiveColor) == 0x0002C8, "Member 'UW_LoadoutInfo_EffectsListEntry_C::PositiveColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, NegativeColor) == 0x0002D8, "Member 'UW_LoadoutInfo_EffectsListEntry_C::NegativeColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, Effect) == 0x0002E8, "Member 'UW_LoadoutInfo_EffectsListEntry_C::Effect' has a wrong offset!");

}

