#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ScreenFooterEntry

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ScreenFooterEntry_C_OnClicked__DelegateSignature final 
{
public:
	class UW_ScreenFooterEntry_C*                 FooterEntry;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ScreenFooterEntry_C_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_OnClicked__DelegateSignature");
static_assert(sizeof(W_ScreenFooterEntry_C_OnClicked__DelegateSignature) == 0x000008, "Wrong size on W_ScreenFooterEntry_C_OnClicked__DelegateSignature");
static_assert(offsetof(W_ScreenFooterEntry_C_OnClicked__DelegateSignature, FooterEntry) == 0x000000, "Member 'W_ScreenFooterEntry_C_OnClicked__DelegateSignature::FooterEntry' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.OnHovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ScreenFooterEntry_C_OnHovered__DelegateSignature final 
{
public:
	class UW_ScreenFooterEntry_C*                 FooterEntry;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ScreenFooterEntry_C_OnHovered__DelegateSignature) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_OnHovered__DelegateSignature");
static_assert(sizeof(W_ScreenFooterEntry_C_OnHovered__DelegateSignature) == 0x000008, "Wrong size on W_ScreenFooterEntry_C_OnHovered__DelegateSignature");
static_assert(offsetof(W_ScreenFooterEntry_C_OnHovered__DelegateSignature, FooterEntry) == 0x000000, "Member 'W_ScreenFooterEntry_C_OnHovered__DelegateSignature::FooterEntry' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.OnPressed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ScreenFooterEntry_C_OnPressed__DelegateSignature final 
{
public:
	class UW_ScreenFooterEntry_C*                 FooterEntry;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ScreenFooterEntry_C_OnPressed__DelegateSignature) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_OnPressed__DelegateSignature");
static_assert(sizeof(W_ScreenFooterEntry_C_OnPressed__DelegateSignature) == 0x000008, "Wrong size on W_ScreenFooterEntry_C_OnPressed__DelegateSignature");
static_assert(offsetof(W_ScreenFooterEntry_C_OnPressed__DelegateSignature, FooterEntry) == 0x000000, "Member 'W_ScreenFooterEntry_C_OnPressed__DelegateSignature::FooterEntry' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.OnReleased__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ScreenFooterEntry_C_OnReleased__DelegateSignature final 
{
public:
	class UW_ScreenFooterEntry_C*                 FooterEntry;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ScreenFooterEntry_C_OnReleased__DelegateSignature) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_OnReleased__DelegateSignature");
static_assert(sizeof(W_ScreenFooterEntry_C_OnReleased__DelegateSignature) == 0x000008, "Wrong size on W_ScreenFooterEntry_C_OnReleased__DelegateSignature");
static_assert(offsetof(W_ScreenFooterEntry_C_OnReleased__DelegateSignature, FooterEntry) == 0x000000, "Member 'W_ScreenFooterEntry_C_OnReleased__DelegateSignature::FooterEntry' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.ExecuteUbergraph_W_ScreenFooterEntry
// 0x0048 (0x0048 - 0x0000)
struct W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bUsingGamepad)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Event_Delay_1;                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Delay;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsGamepad;                            // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B85[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PageName;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B86[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button_1;               // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button;                 // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bUsingGamepad;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry");
static_assert(sizeof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry) == 0x000048, "Wrong size on W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry");
static_assert(offsetof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry, EntryPoint) == 0x000000, "Member 'W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry, K2Node_Event_Delay_1) == 0x000014, "Member 'W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry, K2Node_Event_Delay) == 0x000018, "Member 'W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry, K2Node_Event_Collapse) == 0x00001C, "Member 'W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry, K2Node_Event_IsGamepad) == 0x00001D, "Member 'W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry, K2Node_Event_PageName) == 0x000020, "Member 'W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry, K2Node_Event_IsDesignTime) == 0x000028, "Member 'W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry, K2Node_ComponentBoundEvent_Button_1) == 0x000030, "Member 'W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry, K2Node_ComponentBoundEvent_Button) == 0x000038, "Member 'W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry, K2Node_CustomEvent_bUsingGamepad) == 0x000040, "Member 'W_ScreenFooterEntry_C_ExecuteUbergraph_W_ScreenFooterEntry::K2Node_CustomEvent_bUsingGamepad' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.InputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct W_ScreenFooterEntry_C_InputMethodChanged final 
{
public:
	bool                                          bUsingGamepad;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ScreenFooterEntry_C_InputMethodChanged) == 0x000001, "Wrong alignment on W_ScreenFooterEntry_C_InputMethodChanged");
static_assert(sizeof(W_ScreenFooterEntry_C_InputMethodChanged) == 0x000001, "Wrong size on W_ScreenFooterEntry_C_InputMethodChanged");
static_assert(offsetof(W_ScreenFooterEntry_C_InputMethodChanged, bUsingGamepad) == 0x000000, "Member 'W_ScreenFooterEntry_C_InputMethodChanged::bUsingGamepad' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature final 
{
public:
	class UW_Button_C*                            Param_Button;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature");
static_assert(sizeof(W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature) == 0x000008, "Wrong size on W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature");
static_assert(offsetof(W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature, Param_Button) == 0x000000, "Member 'W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature::Param_Button' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature final 
{
public:
	class UW_Button_C*                            Param_Button;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature");
static_assert(sizeof(W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature) == 0x000008, "Wrong size on W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature");
static_assert(offsetof(W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature, Param_Button) == 0x000000, "Member 'W_ScreenFooterEntry_C_BndEvt__W_ScreenFooterEntry_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature::Param_Button' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_ScreenFooterEntry_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ScreenFooterEntry_C_PreConstruct) == 0x000001, "Wrong alignment on W_ScreenFooterEntry_C_PreConstruct");
static_assert(sizeof(W_ScreenFooterEntry_C_PreConstruct) == 0x000001, "Wrong size on W_ScreenFooterEntry_C_PreConstruct");
static_assert(offsetof(W_ScreenFooterEntry_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_ScreenFooterEntry_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_ScreenFooterEntry_C_ChangePage final 
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ScreenFooterEntry_C_ChangePage) == 0x000004, "Wrong alignment on W_ScreenFooterEntry_C_ChangePage");
static_assert(sizeof(W_ScreenFooterEntry_C_ChangePage) == 0x000008, "Wrong size on W_ScreenFooterEntry_C_ChangePage");
static_assert(offsetof(W_ScreenFooterEntry_C_ChangePage, PageName) == 0x000000, "Member 'W_ScreenFooterEntry_C_ChangePage::PageName' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_ScreenFooterEntry_C_SetInputMode final 
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ScreenFooterEntry_C_SetInputMode) == 0x000001, "Wrong alignment on W_ScreenFooterEntry_C_SetInputMode");
static_assert(sizeof(W_ScreenFooterEntry_C_SetInputMode) == 0x000001, "Wrong size on W_ScreenFooterEntry_C_SetInputMode");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_ScreenFooterEntry_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.Hide
// 0x0008 (0x0008 - 0x0000)
struct W_ScreenFooterEntry_C_Hide final 
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ScreenFooterEntry_C_Hide) == 0x000004, "Wrong alignment on W_ScreenFooterEntry_C_Hide");
static_assert(sizeof(W_ScreenFooterEntry_C_Hide) == 0x000008, "Wrong size on W_ScreenFooterEntry_C_Hide");
static_assert(offsetof(W_ScreenFooterEntry_C_Hide, Delay) == 0x000000, "Member 'W_ScreenFooterEntry_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_Hide, Collapse) == 0x000004, "Member 'W_ScreenFooterEntry_C_Hide::Collapse' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.Reveal
// 0x0004 (0x0004 - 0x0000)
struct W_ScreenFooterEntry_C_Reveal final 
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ScreenFooterEntry_C_Reveal) == 0x000004, "Wrong alignment on W_ScreenFooterEntry_C_Reveal");
static_assert(sizeof(W_ScreenFooterEntry_C_Reveal) == 0x000004, "Wrong size on W_ScreenFooterEntry_C_Reveal");
static_assert(offsetof(W_ScreenFooterEntry_C_Reveal, Delay) == 0x000000, "Member 'W_ScreenFooterEntry_C_Reveal::Delay' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct W_ScreenFooterEntry_C_SetLabel final 
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_ScreenFooterEntry_C_SetLabel) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_SetLabel");
static_assert(sizeof(W_ScreenFooterEntry_C_SetLabel) == 0x000018, "Wrong size on W_ScreenFooterEntry_C_SetLabel");
static_assert(offsetof(W_ScreenFooterEntry_C_SetLabel, InText) == 0x000000, "Member 'W_ScreenFooterEntry_C_SetLabel::InText' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.SetInputAction
// 0x0068 (0x0068 - 0x0000)
struct W_ScreenFooterEntry_C_SetInputAction final 
{
public:
	struct FDataTableRowHandle                    InputActionRow;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class FText                                   CallFunc_GetInputActionData_ActionName;            // 0x0010(0x0018)()
	struct FKey                                   CallFunc_GetInputActionData_ActionKey;             // 0x0028(0x0018)(HasGetValueTypeHash)
	class FString                                 CallFunc_Abbreviate_Key_Abreviated_Name;           // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0050(0x0018)()
};
static_assert(alignof(W_ScreenFooterEntry_C_SetInputAction) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_SetInputAction");
static_assert(sizeof(W_ScreenFooterEntry_C_SetInputAction) == 0x000068, "Wrong size on W_ScreenFooterEntry_C_SetInputAction");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputAction, InputActionRow) == 0x000000, "Member 'W_ScreenFooterEntry_C_SetInputAction::InputActionRow' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputAction, CallFunc_GetInputActionData_ActionName) == 0x000010, "Member 'W_ScreenFooterEntry_C_SetInputAction::CallFunc_GetInputActionData_ActionName' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputAction, CallFunc_GetInputActionData_ActionKey) == 0x000028, "Member 'W_ScreenFooterEntry_C_SetInputAction::CallFunc_GetInputActionData_ActionKey' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputAction, CallFunc_Abbreviate_Key_Abreviated_Name) == 0x000040, "Member 'W_ScreenFooterEntry_C_SetInputAction::CallFunc_Abbreviate_Key_Abreviated_Name' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputAction, CallFunc_Conv_StringToText_ReturnValue) == 0x000050, "Member 'W_ScreenFooterEntry_C_SetInputAction::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.UpdateEntry
// 0x0010 (0x0010 - 0x0000)
struct W_ScreenFooterEntry_C_UpdateEntry final 
{
public:
	struct FDataTableRowHandle                    CallFunc_GetInputAction_InputAction;               // 0x0000(0x0010)(NoDestructor)
};
static_assert(alignof(W_ScreenFooterEntry_C_UpdateEntry) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_UpdateEntry");
static_assert(sizeof(W_ScreenFooterEntry_C_UpdateEntry) == 0x000010, "Wrong size on W_ScreenFooterEntry_C_UpdateEntry");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateEntry, CallFunc_GetInputAction_InputAction) == 0x000000, "Member 'W_ScreenFooterEntry_C_UpdateEntry::CallFunc_GetInputAction_InputAction' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.SetFooterEntryData
// 0x0030 (0x0030 - 0x0000)
struct W_ScreenFooterEntry_C_SetFooterEntryData final 
{
public:
	struct FScreenFooterEntry                     Param_FooterEntryData;                             // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_ScreenFooterEntry_C_SetFooterEntryData) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_SetFooterEntryData");
static_assert(sizeof(W_ScreenFooterEntry_C_SetFooterEntryData) == 0x000030, "Wrong size on W_ScreenFooterEntry_C_SetFooterEntryData");
static_assert(offsetof(W_ScreenFooterEntry_C_SetFooterEntryData, Param_FooterEntryData) == 0x000000, "Member 'W_ScreenFooterEntry_C_SetFooterEntryData::Param_FooterEntryData' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.InputSwitched
// 0x0001 (0x0001 - 0x0000)
struct W_ScreenFooterEntry_C_InputSwitched final 
{
public:
	bool                                          Param_UseGamepad;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ScreenFooterEntry_C_InputSwitched) == 0x000001, "Wrong alignment on W_ScreenFooterEntry_C_InputSwitched");
static_assert(sizeof(W_ScreenFooterEntry_C_InputSwitched) == 0x000001, "Wrong size on W_ScreenFooterEntry_C_InputSwitched");
static_assert(offsetof(W_ScreenFooterEntry_C_InputSwitched, Param_UseGamepad) == 0x000000, "Member 'W_ScreenFooterEntry_C_InputSwitched::Param_UseGamepad' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.SetInputVisibility
// 0x0008 (0x0008 - 0x0000)
struct W_ScreenFooterEntry_C_SetInputVisibility final 
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ScreenFooterEntry_C_SetInputVisibility) == 0x000001, "Wrong alignment on W_ScreenFooterEntry_C_SetInputVisibility");
static_assert(sizeof(W_ScreenFooterEntry_C_SetInputVisibility) == 0x000008, "Wrong size on W_ScreenFooterEntry_C_SetInputVisibility");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputVisibility, Temp_bool_Variable) == 0x000000, "Member 'W_ScreenFooterEntry_C_SetInputVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputVisibility, Temp_byte_Variable) == 0x000001, "Member 'W_ScreenFooterEntry_C_SetInputVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputVisibility, Temp_byte_Variable_1) == 0x000002, "Member 'W_ScreenFooterEntry_C_SetInputVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputVisibility, Temp_bool_Variable_1) == 0x000003, "Member 'W_ScreenFooterEntry_C_SetInputVisibility::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputVisibility, Temp_byte_Variable_2) == 0x000004, "Member 'W_ScreenFooterEntry_C_SetInputVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputVisibility, Temp_byte_Variable_3) == 0x000005, "Member 'W_ScreenFooterEntry_C_SetInputVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputVisibility, K2Node_Select_Default) == 0x000006, "Member 'W_ScreenFooterEntry_C_SetInputVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_SetInputVisibility, K2Node_Select_Default_1) == 0x000007, "Member 'W_ScreenFooterEntry_C_SetInputVisibility::K2Node_Select_Default_1' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.GetIsButton
// 0x0001 (0x0001 - 0x0000)
struct W_ScreenFooterEntry_C_GetIsButton final 
{
public:
	bool                                          IsButton;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ScreenFooterEntry_C_GetIsButton) == 0x000001, "Wrong alignment on W_ScreenFooterEntry_C_GetIsButton");
static_assert(sizeof(W_ScreenFooterEntry_C_GetIsButton) == 0x000001, "Wrong size on W_ScreenFooterEntry_C_GetIsButton");
static_assert(offsetof(W_ScreenFooterEntry_C_GetIsButton, IsButton) == 0x000000, "Member 'W_ScreenFooterEntry_C_GetIsButton::IsButton' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.GetButtonLabel
// 0x0018 (0x0018 - 0x0000)
struct W_ScreenFooterEntry_C_GetButtonLabel final 
{
public:
	class FText                                   ButtonLabel;                                       // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(W_ScreenFooterEntry_C_GetButtonLabel) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_GetButtonLabel");
static_assert(sizeof(W_ScreenFooterEntry_C_GetButtonLabel) == 0x000018, "Wrong size on W_ScreenFooterEntry_C_GetButtonLabel");
static_assert(offsetof(W_ScreenFooterEntry_C_GetButtonLabel, ButtonLabel) == 0x000000, "Member 'W_ScreenFooterEntry_C_GetButtonLabel::ButtonLabel' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.GetButtonID
// 0x0010 (0x0010 - 0x0000)
struct W_ScreenFooterEntry_C_GetButtonID final 
{
public:
	class FString                                 ButtonID;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ScreenFooterEntry_C_GetButtonID) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_GetButtonID");
static_assert(sizeof(W_ScreenFooterEntry_C_GetButtonID) == 0x000010, "Wrong size on W_ScreenFooterEntry_C_GetButtonID");
static_assert(offsetof(W_ScreenFooterEntry_C_GetButtonID, ButtonID) == 0x000000, "Member 'W_ScreenFooterEntry_C_GetButtonID::ButtonID' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.GetInputAction
// 0x0010 (0x0010 - 0x0000)
struct W_ScreenFooterEntry_C_GetInputAction final 
{
public:
	struct FDataTableRowHandle                    InputAction;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(W_ScreenFooterEntry_C_GetInputAction) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_GetInputAction");
static_assert(sizeof(W_ScreenFooterEntry_C_GetInputAction) == 0x000010, "Wrong size on W_ScreenFooterEntry_C_GetInputAction");
static_assert(offsetof(W_ScreenFooterEntry_C_GetInputAction, InputAction) == 0x000000, "Member 'W_ScreenFooterEntry_C_GetInputAction::InputAction' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.UpdateVisualState
// 0x0080 (0x0080 - 0x0000)
struct W_ScreenFooterEntry_C_UpdateVisualState final 
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B87[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonButtonStyle>         Temp_class_Variable;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCommonButtonStyle>         Temp_class_Variable_1;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B88[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	bool                                          Temp_bool_Variable_3;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsButton_IsButton;                     // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B89[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetButtonLabel_ButtonLabel;               // 0x0040(0x0018)()
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B8A[0x5];                                     // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonButtonStyle>         K2Node_Select_Default_2;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_3;                           // 0x0068(0x0018)()
};
static_assert(alignof(W_ScreenFooterEntry_C_UpdateVisualState) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_UpdateVisualState");
static_assert(sizeof(W_ScreenFooterEntry_C_UpdateVisualState) == 0x000080, "Wrong size on W_ScreenFooterEntry_C_UpdateVisualState");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, Temp_byte_Variable) == 0x000000, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, Temp_byte_Variable_1) == 0x000001, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, Temp_bool_Variable) == 0x000002, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, Temp_byte_Variable_2) == 0x000003, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, Temp_byte_Variable_3) == 0x000004, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, Temp_bool_Variable_1) == 0x000005, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, Temp_class_Variable) == 0x000008, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, Temp_class_Variable_1) == 0x000010, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, Temp_bool_Variable_2) == 0x000018, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, Temp_text_Variable) == 0x000020, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, Temp_bool_Variable_3) == 0x000038, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, K2Node_SwitchEnum_CmpSuccess) == 0x000039, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, CallFunc_GetIsButton_IsButton) == 0x00003A, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::CallFunc_GetIsButton_IsButton' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, CallFunc_Not_PreBool_ReturnValue) == 0x00003B, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, CallFunc_GetButtonLabel_ButtonLabel) == 0x000040, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::CallFunc_GetButtonLabel_ButtonLabel' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, CallFunc_BooleanAND_ReturnValue) == 0x000058, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, K2Node_Select_Default) == 0x000059, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, K2Node_Select_Default_1) == 0x00005A, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, K2Node_Select_Default_2) == 0x000060, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_UpdateVisualState, K2Node_Select_Default_3) == 0x000068, "Member 'W_ScreenFooterEntry_C_UpdateVisualState::K2Node_Select_Default_3' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_ScreenFooterEntry_C_BackPage final 
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ScreenFooterEntry_C_BackPage) == 0x000001, "Wrong alignment on W_ScreenFooterEntry_C_BackPage");
static_assert(sizeof(W_ScreenFooterEntry_C_BackPage) == 0x000001, "Wrong size on W_ScreenFooterEntry_C_BackPage");
static_assert(offsetof(W_ScreenFooterEntry_C_BackPage, Handled) == 0x000000, "Member 'W_ScreenFooterEntry_C_BackPage::Handled' has a wrong offset!");

// Function W_ScreenFooterEntry.W_ScreenFooterEntry_C.GetFocusTarget
// 0x0010 (0x0010 - 0x0000)
struct W_ScreenFooterEntry_C_GetFocusTarget final 
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ScreenFooterEntry_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_ScreenFooterEntry_C_GetFocusTarget");
static_assert(sizeof(W_ScreenFooterEntry_C_GetFocusTarget) == 0x000010, "Wrong size on W_ScreenFooterEntry_C_GetFocusTarget");
static_assert(offsetof(W_ScreenFooterEntry_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_ScreenFooterEntry_C_GetFocusTarget::Focus' has a wrong offset!");
static_assert(offsetof(W_ScreenFooterEntry_C_GetFocusTarget, CallFunc_IsVisible_ReturnValue) == 0x000008, "Member 'W_ScreenFooterEntry_C_GetFocusTarget::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

}

