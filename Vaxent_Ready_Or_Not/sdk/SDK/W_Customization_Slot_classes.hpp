#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Customization_Slot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_BoxShape_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Customization_Slot.W_Customization_Slot_C
// 0x03C0 (0x0648 - 0x0288)
class UW_Customization_Slot_C final  : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_Button_C*                            btn_Slot;                                          // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Variants;                                       // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icn_variants;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       Img_icon;                                          // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Lock;                                          // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Slash;                                         // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Slash_2;                                       // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Lbl_Equipped;                                      // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Lbl_NoData;                                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          LockedOverlay;                                     // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          MissingImage;                                      // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Size_Slot;                                         // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          SlotBorder;                                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Tag;                                               // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Txt_ItemName;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Txt_Label;                                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Txt_VariantCount;                                  // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ULoadoutCustomization*                  Item;                                              // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CustomLabel;                                       // 0x0320(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	ECustomizationType                            CustomizationType;                                 // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bDisplayAsSlot;                                    // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bEquipped;                                         // 0x033A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_BoxShape                                    BoxShape;                                          // 0x033B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         MaxSize;                                           // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Blocked;                                           // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F77[0x7];                                     // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSlotClicked;                                     // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnSlotHovered;                                     // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnSlotUnhovered;                                   // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UW_Button_C*                            ParentButton;                                      // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPressed;                                          // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHovered;                                          // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseGamepad;                                       // 0x0382(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F78[0x5];                                     // 0x0383(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            EquippedGreen;                                     // 0x0388(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	struct FSlateColor                            SelectedRed;                                       // 0x03B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	struct FSlateColor                            NormalGrey;                                        // 0x03D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	struct FSlateColor                            HoveredWhite;                                      // 0x0400(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	struct FSlateColor                            DefaultWhite;                                      // 0x0428(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	bool                                          bShowItemName;                                     // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2F79[0x7];                                     // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ECustomizationType, TSoftObjectPtr<class UTexture2D>> PlaceholderIcons;                                  // 0x0458(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UTexture2D>              EmptyImage;                                        // 0x04A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              NullImage;                                         // 0x04D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 NormalButtonStyle;                                 // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GamepadButtonStyle;                                // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynMatSlash;                                       // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlashLineThickness;                                // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisplayAsVariant;                                 // 0x0514(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bHighlighted;                                      // 0x0515(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F7A[0x2];                                     // 0x0516(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BlankBrush;                                        // 0x0518(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateBrush                            HighlightedBrush;                                  // 0x05A0(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnSlotRightClickPressed;                           // 0x0628(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnSlotRightClickReleased;                          // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnSlotHovered__DelegateSignature(class UW_Customization_Slot_C* TriggeringSlot);
	void OnSlotUnhovered__DelegateSignature();
	void OnSlotClicked__DelegateSignature(class UW_Customization_Slot_C* TriggeringSlot);
	void OnSlotRightClickPressed__DelegateSignature(class UW_Customization_Slot_C* TriggeringSlot);
	void OnSlotRightClickReleased__DelegateSignature();
	void ExecuteUbergraph_W_Customization_Slot(int32 EntryPoint, TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate, float K2Node_Event_Delay_1, float K2Node_Event_Delay, bool K2Node_Event_Collapse, bool K2Node_Event_IsGamepad, class FName K2Node_Event_PageName, bool K2Node_Event_IsDesignTime, class ULoadoutCustomization* K2Node_CustomEvent_Item, float CallFunc_GetWidthByShape_Width, float CallFunc_GetHeightByShape_Height, class UW_Button_C* K2Node_ComponentBoundEvent_Button_2, class UW_Button_C* K2Node_ComponentBoundEvent_Button_1, class FText CallFunc_GetCustomizationCategoryText_Category_Text, bool CallFunc_TextIsEmpty_ReturnValue, class UCommonInputSubsystem* CallFunc_GetLocalPlayerSubsystem_ReturnValue, ECommonInputType K2Node_CustomEvent_bNewInputType, ECommonInputType CallFunc_GetCurrentInputType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_Toggleable, bool K2Node_CustomEvent_Highlight, class UW_Button_C* K2Node_ComponentBoundEvent_Button);
	void BndEvt__W_Customization_Slot_btn_Slot_K2Node_ComponentBoundEvent_6_OnRightMouseReleased__DelegateSignature();
	void BndEvt__W_Customization_Slot_btn_Slot_K2Node_ComponentBoundEvent_5_OnRightMousePressed__DelegateSignature(class UW_Button_C* Button);
	void SetHighlighted(bool Highlight);
	void SetToggleable(bool Toggleable);
	void InputMethodChanged(ECommonInputType bNewInputType);
	void OnInitialized();
	void BndEvt__W_Customization_Slot_btn_Slot_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Customization_Slot_btn_Slot_K2Node_ComponentBoundEvent_1_Unhovered__DelegateSignature();
	void BndEvt__W_Customization_Slot_btn_Slot_K2Node_ComponentBoundEvent_0_Hovered__DelegateSignature(class UW_Button_C* Button);
	void SetItem(class ULoadoutCustomization* Param_Item);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void ChangePage(class FName PageName);
	void SetInputMode(bool IsGamepad);
	void Hide(float Delay, bool Collapse);
	void Reveal(float Delay);
	void GetHeightByShape(float* Height, E_BoxShape Temp_byte_Variable, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float K2Node_Select_Default);
	void GetWidthByShape(float* Width, E_BoxShape Temp_byte_Variable, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float K2Node_Select_Default);
	void SetLabelText(class FText InText);
	void BindToButton(class UW_Button_C* Param_ParentButton, bool BindClicks, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_2, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_3, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_4, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_5, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_6);
	void UnbindFromButton(TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_2, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_3, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_4, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_5, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_6);
	void BindHovered(class UW_Button_C* Param_ParentButton);
	void BindSelectedState(class UW_Button_C* Param_ParentButton, bool CallFunc_GetSelected_ReturnValue);
	void BindPressedState(bool CallFunc_IsPressed_ReturnValue);
	void BindUnhovered();
	void BindClick(class UW_Button_C* Param_ParentButton);
	void BindDoubleClick(class UW_Button_C* Param_ParentButton);
	void SetVisualState(bool Hovered, bool Pressed, bool Equipped, bool Highlighted, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, bool Temp_bool_Variable_1, ESlateVisibility Temp_byte_Variable_2, ESlateVisibility Temp_byte_Variable_3, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const struct FLinearColor& CallFunc_GetTagColor_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_1, ESlateVisibility K2Node_Select_Default, ESlateVisibility K2Node_Select_Default_1, bool CallFunc_Not_PreBool_ReturnValue_2, bool Temp_bool_Variable_2, struct FSlateBrush& K2Node_Select_Default_2);
	void UpdateStyle(bool Param_bUseGamepad, bool Temp_bool_Variable, class UClass* K2Node_Select_Default);
	void SetupColors(const struct FLinearColor& CallFunc_GetColorByName_LinearColor, const struct FSlateColor& CallFunc_GetColorByName_SlateColor, const struct FLinearColor& CallFunc_GetColorByName_LinearColor_1, const struct FSlateColor& CallFunc_GetColorByName_SlateColor_1, const struct FLinearColor& CallFunc_GetColorByName_LinearColor_2, const struct FSlateColor& CallFunc_GetColorByName_SlateColor_2, const struct FLinearColor& CallFunc_GetColorByName_LinearColor_3, const struct FSlateColor& CallFunc_GetColorByName_SlateColor_3, const struct FLinearColor& CallFunc_GetColorByName_LinearColor_4, const struct FSlateColor& CallFunc_GetColorByName_SlateColor_4);
	void Select();
	void Deselect();
	void UpdateIcon(TSoftObjectPtr<class UTexture2D> IconTexture, const struct FLinearColor& CallFunc_GetColorByName_LinearColor, const struct FSlateColor& CallFunc_GetColorByName_SlateColor, bool CallFunc_NotEqual_SoftObjectReference_ReturnValue, const struct FLinearColor& CallFunc_SelectColor_ReturnValue, bool CallFunc_NotEqual_SoftObjectReference_ReturnValue_1);
	void SetEquipped(bool Param_bEquipped);
	void SetLocked(bool IsLocked, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, ESlateVisibility K2Node_Select_Default);
	void ShowMissingData(bool NoData, float LineThickness, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, class UMaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, float CallFunc_K2_GetScalarParameterValue_ReturnValue, bool CallFunc_IsValid_ReturnValue, ESlateVisibility K2Node_Select_Default, float CallFunc_GetWidthByShape_Width, float CallFunc_GetHeightByShape_Height, float CallFunc_FMax_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, const struct FLinearColor& CallFunc_GetColorByName_LinearColor, const struct FSlateColor& CallFunc_GetColorByName_SlateColor, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_GetWidthByShape_Width_1, float CallFunc_GetHeightByShape_Height_1, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue);
	void SetCustomIconTexture(class UTexture2D* IconTexture, bool MatchSize, const struct FVector2D& CustomSize, const struct FLinearColor& Param_ColorAndOpacity);
	void UpdateVariantCount(bool CallFunc_Not_PreBool_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, class FText CallFunc_Conv_IntToText_ReturnValue);
	void UpdateNameText(bool CallFunc_TextIsNotEmpty_NotEmpty, bool CallFunc_BooleanAND_ReturnValue);
	struct FLinearColor GetTagColor(const struct FLinearColor& CallFunc_GetColorByName_LinearColor, const struct FSlateColor& CallFunc_GetColorByName_SlateColor, const struct FLinearColor& CallFunc_GetColorByName_LinearColor_1, const struct FSlateColor& CallFunc_GetColorByName_SlateColor_1, const struct FLinearColor& CallFunc_SelectColor_ReturnValue, const struct FLinearColor& CallFunc_SelectColor_ReturnValue_1);
	void SetHoveredState(bool Hovered);
	void BackPage(bool* Handled);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Customization_Slot_C">();
	}
	static class UW_Customization_Slot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Customization_Slot_C>();
	}
};
static_assert(alignof(UW_Customization_Slot_C) == 0x000008, "Wrong alignment on UW_Customization_Slot_C");
static_assert(sizeof(UW_Customization_Slot_C) == 0x000648, "Wrong size on UW_Customization_Slot_C");
static_assert(offsetof(UW_Customization_Slot_C, UberGraphFrame) == 0x000288, "Member 'UW_Customization_Slot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, btn_Slot) == 0x000290, "Member 'UW_Customization_Slot_C::btn_Slot' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, HB_Variants) == 0x000298, "Member 'UW_Customization_Slot_C::HB_Variants' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Icn_variants) == 0x0002A0, "Member 'UW_Customization_Slot_C::Icn_variants' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Img_icon) == 0x0002A8, "Member 'UW_Customization_Slot_C::Img_icon' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Img_Lock) == 0x0002B0, "Member 'UW_Customization_Slot_C::Img_Lock' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Img_Slash) == 0x0002B8, "Member 'UW_Customization_Slot_C::Img_Slash' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Img_Slash_2) == 0x0002C0, "Member 'UW_Customization_Slot_C::Img_Slash_2' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Lbl_Equipped) == 0x0002C8, "Member 'UW_Customization_Slot_C::Lbl_Equipped' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Lbl_NoData) == 0x0002D0, "Member 'UW_Customization_Slot_C::Lbl_NoData' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, LockedOverlay) == 0x0002D8, "Member 'UW_Customization_Slot_C::LockedOverlay' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, MissingImage) == 0x0002E0, "Member 'UW_Customization_Slot_C::MissingImage' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Size_Slot) == 0x0002E8, "Member 'UW_Customization_Slot_C::Size_Slot' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, SlotBorder) == 0x0002F0, "Member 'UW_Customization_Slot_C::SlotBorder' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Tag) == 0x0002F8, "Member 'UW_Customization_Slot_C::Tag' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Txt_ItemName) == 0x000300, "Member 'UW_Customization_Slot_C::Txt_ItemName' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Txt_Label) == 0x000308, "Member 'UW_Customization_Slot_C::Txt_Label' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Txt_VariantCount) == 0x000310, "Member 'UW_Customization_Slot_C::Txt_VariantCount' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Item) == 0x000318, "Member 'UW_Customization_Slot_C::Item' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, CustomLabel) == 0x000320, "Member 'UW_Customization_Slot_C::CustomLabel' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, CustomizationType) == 0x000338, "Member 'UW_Customization_Slot_C::CustomizationType' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bDisplayAsSlot) == 0x000339, "Member 'UW_Customization_Slot_C::bDisplayAsSlot' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bEquipped) == 0x00033A, "Member 'UW_Customization_Slot_C::bEquipped' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, BoxShape) == 0x00033B, "Member 'UW_Customization_Slot_C::BoxShape' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, MaxSize) == 0x00033C, "Member 'UW_Customization_Slot_C::MaxSize' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, Blocked) == 0x000340, "Member 'UW_Customization_Slot_C::Blocked' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, OnSlotClicked) == 0x000348, "Member 'UW_Customization_Slot_C::OnSlotClicked' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, OnSlotHovered) == 0x000358, "Member 'UW_Customization_Slot_C::OnSlotHovered' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, OnSlotUnhovered) == 0x000368, "Member 'UW_Customization_Slot_C::OnSlotUnhovered' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, ParentButton) == 0x000378, "Member 'UW_Customization_Slot_C::ParentButton' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bPressed) == 0x000380, "Member 'UW_Customization_Slot_C::bPressed' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bHovered) == 0x000381, "Member 'UW_Customization_Slot_C::bHovered' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bUseGamepad) == 0x000382, "Member 'UW_Customization_Slot_C::bUseGamepad' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, EquippedGreen) == 0x000388, "Member 'UW_Customization_Slot_C::EquippedGreen' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, SelectedRed) == 0x0003B0, "Member 'UW_Customization_Slot_C::SelectedRed' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, NormalGrey) == 0x0003D8, "Member 'UW_Customization_Slot_C::NormalGrey' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, HoveredWhite) == 0x000400, "Member 'UW_Customization_Slot_C::HoveredWhite' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, DefaultWhite) == 0x000428, "Member 'UW_Customization_Slot_C::DefaultWhite' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bShowItemName) == 0x000450, "Member 'UW_Customization_Slot_C::bShowItemName' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, PlaceholderIcons) == 0x000458, "Member 'UW_Customization_Slot_C::PlaceholderIcons' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, EmptyImage) == 0x0004A8, "Member 'UW_Customization_Slot_C::EmptyImage' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, NullImage) == 0x0004D0, "Member 'UW_Customization_Slot_C::NullImage' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, NormalButtonStyle) == 0x0004F8, "Member 'UW_Customization_Slot_C::NormalButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, GamepadButtonStyle) == 0x000500, "Member 'UW_Customization_Slot_C::GamepadButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, DynMatSlash) == 0x000508, "Member 'UW_Customization_Slot_C::DynMatSlash' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, SlashLineThickness) == 0x000510, "Member 'UW_Customization_Slot_C::SlashLineThickness' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bDisplayAsVariant) == 0x000514, "Member 'UW_Customization_Slot_C::bDisplayAsVariant' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, bHighlighted) == 0x000515, "Member 'UW_Customization_Slot_C::bHighlighted' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, BlankBrush) == 0x000518, "Member 'UW_Customization_Slot_C::BlankBrush' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, HighlightedBrush) == 0x0005A0, "Member 'UW_Customization_Slot_C::HighlightedBrush' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, OnSlotRightClickPressed) == 0x000628, "Member 'UW_Customization_Slot_C::OnSlotRightClickPressed' has a wrong offset!");
static_assert(offsetof(UW_Customization_Slot_C, OnSlotRightClickReleased) == 0x000638, "Member 'UW_Customization_Slot_C::OnSlotRightClickReleased' has a wrong offset!");

}

