#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ControlsBind

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "InputRemapping_structs.hpp"
#include "InputCore_structs.hpp"
#include "EInputKeyCategory_structs.hpp"
#include "KeyModifiers_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_ControlsBind.W_ControlsBind_C
// 0x02A0 (0x05F0 - 0x0350)
class UW_ControlsBind_C final  : public UControlsBind
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Button_Disabled;                                   // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Button_Dn;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Button_Hi;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Button_Up;                                         // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                KeybindButton;                                     // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DescriptionWidget_0;                               // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   DescriptionText;                                   // 0x0388(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   ChangeBindFormat;                                  // 0x03A0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FActionMappingStruct                   ActionMappingData_0;                               // 0x03B8(0x0028)(Edit, BlueprintVisible)
	struct FAxisMappingStruct                     AxisMappingData_0;                                 // 0x03E0(0x0028)(Edit, BlueprintVisible)
	bool                                          bIsAxis0;                                          // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6E[0x3];                                     // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BindIndex_0;                                       // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   UnboundText_0;                                     // 0x0410(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FKey                                   Key;                                               // 0x0428(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<EKeyModifiers>                         KeyModifiers;                                      // 0x0440(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnPressed;                                         // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnReleased;                                        // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnBindingStarted;                                  // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnBindingCanceled;                                 // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnBindingCommitted;                                // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FName                                   BindName_0;                                        // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Mod_Shift;                                         // 0x04C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Mod_Ctrl;                                          // 0x04E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Mod_Alt;                                           // 0x04F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Mod_Cmd;                                           // 0x0510(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bListeningForKeystrokes0;                          // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6F[0x7];                                     // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BindFriendlyName_0;                                // 0x0530(0x0018)(Edit, BlueprintVisible)
	class UTextBlock*                             BindNotificationWidget_0;                          // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AxisScale_0;                                       // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E70[0x4];                                     // 0x0554(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_ControlsBind_C*                      PairedKeybind;                                     // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             KeybindHoveredSoundEffect;                         // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UFMODEvent*                             KeybindStartBindingSoundEffect;                    // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnConflictingBindDetected;                         // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FKey                                   PendingNewKey_0;                                   // 0x0580(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EInputKeyCategory                             KeyCategory_0;                                     // 0x0598(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E71[0x7];                                     // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_SettingsMenu_C*                      SettingsMenu_0;                                    // 0x05A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           ConflictBindFriendlyNamesList_0;                   // 0x05A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FAxisMappingStruct>             ConflictingAxes;                                   // 0x05B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FActionMappingStruct>           ConflictingActions;                                // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnUnbindableKeyReboundAttempted;                   // 0x05D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsReadOnly;                                       // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void OnHovered__DelegateSignature(class UW_ControlsBind_C* CallingWidget);
	void OnUnhovered__DelegateSignature(class UW_ControlsBind_C* CallingWidget);
	void OnPressed__DelegateSignature(class UW_ControlsBind_C* CallingWidget);
	void OnReleased__DelegateSignature(class UW_ControlsBind_C* CallingWidget);
	void OnBindingStarted__DelegateSignature(class UW_ControlsBind_C* CallingWidget);
	void OnBindingCanceled__DelegateSignature(class UW_ControlsBind_C* CallingWidget);
	void OnBindingCommitted__DelegateSignature(class UW_ControlsBind_C* CallingWidget, const struct FKey& NewKey);
	void OnConflictingBindDetected__DelegateSignature(class UW_ControlsBind_C* CallingBind, TArray<struct FActionMappingStruct>& ActionMappings, TArray<struct FAxisMappingStruct>& AxisMappings, const struct FKey& Param_Key, TArray<class FText>& ConflictBindsText);
	void OnUnbindableKeyReboundAttempted__DelegateSignature(class FText Param_BindFriendlyName);
	void ExecuteUbergraph_W_ControlsBind(int32 EntryPoint, ESlateVisibility Temp_byte_Variable, bool K2Node_Event_IsDesignTime, const class FString& CallFunc_Conv_TextToString_ReturnValue, const struct FFMODEventInstance& CallFunc_PlayEvent2D_ReturnValue, const struct FKey& K2Node_CustomEvent_KeyIn, const struct FFMODEventInstance& CallFunc_PlayEvent2D_ReturnValue_1, const struct FAxisMappingStruct& K2Node_MakeStruct_AxisMappingStruct, const struct FActionMappingStruct& K2Node_MakeStruct_ActionMappingStruct, TArray<EActionMappingFilter>& K2Node_MakeArray_Array, TArray<EAxisMappingFilter>& K2Node_MakeArray_Array_1, bool CallFunc_GetAllActionMappings_ReturnValue, TArray<struct FActionMappingStruct>& CallFunc_GetAllActionMappings_ActionMappings, bool CallFunc_GetAllAxisMappings_ReturnValue, TArray<struct FAxisMappingStruct>& CallFunc_GetAllAxisMappings_AxisMappings, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_GetConflictingKeybindsWhenValid_HasConflict, TArray<struct FAxisMappingStruct>& CallFunc_GetConflictingKeybindsWhenValid_ConflictingAxes, TArray<struct FActionMappingStruct>& CallFunc_GetConflictingKeybindsWhenValid_ConflictingActions, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, class FText CallFunc_CheckConflictingKeybindsAreUnbindable_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_LessEqual_IntInt_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, ESlateVisibility Temp_byte_Variable_1, bool Temp_bool_Variable, class FText K2Node_CustomEvent_BindFriendlyName, class FText CallFunc_GetConflictingKeybindText_ReturnValue, TDelegate<void(class FText BindFriendlyName)> K2Node_CreateDelegate_OutputDelegate, ESlateVisibility K2Node_Select_Default, bool CallFunc_RebindKey_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1, const class FString& CallFunc_Conv_TextToString_ReturnValue_1, const class FString& CallFunc_Replace_ReturnValue, class FText CallFunc_Conv_StringToText_ReturnValue, const struct FAxisMappingStruct& CallFunc_GetInputBindingData_AxisMapping, const struct FActionMappingStruct& CallFunc_GetInputBindingData_ActionMapping, const struct FActionMappingStruct& K2Node_MakeStruct_ActionMappingStruct_1, const struct FAxisMappingStruct& K2Node_MakeStruct_AxisMappingStruct_1);
	void Construct();
	void UnbindAllEvents();
	void BndEvt__KeybindButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__KeybindButton_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__KeybindButton_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();
	void OnIllegalBindAttempted(class FText Param_BindFriendlyName);
	void Destruct();
	void BndEvt__KeybindButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__KeybindButton_K2Node_ComponentBoundEvent_4_OnButtonHoverEvent__DelegateSignature();
	void Binding_Confirmed();
	void Key_Event_Received(const struct FKey& KeyIn);
	void PreConstruct(bool IsDesignTime);
	void Get_Input_Binding_Data_OLD(int32 Param_Index, struct FActionMappingStruct* ActionMapping, struct FAxisMappingStruct* AxisMapping);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent, const struct FEventReply& CallFunc_HandleKeyDown_ReturnValue);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FEventReply& CallFunc_HandleMouseButtonDown_Reply);
	void Rebind_Key_OLD(const struct FKey& NewKey, bool* Key_Rebound, const struct FActionMappingStruct& NewActionMapping, const struct FAxisMappingStruct& NewAxisMapping);
	void Binding_Finished_OLD();
	void Reset_Binding_OLD();
	void Set_Keybinding_Text_OLD();
	void SetDisabled(bool Disabled, bool CallFunc_Not_PreBool_ReturnValue);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FEventReply& CallFunc_HandleMouseWheel_ReturnValue);
	void HandleMouseButtonDown(const struct FPointerEvent& PointerEvent, struct FEventReply* Reply, const struct FKey& CallFunc_PointerEvent_GetEffectingButton_ReturnValue, const struct FEventReply& CallFunc_Handled_ReturnValue, const struct FEventReply& CallFunc_Unhandled_ReturnValue);
	void GetOtherBindingIndex(int32* Value, int32 Temp_int_Variable, int32 Temp_int_Variable_1, int32 Temp_int_Variable_2, int32 K2Node_Select_Default);
	struct FEventReply OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent, const struct FEventReply& CallFunc_HandleKeyDown_ReturnValue);
	struct FEventReply HandleKeyDown(const struct FGeometry& My_Geometry, const struct FKeyEvent& In_Key_Event, const struct FKey& CallFunc_GetKey_ReturnValue, const struct FEventReply& CallFunc_Handled_ReturnValue, const struct FEventReply& CallFunc_Unhandled_ReturnValue);
	void Get_Conflicting_Keybinds_when_Valid_OLD(TArray<struct FAxisMappingStruct>& Axes, TArray<struct FActionMappingStruct>& Actions, bool* bHasConflict, TArray<struct FAxisMappingStruct>* Param_ConflictingAxes, TArray<struct FActionMappingStruct>* Param_ConflictingActions, const TArray<struct FActionMappingStruct>& OutputAction, const TArray<struct FAxisMappingStruct>& OutputAxes, const TArray<class FText>& LocalizedActions);
	struct FEventReply HandleMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, bool Temp_bool_Variable, float CallFunc_PointerEvent_GetWheelDelta_ReturnValue, const struct FKey& Temp_struct_Variable, bool CallFunc_Greater_FloatFloat_ReturnValue, bool Temp_bool_Variable_1, const struct FKey& Temp_struct_Variable_1, const struct FKey& Temp_struct_Variable_2, const struct FKey& K2Node_Select_Default, const struct FEventReply& CallFunc_Handled_ReturnValue, const struct FKey& K2Node_Select_Default_1, const struct FEventReply& CallFunc_Unhandled_ReturnValue);
	void Add_Conflicting_Keybinds_to_List_OLD(class FName MappingName, float Scale, TArray<struct FAxisMappingStruct>& Axes, TArray<struct FActionMappingStruct>& Actions, float ControlsScale, class FName TempMappingName);
	void Add_Keybinds_to_List_OLD(TArray<struct FSKeybinding>& Keybinds, class FName AxisMapping, float Scale, TArray<struct FAxisMappingStruct>& AxesList, TArray<struct FActionMappingStruct>& ActionsList, float TempScale);
	void Remove_Conflict_Keybinds_OLD(TArray<struct FAxisMappingStruct>& Axes, TArray<struct FActionMappingStruct>& Actions, class UW_ControlsBind_C* TempActionToRemove, class UW_ControlsBind_C* TempAxisToRemove, const struct FActionMappingStruct& TempActionMapping, const struct FAxisMappingStruct& TempAxisMapping);
	void Check_Conflicting_Keybinds_Are_Unbindable_OLD(TArray<struct FAxisMappingStruct>& Axes, TArray<struct FActionMappingStruct>& Actions, class FText* Param_BindFriendlyName, const struct FActionMappingStruct& TempActionBind, const struct FAxisMappingStruct& TempAxisBind);
	void Get_Conflicting_Keybind_Text_OLD(class FText RequiredKeybindName, class FText* Text, class FText ConflictingBindFormat);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_ControlsBind_C">();
	}
	static class UW_ControlsBind_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_ControlsBind_C>();
	}
};
static_assert(alignof(UW_ControlsBind_C) == 0x000008, "Wrong alignment on UW_ControlsBind_C");
static_assert(sizeof(UW_ControlsBind_C) == 0x0005F0, "Wrong size on UW_ControlsBind_C");
static_assert(offsetof(UW_ControlsBind_C, UberGraphFrame) == 0x000350, "Member 'UW_ControlsBind_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Button_Disabled) == 0x000358, "Member 'UW_ControlsBind_C::Button_Disabled' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Button_Dn) == 0x000360, "Member 'UW_ControlsBind_C::Button_Dn' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Button_Hi) == 0x000368, "Member 'UW_ControlsBind_C::Button_Hi' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Button_Up) == 0x000370, "Member 'UW_ControlsBind_C::Button_Up' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, KeybindButton) == 0x000378, "Member 'UW_ControlsBind_C::KeybindButton' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, DescriptionWidget_0) == 0x000380, "Member 'UW_ControlsBind_C::DescriptionWidget_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, DescriptionText) == 0x000388, "Member 'UW_ControlsBind_C::DescriptionText' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, ChangeBindFormat) == 0x0003A0, "Member 'UW_ControlsBind_C::ChangeBindFormat' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, ActionMappingData_0) == 0x0003B8, "Member 'UW_ControlsBind_C::ActionMappingData_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, AxisMappingData_0) == 0x0003E0, "Member 'UW_ControlsBind_C::AxisMappingData_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, bIsAxis0) == 0x000408, "Member 'UW_ControlsBind_C::bIsAxis0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, BindIndex_0) == 0x00040C, "Member 'UW_ControlsBind_C::BindIndex_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, UnboundText_0) == 0x000410, "Member 'UW_ControlsBind_C::UnboundText_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Key) == 0x000428, "Member 'UW_ControlsBind_C::Key' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, KeyModifiers) == 0x000440, "Member 'UW_ControlsBind_C::KeyModifiers' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnHovered) == 0x000450, "Member 'UW_ControlsBind_C::OnHovered' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnUnhovered) == 0x000460, "Member 'UW_ControlsBind_C::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnPressed) == 0x000470, "Member 'UW_ControlsBind_C::OnPressed' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnReleased) == 0x000480, "Member 'UW_ControlsBind_C::OnReleased' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnBindingStarted) == 0x000490, "Member 'UW_ControlsBind_C::OnBindingStarted' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnBindingCanceled) == 0x0004A0, "Member 'UW_ControlsBind_C::OnBindingCanceled' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnBindingCommitted) == 0x0004B0, "Member 'UW_ControlsBind_C::OnBindingCommitted' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, BindName_0) == 0x0004C0, "Member 'UW_ControlsBind_C::BindName_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Mod_Shift) == 0x0004C8, "Member 'UW_ControlsBind_C::Mod_Shift' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Mod_Ctrl) == 0x0004E0, "Member 'UW_ControlsBind_C::Mod_Ctrl' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Mod_Alt) == 0x0004F8, "Member 'UW_ControlsBind_C::Mod_Alt' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, Mod_Cmd) == 0x000510, "Member 'UW_ControlsBind_C::Mod_Cmd' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, bListeningForKeystrokes0) == 0x000528, "Member 'UW_ControlsBind_C::bListeningForKeystrokes0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, BindFriendlyName_0) == 0x000530, "Member 'UW_ControlsBind_C::BindFriendlyName_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, BindNotificationWidget_0) == 0x000548, "Member 'UW_ControlsBind_C::BindNotificationWidget_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, AxisScale_0) == 0x000550, "Member 'UW_ControlsBind_C::AxisScale_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, PairedKeybind) == 0x000558, "Member 'UW_ControlsBind_C::PairedKeybind' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, KeybindHoveredSoundEffect) == 0x000560, "Member 'UW_ControlsBind_C::KeybindHoveredSoundEffect' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, KeybindStartBindingSoundEffect) == 0x000568, "Member 'UW_ControlsBind_C::KeybindStartBindingSoundEffect' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnConflictingBindDetected) == 0x000570, "Member 'UW_ControlsBind_C::OnConflictingBindDetected' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, PendingNewKey_0) == 0x000580, "Member 'UW_ControlsBind_C::PendingNewKey_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, KeyCategory_0) == 0x000598, "Member 'UW_ControlsBind_C::KeyCategory_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, SettingsMenu_0) == 0x0005A0, "Member 'UW_ControlsBind_C::SettingsMenu_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, ConflictBindFriendlyNamesList_0) == 0x0005A8, "Member 'UW_ControlsBind_C::ConflictBindFriendlyNamesList_0' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, ConflictingAxes) == 0x0005B8, "Member 'UW_ControlsBind_C::ConflictingAxes' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, ConflictingActions) == 0x0005C8, "Member 'UW_ControlsBind_C::ConflictingActions' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, OnUnbindableKeyReboundAttempted) == 0x0005D8, "Member 'UW_ControlsBind_C::OnUnbindableKeyReboundAttempted' has a wrong offset!");
static_assert(offsetof(UW_ControlsBind_C, bIsReadOnly) == 0x0005E8, "Member 'UW_ControlsBind_C::bIsReadOnly' has a wrong offset!");

}

