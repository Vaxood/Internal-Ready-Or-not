#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Objective

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_Objective.W_Objective_C.ExecuteUbergraph_W_Objective
// 0x0048 (0x0048 - 0x0000)
struct W_Objective_C_ExecuteUbergraph_W_Objective final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EObjectiveStatus                              CallFunc_GetObjectiveStatus_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1D[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Objective_C_ExecuteUbergraph_W_Objective) == 0x000004, "Wrong alignment on W_Objective_C_ExecuteUbergraph_W_Objective");
static_assert(sizeof(W_Objective_C_ExecuteUbergraph_W_Objective) == 0x000048, "Wrong size on W_Objective_C_ExecuteUbergraph_W_Objective");
static_assert(offsetof(W_Objective_C_ExecuteUbergraph_W_Objective, EntryPoint) == 0x000000, "Member 'W_Objective_C_ExecuteUbergraph_W_Objective::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Objective_C_ExecuteUbergraph_W_Objective, CallFunc_GetObjectiveStatus_ReturnValue) == 0x000004, "Member 'W_Objective_C_ExecuteUbergraph_W_Objective::CallFunc_GetObjectiveStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Objective_C_ExecuteUbergraph_W_Objective, CallFunc_IsValidClass_ReturnValue) == 0x000005, "Member 'W_Objective_C_ExecuteUbergraph_W_Objective::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Objective_C_ExecuteUbergraph_W_Objective, CallFunc_IsValid_ReturnValue) == 0x000006, "Member 'W_Objective_C_ExecuteUbergraph_W_Objective::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Objective_C_ExecuteUbergraph_W_Objective, K2Node_Event_MyGeometry) == 0x000008, "Member 'W_Objective_C_ExecuteUbergraph_W_Objective::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Objective_C_ExecuteUbergraph_W_Objective, K2Node_Event_InDeltaTime) == 0x000040, "Member 'W_Objective_C_ExecuteUbergraph_W_Objective::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_Objective_C_ExecuteUbergraph_W_Objective, K2Node_Event_IsDesignTime) == 0x000044, "Member 'W_Objective_C_ExecuteUbergraph_W_Objective::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function W_Objective.W_Objective_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_Objective_C_Tick final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Objective_C_Tick) == 0x000004, "Wrong alignment on W_Objective_C_Tick");
static_assert(sizeof(W_Objective_C_Tick) == 0x00003C, "Wrong size on W_Objective_C_Tick");
static_assert(offsetof(W_Objective_C_Tick, MyGeometry) == 0x000000, "Member 'W_Objective_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Objective_C_Tick, InDeltaTime) == 0x000038, "Member 'W_Objective_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_Objective.W_Objective_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Objective_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Objective_C_PreConstruct) == 0x000001, "Wrong alignment on W_Objective_C_PreConstruct");
static_assert(sizeof(W_Objective_C_PreConstruct) == 0x000001, "Wrong size on W_Objective_C_PreConstruct");
static_assert(offsetof(W_Objective_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Objective_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Objective.W_Objective_C.UpdateDescription
// 0x0048 (0x0048 - 0x0000)
struct W_Objective_C_UpdateDescription final 
{
public:
	class UW_SubObjective_Entry_C*                CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_SubObjective_Entry_C*                CallFunc_Create_ReturnValue_1;                     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue_1;      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1E[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_SubObjective_Entry_C*                CallFunc_Create_ReturnValue_2;                     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1F[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue_2;      // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EObjectiveStatus                              CallFunc_GetObjectiveStatus_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Objective_C_UpdateDescription) == 0x000008, "Wrong alignment on W_Objective_C_UpdateDescription");
static_assert(sizeof(W_Objective_C_UpdateDescription) == 0x000048, "Wrong size on W_Objective_C_UpdateDescription");
static_assert(offsetof(W_Objective_C_UpdateDescription, CallFunc_Create_ReturnValue) == 0x000000, "Member 'W_Objective_C_UpdateDescription::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Objective_C_UpdateDescription, CallFunc_Create_ReturnValue_1) == 0x000008, "Member 'W_Objective_C_UpdateDescription::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Objective_C_UpdateDescription, CallFunc_AddChildToVerticalBox_ReturnValue) == 0x000010, "Member 'W_Objective_C_UpdateDescription::CallFunc_AddChildToVerticalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Objective_C_UpdateDescription, CallFunc_AddChildToVerticalBox_ReturnValue_1) == 0x000018, "Member 'W_Objective_C_UpdateDescription::CallFunc_AddChildToVerticalBox_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Objective_C_UpdateDescription, CallFunc_TextIsEmpty_ReturnValue) == 0x000020, "Member 'W_Objective_C_UpdateDescription::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Objective_C_UpdateDescription, CallFunc_BooleanOR_ReturnValue) == 0x000021, "Member 'W_Objective_C_UpdateDescription::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Objective_C_UpdateDescription, CallFunc_Create_ReturnValue_2) == 0x000028, "Member 'W_Objective_C_UpdateDescription::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Objective_C_UpdateDescription, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'W_Objective_C_UpdateDescription::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Objective_C_UpdateDescription, CallFunc_AddChildToVerticalBox_ReturnValue_2) == 0x000038, "Member 'W_Objective_C_UpdateDescription::CallFunc_AddChildToVerticalBox_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Objective_C_UpdateDescription, CallFunc_GetObjectiveStatus_ReturnValue) == 0x000040, "Member 'W_Objective_C_UpdateDescription::CallFunc_GetObjectiveStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Objective_C_UpdateDescription, K2Node_SwitchEnum_CmpSuccess) == 0x000041, "Member 'W_Objective_C_UpdateDescription::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

