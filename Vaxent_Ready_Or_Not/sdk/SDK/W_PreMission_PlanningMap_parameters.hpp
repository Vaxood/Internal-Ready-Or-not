#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_PlanningMap

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CommonInput_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMapLevelChanged__DelegateSignature
// 0x0078 (0x0078 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMapLevelChanged__DelegateSignature final 
{
public:
	class FString                                 MissionURL;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FLevelFloor                            FloorData;                                         // 0x0010(0x0068)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMapLevelChanged__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnMapLevelChanged__DelegateSignature");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMapLevelChanged__DelegateSignature) == 0x000078, "Wrong size on W_PreMission_PlanningMap_C_OnMapLevelChanged__DelegateSignature");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMapLevelChanged__DelegateSignature, MissionURL) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMapLevelChanged__DelegateSignature::MissionURL' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMapLevelChanged__DelegateSignature, FloorData) == 0x000010, "Member 'W_PreMission_PlanningMap_C_OnMapLevelChanged__DelegateSignature::FloorData' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ExecuteUbergraph_W_PreMission_PlanningMap
// 0x1228 (0x1228 - 0x0000)
struct W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33E0[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_ID_1;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33E1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanningLine                          K2Node_Event_Line;                                 // 0x0010(0x0028)(ConstParm)
	int32                                         K2Node_Event_ID;                                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_InGeometry;                           // 0x003C(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33E2[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_InMouseEvent;                         // 0x0078(0x0070)(ConstParm)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x00E8(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33E3[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PageName;                             // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsGamepad;                            // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33E4[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_MarkerID;                       // 0x0134(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_Tablet_MapMarker_C*       K2Node_CustomEvent_Marker;                         // 0x0138(0x0008)(ConstParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_LineID;                         // 0x0140(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33E5[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           K2Node_CustomEvent_LineCanvas;                     // 0x0148(0x0008)(ConstParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Delay_1;                              // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33E6[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_EntryPoint_C*      K2Node_CustomEvent_Clicked;                        // 0x0158(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_ID_2;                                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33E7[0x4];                                     // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_MapMarker_C*       CallFunc_Map_Find_Value;                           // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33E8[0x6];                                     // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PremissionTablet_Button_C*           K2Node_ComponentBoundEvent_TriggeringButton_1;     // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Toggle_IsOpen;                            // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33E9[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PremissionTablet_Button_C*           K2Node_ComponentBoundEvent_TriggeringButton;       // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_ID_3;                                 // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningMarker                        K2Node_Event_Marker;                               // 0x0194(0x0028)(ConstParm, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33EA[0x3];                                     // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_MissionURL;                           // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  K2Node_Event_LevelData_1;                          // 0x01D8(0x0788)()
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0960(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0961(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0962(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33EB[0x5];                                     // 0x0963(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0968(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEntryPoint                            K2Node_Event_NewEntryPoint;                        // 0x0970(0x0078)()
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x09E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33EC[0x3];                                     // 0x09E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UW_PreMission_Tablet_EntryPoint_C* Clicked)> K2Node_CreateDelegate_OutputDelegate;              // 0x09EC(0x0010)(ZeroConstructor, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x09FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x09FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x09FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33ED[0x1];                                     // 0x09FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IReadyOrNotUI_C>       K2Node_DynamicCast_AsReady_or_Not_UI;              // 0x0A00(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0A10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33EE[0x7];                                     // 0x0A11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IReadyOrNotUI_C>       CallFunc_Hide_self_CastInput;                      // 0x0A18(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IReadyOrNotUI_C>       CallFunc_Reveal_self_CastInput;                    // 0x0A28(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 K2Node_Event_URL;                                  // 0x0A38(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  K2Node_Event_LevelData;                            // 0x0A48(0x0788)(ConstParm)
	class UW_PreMission_Tablet_EntryPoint_Selection_C* K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Entry_Point_Selection; // 0x11D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x11D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33EF[0x3];                                     // 0x11D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Delay;                                // 0x11DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x11E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33F0[0x3];                                     // 0x11E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x11E4(0x0008)(NoDestructor)
	uint8                                         Pad_33F1[0x4];                                     // 0x11EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_PlanningMap_Level_C*      CallFunc_Map_Find_Value_1;                         // 0x11F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x11F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33F2[0x7];                                     // 0x11F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_PlanningMap_Level_C*      CallFunc_Map_Find_Value_2;                         // 0x1200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x1208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33F3[0x3];                                     // 0x1209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_CurrentZoom;                          // 0x120C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x1210(0x0010)(ZeroConstructor, NoDestructor)
	ECommonInputType                              K2Node_CustomEvent_bNewInputType;                  // 0x1220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x1221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap");
static_assert(sizeof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap) == 0x001228, "Wrong size on W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, EntryPoint) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, Temp_bool_Variable) == 0x000004, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_ID_1) == 0x000008, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_ID_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_Line) == 0x000010, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_Line' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_ID) == 0x000038, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_InGeometry) == 0x00003C, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_InGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_InMouseEvent) == 0x000078, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_InMouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_MyGeometry) == 0x0000E8, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_InDeltaTime) == 0x000120, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_IsDesignTime) == 0x000124, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_PageName) == 0x000128, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_IsGamepad) == 0x000130, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CustomEvent_MarkerID) == 0x000134, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CustomEvent_MarkerID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CustomEvent_Marker) == 0x000138, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CustomEvent_Marker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CustomEvent_LineID) == 0x000140, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CustomEvent_LineID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CustomEvent_LineCanvas) == 0x000148, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CustomEvent_LineCanvas' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_Delay_1) == 0x000150, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CustomEvent_Clicked) == 0x000158, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CustomEvent_Clicked' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_ID_2) == 0x000160, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_ID_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Map_Find_Value) == 0x000168, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Map_Find_ReturnValue) == 0x000170, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_IsValid_ReturnValue) == 0x000171, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_ComponentBoundEvent_TriggeringButton_1) == 0x000178, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_ComponentBoundEvent_TriggeringButton_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Toggle_IsOpen) == 0x000180, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Toggle_IsOpen' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_ComponentBoundEvent_TriggeringButton) == 0x000188, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_ComponentBoundEvent_TriggeringButton' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_ID_3) == 0x000190, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_ID_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_Marker) == 0x000194, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_Marker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Not_PreBool_ReturnValue) == 0x0001BC, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x0001C0, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_MissionURL) == 0x0001C8, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_MissionURL' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_LevelData_1) == 0x0001D8, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_LevelData_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_GetCurrentInputType_ReturnValue) == 0x000960, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_IsValid_ReturnValue_1) == 0x000961, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000962, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_GetOwningPlayer_ReturnValue) == 0x000968, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_NewEntryPoint) == 0x000970, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_NewEntryPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_HasAuthority_ReturnValue) == 0x0009E8, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CreateDelegate_OutputDelegate) == 0x0009EC, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, Temp_byte_Variable) == 0x0009FC, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, Temp_byte_Variable_1) == 0x0009FD, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Select_Default) == 0x0009FE, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_DynamicCast_AsReady_or_Not_UI) == 0x000A00, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_DynamicCast_AsReady_or_Not_UI' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_DynamicCast_bSuccess) == 0x000A10, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Hide_self_CastInput) == 0x000A18, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Hide_self_CastInput' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Reveal_self_CastInput) == 0x000A28, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Reveal_self_CastInput' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_URL) == 0x000A38, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_URL' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_LevelData) == 0x000A48, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_LevelData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Entry_Point_Selection) == 0x0011D0, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Entry_Point_Selection' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_DynamicCast_bSuccess_1) == 0x0011D8, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_Delay) == 0x0011DC, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_Collapse) == 0x0011E0, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_InFocusEvent) == 0x0011E4, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Map_Find_Value_1) == 0x0011F0, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Map_Find_ReturnValue_1) == 0x0011F8, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Map_Find_Value_2) == 0x001200, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_Map_Find_ReturnValue_2) == 0x001208, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_Event_CurrentZoom) == 0x00120C, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_Event_CurrentZoom' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CreateDelegate_OutputDelegate_1) == 0x001210, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, K2Node_CustomEvent_bNewInputType) == 0x001220, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::K2Node_CustomEvent_bNewInputType' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x001221, "Member 'W_PreMission_PlanningMap_C_ExecuteUbergraph_W_PreMission_PlanningMap::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnInputChange
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_C_OnInputChange final 
{
public:
	ECommonInputType                              bNewInputType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnInputChange) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_OnInputChange");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnInputChange) == 0x000001, "Wrong size on W_PreMission_PlanningMap_C_OnInputChange");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnInputChange, bNewInputType) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnInputChange::bNewInputType' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ScaleLineWeightByZoom
// 0x0004 (0x0004 - 0x0000)
struct W_PreMission_PlanningMap_C_ScaleLineWeightByZoom final 
{
public:
	float                                         Param_CurrentZoom;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ScaleLineWeightByZoom) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_ScaleLineWeightByZoom");
static_assert(sizeof(W_PreMission_PlanningMap_C_ScaleLineWeightByZoom) == 0x000004, "Wrong size on W_PreMission_PlanningMap_C_ScaleLineWeightByZoom");
static_assert(offsetof(W_PreMission_PlanningMap_C_ScaleLineWeightByZoom, Param_CurrentZoom) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ScaleLineWeightByZoom::Param_CurrentZoom' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnFocusLost
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_OnFocusLost final 
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnFocusLost) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_OnFocusLost");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnFocusLost) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_OnFocusLost");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnFocusLost, InFocusEvent) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnFocusLost::InFocusEvent' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Hide
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_Hide final 
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_Hide) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_Hide");
static_assert(sizeof(W_PreMission_PlanningMap_C_Hide) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_Hide");
static_assert(offsetof(W_PreMission_PlanningMap_C_Hide, Delay) == 0x000000, "Member 'W_PreMission_PlanningMap_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Hide, Collapse) == 0x000004, "Member 'W_PreMission_PlanningMap_C_Hide::Collapse' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMissionChanged
// 0x0798 (0x0798 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMissionChanged final 
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  LevelData;                                         // 0x0010(0x0788)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMissionChanged) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnMissionChanged");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMissionChanged) == 0x000798, "Wrong size on W_PreMission_PlanningMap_C_OnMissionChanged");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMissionChanged, URL) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMissionChanged::URL' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMissionChanged, LevelData) == 0x000010, "Member 'W_PreMission_PlanningMap_C_OnMissionChanged::LevelData' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnEntryPointChanged
// 0x0078 (0x0078 - 0x0000)
struct W_PreMission_PlanningMap_C_OnEntryPointChanged final 
{
public:
	struct FEntryPoint                            NewEntryPoint;                                     // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnEntryPointChanged) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnEntryPointChanged");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnEntryPointChanged) == 0x000078, "Wrong size on W_PreMission_PlanningMap_C_OnEntryPointChanged");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnEntryPointChanged, NewEntryPoint) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnEntryPointChanged::NewEntryPoint' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.MissionChanged
// 0x0798 (0x0798 - 0x0000)
struct W_PreMission_PlanningMap_C_MissionChanged final 
{
public:
	class FString                                 MissionURL;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  LevelData;                                         // 0x0010(0x0788)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_PreMission_PlanningMap_C_MissionChanged) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_MissionChanged");
static_assert(sizeof(W_PreMission_PlanningMap_C_MissionChanged) == 0x000798, "Wrong size on W_PreMission_PlanningMap_C_MissionChanged");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionChanged, MissionURL) == 0x000000, "Member 'W_PreMission_PlanningMap_C_MissionChanged::MissionURL' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionChanged, LevelData) == 0x000010, "Member 'W_PreMission_PlanningMap_C_MissionChanged::LevelData' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.BndEvt__W_PreMission_PlanningMap_btn_GlobalEntryPoints_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_GlobalEntryPoints_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature final 
{
public:
	class UW_PremissionTablet_Button_C*           TriggeringButton;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_GlobalEntryPoints_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_GlobalEntryPoints_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature");
static_assert(sizeof(W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_GlobalEntryPoints_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_GlobalEntryPoints_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature");
static_assert(offsetof(W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_GlobalEntryPoints_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature, TriggeringButton) == 0x000000, "Member 'W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_GlobalEntryPoints_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature::TriggeringButton' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature final 
{
public:
	class UW_PremissionTablet_Button_C*           TriggeringButton;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature");
static_assert(sizeof(W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature");
static_assert(offsetof(W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature, TriggeringButton) == 0x000000, "Member 'W_PreMission_PlanningMap_C_BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature::TriggeringButton' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnEntryPointSelected
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_OnEntryPointSelected final 
{
public:
	class UW_PreMission_Tablet_EntryPoint_C*      Clicked;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnEntryPointSelected) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnEntryPointSelected");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnEntryPointSelected) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_OnEntryPointSelected");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnEntryPointSelected, Clicked) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnEntryPointSelected::Clicked' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Reveal
// 0x0004 (0x0004 - 0x0000)
struct W_PreMission_PlanningMap_C_Reveal final 
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_Reveal) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_Reveal");
static_assert(sizeof(W_PreMission_PlanningMap_C_Reveal) == 0x000004, "Wrong size on W_PreMission_PlanningMap_C_Reveal");
static_assert(offsetof(W_PreMission_PlanningMap_C_Reveal, Delay) == 0x000000, "Member 'W_PreMission_PlanningMap_C_Reveal::Delay' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.LineDrawn
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_C_LineDrawn final 
{
public:
	int32                                         LineID;                                            // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33F4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           LineCanvas;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_LineDrawn) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_LineDrawn");
static_assert(sizeof(W_PreMission_PlanningMap_C_LineDrawn) == 0x000010, "Wrong size on W_PreMission_PlanningMap_C_LineDrawn");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineDrawn, LineID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_LineDrawn::LineID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineDrawn, LineCanvas) == 0x000008, "Member 'W_PreMission_PlanningMap_C_LineDrawn::LineCanvas' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.MapMarkerDrawn
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_C_MapMarkerDrawn final 
{
public:
	int32                                         MarkerID;                                          // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33F5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_MapMarker_C*       Marker;                                            // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_MapMarkerDrawn) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_MapMarkerDrawn");
static_assert(sizeof(W_PreMission_PlanningMap_C_MapMarkerDrawn) == 0x000010, "Wrong size on W_PreMission_PlanningMap_C_MapMarkerDrawn");
static_assert(offsetof(W_PreMission_PlanningMap_C_MapMarkerDrawn, MarkerID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_MapMarkerDrawn::MarkerID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MapMarkerDrawn, Marker) == 0x000008, "Member 'W_PreMission_PlanningMap_C_MapMarkerDrawn::Marker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_C_SetInputMode final 
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_SetInputMode) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_SetInputMode");
static_assert(sizeof(W_PreMission_PlanningMap_C_SetInputMode) == 0x000001, "Wrong size on W_PreMission_PlanningMap_C_SetInputMode");
static_assert(offsetof(W_PreMission_PlanningMap_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_PreMission_PlanningMap_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_ChangePage final 
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ChangePage) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_ChangePage");
static_assert(sizeof(W_PreMission_PlanningMap_C_ChangePage) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_ChangePage");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangePage, PageName) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ChangePage::PageName' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_PreConstruct) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_PreConstruct");
static_assert(sizeof(W_PreMission_PlanningMap_C_PreConstruct) == 0x000001, "Wrong size on W_PreMission_PlanningMap_C_PreConstruct");
static_assert(offsetof(W_PreMission_PlanningMap_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_PreMission_PlanningMap_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_PreMission_PlanningMap_C_Tick final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_Tick) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_Tick");
static_assert(sizeof(W_PreMission_PlanningMap_C_Tick) == 0x00003C, "Wrong size on W_PreMission_PlanningMap_C_Tick");
static_assert(offsetof(W_PreMission_PlanningMap_C_Tick, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_Tick, InDeltaTime) == 0x000038, "Member 'W_PreMission_PlanningMap_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnLeftClickUp
// 0x00A8 (0x00A8 - 0x0000)
struct W_PreMission_PlanningMap_C_OnLeftClickUp final 
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnLeftClickUp) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnLeftClickUp");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnLeftClickUp) == 0x0000A8, "Wrong size on W_PreMission_PlanningMap_C_OnLeftClickUp");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnLeftClickUp, InGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnLeftClickUp::InGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnLeftClickUp, InMouseEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnLeftClickUp::InMouseEvent' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnLineRemoved
// 0x0004 (0x0004 - 0x0000)
struct W_PreMission_PlanningMap_C_OnLineRemoved final 
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnLineRemoved) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_OnLineRemoved");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnLineRemoved) == 0x000004, "Wrong size on W_PreMission_PlanningMap_C_OnLineRemoved");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnLineRemoved, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnLineRemoved::ID' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnLineAdded
// 0x0030 (0x0030 - 0x0000)
struct W_PreMission_PlanningMap_C_OnLineAdded final 
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33F6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanningLine                          Line;                                              // 0x0008(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnLineAdded) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnLineAdded");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnLineAdded) == 0x000030, "Wrong size on W_PreMission_PlanningMap_C_OnLineAdded");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnLineAdded, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnLineAdded::ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnLineAdded, Line) == 0x000008, "Member 'W_PreMission_PlanningMap_C_OnLineAdded::Line' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMarkerRemoved
// 0x0004 (0x0004 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMarkerRemoved final 
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMarkerRemoved) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_OnMarkerRemoved");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMarkerRemoved) == 0x000004, "Wrong size on W_PreMission_PlanningMap_C_OnMarkerRemoved");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMarkerRemoved, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMarkerRemoved::ID' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMarkerAdded
// 0x002C (0x002C - 0x0000)
struct W_PreMission_PlanningMap_C_OnMarkerAdded final 
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningMarker                        Marker;                                            // 0x0004(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMarkerAdded) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_OnMarkerAdded");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMarkerAdded) == 0x00002C, "Wrong size on W_PreMission_PlanningMap_C_OnMarkerAdded");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMarkerAdded, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMarkerAdded::ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMarkerAdded, Marker) == 0x000004, "Member 'W_PreMission_PlanningMap_C_OnMarkerAdded::Marker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnKeyUp
// 0x0370 (0x0370 - 0x0000)
struct W_PreMission_PlanningMap_C_OnKeyUp final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0070(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0128(0x00B8)()
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x01E0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33F7[0x5];                                     // 0x01FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0200(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x02B8(0x00B8)()
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnKeyUp) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnKeyUp");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnKeyUp) == 0x000370, "Wrong size on W_PreMission_PlanningMap_C_OnKeyUp");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, InKeyEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::InKeyEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, ReturnValue) == 0x000070, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_Handled_ReturnValue) == 0x000128, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_GetKey_ReturnValue) == 0x0001E0, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x0001F8, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x0001F9, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x0001FA, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_Unhandled_ReturnValue) == 0x000200, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnKeyUp, CallFunc_Handled_ReturnValue_1) == 0x0002B8, "Member 'W_PreMission_PlanningMap_C_OnKeyUp::CallFunc_Handled_ReturnValue_1' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ZoomIn
// 0x0118 (0x0118 - 0x0000)
struct W_PreMission_PlanningMap_C_ZoomIn final 
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Param_ZoomOnCursor;                                // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33F8[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousZoom;                                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetMousePositionOnViewport_ReturnValue;   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DFloat_ReturnValue;       // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeToRange_ReturnValue;             // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x00D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x00DC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33F9[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33FA[0x3];                                     // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ZoomIn) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_ZoomIn");
static_assert(sizeof(W_PreMission_PlanningMap_C_ZoomIn) == 0x000118, "Wrong size on W_PreMission_PlanningMap_C_ZoomIn");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, Geometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ZoomIn::Geometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, PointerEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_ZoomIn::PointerEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, Param_ZoomOnCursor) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_ZoomIn::Param_ZoomOnCursor' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, PreviousZoom) == 0x0000AC, "Member 'W_PreMission_PlanningMap_C_ZoomIn::PreviousZoom' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_GetViewportSize_ReturnValue) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_GetMousePositionOnViewport_ReturnValue) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_GetMousePositionOnViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_Subtract_Vector2DFloat_ReturnValue) == 0x0000C8, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_Subtract_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_NormalizeToRange_ReturnValue) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x0000D4, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x0000DC, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x0000E8, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_GetPosition_ReturnValue) == 0x0000F0, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x0000F8, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000100, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_Add_FloatFloat_ReturnValue) == 0x000108, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00010C, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomIn, CallFunc_SelectFloat_ReturnValue) == 0x000110, "Member 'W_PreMission_PlanningMap_C_ZoomIn::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ZoomOut
// 0x00E0 (0x00E0 - 0x0000)
struct W_PreMission_PlanningMap_C_ZoomOut final 
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Param_ZoomOnCursor;                                // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33FB[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousZoom;                                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeToRange_ReturnValue;             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33FC[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33FD[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ZoomOut) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_ZoomOut");
static_assert(sizeof(W_PreMission_PlanningMap_C_ZoomOut) == 0x0000E0, "Wrong size on W_PreMission_PlanningMap_C_ZoomOut");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOut, Geometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ZoomOut::Geometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOut, PointerEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_ZoomOut::PointerEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOut, Param_ZoomOnCursor) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_ZoomOut::Param_ZoomOnCursor' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOut, PreviousZoom) == 0x0000AC, "Member 'W_PreMission_PlanningMap_C_ZoomOut::PreviousZoom' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOut, CallFunc_NormalizeToRange_ReturnValue) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_ZoomOut::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOut, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_ZoomOut::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOut, CallFunc_GetPosition_ReturnValue) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_ZoomOut::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOut, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x0000C8, "Member 'W_PreMission_PlanningMap_C_ZoomOut::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOut, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_ZoomOut::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOut, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000D4, "Member 'W_PreMission_PlanningMap_C_ZoomOut::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOut, CallFunc_SelectFloat_ReturnValue) == 0x0000D8, "Member 'W_PreMission_PlanningMap_C_ZoomOut::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OpenRadial
// 0x0138 (0x0138 - 0x0000)
struct W_PreMission_PlanningMap_C_OpenRadial final 
{
public:
	struct FVector2D                              CursorPosition;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33FE[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Radial_MapMarking_C*                 CallFunc_Create_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0018(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue_1;          // 0x0058(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_AbsoluteToLocal_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue_1;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_AbsoluteToLocal_ReturnValue_1;            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue_1;    // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMousePosition_LocationX;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMousePosition_LocationY;               // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMousePosition_ReturnValue;             // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33FF[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName Category, class FName MarkerName)> K2Node_CreateDelegate_OutputDelegate;              // 0x00D4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x00E4(0x0010)(ZeroConstructor, NoDestructor)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x00F4(0x0010)(NoDestructor)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData;                      // 0x0104(0x0028)(NoDestructor)
	uint8                                         Pad_3400[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OpenRadial) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OpenRadial");
static_assert(sizeof(W_PreMission_PlanningMap_C_OpenRadial) == 0x000138, "Wrong size on W_PreMission_PlanningMap_C_OpenRadial");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CursorPosition) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CursorPosition' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_Create_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetCachedGeometry_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetLocalSize_ReturnValue) == 0x000050, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetCachedGeometry_ReturnValue_1) == 0x000058, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetCachedGeometry_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_AbsoluteToLocal_ReturnValue) == 0x000090, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_AbsoluteToLocal_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetLocalSize_ReturnValue_1) == 0x000098, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetLocalSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x0000A0, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_AbsoluteToLocal_ReturnValue_1) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_AbsoluteToLocal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_Divide_Vector2DVector2D_ReturnValue_1) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_Divide_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetPlayerController_ReturnValue) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetMousePosition_LocationX) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetMousePosition_LocationX' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetMousePosition_LocationY) == 0x0000C4, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetMousePosition_LocationY' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_GetMousePosition_ReturnValue) == 0x0000C8, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_GetMousePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_MakeVector2D_ReturnValue) == 0x0000CC, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, K2Node_CreateDelegate_OutputDelegate) == 0x0000D4, "Member 'W_PreMission_PlanningMap_C_OpenRadial::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000E4, "Member 'W_PreMission_PlanningMap_C_OpenRadial::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, K2Node_MakeStruct_Anchors) == 0x0000F4, "Member 'W_PreMission_PlanningMap_C_OpenRadial::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, K2Node_MakeStruct_AnchorData) == 0x000104, "Member 'W_PreMission_PlanningMap_C_OpenRadial::K2Node_MakeStruct_AnchorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OpenRadial, CallFunc_AddChildToCanvas_ReturnValue) == 0x000130, "Member 'W_PreMission_PlanningMap_C_OpenRadial::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.RadialCollapsed
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_C_RadialCollapsed final 
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_RadialCollapsed) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_RadialCollapsed");
static_assert(sizeof(W_PreMission_PlanningMap_C_RadialCollapsed) == 0x000001, "Wrong size on W_PreMission_PlanningMap_C_RadialCollapsed");
static_assert(offsetof(W_PreMission_PlanningMap_C_RadialCollapsed, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_PreMission_PlanningMap_C_RadialCollapsed::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.CloseRadial
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_C_CloseRadial final 
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_CloseRadial) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_CloseRadial");
static_assert(sizeof(W_PreMission_PlanningMap_C_CloseRadial) == 0x000001, "Wrong size on W_PreMission_PlanningMap_C_CloseRadial");
static_assert(offsetof(W_PreMission_PlanningMap_C_CloseRadial, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_PreMission_PlanningMap_C_CloseRadial::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.RadialMarkerSelected
// 0x0038 (0x0038 - 0x0000)
struct W_PreMission_PlanningMap_C_RadialMarkerSelected final 
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MarkerName;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningMarker                        K2Node_MakeStruct_PlanningMarker;                  // 0x0010(0x0028)(NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_RadialMarkerSelected) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_RadialMarkerSelected");
static_assert(sizeof(W_PreMission_PlanningMap_C_RadialMarkerSelected) == 0x000038, "Wrong size on W_PreMission_PlanningMap_C_RadialMarkerSelected");
static_assert(offsetof(W_PreMission_PlanningMap_C_RadialMarkerSelected, CategoryName) == 0x000000, "Member 'W_PreMission_PlanningMap_C_RadialMarkerSelected::CategoryName' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RadialMarkerSelected, MarkerName) == 0x000008, "Member 'W_PreMission_PlanningMap_C_RadialMarkerSelected::MarkerName' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RadialMarkerSelected, K2Node_MakeStruct_PlanningMarker) == 0x000010, "Member 'W_PreMission_PlanningMap_C_RadialMarkerSelected::K2Node_MakeStruct_PlanningMarker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMouseButtonDown
// 0x0250 (0x0250 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMouseButtonDown final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0160(0x0018)(HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3401[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0190(0x00B8)()
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnMouseButtonDown");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMouseButtonDown) == 0x000250, "Wrong size on W_PreMission_PlanningMap_C_OnMouseButtonDown");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, ReturnValue) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000160, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000178, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000180, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000188, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, CallFunc_Unhandled_ReturnValue) == 0x000190, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonDown, CallFunc_GetPosition_ReturnValue) == 0x000248, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonDown::CallFunc_GetPosition_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMouseButtonUp
// 0x0620 (0x0620 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMouseButtonUp final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0160(0x00B8)()
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0220(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3402[0x2];                                     // 0x023A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x023C(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetNormalizedClick_ReturnValue;           // 0x0274(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3403[0x4];                                     // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x0280(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue_2;                    // 0x0338(0x00B8)()
	struct FEventReply                            CallFunc_ReleaseMouseCapture_ReturnValue;          // 0x03F0(0x00B8)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x04AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3404[0x3];                                     // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue_3;                    // 0x04B0(0x00B8)()
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0568(0x00B8)()
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnMouseButtonUp");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMouseButtonUp) == 0x000620, "Wrong size on W_PreMission_PlanningMap_C_OnMouseButtonUp");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, MouseEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, ReturnValue) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue) == 0x000160, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000218, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000220, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000238, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000239, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_GetCachedGeometry_ReturnValue) == 0x00023C, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_GetNormalizedClick_ReturnValue) == 0x000274, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_GetNormalizedClick_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue_1) == 0x000280, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue_2) == 0x000338, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_ReleaseMouseCapture_ReturnValue) == 0x0003F0, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_ReleaseMouseCapture_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Array_Length_ReturnValue) == 0x0004A8, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Greater_IntInt_ReturnValue) == 0x0004AC, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue_3) == 0x0004B0, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseButtonUp, CallFunc_Unhandled_ReturnValue) == 0x000568, "Member 'W_PreMission_PlanningMap_C_OnMouseButtonUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMouseWheel
// 0x02E0 (0x02E0 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMouseWheel final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0160(0x00B8)()
	float                                         CallFunc_PointerEvent_GetWheelDelta_ReturnValue;   // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3405[0x4];                                     // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0220(0x00B8)()
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMouseWheel) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnMouseWheel");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMouseWheel) == 0x0002E0, "Wrong size on W_PreMission_PlanningMap_C_OnMouseWheel");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, MouseEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, ReturnValue) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, CallFunc_Unhandled_ReturnValue) == 0x000160, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, CallFunc_PointerEvent_GetWheelDelta_ReturnValue) == 0x000218, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::CallFunc_PointerEvent_GetWheelDelta_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, CallFunc_Handled_ReturnValue) == 0x000220, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, CallFunc_Less_FloatFloat_ReturnValue) == 0x0002D8, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseWheel, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0002D9, "Member 'W_PreMission_PlanningMap_C_OnMouseWheel::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.OnMouseMove
// 0x0390 (0x0390 - 0x0000)
struct W_PreMission_PlanningMap_C_OnMouseMove final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0160(0x00B8)()
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue; // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3406[0x3];                                     // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x021C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0224(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3407[0x3];                                     // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0228(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0260(0x00B8)()
	struct FVector2D                              CallFunc_GetNormalizedClick_ReturnValue;           // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1; // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3408[0x3];                                     // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x032C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0334(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Distance2D_ReturnValue;                   // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3409[0x7];                                     // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0350(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSize_ReturnValue;                      // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_OnMouseMove) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_OnMouseMove");
static_assert(sizeof(W_PreMission_PlanningMap_C_OnMouseMove) == 0x000390, "Wrong size on W_PreMission_PlanningMap_C_OnMouseMove");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, MouseEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, ReturnValue) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Handled_ReturnValue) == 0x000160, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue) == 0x000218, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x00021C, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_IsValid_ReturnValue) == 0x000224, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_GetCachedGeometry_ReturnValue) == 0x000228, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Unhandled_ReturnValue) == 0x000260, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_GetNormalizedClick_ReturnValue) == 0x000318, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_GetNormalizedClick_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1) == 0x000320, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_IsValid_ReturnValue_1) == 0x000328, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x00032C, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000334, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_BreakVector2D_X) == 0x00033C, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_BreakVector2D_Y) == 0x000340, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Distance2D_ReturnValue) == 0x000344, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000348, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000350, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_GetSize_ReturnValue) == 0x000358, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_GetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000360, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x000368, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_BreakVector2D_X_1) == 0x000370, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_BreakVector2D_Y_1) == 0x000374, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000378, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00037C, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_FClamp_ReturnValue) == 0x000380, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_FClamp_ReturnValue_1) == 0x000384, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_OnMouseMove, CallFunc_MakeVector2D_ReturnValue) == 0x000388, "Member 'W_PreMission_PlanningMap_C_OnMouseMove::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.AddPreviewLinePoint
// 0x00F8 (0x00F8 - 0x0000)
struct W_PreMission_PlanningMap_C_AddPreviewLinePoint final 
{
public:
	struct FVector2D                              Coordinates;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      LinePoints;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	bool                                          FirstPoint;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_340A[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                NodeWidget;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0028(0x0010)(NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData;                      // 0x003C(0x0028)(NoDestructor)
	uint8                                         Pad_340B[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotPlayerController*            CallFunc_GetReadyOrNotPlayerController_ReturnValue; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotPlayerState*                 K2Node_DynamicCast_AsReady_or_Not_Player_State;    // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_340C[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors_1;                       // 0x0080(0x0010)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData_1;                    // 0x0098(0x0028)(NoDestructor)
	class AReadyOrNotPlayerController*            CallFunc_GetReadyOrNotPlayerController_ReturnValue_1; // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_340D[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_OfficerMarker_C*                     CallFunc_Create_ReturnValue;                       // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      CallFunc_Create_ReturnValue_1;                     // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue_1;           // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_Line_C*       CallFunc_Create_ReturnValue_2;                     // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_AddPreviewLinePoint) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_AddPreviewLinePoint");
static_assert(sizeof(W_PreMission_PlanningMap_C_AddPreviewLinePoint) == 0x0000F8, "Wrong size on W_PreMission_PlanningMap_C_AddPreviewLinePoint");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, Coordinates) == 0x000000, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, LinePoints) == 0x000008, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::LinePoints' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, FirstPoint) == 0x000018, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::FirstPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, NodeWidget) == 0x000020, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::NodeWidget' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, K2Node_MakeStruct_Anchors) == 0x000028, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_SelectFloat_ReturnValue) == 0x000038, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, K2Node_MakeStruct_AnchorData) == 0x00003C, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::K2Node_MakeStruct_AnchorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_GetReadyOrNotPlayerController_ReturnValue) == 0x000068, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_GetReadyOrNotPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, K2Node_DynamicCast_AsReady_or_Not_Player_State) == 0x000070, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::K2Node_DynamicCast_AsReady_or_Not_Player_State' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_Array_Add_ReturnValue) == 0x00007C, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, K2Node_MakeStruct_Anchors_1) == 0x000080, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::K2Node_MakeStruct_Anchors_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_AddChildToCanvas_ReturnValue) == 0x000090, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, K2Node_MakeStruct_AnchorData_1) == 0x000098, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::K2Node_MakeStruct_AnchorData_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_GetReadyOrNotPlayerController_ReturnValue_1) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_GetReadyOrNotPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_Array_Add_ReturnValue_1) == 0x0000C8, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_Create_ReturnValue) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_Create_ReturnValue_1) == 0x0000D8, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_AddChildToCanvas_ReturnValue_1) == 0x0000E0, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_AddChildToCanvas_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_Create_ReturnValue_2) == 0x0000E8, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_AddPreviewLinePoint, CallFunc_Array_Add_ReturnValue_2) == 0x0000F0, "Member 'W_PreMission_PlanningMap_C_AddPreviewLinePoint::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.DrawLine
// 0x01E8 (0x01E8 - 0x0000)
struct W_PreMission_PlanningMap_C_DrawLine final 
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_340E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanningLine                          LineData;                                          // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AReadyOrNotPlayerState*                 LineOwner;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_Line_C*       Line;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastNode;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_340F[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndOffset;                                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffset;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PreviousPoint;                                     // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Coordinates;                                       // 0x005C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3410[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                NodeWidget;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstNode;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3411[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_PlanningMap_Line_C*       CallFunc_Create_ReturnValue;                       // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotPlayerState*                 CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_OfficerMarker_C*                     CallFunc_Create_ReturnValue_1;                     // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      CallFunc_Create_ReturnValue_2;                     // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> K2Node_CreateDelegate_OutputDelegate;              // 0x00A4(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector2D                              CallFunc_Array_Get_Item;                           // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3412[0x2];                                     // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetPlayerTeamColor_LinearColor;           // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetPlayerTeamColor_SlateColor;            // 0x00D0(0x0028)()
	TDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x00F8(0x0010)(ZeroConstructor, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0110(0x0010)(NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData;                      // 0x0124(0x0028)(NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3413[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLineAngle_Angle;                       // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLineLength_Length;                     // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors_1;                       // 0x015C(0x0010)(NoDestructor)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData_1;                    // 0x016C(0x0028)(NoDestructor)
	uint8                                         Pad_3414[0x4];                                     // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue_1;           // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           CallFunc_SpawnObject_ReturnValue;                  // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors_2;                       // 0x01A8(0x0010)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue_2;           // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData_2;                    // 0x01C0(0x0028)(NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_DrawLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_DrawLine");
static_assert(sizeof(W_PreMission_PlanningMap_C_DrawLine) == 0x0001E8, "Wrong size on W_PreMission_PlanningMap_C_DrawLine");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_DrawLine::ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, LineData) == 0x000008, "Member 'W_PreMission_PlanningMap_C_DrawLine::LineData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, LineOwner) == 0x000030, "Member 'W_PreMission_PlanningMap_C_DrawLine::LineOwner' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, Canvas) == 0x000038, "Member 'W_PreMission_PlanningMap_C_DrawLine::Canvas' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, Line) == 0x000040, "Member 'W_PreMission_PlanningMap_C_DrawLine::Line' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, LastNode) == 0x000048, "Member 'W_PreMission_PlanningMap_C_DrawLine::LastNode' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, EndOffset) == 0x00004C, "Member 'W_PreMission_PlanningMap_C_DrawLine::EndOffset' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, StartOffset) == 0x000050, "Member 'W_PreMission_PlanningMap_C_DrawLine::StartOffset' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, PreviousPoint) == 0x000054, "Member 'W_PreMission_PlanningMap_C_DrawLine::PreviousPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, Coordinates) == 0x00005C, "Member 'W_PreMission_PlanningMap_C_DrawLine::Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, NodeWidget) == 0x000068, "Member 'W_PreMission_PlanningMap_C_DrawLine::NodeWidget' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, FirstNode) == 0x000070, "Member 'W_PreMission_PlanningMap_C_DrawLine::FirstNode' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Create_ReturnValue) == 0x000078, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Array_LastIndex_ReturnValue) == 0x000084, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue) == 0x000088, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Create_ReturnValue_1) == 0x000090, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Create_ReturnValue_2) == 0x000098, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, Temp_int_Array_Index_Variable) == 0x0000A0, "Member 'W_PreMission_PlanningMap_C_DrawLine::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_CreateDelegate_OutputDelegate) == 0x0000A4, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Array_Get_Item) == 0x0000B4, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000BC, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000BD, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_GetPlayerTeamColor_LinearColor) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_GetPlayerTeamColor_LinearColor' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_GetPlayerTeamColor_SlateColor) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_GetPlayerTeamColor_SlateColor' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000F8, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_AddChildToCanvas_ReturnValue) == 0x000108, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_MakeStruct_Anchors) == 0x000110, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, Temp_int_Loop_Counter_Variable) == 0x000120, "Member 'W_PreMission_PlanningMap_C_DrawLine::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_MakeStruct_AnchorData) == 0x000124, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_MakeStruct_AnchorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Less_IntInt_ReturnValue) == 0x00014C, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_Add_IntInt_ReturnValue) == 0x000150, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_GetLineAngle_Angle) == 0x000154, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_GetLineAngle_Angle' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_GetLineLength_Length) == 0x000158, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_GetLineLength_Length' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_MakeStruct_Anchors_1) == 0x00015C, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_MakeStruct_Anchors_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_MakeStruct_AnchorData_1) == 0x00016C, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_MakeStruct_AnchorData_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_AddChildToCanvas_ReturnValue_1) == 0x000198, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_AddChildToCanvas_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_SpawnObject_ReturnValue) == 0x0001A0, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_MakeStruct_Anchors_2) == 0x0001A8, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_MakeStruct_Anchors_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, CallFunc_AddChildToCanvas_ReturnValue_2) == 0x0001B8, "Member 'W_PreMission_PlanningMap_C_DrawLine::CallFunc_AddChildToCanvas_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawLine, K2Node_MakeStruct_AnchorData_2) == 0x0001C0, "Member 'W_PreMission_PlanningMap_C_DrawLine::K2Node_MakeStruct_AnchorData_2' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.UpdatePreviewLine
// 0x0050 (0x0050 - 0x0000)
struct W_PreMission_PlanningMap_C_UpdatePreviewLine final 
{
public:
	struct FVector2D                              MousePos;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      PointsCopy;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	struct FVector2D                              LastPoint;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3415[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanningLine                          K2Node_MakeStruct_PlanningLine;                    // 0x0028(0x0028)()
};
static_assert(alignof(W_PreMission_PlanningMap_C_UpdatePreviewLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_UpdatePreviewLine");
static_assert(sizeof(W_PreMission_PlanningMap_C_UpdatePreviewLine) == 0x000050, "Wrong size on W_PreMission_PlanningMap_C_UpdatePreviewLine");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdatePreviewLine, MousePos) == 0x000000, "Member 'W_PreMission_PlanningMap_C_UpdatePreviewLine::MousePos' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdatePreviewLine, PointsCopy) == 0x000008, "Member 'W_PreMission_PlanningMap_C_UpdatePreviewLine::PointsCopy' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdatePreviewLine, LastPoint) == 0x000018, "Member 'W_PreMission_PlanningMap_C_UpdatePreviewLine::LastPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdatePreviewLine, CallFunc_Array_Add_ReturnValue) == 0x000020, "Member 'W_PreMission_PlanningMap_C_UpdatePreviewLine::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdatePreviewLine, K2Node_MakeStruct_PlanningLine) == 0x000028, "Member 'W_PreMission_PlanningMap_C_UpdatePreviewLine::K2Node_MakeStruct_PlanningLine' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetLineLength
// 0x0034 (0x0034 - 0x0000)
struct W_PreMission_PlanningMap_C_GetLineLength final 
{
public:
	struct FVector2D                              PointA;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PointB;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetSize_Absolute_ReturnValue;       // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue_1;  // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Distance2D_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GetLineLength) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_GetLineLength");
static_assert(sizeof(W_PreMission_PlanningMap_C_GetLineLength) == 0x000034, "Wrong size on W_PreMission_PlanningMap_C_GetLineLength");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, PointA) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GetLineLength::PointA' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, PointB) == 0x000008, "Member 'W_PreMission_PlanningMap_C_GetLineLength::PointB' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, Length) == 0x000010, "Member 'W_PreMission_PlanningMap_C_GetLineLength::Length' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, CallFunc_GetWidgetSize_Absolute_ReturnValue) == 0x000014, "Member 'W_PreMission_PlanningMap_C_GetLineLength::CallFunc_GetWidgetSize_Absolute_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x00001C, "Member 'W_PreMission_PlanningMap_C_GetLineLength::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, CallFunc_Multiply_Vector2DVector2D_ReturnValue_1) == 0x000024, "Member 'W_PreMission_PlanningMap_C_GetLineLength::CallFunc_Multiply_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, CallFunc_Distance2D_ReturnValue) == 0x00002C, "Member 'W_PreMission_PlanningMap_C_GetLineLength::CallFunc_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineLength, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'W_PreMission_PlanningMap_C_GetLineLength::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetLineAngle
// 0x0054 (0x0054 - 0x0000)
struct W_PreMission_PlanningMap_C_GetLineAngle final 
{
public:
	struct FVector2D                              PointA;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PointB;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GetLineAngle) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_GetLineAngle");
static_assert(sizeof(W_PreMission_PlanningMap_C_GetLineAngle) == 0x000054, "Wrong size on W_PreMission_PlanningMap_C_GetLineAngle");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, PointA) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::PointA' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, PointB) == 0x000008, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::PointB' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, Angle) == 0x000010, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::Angle' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakVector2D_X) == 0x000014, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakVector2D_X_1) == 0x00001C, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakVector2D_Y_1) == 0x000020, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_MakeVector_ReturnValue) == 0x000024, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_MakeVector_ReturnValue_1) == 0x000030, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_FindLookAtRotation_ReturnValue) == 0x00003C, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakRotator_Roll) == 0x000048, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakRotator_Pitch) == 0x00004C, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetLineAngle, CallFunc_BreakRotator_Yaw) == 0x000050, "Member 'W_PreMission_PlanningMap_C_GetLineAngle::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetVectorOverThreshold
// 0x0028 (0x0028 - 0x0000)
struct W_PreMission_PlanningMap_C_GetVectorOverThreshold final 
{
public:
	struct FVector2D                              Delta;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Threshold;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3416[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GetVectorOverThreshold) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_C_GetVectorOverThreshold");
static_assert(sizeof(W_PreMission_PlanningMap_C_GetVectorOverThreshold) == 0x000028, "Wrong size on W_PreMission_PlanningMap_C_GetVectorOverThreshold");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, Delta) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::Delta' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, Threshold) == 0x000008, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::Threshold' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, ReturnValue) == 0x00000C, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, CallFunc_BreakVector2D_X) == 0x000010, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, CallFunc_BreakVector2D_Y) == 0x000014, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, CallFunc_Abs_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, CallFunc_Abs_ReturnValue_1) == 0x00001C, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, CallFunc_FMax_ReturnValue) == 0x000020, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetVectorOverThreshold, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000024, "Member 'W_PreMission_PlanningMap_C_GetVectorOverThreshold::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.EraseLine
// 0x0018 (0x0018 - 0x0000)
struct W_PreMission_PlanningMap_C_EraseLine final 
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3417[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_EraseLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_EraseLine");
static_assert(sizeof(W_PreMission_PlanningMap_C_EraseLine) == 0x000018, "Wrong size on W_PreMission_PlanningMap_C_EraseLine");
static_assert(offsetof(W_PreMission_PlanningMap_C_EraseLine, ID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_EraseLine::ID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_EraseLine, CallFunc_Map_Remove_ReturnValue) == 0x000004, "Member 'W_PreMission_PlanningMap_C_EraseLine::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_EraseLine, CallFunc_Map_Find_Value) == 0x000008, "Member 'W_PreMission_PlanningMap_C_EraseLine::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_EraseLine, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_EraseLine::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.LineStartNodeSelected
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_LineStartNodeSelected final 
{
public:
	class UW_OfficerMarker_C*                     OfficerMarker;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_LineStartNodeSelected) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_LineStartNodeSelected");
static_assert(sizeof(W_PreMission_PlanningMap_C_LineStartNodeSelected) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_LineStartNodeSelected");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineStartNodeSelected, OfficerMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_C_LineStartNodeSelected::OfficerMarker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.DrawMarker
// 0x0038 (0x0038 - 0x0000)
struct W_PreMission_PlanningMap_C_DrawMarker final 
{
public:
	int32                                         MarkerID;                                          // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningMarker                        MarkerData;                                        // 0x0004(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	uint8                                         Pad_3418[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_MapMarker_C*       Marker;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_DrawMarker) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_DrawMarker");
static_assert(sizeof(W_PreMission_PlanningMap_C_DrawMarker) == 0x000038, "Wrong size on W_PreMission_PlanningMap_C_DrawMarker");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawMarker, MarkerID) == 0x000000, "Member 'W_PreMission_PlanningMap_C_DrawMarker::MarkerID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawMarker, MarkerData) == 0x000004, "Member 'W_PreMission_PlanningMap_C_DrawMarker::MarkerData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_DrawMarker, Marker) == 0x000030, "Member 'W_PreMission_PlanningMap_C_DrawMarker::Marker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.StartMarkerRotation
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_StartMarkerRotation final 
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_StartMarkerRotation) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_StartMarkerRotation");
static_assert(sizeof(W_PreMission_PlanningMap_C_StartMarkerRotation) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_StartMarkerRotation");
static_assert(offsetof(W_PreMission_PlanningMap_C_StartMarkerRotation, TriggeringMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_C_StartMarkerRotation::TriggeringMarker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.EndMarkerRotation
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_C_EndMarkerRotation final 
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_EndMarkerRotation) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_EndMarkerRotation");
static_assert(sizeof(W_PreMission_PlanningMap_C_EndMarkerRotation) == 0x000010, "Wrong size on W_PreMission_PlanningMap_C_EndMarkerRotation");
static_assert(offsetof(W_PreMission_PlanningMap_C_EndMarkerRotation, TriggeringMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_C_EndMarkerRotation::TriggeringMarker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_EndMarkerRotation, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_C_EndMarkerRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_EndMarkerRotation, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000009, "Member 'W_PreMission_PlanningMap_C_EndMarkerRotation::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.RotateMarker
// 0x01A0 (0x01A0 - 0x0000)
struct W_PreMission_PlanningMap_C_RotateMarker final 
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       Param_RotatingMarker;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MousePos;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0060(0x0040)(HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3419[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00B0(0x0040)(HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341A[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0100(0x0040)(HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341B[0x4];                                     // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0150(0x0010)(ReferenceParm)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341C[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0170(0x0018)()
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341D[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_RotateMarker) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_RotateMarker");
static_assert(sizeof(W_PreMission_PlanningMap_C_RotateMarker) == 0x0001A0, "Wrong size on W_PreMission_PlanningMap_C_RotateMarker");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, Param_RotatingMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_C_RotateMarker::Param_RotatingMarker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, MousePos) == 0x000008, "Member 'W_PreMission_PlanningMap_C_RotateMarker::MousePos' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakVector2D_X) == 0x000010, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakVector2D_Y) == 0x000014, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakVector2D_X_1) == 0x000018, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakVector2D_Y_1) == 0x00001C, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'W_PreMission_PlanningMap_C_RotateMarker::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, K2Node_MakeStruct_FormatArgumentData_1) == 0x000060, "Member 'W_PreMission_PlanningMap_C_RotateMarker::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_MakeVector_ReturnValue) == 0x0000A0, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_RotateMarker::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_MakeVector_ReturnValue_1) == 0x0000F0, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, K2Node_MakeStruct_FormatArgumentData_3) == 0x000100, "Member 'W_PreMission_PlanningMap_C_RotateMarker::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_FindLookAtRotation_ReturnValue) == 0x000140, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, K2Node_MakeArray_Array) == 0x000150, "Member 'W_PreMission_PlanningMap_C_RotateMarker::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakRotator_Roll) == 0x000160, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakRotator_Pitch) == 0x000164, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_BreakRotator_Yaw) == 0x000168, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_Format_ReturnValue) == 0x000170, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_Add_FloatFloat_ReturnValue) == 0x000188, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RotateMarker, CallFunc_Conv_TextToString_ReturnValue) == 0x000190, "Member 'W_PreMission_PlanningMap_C_RotateMarker::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ChangeFloorByIndex
// 0x00D8 (0x00D8 - 0x0000)
struct W_PreMission_PlanningMap_C_ChangeFloorByIndex final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelFloorData                        FloorData;                                         // 0x0008(0x0080)(Edit, BlueprintVisible)
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0088(0x0010)(ReferenceParm)
	TArray<int32>                                 CallFunc_Map_Keys_Keys_1;                          // 0x0098(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item;                           // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341F[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_PlanningMap_Level_C*      CallFunc_Map_Find_Value;                           // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3420[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_GetLazyLoadedImage_ReturnValue;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Blueprint_GetSizeY_ReturnValue;           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ChangeFloorByIndex) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_ChangeFloorByIndex");
static_assert(sizeof(W_PreMission_PlanningMap_C_ChangeFloorByIndex) == 0x0000D8, "Wrong size on W_PreMission_PlanningMap_C_ChangeFloorByIndex");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, Param_Index) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, FloorData) == 0x000008, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::FloorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Map_Keys_Keys) == 0x000088, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Map_Keys_Keys_1) == 0x000098, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Map_Keys_Keys_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Map_Find_Value) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Map_Find_ReturnValue) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_IsValid_ReturnValue) == 0x0000B9, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_GetLazyLoadedImage_ReturnValue) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_GetLazyLoadedImage_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Blueprint_GetSizeY_ReturnValue) == 0x0000C8, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Blueprint_GetSizeY_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000CC, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByIndex, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByIndex::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.CreateMapLevelCanvas
// 0x00C8 (0x00C8 - 0x0000)
struct W_PreMission_PlanningMap_C_CreateMapLevelCanvas final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3421[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelFloor                            LevelData;                                         // 0x0008(0x0068)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UW_PreMission_PlanningMap_Level_C*      LevelCanvas;                                       // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, int32 FloorLevel, float Rotation)> K2Node_CreateDelegate_OutputDelegate;              // 0x0078(0x0010)(ZeroConstructor, NoDestructor)
	class UW_PreMission_PlanningMap_Level_C*      CallFunc_Create_ReturnValue;                       // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 LineID, class UCanvasPanel* LineCanvas)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0090(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(int32 MarkerID, class UW_PreMission_Tablet_MapMarker_C* Marker)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x00A0(0x0010)(ZeroConstructor, NoDestructor)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetSwitcherSlot*                    K2Node_DynamicCast_AsWidget_Switcher_Slot;         // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_CreateMapLevelCanvas");
static_assert(sizeof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas) == 0x0000C8, "Wrong size on W_PreMission_PlanningMap_C_CreateMapLevelCanvas");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, Param_Index) == 0x000000, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::Param_Index' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, LevelData) == 0x000008, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::LevelData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, LevelCanvas) == 0x000070, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::LevelCanvas' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, K2Node_CreateDelegate_OutputDelegate) == 0x000078, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, CallFunc_Create_ReturnValue) == 0x000088, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, K2Node_CreateDelegate_OutputDelegate_1) == 0x000090, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000A0, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, CallFunc_AddChild_ReturnValue) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, K2Node_DynamicCast_AsWidget_Switcher_Slot) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::K2Node_DynamicCast_AsWidget_Switcher_Slot' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateMapLevelCanvas, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_CreateMapLevelCanvas::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.LineStartNodeRightClicked
// 0x0020 (0x0020 - 0x0000)
struct W_PreMission_PlanningMap_C_LineStartNodeRightClicked final 
{
public:
	class UW_OfficerMarker_C*                     OfficerMarker;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_LineStartNodeRightClicked) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_LineStartNodeRightClicked");
static_assert(sizeof(W_PreMission_PlanningMap_C_LineStartNodeRightClicked) == 0x000020, "Wrong size on W_PreMission_PlanningMap_C_LineStartNodeRightClicked");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineStartNodeRightClicked, OfficerMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_C_LineStartNodeRightClicked::OfficerMarker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineStartNodeRightClicked, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_C_LineStartNodeRightClicked::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineStartNodeRightClicked, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_LineStartNodeRightClicked::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_LineStartNodeRightClicked, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_C_LineStartNodeRightClicked::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetCurrentLevelMap
// 0x0018 (0x0018 - 0x0000)
struct W_PreMission_PlanningMap_C_GetCurrentLevelMap final 
{
public:
	class UW_PreMission_PlanningMap_Level_C*      CurrentLevelCanvas;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_Level_C*      CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GetCurrentLevelMap) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_GetCurrentLevelMap");
static_assert(sizeof(W_PreMission_PlanningMap_C_GetCurrentLevelMap) == 0x000018, "Wrong size on W_PreMission_PlanningMap_C_GetCurrentLevelMap");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetCurrentLevelMap, CurrentLevelCanvas) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GetCurrentLevelMap::CurrentLevelCanvas' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetCurrentLevelMap, CallFunc_Map_Find_Value) == 0x000008, "Member 'W_PreMission_PlanningMap_C_GetCurrentLevelMap::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetCurrentLevelMap, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_GetCurrentLevelMap::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.RemovePreviewLine
// 0x0020 (0x0020 - 0x0000)
struct W_PreMission_PlanningMap_C_RemovePreviewLine final 
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3422[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_RemovePreviewLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_RemovePreviewLine");
static_assert(sizeof(W_PreMission_PlanningMap_C_RemovePreviewLine) == 0x000020, "Wrong size on W_PreMission_PlanningMap_C_RemovePreviewLine");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, Temp_int_Array_Index_Variable) == 0x000000, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, CallFunc_Array_Get_Item) == 0x000010, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_RemovePreviewLine, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'W_PreMission_PlanningMap_C_RemovePreviewLine::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.MarkerRotated
// 0x0038 (0x0038 - 0x0000)
struct W_PreMission_PlanningMap_C_MarkerRotated final 
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Floor;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningMarker                        K2Node_MakeStruct_PlanningMarker;                  // 0x0010(0x0028)(NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_MarkerRotated) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_MarkerRotated");
static_assert(sizeof(W_PreMission_PlanningMap_C_MarkerRotated) == 0x000038, "Wrong size on W_PreMission_PlanningMap_C_MarkerRotated");
static_assert(offsetof(W_PreMission_PlanningMap_C_MarkerRotated, TriggeringMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_C_MarkerRotated::TriggeringMarker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MarkerRotated, Floor) == 0x000008, "Member 'W_PreMission_PlanningMap_C_MarkerRotated::Floor' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MarkerRotated, Rotation) == 0x00000C, "Member 'W_PreMission_PlanningMap_C_MarkerRotated::Rotation' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MarkerRotated, K2Node_MakeStruct_PlanningMarker) == 0x000010, "Member 'W_PreMission_PlanningMap_C_MarkerRotated::K2Node_MakeStruct_PlanningMarker' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.MissionSetup
// 0x0830 (0x0830 - 0x0000)
struct W_PreMission_PlanningMap_C_MissionSetup final 
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  LevelData;                                         // 0x0010(0x0788)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0798(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3423[0x3];                                     // 0x0799(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x079C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x07A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x07A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StringNotEmpty_ReturnValue;               // 0x07A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3424[0x2];                                     // 0x07A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x07AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLevelFloor                            CallFunc_Array_Get_Item;                           // 0x07B0(0x0068)()
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0818(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3425[0x3];                                     // 0x0819(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x081C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0820(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StrStr_ReturnValue;              // 0x0828(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_MissionSetup) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_MissionSetup");
static_assert(sizeof(W_PreMission_PlanningMap_C_MissionSetup) == 0x000830, "Wrong size on W_PreMission_PlanningMap_C_MissionSetup");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, URL) == 0x000000, "Member 'W_PreMission_PlanningMap_C_MissionSetup::URL' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, LevelData) == 0x000010, "Member 'W_PreMission_PlanningMap_C_MissionSetup::LevelData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000798, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Array_Length_ReturnValue) == 0x00079C, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Array_Length_ReturnValue_1) == 0x0007A0, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Greater_IntInt_ReturnValue) == 0x0007A4, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_StringNotEmpty_ReturnValue) == 0x0007A5, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_StringNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, Temp_int_Array_Index_Variable) == 0x0007A8, "Member 'W_PreMission_PlanningMap_C_MissionSetup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, Temp_int_Loop_Counter_Variable) == 0x0007AC, "Member 'W_PreMission_PlanningMap_C_MissionSetup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Array_Get_Item) == 0x0007B0, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Less_IntInt_ReturnValue) == 0x000818, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_Add_IntInt_ReturnValue) == 0x00081C, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000820, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_MissionSetup, CallFunc_NotEqual_StrStr_ReturnValue) == 0x000828, "Member 'W_PreMission_PlanningMap_C_MissionSetup::CallFunc_NotEqual_StrStr_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ZoomOnCursor
// 0x0128 (0x0128 - 0x0000)
struct W_PreMission_PlanningMap_C_ZoomOnCursor final 
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	float                                         PreviousZoom;                                      // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewZoom;                                           // 0x00AC(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3426[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3427[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_AbsoluteToLocal_ReturnValue;              // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue_1;                // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_1;  // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_2;  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ZoomOnCursor) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_ZoomOnCursor");
static_assert(sizeof(W_PreMission_PlanningMap_C_ZoomOnCursor) == 0x000128, "Wrong size on W_PreMission_PlanningMap_C_ZoomOnCursor");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, Geometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::Geometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, PointerEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::PointerEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, PreviousZoom) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::PreviousZoom' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, NewZoom) == 0x0000AC, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::NewZoom' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_GetPosition_ReturnValue) == 0x0000C4, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0000CC, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1) == 0x0000D8, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_AbsoluteToLocal_ReturnValue) == 0x0000E0, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_AbsoluteToLocal_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_GetLocalSize_ReturnValue) == 0x0000E8, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x0000F0, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x0000F8, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000100, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_GetPosition_ReturnValue_1) == 0x000108, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_GetPosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Subtract_Vector2DVector2D_ReturnValue_1) == 0x000110, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Subtract_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x000118, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ZoomOnCursor, CallFunc_Subtract_Vector2DVector2D_ReturnValue_2) == 0x000120, "Member 'W_PreMission_PlanningMap_C_ZoomOnCursor::CallFunc_Subtract_Vector2DVector2D_ReturnValue_2' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.ChangeFloorByNumber
// 0x0098 (0x0098 - 0x0000)
struct W_PreMission_PlanningMap_C_ChangeFloorByNumber final 
{
public:
	int32                                         FloorNumber;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3428[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelFloorData                        FloorData;                                         // 0x0008(0x0080)(Edit, BlueprintVisible)
	class UW_PreMission_PlanningMap_Level_C*      CallFunc_Map_Find_Value;                           // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_ChangeFloorByNumber) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_ChangeFloorByNumber");
static_assert(sizeof(W_PreMission_PlanningMap_C_ChangeFloorByNumber) == 0x000098, "Wrong size on W_PreMission_PlanningMap_C_ChangeFloorByNumber");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByNumber, FloorNumber) == 0x000000, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByNumber::FloorNumber' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByNumber, FloorData) == 0x000008, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByNumber::FloorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByNumber, CallFunc_Map_Find_Value) == 0x000088, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByNumber::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_ChangeFloorByNumber, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'W_PreMission_PlanningMap_C_ChangeFloorByNumber::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.UpdateEntryPointSelection
// 0x00C8 (0x00C8 - 0x0000)
struct W_PreMission_PlanningMap_C_UpdateEntryPointSelection final 
{
public:
	struct FEntryPoint                            EntryPointData;                                    // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3429[0x2];                                     // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_342A[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_342B[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0090(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_342C[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_EntryPoint_C*      K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Entry_Point; // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_342D[0x1];                                     // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_UpdateEntryPointSelection");
static_assert(sizeof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection) == 0x0000C8, "Wrong size on W_PreMission_PlanningMap_C_UpdateEntryPointSelection");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, EntryPointData) == 0x000000, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::EntryPointData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, Temp_bool_True_if_break_was_hit_Variable) == 0x000078, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, CallFunc_Not_PreBool_ReturnValue) == 0x000079, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, Temp_int_Array_Index_Variable) == 0x00007C, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, Temp_int_Loop_Counter_Variable) == 0x000080, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, CallFunc_IsValid_ReturnValue) == 0x000084, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, CallFunc_Add_IntInt_ReturnValue) == 0x000088, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, CallFunc_GetAllChildren_ReturnValue) == 0x000090, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, CallFunc_IsValid_ReturnValue_1) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Entry_Point) == 0x0000B0, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Entry_Point' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0000B9, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000BA, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, CallFunc_Array_Length_ReturnValue) == 0x0000BC, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, CallFunc_Less_IntInt_ReturnValue) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_UpdateEntryPointSelection, CallFunc_BooleanAND_ReturnValue) == 0x0000C1, "Member 'W_PreMission_PlanningMap_C_UpdateEntryPointSelection::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.CreateEntryPoints
// 0x0920 (0x0920 - 0x0000)
struct W_PreMission_PlanningMap_C_CreateEntryPoints final 
{
public:
	struct FLevelDataLookupTable                  LevelDataLookupTable;                              // 0x0000(0x0788)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TDelegate<void(class UW_PreMission_Tablet_EntryPoint_C* Clicked)> OnEntryPointSelected;                              // 0x0788(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	class FName                                   PointTag;                                          // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   PointName;                                         // 0x07A0(0x0018)(Edit, BlueprintVisible)
	TArray<struct FEntryPoint>                    EntryPoints;                                       // 0x07B8(0x0010)(Edit, BlueprintVisible)
	class UW_PreMission_Tablet_EntryPoint_C*      NewEntryPoint;                                     // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x07D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x07D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x07D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x07DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x07E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_342E[0x4];                                     // 0x07E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelFloor                            CallFunc_Array_Get_Item;                           // 0x07E8(0x0068)()
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0850(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0854(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0858(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0859(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_342F[0x6];                                     // 0x085A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_EntryPoint_C*      CallFunc_Create_ReturnValue;                       // 0x0860(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetSelectedMode_OutMode;                  // 0x0868(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSelectedMode_ReturnValue;              // 0x0878(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECOOPMode                                     CallFunc_GetCoopModeFromModeName_ReturnValue;      // 0x0879(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x087A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3430[0x1];                                     // 0x087B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x087C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEntryPoint                            CallFunc_Array_Get_Item_1;                         // 0x0880(0x0078)()
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x08F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x08F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x08FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3431[0x1];                                     // 0x08FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x08FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0900(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0904(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3432[0x3];                                     // 0x0905(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue;        // 0x0908(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0910(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_CreateEntryPoints) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_CreateEntryPoints");
static_assert(sizeof(W_PreMission_PlanningMap_C_CreateEntryPoints) == 0x000920, "Wrong size on W_PreMission_PlanningMap_C_CreateEntryPoints");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, LevelDataLookupTable) == 0x000000, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::LevelDataLookupTable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, OnEntryPointSelected) == 0x000788, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::OnEntryPointSelected' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, PointTag) == 0x000798, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::PointTag' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, PointName) == 0x0007A0, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::PointName' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, EntryPoints) == 0x0007B8, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::EntryPoints' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, NewEntryPoint) == 0x0007C8, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::NewEntryPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, Temp_int_Loop_Counter_Variable) == 0x0007D0, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Add_IntInt_ReturnValue) == 0x0007D4, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Array_Length_ReturnValue) == 0x0007D8, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, Temp_int_Array_Index_Variable) == 0x0007DC, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, Temp_int_Array_Index_Variable_1) == 0x0007E0, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Array_Get_Item) == 0x0007E8, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Array_Length_ReturnValue_1) == 0x000850, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Array_Length_ReturnValue_2) == 0x000854, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000858, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Greater_IntInt_ReturnValue) == 0x000859, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Create_ReturnValue) == 0x000860, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_GetSelectedMode_OutMode) == 0x000868, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_GetSelectedMode_OutMode' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_GetSelectedMode_ReturnValue) == 0x000878, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_GetSelectedMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_GetCoopModeFromModeName_ReturnValue) == 0x000879, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_GetCoopModeFromModeName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00087A, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, Temp_int_Loop_Counter_Variable_1) == 0x00087C, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Array_Get_Item_1) == 0x000880, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Less_IntInt_ReturnValue) == 0x0008F8, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Array_Contains_ReturnValue) == 0x0008F9, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Not_PreBool_ReturnValue) == 0x0008FA, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Add_IntInt_ReturnValue_1) == 0x0008FC, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Array_Length_ReturnValue_3) == 0x000900, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_Less_IntInt_ReturnValue_1) == 0x000904, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, CallFunc_AddChildToVerticalBox_ReturnValue) == 0x000908, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::CallFunc_AddChildToVerticalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_CreateEntryPoints, K2Node_MakeStruct_Margin) == 0x000910, "Member 'W_PreMission_PlanningMap_C_CreateEntryPoints::K2Node_MakeStruct_Margin' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.IsValidEntryPoint
// 0x0030 (0x0030 - 0x0000)
struct W_PreMission_PlanningMap_C_IsValidEntryPoint final 
{
public:
	TArray<ECOOPMode>                             ExcludedGameModes;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3433[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSelectedMode_OutMode;                  // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSelectedMode_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECOOPMode                                     CallFunc_GetCoopModeFromModeName_ReturnValue;      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_IsValidEntryPoint) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_IsValidEntryPoint");
static_assert(sizeof(W_PreMission_PlanningMap_C_IsValidEntryPoint) == 0x000030, "Wrong size on W_PreMission_PlanningMap_C_IsValidEntryPoint");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, ExcludedGameModes) == 0x000000, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::ExcludedGameModes' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, IsValid) == 0x000010, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::IsValid' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, CallFunc_GetSelectedMode_OutMode) == 0x000018, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::CallFunc_GetSelectedMode_OutMode' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, CallFunc_GetSelectedMode_ReturnValue) == 0x000028, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::CallFunc_GetSelectedMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, CallFunc_GetCoopModeFromModeName_ReturnValue) == 0x000029, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::CallFunc_GetCoopModeFromModeName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, CallFunc_Array_Contains_ReturnValue) == 0x00002A, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_IsValidEntryPoint, CallFunc_Not_PreBool_ReturnValue) == 0x00002B, "Member 'W_PreMission_PlanningMap_C_IsValidEntryPoint::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.HandleEntryPointsBorderClicked
// 0x0218 (0x0218 - 0x0000)
struct W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0160(0x00B8)()
};
static_assert(alignof(W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked");
static_assert(sizeof(W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked) == 0x000218, "Wrong size on W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked, MyGeometry) == 0x000000, "Member 'W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked, MouseEvent) == 0x000038, "Member 'W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked, ReturnValue) == 0x0000A8, "Member 'W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked, CallFunc_Handled_ReturnValue) == 0x000160, "Member 'W_PreMission_PlanningMap_C_HandleEntryPointsBorderClicked::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.HandleGamepad
// 0x0158 (0x0158 - 0x0000)
struct W_PreMission_PlanningMap_C_HandleGamepad final 
{
public:
	struct FEventReply                            CallFunc_SetLinePart_ReturnValue;                  // 0x0000(0x00B8)()
	struct FVector2D                              CallFunc_GetGamepadMidPoint_Coordinates;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadMidPoint_Coordinates_1;         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetSize_Absolute_ReturnValue;       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetSize_Absolute_ReturnValue_1;     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotPlayerController*            CallFunc_GetReadyOrNotPlayerController_ReturnValue; // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressed_ReturnValue;       // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WasInputKeyJustPressed_ReturnValue_1;     // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WasInputKeyJustPressed_ReturnValue_2;     // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3434[0x1];                                     // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInputAnalogStickState_StickX;          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputAnalogStickState_StickY;          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressed_ReturnValue_3;     // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3435[0x3];                                     // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x014C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressed_ReturnValue_4;     // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WasInputKeyJustPressed_ReturnValue_5;     // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_HandleGamepad) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_HandleGamepad");
static_assert(sizeof(W_PreMission_PlanningMap_C_HandleGamepad) == 0x000158, "Wrong size on W_PreMission_PlanningMap_C_HandleGamepad");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_SetLinePart_ReturnValue) == 0x000000, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_SetLinePart_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_GetGamepadMidPoint_Coordinates) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_GetGamepadMidPoint_Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_GetGamepadMidPoint_Coordinates_1) == 0x0000C0, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_GetGamepadMidPoint_Coordinates_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000C8, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000CC, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_GetWidgetSize_Absolute_ReturnValue) == 0x0000D0, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_GetWidgetSize_Absolute_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x0000D8, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_GetWidgetSize_Absolute_ReturnValue_1) == 0x0000E0, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_GetWidgetSize_Absolute_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x0000E8, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x0000F0, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_GetPosition_ReturnValue) == 0x0000F8, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_BreakVector2D_X) == 0x000100, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_BreakVector2D_Y) == 0x000104, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_BreakVector2D_X_1) == 0x000108, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_BreakVector2D_Y_1) == 0x00010C, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000110, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000114, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_GetReadyOrNotPlayerController_ReturnValue) == 0x000118, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_GetReadyOrNotPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_WasInputKeyJustPressed_ReturnValue) == 0x000120, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_WasInputKeyJustPressed_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_WasInputKeyJustPressed_ReturnValue_1) == 0x000121, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_WasInputKeyJustPressed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_WasInputKeyJustPressed_ReturnValue_2) == 0x000122, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_WasInputKeyJustPressed_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_GetInputAnalogStickState_StickX) == 0x000124, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_GetInputAnalogStickState_StickX' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_GetInputAnalogStickState_StickY) == 0x000128, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_GetInputAnalogStickState_StickY' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00012C, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000130, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_Add_FloatFloat_ReturnValue) == 0x000134, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000138, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_FClamp_ReturnValue) == 0x00013C, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000140, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_WasInputKeyJustPressed_ReturnValue_3) == 0x000144, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_WasInputKeyJustPressed_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_FClamp_ReturnValue_1) == 0x000148, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_MakeVector2D_ReturnValue) == 0x00014C, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_WasInputKeyJustPressed_ReturnValue_4) == 0x000154, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_WasInputKeyJustPressed_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_HandleGamepad, CallFunc_WasInputKeyJustPressed_ReturnValue_5) == 0x000155, "Member 'W_PreMission_PlanningMap_C_HandleGamepad::CallFunc_WasInputKeyJustPressed_ReturnValue_5' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetGamepadMidPoint
// 0x0038 (0x0038 - 0x0000)
struct W_PreMission_PlanningMap_C_GetGamepadMidPoint final 
{
public:
	struct FVector2D                              Coordinates;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetSize_Absolute_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DFloat_ReturnValue;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GetGamepadMidPoint) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_GetGamepadMidPoint");
static_assert(sizeof(W_PreMission_PlanningMap_C_GetGamepadMidPoint) == 0x000038, "Wrong size on W_PreMission_PlanningMap_C_GetGamepadMidPoint");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, Coordinates) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, CallFunc_GetWidgetSize_Absolute_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::CallFunc_GetWidgetSize_Absolute_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, CallFunc_GetPosition_ReturnValue) == 0x000018, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, CallFunc_Subtract_Vector2DFloat_ReturnValue) == 0x000020, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::CallFunc_Subtract_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x000028, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetGamepadMidPoint, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000030, "Member 'W_PreMission_PlanningMap_C_GetGamepadMidPoint::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.SetLinePart
// 0x0230 (0x0230 - 0x0000)
struct W_PreMission_PlanningMap_C_SetLinePart final 
{
public:
	struct FEventReply                            ReturnValue;                                       // 0x0000(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00B8(0x00B8)()
	struct FEventReply                            CallFunc_ReleaseMouseCapture_ReturnValue;          // 0x0170(0x00B8)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_SetLinePart) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_SetLinePart");
static_assert(sizeof(W_PreMission_PlanningMap_C_SetLinePart) == 0x000230, "Wrong size on W_PreMission_PlanningMap_C_SetLinePart");
static_assert(offsetof(W_PreMission_PlanningMap_C_SetLinePart, ReturnValue) == 0x000000, "Member 'W_PreMission_PlanningMap_C_SetLinePart::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_SetLinePart, CallFunc_Handled_ReturnValue) == 0x0000B8, "Member 'W_PreMission_PlanningMap_C_SetLinePart::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_SetLinePart, CallFunc_ReleaseMouseCapture_ReturnValue) == 0x000170, "Member 'W_PreMission_PlanningMap_C_SetLinePart::CallFunc_ReleaseMouseCapture_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_SetLinePart, CallFunc_Array_Length_ReturnValue) == 0x000228, "Member 'W_PreMission_PlanningMap_C_SetLinePart::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_C_SetLinePart, CallFunc_Greater_IntInt_ReturnValue) == 0x00022C, "Member 'W_PreMission_PlanningMap_C_SetLinePart::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_PlanningMap_C_BackPage final 
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_C_BackPage) == 0x000001, "Wrong alignment on W_PreMission_PlanningMap_C_BackPage");
static_assert(sizeof(W_PreMission_PlanningMap_C_BackPage) == 0x000001, "Wrong size on W_PreMission_PlanningMap_C_BackPage");
static_assert(offsetof(W_PreMission_PlanningMap_C_BackPage, Handled) == 0x000000, "Member 'W_PreMission_PlanningMap_C_BackPage::Handled' has a wrong offset!");

// Function W_PreMission_PlanningMap.W_PreMission_PlanningMap_C.GetFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_C_GetFocusTarget final 
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_C_GetFocusTarget");
static_assert(sizeof(W_PreMission_PlanningMap_C_GetFocusTarget) == 0x000008, "Wrong size on W_PreMission_PlanningMap_C_GetFocusTarget");
static_assert(offsetof(W_PreMission_PlanningMap_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_PreMission_PlanningMap_C_GetFocusTarget::Focus' has a wrong offset!");

}

