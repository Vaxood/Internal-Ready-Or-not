#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Spinbox

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_Spinbox.W_Spinbox_C.OnValueChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_OnValueChanged__DelegateSignature final 
{
public:
	float                                         Param_Value;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_OnValueChanged__DelegateSignature) == 0x000004, "Wrong alignment on W_Spinbox_C_OnValueChanged__DelegateSignature");
static_assert(sizeof(W_Spinbox_C_OnValueChanged__DelegateSignature) == 0x000004, "Wrong size on W_Spinbox_C_OnValueChanged__DelegateSignature");
static_assert(offsetof(W_Spinbox_C_OnValueChanged__DelegateSignature, Param_Value) == 0x000000, "Member 'W_Spinbox_C_OnValueChanged__DelegateSignature::Param_Value' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.OnValueCommited__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_OnValueCommited__DelegateSignature final 
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextCommit                                   CommitMethod;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_OnValueCommited__DelegateSignature) == 0x000004, "Wrong alignment on W_Spinbox_C_OnValueCommited__DelegateSignature");
static_assert(sizeof(W_Spinbox_C_OnValueCommited__DelegateSignature) == 0x000008, "Wrong size on W_Spinbox_C_OnValueCommited__DelegateSignature");
static_assert(offsetof(W_Spinbox_C_OnValueCommited__DelegateSignature, InValue) == 0x000000, "Member 'W_Spinbox_C_OnValueCommited__DelegateSignature::InValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_OnValueCommited__DelegateSignature, CommitMethod) == 0x000004, "Member 'W_Spinbox_C_OnValueCommited__DelegateSignature::CommitMethod' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.OnEndSliderMovement__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_OnEndSliderMovement__DelegateSignature final 
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_OnEndSliderMovement__DelegateSignature) == 0x000004, "Wrong alignment on W_Spinbox_C_OnEndSliderMovement__DelegateSignature");
static_assert(sizeof(W_Spinbox_C_OnEndSliderMovement__DelegateSignature) == 0x000004, "Wrong size on W_Spinbox_C_OnEndSliderMovement__DelegateSignature");
static_assert(offsetof(W_Spinbox_C_OnEndSliderMovement__DelegateSignature, InValue) == 0x000000, "Member 'W_Spinbox_C_OnEndSliderMovement__DelegateSignature::InValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.ExecuteUbergraph_W_Spinbox
// 0x0028 (0x0028 - 0x0000)
struct W_Spinbox_C_ExecuteUbergraph_W_Spinbox final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_InValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_InValue_2;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextCommit                                   K2Node_ComponentBoundEvent_CommitMethod;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31AF[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button;                 // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_InValue_1;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox) == 0x000008, "Wrong alignment on W_Spinbox_C_ExecuteUbergraph_W_Spinbox");
static_assert(sizeof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox) == 0x000028, "Wrong size on W_Spinbox_C_ExecuteUbergraph_W_Spinbox");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, EntryPoint) == 0x000000, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_ComponentBoundEvent_InValue) == 0x000004, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_ComponentBoundEvent_InValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_ComponentBoundEvent_InValue_2) == 0x000008, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_ComponentBoundEvent_InValue_2' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_ComponentBoundEvent_CommitMethod) == 0x00000C, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_ComponentBoundEvent_CommitMethod' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_ComponentBoundEvent_Button) == 0x000010, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_ComponentBoundEvent_InValue_1) == 0x000018, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_ComponentBoundEvent_InValue_1' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, Temp_byte_Variable) == 0x00001C, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, Temp_bool_Variable) == 0x00001D, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, Temp_byte_Variable_1) == 0x00001E, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_Event_IsDesignTime) == 0x00001F, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_ExecuteUbergraph_W_Spinbox, K2Node_Select_Default) == 0x000020, "Member 'W_Spinbox_C_ExecuteUbergraph_W_Spinbox::K2Node_Select_Default' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature final 
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature");
static_assert(sizeof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature");
static_assert(offsetof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature, InValue) == 0x000000, "Member 'W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_0_OnSpinBoxValueChangedEvent__DelegateSignature::InValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Spinbox_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Spinbox_C_PreConstruct) == 0x000001, "Wrong alignment on W_Spinbox_C_PreConstruct");
static_assert(sizeof(W_Spinbox_C_PreConstruct) == 0x000001, "Wrong size on W_Spinbox_C_PreConstruct");
static_assert(offsetof(W_Spinbox_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Spinbox_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature final 
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature");
static_assert(sizeof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature");
static_assert(offsetof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature, InValue) == 0x000000, "Member 'W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_4_OnSpinBoxValueChangedEvent__DelegateSignature::InValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature final 
{
public:
	class UW_Button_C*                            Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature) == 0x000008, "Wrong alignment on W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature");
static_assert(sizeof(W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature) == 0x000008, "Wrong size on W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature");
static_assert(offsetof(W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature, Button) == 0x000000, "Member 'W_Spinbox_C_BndEvt__W_Spinbox_btn_Reset_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature::Button' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature final 
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextCommit                                   CommitMethod;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature) == 0x000004, "Wrong alignment on W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature");
static_assert(sizeof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature) == 0x000008, "Wrong size on W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature");
static_assert(offsetof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature, InValue) == 0x000000, "Member 'W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature::InValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature, CommitMethod) == 0x000004, "Member 'W_Spinbox_C_BndEvt__W_Spinbox_SpinBox_29_K2Node_ComponentBoundEvent_1_OnSpinBoxValueCommittedEvent__DelegateSignature::CommitMethod' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.UpdateValue
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_UpdateValue final 
{
public:
	float                                         Param_Value;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_UpdateValue) == 0x000004, "Wrong alignment on W_Spinbox_C_UpdateValue");
static_assert(sizeof(W_Spinbox_C_UpdateValue) == 0x000004, "Wrong size on W_Spinbox_C_UpdateValue");
static_assert(offsetof(W_Spinbox_C_UpdateValue, Param_Value) == 0x000000, "Member 'W_Spinbox_C_UpdateValue::Param_Value' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetValue
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_SetValue final 
{
public:
	float                                         Param_Value;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_SetValue) == 0x000004, "Wrong alignment on W_Spinbox_C_SetValue");
static_assert(sizeof(W_Spinbox_C_SetValue) == 0x000004, "Wrong size on W_Spinbox_C_SetValue");
static_assert(offsetof(W_Spinbox_C_SetValue, Param_Value) == 0x000000, "Member 'W_Spinbox_C_SetValue::Param_Value' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetDefaultValue
// 0x0008 (0x0008 - 0x0000)
struct W_Spinbox_C_SetDefaultValue final 
{
public:
	float                                         Param_DefaultValue;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowResetButton;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Spinbox_C_SetDefaultValue) == 0x000004, "Wrong alignment on W_Spinbox_C_SetDefaultValue");
static_assert(sizeof(W_Spinbox_C_SetDefaultValue) == 0x000008, "Wrong size on W_Spinbox_C_SetDefaultValue");
static_assert(offsetof(W_Spinbox_C_SetDefaultValue, Param_DefaultValue) == 0x000000, "Member 'W_Spinbox_C_SetDefaultValue::Param_DefaultValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_SetDefaultValue, ShowResetButton) == 0x000004, "Member 'W_Spinbox_C_SetDefaultValue::ShowResetButton' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.UpdateResetButton
// 0x0014 (0x0014 - 0x0000)
struct W_Spinbox_C_UpdateResetButton final 
{
public:
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_UpdateResetButton) == 0x000004, "Wrong alignment on W_Spinbox_C_UpdateResetButton");
static_assert(sizeof(W_Spinbox_C_UpdateResetButton) == 0x000014, "Wrong size on W_Spinbox_C_UpdateResetButton");
static_assert(offsetof(W_Spinbox_C_UpdateResetButton, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'W_Spinbox_C_UpdateResetButton::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Spinbox_C_UpdateResetButton, CallFunc_SelectColor_ReturnValue) == 0x000004, "Member 'W_Spinbox_C_UpdateResetButton::CallFunc_SelectColor_ReturnValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetMinValue
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_SetMinValue final 
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_SetMinValue) == 0x000004, "Wrong alignment on W_Spinbox_C_SetMinValue");
static_assert(sizeof(W_Spinbox_C_SetMinValue) == 0x000004, "Wrong size on W_Spinbox_C_SetMinValue");
static_assert(offsetof(W_Spinbox_C_SetMinValue, NewValue) == 0x000000, "Member 'W_Spinbox_C_SetMinValue::NewValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_SetMaxValue final 
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_SetMaxValue) == 0x000004, "Wrong alignment on W_Spinbox_C_SetMaxValue");
static_assert(sizeof(W_Spinbox_C_SetMaxValue) == 0x000004, "Wrong size on W_Spinbox_C_SetMaxValue");
static_assert(offsetof(W_Spinbox_C_SetMaxValue, NewValue) == 0x000000, "Member 'W_Spinbox_C_SetMaxValue::NewValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetMinSliderValue
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_SetMinSliderValue final 
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_SetMinSliderValue) == 0x000004, "Wrong alignment on W_Spinbox_C_SetMinSliderValue");
static_assert(sizeof(W_Spinbox_C_SetMinSliderValue) == 0x000004, "Wrong size on W_Spinbox_C_SetMinSliderValue");
static_assert(offsetof(W_Spinbox_C_SetMinSliderValue, NewValue) == 0x000000, "Member 'W_Spinbox_C_SetMinSliderValue::NewValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.SetMaxSliderValue
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_SetMaxSliderValue final 
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_SetMaxSliderValue) == 0x000004, "Wrong alignment on W_Spinbox_C_SetMaxSliderValue");
static_assert(sizeof(W_Spinbox_C_SetMaxSliderValue) == 0x000004, "Wrong size on W_Spinbox_C_SetMaxSliderValue");
static_assert(offsetof(W_Spinbox_C_SetMaxSliderValue, NewValue) == 0x000000, "Member 'W_Spinbox_C_SetMaxSliderValue::NewValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.GetMinValue
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_GetMinValue final 
{
public:
	float                                         Param_MinimumValue;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_GetMinValue) == 0x000004, "Wrong alignment on W_Spinbox_C_GetMinValue");
static_assert(sizeof(W_Spinbox_C_GetMinValue) == 0x000004, "Wrong size on W_Spinbox_C_GetMinValue");
static_assert(offsetof(W_Spinbox_C_GetMinValue, Param_MinimumValue) == 0x000000, "Member 'W_Spinbox_C_GetMinValue::Param_MinimumValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.GetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_GetMaxValue final 
{
public:
	float                                         Param_MaximumValue;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_GetMaxValue) == 0x000004, "Wrong alignment on W_Spinbox_C_GetMaxValue");
static_assert(sizeof(W_Spinbox_C_GetMaxValue) == 0x000004, "Wrong size on W_Spinbox_C_GetMaxValue");
static_assert(offsetof(W_Spinbox_C_GetMaxValue, Param_MaximumValue) == 0x000000, "Member 'W_Spinbox_C_GetMaxValue::Param_MaximumValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.GetMinSliderValue
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_GetMinSliderValue final 
{
public:
	float                                         Param_MinimumSliderValue;                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_GetMinSliderValue) == 0x000004, "Wrong alignment on W_Spinbox_C_GetMinSliderValue");
static_assert(sizeof(W_Spinbox_C_GetMinSliderValue) == 0x000004, "Wrong size on W_Spinbox_C_GetMinSliderValue");
static_assert(offsetof(W_Spinbox_C_GetMinSliderValue, Param_MinimumSliderValue) == 0x000000, "Member 'W_Spinbox_C_GetMinSliderValue::Param_MinimumSliderValue' has a wrong offset!");

// Function W_Spinbox.W_Spinbox_C.GetMaxSliderValue
// 0x0004 (0x0004 - 0x0000)
struct W_Spinbox_C_GetMaxSliderValue final 
{
public:
	float                                         Param_MaximumSliderValue;                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Spinbox_C_GetMaxSliderValue) == 0x000004, "Wrong alignment on W_Spinbox_C_GetMaxSliderValue");
static_assert(sizeof(W_Spinbox_C_GetMaxSliderValue) == 0x000004, "Wrong size on W_Spinbox_C_GetMaxSliderValue");
static_assert(offsetof(W_Spinbox_C_GetMaxSliderValue, Param_MaximumSliderValue) == 0x000000, "Member 'W_Spinbox_C_GetMaxSliderValue::Param_MaximumSliderValue' has a wrong offset!");

}

