#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Text

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "ST_Style_Text_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function W_Text.W_Text_C.ExecuteUbergraph_W_Text
// 0x00F8 (0x00F8 - 0x0000)
struct W_Text_C_ExecuteUbergraph_W_Text final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401C[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401D[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_RemoveSpacesFromString_ReturnString;      // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_RemoveSpacesFromString_ReturnText;        // 0x0030(0x0018)()
	class FName                                   CallFunc_RemoveSpacesFromString_ReturnName;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_Style_Text                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0050(0x00A0)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_LinearColorLinearColor_ReturnValue; // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Text_C_ExecuteUbergraph_W_Text) == 0x000008, "Wrong alignment on W_Text_C_ExecuteUbergraph_W_Text");
static_assert(sizeof(W_Text_C_ExecuteUbergraph_W_Text) == 0x0000F8, "Wrong size on W_Text_C_ExecuteUbergraph_W_Text");
static_assert(offsetof(W_Text_C_ExecuteUbergraph_W_Text, EntryPoint) == 0x000000, "Member 'W_Text_C_ExecuteUbergraph_W_Text::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Text_C_ExecuteUbergraph_W_Text, K2Node_Event_IsDesignTime) == 0x000004, "Member 'W_Text_C_ExecuteUbergraph_W_Text::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_Text_C_ExecuteUbergraph_W_Text, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000008, "Member 'W_Text_C_ExecuteUbergraph_W_Text::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_ExecuteUbergraph_W_Text, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'W_Text_C_ExecuteUbergraph_W_Text::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_ExecuteUbergraph_W_Text, CallFunc_RemoveSpacesFromString_ReturnString) == 0x000020, "Member 'W_Text_C_ExecuteUbergraph_W_Text::CallFunc_RemoveSpacesFromString_ReturnString' has a wrong offset!");
static_assert(offsetof(W_Text_C_ExecuteUbergraph_W_Text, CallFunc_RemoveSpacesFromString_ReturnText) == 0x000030, "Member 'W_Text_C_ExecuteUbergraph_W_Text::CallFunc_RemoveSpacesFromString_ReturnText' has a wrong offset!");
static_assert(offsetof(W_Text_C_ExecuteUbergraph_W_Text, CallFunc_RemoveSpacesFromString_ReturnName) == 0x000048, "Member 'W_Text_C_ExecuteUbergraph_W_Text::CallFunc_RemoveSpacesFromString_ReturnName' has a wrong offset!");
static_assert(offsetof(W_Text_C_ExecuteUbergraph_W_Text, CallFunc_GetDataTableRowFromName_OutRow) == 0x000050, "Member 'W_Text_C_ExecuteUbergraph_W_Text::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(W_Text_C_ExecuteUbergraph_W_Text, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000F0, "Member 'W_Text_C_ExecuteUbergraph_W_Text::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_ExecuteUbergraph_W_Text, CallFunc_NotEqual_LinearColorLinearColor_ReturnValue) == 0x0000F1, "Member 'W_Text_C_ExecuteUbergraph_W_Text::CallFunc_NotEqual_LinearColorLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_ExecuteUbergraph_W_Text, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000F2, "Member 'W_Text_C_ExecuteUbergraph_W_Text::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function W_Text.W_Text_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Text_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Text_C_PreConstruct) == 0x000001, "Wrong alignment on W_Text_C_PreConstruct");
static_assert(sizeof(W_Text_C_PreConstruct) == 0x000001, "Wrong size on W_Text_C_PreConstruct");
static_assert(offsetof(W_Text_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Text_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Text.W_Text_C.SetText
// 0x0030 (0x0030 - 0x0000)
struct W_Text_C_SetText final 
{
public:
	class FText                                   Param_Text;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   CallFunc_TruncateText_TruncatedText;               // 0x0018(0x0018)()
};
static_assert(alignof(W_Text_C_SetText) == 0x000008, "Wrong alignment on W_Text_C_SetText");
static_assert(sizeof(W_Text_C_SetText) == 0x000030, "Wrong size on W_Text_C_SetText");
static_assert(offsetof(W_Text_C_SetText, Param_Text) == 0x000000, "Member 'W_Text_C_SetText::Param_Text' has a wrong offset!");
static_assert(offsetof(W_Text_C_SetText, CallFunc_TruncateText_TruncatedText) == 0x000018, "Member 'W_Text_C_SetText::CallFunc_TruncateText_TruncatedText' has a wrong offset!");

// Function W_Text.W_Text_C.SetStyle
// 0x00A0 (0x00A0 - 0x0000)
struct W_Text_C_SetStyle final 
{
public:
	struct FST_Style_Text                         Param_TextStyle;                                   // 0x0000(0x00A0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(W_Text_C_SetStyle) == 0x000008, "Wrong alignment on W_Text_C_SetStyle");
static_assert(sizeof(W_Text_C_SetStyle) == 0x0000A0, "Wrong size on W_Text_C_SetStyle");
static_assert(offsetof(W_Text_C_SetStyle, Param_TextStyle) == 0x000000, "Member 'W_Text_C_SetStyle::Param_TextStyle' has a wrong offset!");

// Function W_Text.W_Text_C.UpdateFont
// 0x0058 (0x0058 - 0x0000)
struct W_Text_C_UpdateFont final 
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0000(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(W_Text_C_UpdateFont) == 0x000008, "Wrong alignment on W_Text_C_UpdateFont");
static_assert(sizeof(W_Text_C_UpdateFont) == 0x000058, "Wrong size on W_Text_C_UpdateFont");
static_assert(offsetof(W_Text_C_UpdateFont, Font) == 0x000000, "Member 'W_Text_C_UpdateFont::Font' has a wrong offset!");

// Function W_Text.W_Text_C.TruncateText
// 0x00D8 (0x00D8 - 0x0000)
struct W_Text_C_TruncateText final 
{
public:
	bool                                          Param_Truncate;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_CharacterLimit;                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Param_TruncationCharacters;                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   TruncatedText;                                     // 0x0018(0x0018)(Parm, OutParm)
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401F[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4020[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Left_ReturnValue;                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Len_ReturnValue_1;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4021[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Left_ReturnValue_1;                       // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EndsWith_ReturnValue;                     // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4022[0x5];                                     // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00A8(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x00C0(0x0018)()
};
static_assert(alignof(W_Text_C_TruncateText) == 0x000008, "Wrong alignment on W_Text_C_TruncateText");
static_assert(sizeof(W_Text_C_TruncateText) == 0x0000D8, "Wrong size on W_Text_C_TruncateText");
static_assert(offsetof(W_Text_C_TruncateText, Param_Truncate) == 0x000000, "Member 'W_Text_C_TruncateText::Param_Truncate' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, Param_CharacterLimit) == 0x000004, "Member 'W_Text_C_TruncateText::Param_CharacterLimit' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, Param_TruncationCharacters) == 0x000008, "Member 'W_Text_C_TruncateText::Param_TruncationCharacters' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, TruncatedText) == 0x000018, "Member 'W_Text_C_TruncateText::TruncatedText' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_Len_ReturnValue) == 0x000030, "Member 'W_Text_C_TruncateText::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_Subtract_IntInt_ReturnValue) == 0x000034, "Member 'W_Text_C_TruncateText::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000038, "Member 'W_Text_C_TruncateText::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_Conv_TextToString_ReturnValue) == 0x000040, "Member 'W_Text_C_TruncateText::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, Temp_bool_Variable) == 0x000050, "Member 'W_Text_C_TruncateText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_Left_ReturnValue) == 0x000058, "Member 'W_Text_C_TruncateText::CallFunc_Left_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_Len_ReturnValue_1) == 0x000068, "Member 'W_Text_C_TruncateText::CallFunc_Len_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_Left_ReturnValue_1) == 0x000070, "Member 'W_Text_C_TruncateText::CallFunc_Left_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_Greater_IntInt_ReturnValue) == 0x000080, "Member 'W_Text_C_TruncateText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_EndsWith_ReturnValue) == 0x000081, "Member 'W_Text_C_TruncateText::CallFunc_EndsWith_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_BooleanAND_ReturnValue) == 0x000082, "Member 'W_Text_C_TruncateText::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_SelectString_ReturnValue) == 0x000088, "Member 'W_Text_C_TruncateText::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_Concat_StrStr_ReturnValue) == 0x000098, "Member 'W_Text_C_TruncateText::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, CallFunc_Conv_StringToText_ReturnValue) == 0x0000A8, "Member 'W_Text_C_TruncateText::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Text_C_TruncateText, K2Node_Select_Default) == 0x0000C0, "Member 'W_Text_C_TruncateText::K2Node_Select_Default' has a wrong offset!");

// Function W_Text.W_Text_C.UpdateText
// 0x0018 (0x0018 - 0x0000)
struct W_Text_C_UpdateText final 
{
public:
	class FText                                   Param_Text;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_Text_C_UpdateText) == 0x000008, "Wrong alignment on W_Text_C_UpdateText");
static_assert(sizeof(W_Text_C_UpdateText) == 0x000018, "Wrong size on W_Text_C_UpdateText");
static_assert(offsetof(W_Text_C_UpdateText, Param_Text) == 0x000000, "Member 'W_Text_C_UpdateText::Param_Text' has a wrong offset!");

// Function W_Text.W_Text_C.GetText
// 0x0018 (0x0018 - 0x0000)
struct W_Text_C_GetText final 
{
public:
	class FText                                   Param_CurrentText;                                 // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(W_Text_C_GetText) == 0x000008, "Wrong alignment on W_Text_C_GetText");
static_assert(sizeof(W_Text_C_GetText) == 0x000018, "Wrong size on W_Text_C_GetText");
static_assert(offsetof(W_Text_C_GetText, Param_CurrentText) == 0x000000, "Member 'W_Text_C_GetText::Param_CurrentText' has a wrong offset!");

// Function W_Text.W_Text_C.SetTextColor
// 0x0038 (0x0038 - 0x0000)
struct W_Text_C_SetTextColor final 
{
public:
	struct FLinearColor                           Param_Color;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0010(0x0028)()
};
static_assert(alignof(W_Text_C_SetTextColor) == 0x000008, "Wrong alignment on W_Text_C_SetTextColor");
static_assert(sizeof(W_Text_C_SetTextColor) == 0x000038, "Wrong size on W_Text_C_SetTextColor");
static_assert(offsetof(W_Text_C_SetTextColor, Param_Color) == 0x000000, "Member 'W_Text_C_SetTextColor::Param_Color' has a wrong offset!");
static_assert(offsetof(W_Text_C_SetTextColor, K2Node_MakeStruct_SlateColor) == 0x000010, "Member 'W_Text_C_SetTextColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function W_Text.W_Text_C.SetTextLetterSpacing
// 0x0060 (0x0060 - 0x0000)
struct W_Text_C_SetTextLetterSpacing final 
{
public:
	int32                                         Param_LetterSpacing;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4023[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0008(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(W_Text_C_SetTextLetterSpacing) == 0x000008, "Wrong alignment on W_Text_C_SetTextLetterSpacing");
static_assert(sizeof(W_Text_C_SetTextLetterSpacing) == 0x000060, "Wrong size on W_Text_C_SetTextLetterSpacing");
static_assert(offsetof(W_Text_C_SetTextLetterSpacing, Param_LetterSpacing) == 0x000000, "Member 'W_Text_C_SetTextLetterSpacing::Param_LetterSpacing' has a wrong offset!");
static_assert(offsetof(W_Text_C_SetTextLetterSpacing, K2Node_MakeStruct_SlateFontInfo) == 0x000008, "Member 'W_Text_C_SetTextLetterSpacing::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function W_Text.W_Text_C.SetTextShadow
// 0x0018 (0x0018 - 0x0000)
struct W_Text_C_SetTextShadow final 
{
public:
	struct FVector2D                              Param_ShadowOffset;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Param_ShadowColor;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Text_C_SetTextShadow) == 0x000004, "Wrong alignment on W_Text_C_SetTextShadow");
static_assert(sizeof(W_Text_C_SetTextShadow) == 0x000018, "Wrong size on W_Text_C_SetTextShadow");
static_assert(offsetof(W_Text_C_SetTextShadow, Param_ShadowOffset) == 0x000000, "Member 'W_Text_C_SetTextShadow::Param_ShadowOffset' has a wrong offset!");
static_assert(offsetof(W_Text_C_SetTextShadow, Param_ShadowColor) == 0x000008, "Member 'W_Text_C_SetTextShadow::Param_ShadowColor' has a wrong offset!");

// Function W_Text.W_Text_C.SetTextTransform
// 0x0001 (0x0001 - 0x0000)
struct W_Text_C_SetTextTransform final 
{
public:
	ETextTransformPolicy                          TextTransform;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Text_C_SetTextTransform) == 0x000001, "Wrong alignment on W_Text_C_SetTextTransform");
static_assert(sizeof(W_Text_C_SetTextTransform) == 0x000001, "Wrong size on W_Text_C_SetTextTransform");
static_assert(offsetof(W_Text_C_SetTextTransform, TextTransform) == 0x000000, "Member 'W_Text_C_SetTextTransform::TextTransform' has a wrong offset!");

// Function W_Text.W_Text_C.SetFontSize
// 0x0060 (0x0060 - 0x0000)
struct W_Text_C_SetFontSize final 
{
public:
	int32                                         Param_FontSize;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4024[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0008(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(W_Text_C_SetFontSize) == 0x000008, "Wrong alignment on W_Text_C_SetFontSize");
static_assert(sizeof(W_Text_C_SetFontSize) == 0x000060, "Wrong size on W_Text_C_SetFontSize");
static_assert(offsetof(W_Text_C_SetFontSize, Param_FontSize) == 0x000000, "Member 'W_Text_C_SetFontSize::Param_FontSize' has a wrong offset!");
static_assert(offsetof(W_Text_C_SetFontSize, K2Node_MakeStruct_SlateFontInfo) == 0x000008, "Member 'W_Text_C_SetFontSize::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function W_Text.W_Text_C.SetFont
// 0x00F8 (0x00F8 - 0x0000)
struct W_Text_C_SetFont final 
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0000(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FST_Style_Text                         K2Node_MakeStruct_ST_Style_Text;                   // 0x0058(0x00A0)(HasGetValueTypeHash)
};
static_assert(alignof(W_Text_C_SetFont) == 0x000008, "Wrong alignment on W_Text_C_SetFont");
static_assert(sizeof(W_Text_C_SetFont) == 0x0000F8, "Wrong size on W_Text_C_SetFont");
static_assert(offsetof(W_Text_C_SetFont, Font) == 0x000000, "Member 'W_Text_C_SetFont::Font' has a wrong offset!");
static_assert(offsetof(W_Text_C_SetFont, K2Node_MakeStruct_ST_Style_Text) == 0x000058, "Member 'W_Text_C_SetFont::K2Node_MakeStruct_ST_Style_Text' has a wrong offset!");

// Function W_Text.W_Text_C.SetOutline
// 0x0078 (0x0078 - 0x0000)
struct W_Text_C_SetOutline final 
{
public:
	struct FFontOutlineSettings                   FontOutlineSettings;                               // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0020(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(W_Text_C_SetOutline) == 0x000008, "Wrong alignment on W_Text_C_SetOutline");
static_assert(sizeof(W_Text_C_SetOutline) == 0x000078, "Wrong size on W_Text_C_SetOutline");
static_assert(offsetof(W_Text_C_SetOutline, FontOutlineSettings) == 0x000000, "Member 'W_Text_C_SetOutline::FontOutlineSettings' has a wrong offset!");
static_assert(offsetof(W_Text_C_SetOutline, K2Node_MakeStruct_SlateFontInfo) == 0x000020, "Member 'W_Text_C_SetOutline::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function W_Text.W_Text_C.SetTextJustification
// 0x0001 (0x0001 - 0x0000)
struct W_Text_C_SetTextJustification final 
{
public:
	ETextJustify                                  Param_Justification;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Text_C_SetTextJustification) == 0x000001, "Wrong alignment on W_Text_C_SetTextJustification");
static_assert(sizeof(W_Text_C_SetTextJustification) == 0x000001, "Wrong size on W_Text_C_SetTextJustification");
static_assert(offsetof(W_Text_C_SetTextJustification, Param_Justification) == 0x000000, "Member 'W_Text_C_SetTextJustification::Param_Justification' has a wrong offset!");

}

