#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Briefing_Audio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_Briefing_Audio.W_Briefing_Audio_C.ExecuteUbergraph_W_Briefing_Audio
// 0x00E0 (0x00E0 - 0x0000)
struct W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_ClipStartTime;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMissionAudio                          K2Node_CustomEvent_Audio;                          // 0x0010(0x0060)(ConstParm)
	TArray<struct FTimelineEvent>                 K2Node_CustomEvent_TimelineEvents;                 // 0x0070(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x008C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_355D[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_ComponentBoundEvent_EventID;                // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_EventAudioStart;        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_EventAudioDuration;     // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio) == 0x000008, "Wrong alignment on W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio");
static_assert(sizeof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio) == 0x0000E0, "Wrong size on W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, EntryPoint) == 0x000000, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, K2Node_ComponentBoundEvent_ClipStartTime) == 0x000004, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::K2Node_ComponentBoundEvent_ClipStartTime' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, K2Node_CustomEvent_Audio) == 0x000010, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::K2Node_CustomEvent_Audio' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, K2Node_CustomEvent_TimelineEvents) == 0x000070, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::K2Node_CustomEvent_TimelineEvents' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000080, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, CallFunc_SelectFloat_ReturnValue) == 0x000084, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, CallFunc_FClamp_ReturnValue) == 0x000088, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, K2Node_Event_MyGeometry) == 0x00008C, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, K2Node_Event_InDeltaTime) == 0x0000C4, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, K2Node_Event_IsDesignTime) == 0x0000C8, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, K2Node_ComponentBoundEvent_EventID) == 0x0000CC, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::K2Node_ComponentBoundEvent_EventID' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, K2Node_ComponentBoundEvent_EventAudioStart) == 0x0000D0, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::K2Node_ComponentBoundEvent_EventAudioStart' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, K2Node_ComponentBoundEvent_EventAudioDuration) == 0x0000D4, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::K2Node_ComponentBoundEvent_EventAudioDuration' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000D8, "Member 'W_Briefing_Audio_C_ExecuteUbergraph_W_Briefing_Audio::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.BndEvt__Events_K2Node_ComponentBoundEvent_15_OnEventClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_Briefing_Audio_C_BndEvt__Events_K2Node_ComponentBoundEvent_15_OnEventClicked__DelegateSignature final 
{
public:
	float                                         EventAudioStart;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EventAudioDuration;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Audio_C_BndEvt__Events_K2Node_ComponentBoundEvent_15_OnEventClicked__DelegateSignature) == 0x000004, "Wrong alignment on W_Briefing_Audio_C_BndEvt__Events_K2Node_ComponentBoundEvent_15_OnEventClicked__DelegateSignature");
static_assert(sizeof(W_Briefing_Audio_C_BndEvt__Events_K2Node_ComponentBoundEvent_15_OnEventClicked__DelegateSignature) == 0x000008, "Wrong size on W_Briefing_Audio_C_BndEvt__Events_K2Node_ComponentBoundEvent_15_OnEventClicked__DelegateSignature");
static_assert(offsetof(W_Briefing_Audio_C_BndEvt__Events_K2Node_ComponentBoundEvent_15_OnEventClicked__DelegateSignature, EventAudioStart) == 0x000000, "Member 'W_Briefing_Audio_C_BndEvt__Events_K2Node_ComponentBoundEvent_15_OnEventClicked__DelegateSignature::EventAudioStart' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_BndEvt__Events_K2Node_ComponentBoundEvent_15_OnEventClicked__DelegateSignature, EventAudioDuration) == 0x000004, "Member 'W_Briefing_Audio_C_BndEvt__Events_K2Node_ComponentBoundEvent_15_OnEventClicked__DelegateSignature::EventAudioDuration' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.BndEvt__W_Briefing_Timeline_TrackWave_Simple_K2Node_ComponentBoundEvent_13_TimelineEventFired__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct W_Briefing_Audio_C_BndEvt__W_Briefing_Timeline_TrackWave_Simple_K2Node_ComponentBoundEvent_13_TimelineEventFired__DelegateSignature final 
{
public:
	float                                         EventId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Audio_C_BndEvt__W_Briefing_Timeline_TrackWave_Simple_K2Node_ComponentBoundEvent_13_TimelineEventFired__DelegateSignature) == 0x000004, "Wrong alignment on W_Briefing_Audio_C_BndEvt__W_Briefing_Timeline_TrackWave_Simple_K2Node_ComponentBoundEvent_13_TimelineEventFired__DelegateSignature");
static_assert(sizeof(W_Briefing_Audio_C_BndEvt__W_Briefing_Timeline_TrackWave_Simple_K2Node_ComponentBoundEvent_13_TimelineEventFired__DelegateSignature) == 0x000004, "Wrong size on W_Briefing_Audio_C_BndEvt__W_Briefing_Timeline_TrackWave_Simple_K2Node_ComponentBoundEvent_13_TimelineEventFired__DelegateSignature");
static_assert(offsetof(W_Briefing_Audio_C_BndEvt__W_Briefing_Timeline_TrackWave_Simple_K2Node_ComponentBoundEvent_13_TimelineEventFired__DelegateSignature, EventId) == 0x000000, "Member 'W_Briefing_Audio_C_BndEvt__W_Briefing_Timeline_TrackWave_Simple_K2Node_ComponentBoundEvent_13_TimelineEventFired__DelegateSignature::EventId' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Briefing_Audio_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Briefing_Audio_C_PreConstruct) == 0x000001, "Wrong alignment on W_Briefing_Audio_C_PreConstruct");
static_assert(sizeof(W_Briefing_Audio_C_PreConstruct) == 0x000001, "Wrong size on W_Briefing_Audio_C_PreConstruct");
static_assert(offsetof(W_Briefing_Audio_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Briefing_Audio_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_Briefing_Audio_C_Tick final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Audio_C_Tick) == 0x000004, "Wrong alignment on W_Briefing_Audio_C_Tick");
static_assert(sizeof(W_Briefing_Audio_C_Tick) == 0x00003C, "Wrong size on W_Briefing_Audio_C_Tick");
static_assert(offsetof(W_Briefing_Audio_C_Tick, MyGeometry) == 0x000000, "Member 'W_Briefing_Audio_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_Tick, InDeltaTime) == 0x000038, "Member 'W_Briefing_Audio_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.Initialize
// 0x0070 (0x0070 - 0x0000)
struct W_Briefing_Audio_C_Initialize final 
{
public:
	struct FMissionAudio                          Audio;                                             // 0x0000(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
	TArray<struct FTimelineEvent>                 Param_TimelineEvents;                              // 0x0060(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_Briefing_Audio_C_Initialize) == 0x000008, "Wrong alignment on W_Briefing_Audio_C_Initialize");
static_assert(sizeof(W_Briefing_Audio_C_Initialize) == 0x000070, "Wrong size on W_Briefing_Audio_C_Initialize");
static_assert(offsetof(W_Briefing_Audio_C_Initialize, Audio) == 0x000000, "Member 'W_Briefing_Audio_C_Initialize::Audio' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_Initialize, Param_TimelineEvents) == 0x000060, "Member 'W_Briefing_Audio_C_Initialize::Param_TimelineEvents' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.BndEvt__W_Briefing_Transcript_K2Node_ComponentBoundEvent_7_TranscriptClicked__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct W_Briefing_Audio_C_BndEvt__W_Briefing_Transcript_K2Node_ComponentBoundEvent_7_TranscriptClicked__DelegateSignature final 
{
public:
	float                                         ClipStartTime;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Audio_C_BndEvt__W_Briefing_Transcript_K2Node_ComponentBoundEvent_7_TranscriptClicked__DelegateSignature) == 0x000004, "Wrong alignment on W_Briefing_Audio_C_BndEvt__W_Briefing_Transcript_K2Node_ComponentBoundEvent_7_TranscriptClicked__DelegateSignature");
static_assert(sizeof(W_Briefing_Audio_C_BndEvt__W_Briefing_Transcript_K2Node_ComponentBoundEvent_7_TranscriptClicked__DelegateSignature) == 0x000004, "Wrong size on W_Briefing_Audio_C_BndEvt__W_Briefing_Transcript_K2Node_ComponentBoundEvent_7_TranscriptClicked__DelegateSignature");
static_assert(offsetof(W_Briefing_Audio_C_BndEvt__W_Briefing_Transcript_K2Node_ComponentBoundEvent_7_TranscriptClicked__DelegateSignature, ClipStartTime) == 0x000000, "Member 'W_Briefing_Audio_C_BndEvt__W_Briefing_Transcript_K2Node_ComponentBoundEvent_7_TranscriptClicked__DelegateSignature::ClipStartTime' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.Play
// 0x000C (0x000C - 0x0000)
struct W_Briefing_Audio_C_Play final 
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Briefing_Audio_C_Play) == 0x000004, "Wrong alignment on W_Briefing_Audio_C_Play");
static_assert(sizeof(W_Briefing_Audio_C_Play) == 0x00000C, "Wrong size on W_Briefing_Audio_C_Play");
static_assert(offsetof(W_Briefing_Audio_C_Play, StartTime) == 0x000000, "Member 'W_Briefing_Audio_C_Play::StartTime' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_Play, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'W_Briefing_Audio_C_Play::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_Play, CallFunc_IsPlaying_ReturnValue) == 0x000008, "Member 'W_Briefing_Audio_C_Play::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.GetTimerText
// 0x0118 (0x0118 - 0x0000)
struct W_Briefing_Audio_C_GetTimerText final 
{
public:
	float                                         Time__sec_;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_355E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimerText;                                         // 0x0008(0x0018)(Parm, OutParm)
	struct FTimespan                              CallFunc_FromSeconds_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Days;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Hours;                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Minutes;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Seconds;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Milliseconds;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_355F[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0040(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0058(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0070(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00B0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00F0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0100(0x0018)()
};
static_assert(alignof(W_Briefing_Audio_C_GetTimerText) == 0x000008, "Wrong alignment on W_Briefing_Audio_C_GetTimerText");
static_assert(sizeof(W_Briefing_Audio_C_GetTimerText) == 0x000118, "Wrong size on W_Briefing_Audio_C_GetTimerText");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, Time__sec_) == 0x000000, "Member 'W_Briefing_Audio_C_GetTimerText::Time__sec_' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, TimerText) == 0x000008, "Member 'W_Briefing_Audio_C_GetTimerText::TimerText' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, CallFunc_FromSeconds_ReturnValue) == 0x000020, "Member 'W_Briefing_Audio_C_GetTimerText::CallFunc_FromSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, CallFunc_BreakTimespan_Days) == 0x000028, "Member 'W_Briefing_Audio_C_GetTimerText::CallFunc_BreakTimespan_Days' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, CallFunc_BreakTimespan_Hours) == 0x00002C, "Member 'W_Briefing_Audio_C_GetTimerText::CallFunc_BreakTimespan_Hours' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, CallFunc_BreakTimespan_Minutes) == 0x000030, "Member 'W_Briefing_Audio_C_GetTimerText::CallFunc_BreakTimespan_Minutes' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, CallFunc_BreakTimespan_Seconds) == 0x000034, "Member 'W_Briefing_Audio_C_GetTimerText::CallFunc_BreakTimespan_Seconds' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, CallFunc_BreakTimespan_Milliseconds) == 0x000038, "Member 'W_Briefing_Audio_C_GetTimerText::CallFunc_BreakTimespan_Milliseconds' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, CallFunc_Conv_IntToText_ReturnValue) == 0x000040, "Member 'W_Briefing_Audio_C_GetTimerText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000058, "Member 'W_Briefing_Audio_C_GetTimerText::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, K2Node_MakeStruct_FormatArgumentData) == 0x000070, "Member 'W_Briefing_Audio_C_GetTimerText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000B0, "Member 'W_Briefing_Audio_C_GetTimerText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, K2Node_MakeArray_Array) == 0x0000F0, "Member 'W_Briefing_Audio_C_GetTimerText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetTimerText, CallFunc_Format_ReturnValue) == 0x000100, "Member 'W_Briefing_Audio_C_GetTimerText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.Stop
// 0x0002 (0x0002 - 0x0000)
struct W_Briefing_Audio_C_Stop final 
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Briefing_Audio_C_Stop) == 0x000001, "Wrong alignment on W_Briefing_Audio_C_Stop");
static_assert(sizeof(W_Briefing_Audio_C_Stop) == 0x000002, "Wrong size on W_Briefing_Audio_C_Stop");
static_assert(offsetof(W_Briefing_Audio_C_Stop, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_Briefing_Audio_C_Stop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_Stop, CallFunc_IsPlaying_ReturnValue) == 0x000001, "Member 'W_Briefing_Audio_C_Stop::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.SetLoop
// 0x0001 (0x0001 - 0x0000)
struct W_Briefing_Audio_C_SetLoop final 
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Briefing_Audio_C_SetLoop) == 0x000001, "Wrong alignment on W_Briefing_Audio_C_SetLoop");
static_assert(sizeof(W_Briefing_Audio_C_SetLoop) == 0x000001, "Wrong size on W_Briefing_Audio_C_SetLoop");
static_assert(offsetof(W_Briefing_Audio_C_SetLoop, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'W_Briefing_Audio_C_SetLoop::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.SetAudioPlayProgress
// 0x0018 (0x0018 - 0x0000)
struct W_Briefing_Audio_C_SetAudioPlayProgress final 
{
public:
	class USoundWave*                             PlayingSoundWave;                                  // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlaybackPercent;                                   // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3560[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Audio_C_SetAudioPlayProgress) == 0x000008, "Wrong alignment on W_Briefing_Audio_C_SetAudioPlayProgress");
static_assert(sizeof(W_Briefing_Audio_C_SetAudioPlayProgress) == 0x000018, "Wrong size on W_Briefing_Audio_C_SetAudioPlayProgress");
static_assert(offsetof(W_Briefing_Audio_C_SetAudioPlayProgress, PlayingSoundWave) == 0x000000, "Member 'W_Briefing_Audio_C_SetAudioPlayProgress::PlayingSoundWave' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_SetAudioPlayProgress, PlaybackPercent) == 0x000008, "Member 'W_Briefing_Audio_C_SetAudioPlayProgress::PlaybackPercent' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_SetAudioPlayProgress, CallFunc_IsPlaying_ReturnValue) == 0x00000C, "Member 'W_Briefing_Audio_C_SetAudioPlayProgress::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_SetAudioPlayProgress, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'W_Briefing_Audio_C_SetAudioPlayProgress::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_SetAudioPlayProgress, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'W_Briefing_Audio_C_SetAudioPlayProgress::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.GetEventEntries
// 0x0118 (0x0118 - 0x0000)
struct W_Briefing_Audio_C_GetEventEntries final 
{
public:
	bool                                          ForceUpdate;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3561[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<float, struct FTimelineEvent>            EventEntries1;                                     // 0x0008(0x0050)(Parm, OutParm)
	bool                                          Initialized;                                       // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3562[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<float, struct FTimelineEvent>            EventEntries;                                      // 0x0060(0x0050)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3563[0x2];                                     // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimelineEvent                         CallFunc_Array_Get_Item;                           // 0x00C0(0x0050)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Briefing_Audio_C_GetEventEntries) == 0x000008, "Wrong alignment on W_Briefing_Audio_C_GetEventEntries");
static_assert(sizeof(W_Briefing_Audio_C_GetEventEntries) == 0x000118, "Wrong size on W_Briefing_Audio_C_GetEventEntries");
static_assert(offsetof(W_Briefing_Audio_C_GetEventEntries, ForceUpdate) == 0x000000, "Member 'W_Briefing_Audio_C_GetEventEntries::ForceUpdate' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetEventEntries, EventEntries1) == 0x000008, "Member 'W_Briefing_Audio_C_GetEventEntries::EventEntries1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetEventEntries, Initialized) == 0x000058, "Member 'W_Briefing_Audio_C_GetEventEntries::Initialized' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetEventEntries, EventEntries) == 0x000060, "Member 'W_Briefing_Audio_C_GetEventEntries::EventEntries' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetEventEntries, Temp_int_Array_Index_Variable) == 0x0000B0, "Member 'W_Briefing_Audio_C_GetEventEntries::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetEventEntries, Temp_int_Loop_Counter_Variable) == 0x0000B4, "Member 'W_Briefing_Audio_C_GetEventEntries::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetEventEntries, CallFunc_Add_IntInt_ReturnValue) == 0x0000B8, "Member 'W_Briefing_Audio_C_GetEventEntries::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetEventEntries, CallFunc_Not_PreBool_ReturnValue) == 0x0000BC, "Member 'W_Briefing_Audio_C_GetEventEntries::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetEventEntries, CallFunc_BooleanOR_ReturnValue) == 0x0000BD, "Member 'W_Briefing_Audio_C_GetEventEntries::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetEventEntries, CallFunc_Array_Get_Item) == 0x0000C0, "Member 'W_Briefing_Audio_C_GetEventEntries::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetEventEntries, CallFunc_Array_Length_ReturnValue) == 0x000110, "Member 'W_Briefing_Audio_C_GetEventEntries::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_GetEventEntries, CallFunc_Less_IntInt_ReturnValue) == 0x000114, "Member 'W_Briefing_Audio_C_GetEventEntries::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function W_Briefing_Audio.W_Briefing_Audio_C.Set Current Audio Text
// 0x00C8 (0x00C8 - 0x0000)
struct W_Briefing_Audio_C_Set_Current_Audio_Text final 
{
public:
	float                                         CurrentTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3564[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetTimerText_TimerText;                   // 0x0008(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0060(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B0(0x0018)()
};
static_assert(alignof(W_Briefing_Audio_C_Set_Current_Audio_Text) == 0x000008, "Wrong alignment on W_Briefing_Audio_C_Set_Current_Audio_Text");
static_assert(sizeof(W_Briefing_Audio_C_Set_Current_Audio_Text) == 0x0000C8, "Wrong size on W_Briefing_Audio_C_Set_Current_Audio_Text");
static_assert(offsetof(W_Briefing_Audio_C_Set_Current_Audio_Text, CurrentTime) == 0x000000, "Member 'W_Briefing_Audio_C_Set_Current_Audio_Text::CurrentTime' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_Set_Current_Audio_Text, CallFunc_GetTimerText_TimerText) == 0x000008, "Member 'W_Briefing_Audio_C_Set_Current_Audio_Text::CallFunc_GetTimerText_TimerText' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_Set_Current_Audio_Text, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'W_Briefing_Audio_C_Set_Current_Audio_Text::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_Set_Current_Audio_Text, K2Node_MakeStruct_FormatArgumentData_1) == 0x000060, "Member 'W_Briefing_Audio_C_Set_Current_Audio_Text::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_Set_Current_Audio_Text, K2Node_MakeArray_Array) == 0x0000A0, "Member 'W_Briefing_Audio_C_Set_Current_Audio_Text::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_Briefing_Audio_C_Set_Current_Audio_Text, CallFunc_Format_ReturnValue) == 0x0000B0, "Member 'W_Briefing_Audio_C_Set_Current_Audio_Text::CallFunc_Format_ReturnValue' has a wrong offset!");

}

