#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Text2LipSync

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum Text2LipSync.ELipSyncAnimType
// NumValues: 0x0003
enum class ELipSyncAnimType : uint8
{
	T_MorphTargets                           = 0,
	T_AnimCurves                             = 1,
	T_Max                                    = 2,
};

// Enum Text2LipSync.EPhoneme
// NumValues: 0x0012
enum class EPhoneme : uint8
{
	V_A                                      = 0,
	V_AH                                     = 1,
	V_B                                      = 2,
	V_C                                      = 3,
	V_CH                                     = 4,
	V_D                                      = 5,
	V_EH                                     = 6,
	V_F                                      = 7,
	V_I                                      = 8,
	V_K                                      = 9,
	V_N                                      = 10,
	V_OO                                     = 11,
	V_OW                                     = 12,
	V_R                                      = 13,
	V_Other                                  = 14,
	V_OtherVowel                             = 15,
	V_Pause                                  = 16,
	V_Max                                    = 17,
};

// ScriptStruct Text2LipSync.LipSync_Interval
// 0x0010 (0x0010 - 0x0000)
struct FLipSync_Interval final 
{
public:
	int32                                         PhonemeIndex;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Flag;                                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1685[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLipSync_Interval) == 0x000004, "Wrong alignment on FLipSync_Interval");
static_assert(sizeof(FLipSync_Interval) == 0x000010, "Wrong size on FLipSync_Interval");
static_assert(offsetof(FLipSync_Interval, PhonemeIndex) == 0x000000, "Member 'FLipSync_Interval::PhonemeIndex' has a wrong offset!");
static_assert(offsetof(FLipSync_Interval, StartTime) == 0x000004, "Member 'FLipSync_Interval::StartTime' has a wrong offset!");
static_assert(offsetof(FLipSync_Interval, EndTime) == 0x000008, "Member 'FLipSync_Interval::EndTime' has a wrong offset!");
static_assert(offsetof(FLipSync_Interval, Flag) == 0x00000C, "Member 'FLipSync_Interval::Flag' has a wrong offset!");

// ScriptStruct Text2LipSync.LipSync_Pause
// 0x0010 (0x0010 - 0x0000)
struct FLipSync_Pause final 
{
public:
	TArray<struct FLipSync_Interval>              Pauses;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLipSync_Pause) == 0x000008, "Wrong alignment on FLipSync_Pause");
static_assert(sizeof(FLipSync_Pause) == 0x000010, "Wrong size on FLipSync_Pause");
static_assert(offsetof(FLipSync_Pause, Pauses) == 0x000000, "Member 'FLipSync_Pause::Pauses' has a wrong offset!");

// ScriptStruct Text2LipSync.LipSync_TimedData
// 0x0020 (0x0020 - 0x0000)
struct FLipSync_TimedData final 
{
public:
	float                                         TimeOffset;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Data;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLipSync_TimedData) == 0x000008, "Wrong alignment on FLipSync_TimedData");
static_assert(sizeof(FLipSync_TimedData) == 0x000020, "Wrong size on FLipSync_TimedData");
static_assert(offsetof(FLipSync_TimedData, TimeOffset) == 0x000000, "Member 'FLipSync_TimedData::TimeOffset' has a wrong offset!");
static_assert(offsetof(FLipSync_TimedData, EndTime) == 0x000004, "Member 'FLipSync_TimedData::EndTime' has a wrong offset!");
static_assert(offsetof(FLipSync_TimedData, Data) == 0x000008, "Member 'FLipSync_TimedData::Data' has a wrong offset!");

// ScriptStruct Text2LipSync.LipSync_TimedPhrase
// 0x0010 (0x0010 - 0x0000)
struct FLipSync_TimedPhrase final 
{
public:
	float                                         TimeOffset;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemName;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Flag;                                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlagEmotion;                                       // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1686[0x2];                                     // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLipSync_TimedPhrase) == 0x000004, "Wrong alignment on FLipSync_TimedPhrase");
static_assert(sizeof(FLipSync_TimedPhrase) == 0x000010, "Wrong size on FLipSync_TimedPhrase");
static_assert(offsetof(FLipSync_TimedPhrase, TimeOffset) == 0x000000, "Member 'FLipSync_TimedPhrase::TimeOffset' has a wrong offset!");
static_assert(offsetof(FLipSync_TimedPhrase, ItemName) == 0x000004, "Member 'FLipSync_TimedPhrase::ItemName' has a wrong offset!");
static_assert(offsetof(FLipSync_TimedPhrase, Flag) == 0x00000C, "Member 'FLipSync_TimedPhrase::Flag' has a wrong offset!");
static_assert(offsetof(FLipSync_TimedPhrase, FlagEmotion) == 0x00000D, "Member 'FLipSync_TimedPhrase::FlagEmotion' has a wrong offset!");

// ScriptStruct Text2LipSync.LipSync_Phrase
// 0x0028 (0x0030 - 0x0008)
struct FLipSync_Phrase final  : public FTableRowBase
{
public:
	class USoundBase*                             VoiceAsset;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLipSync_TimedData>             Subtitles;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLipSync_TimedPhrase>           Notifies;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLipSync_Phrase) == 0x000008, "Wrong alignment on FLipSync_Phrase");
static_assert(sizeof(FLipSync_Phrase) == 0x000030, "Wrong size on FLipSync_Phrase");
static_assert(offsetof(FLipSync_Phrase, VoiceAsset) == 0x000008, "Member 'FLipSync_Phrase::VoiceAsset' has a wrong offset!");
static_assert(offsetof(FLipSync_Phrase, Subtitles) == 0x000010, "Member 'FLipSync_Phrase::Subtitles' has a wrong offset!");
static_assert(offsetof(FLipSync_Phrase, Notifies) == 0x000020, "Member 'FLipSync_Phrase::Notifies' has a wrong offset!");

// ScriptStruct Text2LipSync.LipSync_PhoneticRule
// 0x0030 (0x0030 - 0x0000)
struct FLipSync_PhoneticRule final 
{
public:
	bool                                          bCondition_IsFirst;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCondition_IsLast;                                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1687[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Condition_NextSymbol;                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EPhoneme>                              Result_Replace;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bResult_RemoveNext;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1688[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLipSync_PhoneticRule) == 0x000008, "Wrong alignment on FLipSync_PhoneticRule");
static_assert(sizeof(FLipSync_PhoneticRule) == 0x000030, "Wrong size on FLipSync_PhoneticRule");
static_assert(offsetof(FLipSync_PhoneticRule, bCondition_IsFirst) == 0x000000, "Member 'FLipSync_PhoneticRule::bCondition_IsFirst' has a wrong offset!");
static_assert(offsetof(FLipSync_PhoneticRule, bCondition_IsLast) == 0x000001, "Member 'FLipSync_PhoneticRule::bCondition_IsLast' has a wrong offset!");
static_assert(offsetof(FLipSync_PhoneticRule, Condition_NextSymbol) == 0x000008, "Member 'FLipSync_PhoneticRule::Condition_NextSymbol' has a wrong offset!");
static_assert(offsetof(FLipSync_PhoneticRule, Result_Replace) == 0x000018, "Member 'FLipSync_PhoneticRule::Result_Replace' has a wrong offset!");
static_assert(offsetof(FLipSync_PhoneticRule, bResult_RemoveNext) == 0x000028, "Member 'FLipSync_PhoneticRule::bResult_RemoveNext' has a wrong offset!");

// ScriptStruct Text2LipSync.LipSync_PhonemeInPhrase
// 0x0003 (0x0003 - 0x0000)
struct FLipSync_PhonemeInPhrase final 
{
public:
	EPhoneme                                      Value;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Flag;                                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlagEmotion;                                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLipSync_PhonemeInPhrase) == 0x000001, "Wrong alignment on FLipSync_PhonemeInPhrase");
static_assert(sizeof(FLipSync_PhonemeInPhrase) == 0x000003, "Wrong size on FLipSync_PhonemeInPhrase");
static_assert(offsetof(FLipSync_PhonemeInPhrase, Value) == 0x000000, "Member 'FLipSync_PhonemeInPhrase::Value' has a wrong offset!");
static_assert(offsetof(FLipSync_PhonemeInPhrase, Flag) == 0x000001, "Member 'FLipSync_PhonemeInPhrase::Flag' has a wrong offset!");
static_assert(offsetof(FLipSync_PhonemeInPhrase, FlagEmotion) == 0x000002, "Member 'FLipSync_PhonemeInPhrase::FlagEmotion' has a wrong offset!");

// ScriptStruct Text2LipSync.LipSync_MorphTarget
// 0x000C (0x000C - 0x0000)
struct FLipSync_MorphTarget final 
{
public:
	class FName                                   MorphTargetName;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLipSync_MorphTarget) == 0x000004, "Wrong alignment on FLipSync_MorphTarget");
static_assert(sizeof(FLipSync_MorphTarget) == 0x00000C, "Wrong size on FLipSync_MorphTarget");
static_assert(offsetof(FLipSync_MorphTarget, MorphTargetName) == 0x000000, "Member 'FLipSync_MorphTarget::MorphTargetName' has a wrong offset!");
static_assert(offsetof(FLipSync_MorphTarget, Value) == 0x000008, "Member 'FLipSync_MorphTarget::Value' has a wrong offset!");

// ScriptStruct Text2LipSync.LipSync_MorphPreset
// 0x0010 (0x0010 - 0x0000)
struct FLipSync_MorphPreset final 
{
public:
	TArray<struct FLipSync_MorphTarget>           Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLipSync_MorphPreset) == 0x000008, "Wrong alignment on FLipSync_MorphPreset");
static_assert(sizeof(FLipSync_MorphPreset) == 0x000010, "Wrong size on FLipSync_MorphPreset");
static_assert(offsetof(FLipSync_MorphPreset, Data) == 0x000000, "Member 'FLipSync_MorphPreset::Data' has a wrong offset!");

}

