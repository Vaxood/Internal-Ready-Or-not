#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ObjectPooler

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ObjectPooler_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class ObjectPooler.AsyncRetrieveActorFromPool
// 0x0020 (0x0050 - 0x0030)
class UAsyncRetrieveActorFromPool final  : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             Completed;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObjectPoolBase*                        ObjectPool;                                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APooledActor*                           RetrievedActor;                                    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UAsyncRetrieveActorFromPool* AsyncRetrieveActorFromPool(class UObject* WorldContextObject, class UObjectPoolBase* InObjectPool);

	void OnAsyncHandleRetrieveActor__DelegateSignature(class UObjectPoolBase* Param_ObjectPool, class APooledActor* Param_RetrievedActor, bool bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncRetrieveActorFromPool">();
	}
	static class UAsyncRetrieveActorFromPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncRetrieveActorFromPool>();
	}
};
static_assert(alignof(UAsyncRetrieveActorFromPool) == 0x000008, "Wrong alignment on UAsyncRetrieveActorFromPool");
static_assert(sizeof(UAsyncRetrieveActorFromPool) == 0x000050, "Wrong size on UAsyncRetrieveActorFromPool");
static_assert(offsetof(UAsyncRetrieveActorFromPool, Completed) == 0x000030, "Member 'UAsyncRetrieveActorFromPool::Completed' has a wrong offset!");
static_assert(offsetof(UAsyncRetrieveActorFromPool, ObjectPool) == 0x000040, "Member 'UAsyncRetrieveActorFromPool::ObjectPool' has a wrong offset!");
static_assert(offsetof(UAsyncRetrieveActorFromPool, RetrievedActor) == 0x000048, "Member 'UAsyncRetrieveActorFromPool::RetrievedActor' has a wrong offset!");

// Class ObjectPooler.AsyncRetrieveActorFromPool_Comp
// 0x0020 (0x0050 - 0x0030)
class UAsyncRetrieveActorFromPool_Comp final  : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             Completed;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObjectPoolComponent*                   ObjectPoolComponent;                               // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APooledActor*                           RetrievedActor;                                    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UAsyncRetrieveActorFromPool_Comp* AsyncRetrieveActorFromPool_Component(class UObject* WorldContextObject, class UObjectPoolComponent* InObjectPoolComponent);

	void OnAsyncHandleRetrieveActor__DelegateSignature(class UObjectPoolComponent* ObjectPool, class APooledActor* Param_RetrievedActor, bool bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncRetrieveActorFromPool_Comp">();
	}
	static class UAsyncRetrieveActorFromPool_Comp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncRetrieveActorFromPool_Comp>();
	}
};
static_assert(alignof(UAsyncRetrieveActorFromPool_Comp) == 0x000008, "Wrong alignment on UAsyncRetrieveActorFromPool_Comp");
static_assert(sizeof(UAsyncRetrieveActorFromPool_Comp) == 0x000050, "Wrong size on UAsyncRetrieveActorFromPool_Comp");
static_assert(offsetof(UAsyncRetrieveActorFromPool_Comp, Completed) == 0x000030, "Member 'UAsyncRetrieveActorFromPool_Comp::Completed' has a wrong offset!");
static_assert(offsetof(UAsyncRetrieveActorFromPool_Comp, ObjectPoolComponent) == 0x000040, "Member 'UAsyncRetrieveActorFromPool_Comp::ObjectPoolComponent' has a wrong offset!");
static_assert(offsetof(UAsyncRetrieveActorFromPool_Comp, RetrievedActor) == 0x000048, "Member 'UAsyncRetrieveActorFromPool_Comp::RetrievedActor' has a wrong offset!");

// Class ObjectPooler.ObjectPoolBase
// 0x00A8 (0x00D0 - 0x0028)
class UObjectPoolBase : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnActorRetrievedFromPool;                          // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnActorReturnedToPool;                             // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FName                                   OwningManagerName;                                 // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PoolName;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PoolSize;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EObjectPoolReuseSetting                       ReuseSetting;                                      // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19B3[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class APooledActor>               ObjectClassToPool;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bFillPoolOnBeginPlay : 1;                          // 0x0068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_19B4[0x1];                                     // 0x0069(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FObjectPoolWarmUpSetting               WarmUp;                                            // 0x006A(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_19B5[0x2];                                     // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlatformPoolSettings                  PS4;                                               // 0x0074(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPlatformPoolSettings                  PS5;                                               // 0x0080(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPlatformPoolSettings                  XboxOne;                                           // 0x008C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPlatformPoolSettings                  XboxSeries;                                        // 0x0098(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_19B6[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APooledActor*>                   PooledActors;                                      // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_19B7[0x18];                                    // 0x00B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddActorToPool(class APooledActor* NewPooledActor);
	void EmptyPool();
	void FillPool();
	class APooledActor* GetActorFromPool(EObjectPoolRetrieveActorResult* Results);
	void OnActorRetrievedFromPool__DelegateSignature(class UObjectPoolBase* PoolOwner, class APooledActor* Actor);
	void OnActorReturnedFromPool__DelegateSignature(class UObjectPoolBase* PoolOwner, class APooledActor* Actor);

	bool AreAllActorsInUse() const;
	TArray<class APooledActor*> GetPooledActors() const;
	class FName GetPoolName() const;
	int32 GetPoolSize() const;
	EObjectPoolReuseSetting GetReuseSetting() const;
	bool IsPoolEmpty() const;
	bool IsWarmUpComplete() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectPoolBase">();
	}
	static class UObjectPoolBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectPoolBase>();
	}
};
static_assert(alignof(UObjectPoolBase) == 0x000008, "Wrong alignment on UObjectPoolBase");
static_assert(sizeof(UObjectPoolBase) == 0x0000D0, "Wrong size on UObjectPoolBase");
static_assert(offsetof(UObjectPoolBase, OnActorRetrievedFromPool) == 0x000028, "Member 'UObjectPoolBase::OnActorRetrievedFromPool' has a wrong offset!");
static_assert(offsetof(UObjectPoolBase, OnActorReturnedToPool) == 0x000038, "Member 'UObjectPoolBase::OnActorReturnedToPool' has a wrong offset!");
static_assert(offsetof(UObjectPoolBase, OwningManagerName) == 0x000048, "Member 'UObjectPoolBase::OwningManagerName' has a wrong offset!");
static_assert(offsetof(UObjectPoolBase, PoolName) == 0x000050, "Member 'UObjectPoolBase::PoolName' has a wrong offset!");
static_assert(offsetof(UObjectPoolBase, PoolSize) == 0x000058, "Member 'UObjectPoolBase::PoolSize' has a wrong offset!");
static_assert(offsetof(UObjectPoolBase, ReuseSetting) == 0x00005C, "Member 'UObjectPoolBase::ReuseSetting' has a wrong offset!");
static_assert(offsetof(UObjectPoolBase, ObjectClassToPool) == 0x000060, "Member 'UObjectPoolBase::ObjectClassToPool' has a wrong offset!");
static_assert(offsetof(UObjectPoolBase, WarmUp) == 0x00006A, "Member 'UObjectPoolBase::WarmUp' has a wrong offset!");
static_assert(offsetof(UObjectPoolBase, PS4) == 0x000074, "Member 'UObjectPoolBase::PS4' has a wrong offset!");
static_assert(offsetof(UObjectPoolBase, PS5) == 0x000080, "Member 'UObjectPoolBase::PS5' has a wrong offset!");
static_assert(offsetof(UObjectPoolBase, XboxOne) == 0x00008C, "Member 'UObjectPoolBase::XboxOne' has a wrong offset!");
static_assert(offsetof(UObjectPoolBase, XboxSeries) == 0x000098, "Member 'UObjectPoolBase::XboxSeries' has a wrong offset!");
static_assert(offsetof(UObjectPoolBase, PooledActors) == 0x0000A8, "Member 'UObjectPoolBase::PooledActors' has a wrong offset!");

// Class ObjectPooler.ObjectPoolComponent
// 0x0070 (0x0120 - 0x00B0)
class UObjectPoolComponent final  : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnActorRetrievedFromPool;                          // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnActorReturnedToPool;                             // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FName                                   PoolName;                                          // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoolSize;                                          // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectPoolReuseSetting                       ReuseSetting;                                      // 0x00DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B9[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class APooledActor>               ObjectClassToPool;                                 // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFillPoolOnBeginPlay : 1;                          // 0x00E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19BA[0x1];                                     // 0x00E9(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FObjectPoolWarmUpSetting               WarmUp;                                            // 0x00EA(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19BB[0x6];                                     // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APooledActor*>                   PooledActors;                                      // 0x00F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_19BC[0x18];                                    // 0x0108(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddActorToPool(class APooledActor* NewPooledActor);
	void EmptyPool();
	void FillPool();
	class APooledActor* GetActorFromPool(EObjectPoolRetrieveActorResult* Results);
	void OnActorRetrievedFromPool__DelegateSignature(class UObjectPoolComponent* PoolOwner, class APooledActor* Actor);
	void OnActorReturnedFromPool__DelegateSignature(class UObjectPoolComponent* PoolOwner, class APooledActor* Actor);

	bool AreAllActorsInUse() const;
	class FName GetPoolName() const;
	int32 GetPoolSize() const;
	bool IsPoolEmpty() const;
	bool IsWarmUpComplete() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectPoolComponent">();
	}
	static class UObjectPoolComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectPoolComponent>();
	}
};
static_assert(alignof(UObjectPoolComponent) == 0x000008, "Wrong alignment on UObjectPoolComponent");
static_assert(sizeof(UObjectPoolComponent) == 0x000120, "Wrong size on UObjectPoolComponent");
static_assert(offsetof(UObjectPoolComponent, OnActorRetrievedFromPool) == 0x0000B0, "Member 'UObjectPoolComponent::OnActorRetrievedFromPool' has a wrong offset!");
static_assert(offsetof(UObjectPoolComponent, OnActorReturnedToPool) == 0x0000C0, "Member 'UObjectPoolComponent::OnActorReturnedToPool' has a wrong offset!");
static_assert(offsetof(UObjectPoolComponent, PoolName) == 0x0000D0, "Member 'UObjectPoolComponent::PoolName' has a wrong offset!");
static_assert(offsetof(UObjectPoolComponent, PoolSize) == 0x0000D8, "Member 'UObjectPoolComponent::PoolSize' has a wrong offset!");
static_assert(offsetof(UObjectPoolComponent, ReuseSetting) == 0x0000DC, "Member 'UObjectPoolComponent::ReuseSetting' has a wrong offset!");
static_assert(offsetof(UObjectPoolComponent, ObjectClassToPool) == 0x0000E0, "Member 'UObjectPoolComponent::ObjectClassToPool' has a wrong offset!");
static_assert(offsetof(UObjectPoolComponent, WarmUp) == 0x0000EA, "Member 'UObjectPoolComponent::WarmUp' has a wrong offset!");
static_assert(offsetof(UObjectPoolComponent, PooledActors) == 0x0000F8, "Member 'UObjectPoolComponent::PooledActors' has a wrong offset!");

// Class ObjectPooler.ObjectPoolerSettings
// 0x0010 (0x0038 - 0x0028)
class UObjectPoolerSettings final  : public UObject
{
public:
	TArray<struct FObjectPoolManager>             ObjectPoolManagers;                                // 0x0028(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectPoolerSettings">();
	}
	static class UObjectPoolerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectPoolerSettings>();
	}
};
static_assert(alignof(UObjectPoolerSettings) == 0x000008, "Wrong alignment on UObjectPoolerSettings");
static_assert(sizeof(UObjectPoolerSettings) == 0x000038, "Wrong size on UObjectPoolerSettings");
static_assert(offsetof(UObjectPoolerSettings, ObjectPoolManagers) == 0x000028, "Member 'UObjectPoolerSettings::ObjectPoolManagers' has a wrong offset!");

// Class ObjectPooler.ObjectPoolerWorldSubsystem
// 0x0028 (0x0058 - 0x0030)
class UObjectPoolerWorldSubsystem final  : public UWorldSubsystem
{
public:
	uint8                                         Pad_19BE[0x8];                                     // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnObjectPoolsInitialized;                          // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UObjectPoolBase*>                ObjectPools;                                       // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void DestroyObjectPools();
	void InitializeObjectPools();
	void OnObjectPoolsInitialized__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectPoolerWorldSubsystem">();
	}
	static class UObjectPoolerWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectPoolerWorldSubsystem>();
	}
};
static_assert(alignof(UObjectPoolerWorldSubsystem) == 0x000008, "Wrong alignment on UObjectPoolerWorldSubsystem");
static_assert(sizeof(UObjectPoolerWorldSubsystem) == 0x000058, "Wrong size on UObjectPoolerWorldSubsystem");
static_assert(offsetof(UObjectPoolerWorldSubsystem, OnObjectPoolsInitialized) == 0x000038, "Member 'UObjectPoolerWorldSubsystem::OnObjectPoolsInitialized' has a wrong offset!");
static_assert(offsetof(UObjectPoolerWorldSubsystem, ObjectPools) == 0x000048, "Member 'UObjectPoolerWorldSubsystem::ObjectPools' has a wrong offset!");

// Class ObjectPooler.ObjectPoolFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UObjectPoolFunctionLibrary final  : public UBlueprintFunctionLibrary
{
public:
	static void DestroyAllObjectPools();
	static bool DoesObjectPoolExist(class FName PoolName);
	static int32 GetActivePooledActorCount(class UObject* WorldContext);
	static TArray<TSubclassOf<class UObjectPoolBase>> GetAllObjectPoolClassesFromManager(class FName ManagerName);
	static TArray<class UObjectPoolBase*> GetAllObjectPools(class UObject* WorldContext);
	static int32 GetNumOfObjectPoolsInWorld(class UObject* WorldContext);
	static class UObjectPoolBase* GetObjectPool(class UObject* WorldContext, class FName PoolName);
	static int32 GetPooledActorCount(class UObject* WorldContext);
	static int32 GetUnactivePooledActorCount(class UObject* WorldContext);
	static bool IsActorInUse(class APooledActor* InPooledActor);
	static void MarkActorInUse(class APooledActor* InPooledActor);
	static void MarkActorNotInUse(class APooledActor* InPooledActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectPoolFunctionLibrary">();
	}
	static class UObjectPoolFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectPoolFunctionLibrary>();
	}
};
static_assert(alignof(UObjectPoolFunctionLibrary) == 0x000008, "Wrong alignment on UObjectPoolFunctionLibrary");
static_assert(sizeof(UObjectPoolFunctionLibrary) == 0x000028, "Wrong size on UObjectPoolFunctionLibrary");

// Class ObjectPooler.PooledActor
// 0x0048 (0x0268 - 0x0220)
class APooledActor : public AActor
{
public:
	FMulticastInlineDelegateProperty_             InUse;                                             // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             NotInUse;                                          // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         MaxLifespan;                                       // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEverAllowTick : 1;                                // 0x0244(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEverAllowCollisions : 1;                          // 0x0244(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReturnToPoolAfterPhysicsHit : 1;                  // 0x0244(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInUse : 1;                                        // 0x0244(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_19C5[0x3];                                     // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTime;                                       // 0x0248(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19C6[0x4];                                     // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObjectPoolBase*                        PoolOwner;                                         // 0x0250(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObjectPoolComponent*                   PoolOwner_Component;                               // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19C7[0x8];                                     // 0x0260(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateAllComponents();
	void DeactivateAllComponents();
	void InUseSignature__DelegateSignature(class APooledActor* PooledActor);
	void MarkInUse(bool bBroadcast);
	void MarkNotInUse(bool bBroadcast);
	void NotInUseSignature__DelegateSignature(class APooledActor* PooledActor);
	void OnLifeSpanExpired();
	void PooledActor_BeginPlay();
	void PooledActor_EndPlay();
	void SetActive(bool bActive);

	bool IsInUse() const;
	bool IsNotInUse() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PooledActor">();
	}
	static class APooledActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APooledActor>();
	}
};
static_assert(alignof(APooledActor) == 0x000008, "Wrong alignment on APooledActor");
static_assert(sizeof(APooledActor) == 0x000268, "Wrong size on APooledActor");
static_assert(offsetof(APooledActor, InUse) == 0x000220, "Member 'APooledActor::InUse' has a wrong offset!");
static_assert(offsetof(APooledActor, NotInUse) == 0x000230, "Member 'APooledActor::NotInUse' has a wrong offset!");
static_assert(offsetof(APooledActor, MaxLifespan) == 0x000240, "Member 'APooledActor::MaxLifespan' has a wrong offset!");
static_assert(offsetof(APooledActor, ElapsedTime) == 0x000248, "Member 'APooledActor::ElapsedTime' has a wrong offset!");
static_assert(offsetof(APooledActor, PoolOwner) == 0x000250, "Member 'APooledActor::PoolOwner' has a wrong offset!");
static_assert(offsetof(APooledActor, PoolOwner_Component) == 0x000258, "Member 'APooledActor::PoolOwner_Component' has a wrong offset!");

}

