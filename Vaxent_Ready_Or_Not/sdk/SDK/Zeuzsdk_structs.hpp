#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Zeuzsdk

#include "Basic.hpp"


namespace SDK
{

// Enum Zeuzsdk.EZeuzSessionType
// NumValues: 0x0004
enum class EZeuzSessionType : uint8
{
	ST_Developer                             = 0,
	ST_ApiKey                                = 1,
	ST_User                                  = 2,
	ST_MAX                                   = 3,
};

// Enum Zeuzsdk.ZeuzIDType
// NumValues: 0x0010
enum class EZeuzIDType : uint8
{
	Invalid                                  = 0,
	Account                                  = 1,
	Proj                                     = 16,
	Env                                      = 17,
	User                                     = 18,
	Developer                                = 19,
	Team                                     = 20,
	Session                                  = 32,
	TempFile                                 = 49,
	Lobby                                    = 50,
	MatchMaking                              = 51,
	Message                                  = 52,
	Inbox                                    = 53,
	ConfigRule                               = 64,
	APIKey                                   = 99,
	ZeuzIDType_MAX                           = 100,
};

// ScriptStruct Zeuzsdk.ZeuzACLEntry
// 0x0018 (0x0018 - 0x0000)
struct FZeuzACLEntry final 
{
public:
	class FString                                 GenID;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grant;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Deny;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzACLEntry) == 0x000008, "Wrong alignment on FZeuzACLEntry");
static_assert(sizeof(FZeuzACLEntry) == 0x000018, "Wrong size on FZeuzACLEntry");
static_assert(offsetof(FZeuzACLEntry, GenID) == 0x000000, "Member 'FZeuzACLEntry::GenID' has a wrong offset!");
static_assert(offsetof(FZeuzACLEntry, Grant) == 0x000010, "Member 'FZeuzACLEntry::Grant' has a wrong offset!");
static_assert(offsetof(FZeuzACLEntry, Deny) == 0x000014, "Member 'FZeuzACLEntry::Deny' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzACL
// 0x0010 (0x0010 - 0x0000)
struct FZeuzACL final 
{
public:
	TArray<struct FZeuzACLEntry>                  List;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzACL) == 0x000008, "Wrong alignment on FZeuzACL");
static_assert(sizeof(FZeuzACL) == 0x000010, "Wrong size on FZeuzACL");
static_assert(offsetof(FZeuzACL, List) == 0x000000, "Member 'FZeuzACL::List' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileItemNameCount
// 0x0018 (0x0018 - 0x0000)
struct FZeuzProfileItemNameCount
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E9[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzProfileItemNameCount) == 0x000008, "Wrong alignment on FZeuzProfileItemNameCount");
static_assert(sizeof(FZeuzProfileItemNameCount) == 0x000018, "Wrong size on FZeuzProfileItemNameCount");
static_assert(offsetof(FZeuzProfileItemNameCount, Name) == 0x000000, "Member 'FZeuzProfileItemNameCount::Name' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemNameCount, Count) == 0x000010, "Member 'FZeuzProfileItemNameCount::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileItemAddIn
// 0x0010 (0x0028 - 0x0018)
struct FZeuzProfileItemAddIn final  : public FZeuzProfileItemNameCount
{
public:
	class FString                                 UserID;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProfileItemAddIn) == 0x000008, "Wrong alignment on FZeuzProfileItemAddIn");
static_assert(sizeof(FZeuzProfileItemAddIn) == 0x000028, "Wrong size on FZeuzProfileItemAddIn");
static_assert(offsetof(FZeuzProfileItemAddIn, UserID) == 0x000018, "Member 'FZeuzProfileItemAddIn::UserID' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAdminStat
// 0x0018 (0x0018 - 0x0000)
struct FZeuzAdminStat final 
{
public:
	class FString                                 GroupCol;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountVal;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11EA[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzAdminStat) == 0x000008, "Wrong alignment on FZeuzAdminStat");
static_assert(sizeof(FZeuzAdminStat) == 0x000018, "Wrong size on FZeuzAdminStat");
static_assert(offsetof(FZeuzAdminStat, GroupCol) == 0x000000, "Member 'FZeuzAdminStat::GroupCol' has a wrong offset!");
static_assert(offsetof(FZeuzAdminStat, CountVal) == 0x000010, "Member 'FZeuzAdminStat::CountVal' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAdminStatsOut
// 0x0010 (0x0010 - 0x0000)
struct FZeuzAdminStatsOut final 
{
public:
	TArray<struct FZeuzAdminStat>                 Stats;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAdminStatsOut) == 0x000008, "Wrong alignment on FZeuzAdminStatsOut");
static_assert(sizeof(FZeuzAdminStatsOut) == 0x000010, "Wrong size on FZeuzAdminStatsOut");
static_assert(offsetof(FZeuzAdminStatsOut, Stats) == 0x000000, "Member 'FZeuzAdminStatsOut::Stats' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzContext
// 0x0098 (0x0098 - 0x0000)
struct FZeuzContext final 
{
public:
	class FString                                 Endpoint;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionKey;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeveloperID;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProjID;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnvID;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Login;                                             // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWHash;                                            // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EZeuzSessionType                              LoginType;                                         // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11EB[0x7];                                     // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzContext) == 0x000008, "Wrong alignment on FZeuzContext");
static_assert(sizeof(FZeuzContext) == 0x000098, "Wrong size on FZeuzContext");
static_assert(offsetof(FZeuzContext, Endpoint) == 0x000000, "Member 'FZeuzContext::Endpoint' has a wrong offset!");
static_assert(offsetof(FZeuzContext, SessionID) == 0x000010, "Member 'FZeuzContext::SessionID' has a wrong offset!");
static_assert(offsetof(FZeuzContext, SessionKey) == 0x000020, "Member 'FZeuzContext::SessionKey' has a wrong offset!");
static_assert(offsetof(FZeuzContext, UserID) == 0x000030, "Member 'FZeuzContext::UserID' has a wrong offset!");
static_assert(offsetof(FZeuzContext, DeveloperID) == 0x000040, "Member 'FZeuzContext::DeveloperID' has a wrong offset!");
static_assert(offsetof(FZeuzContext, ProjID) == 0x000050, "Member 'FZeuzContext::ProjID' has a wrong offset!");
static_assert(offsetof(FZeuzContext, EnvID) == 0x000060, "Member 'FZeuzContext::EnvID' has a wrong offset!");
static_assert(offsetof(FZeuzContext, Login) == 0x000070, "Member 'FZeuzContext::Login' has a wrong offset!");
static_assert(offsetof(FZeuzContext, PWHash) == 0x000080, "Member 'FZeuzContext::PWHash' has a wrong offset!");
static_assert(offsetof(FZeuzContext, LoginType) == 0x000090, "Member 'FZeuzContext::LoginType' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAdminItemsIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzAdminItemsIn final 
{
public:
	class FString                                 Table;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Query;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAdminItemsIn) == 0x000008, "Wrong alignment on FZeuzAdminItemsIn");
static_assert(sizeof(FZeuzAdminItemsIn) == 0x000020, "Wrong size on FZeuzAdminItemsIn");
static_assert(offsetof(FZeuzAdminItemsIn, Table) == 0x000000, "Member 'FZeuzAdminItemsIn::Table' has a wrong offset!");
static_assert(offsetof(FZeuzAdminItemsIn, Query) == 0x000010, "Member 'FZeuzAdminItemsIn::Query' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzVariant
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FZeuzVariant final 
{
public:
	uint8                                         Pad_11EC[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzVariant) == 0x000008, "Wrong alignment on FZeuzVariant");
static_assert(sizeof(FZeuzVariant) == 0x000010, "Wrong size on FZeuzVariant");

// ScriptStruct Zeuzsdk.ZeuzByteArray
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FZeuzByteArray final 
{
public:
	uint8                                         Pad_11ED[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzByteArray) == 0x000008, "Wrong alignment on FZeuzByteArray");
static_assert(sizeof(FZeuzByteArray) == 0x000010, "Wrong size on FZeuzByteArray");

// ScriptStruct Zeuzsdk.ZeuzProfileUserLookupIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzProfileUserLookupIn final 
{
public:
	class FString                                 Login;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProfileUserLookupIn) == 0x000008, "Wrong alignment on FZeuzProfileUserLookupIn");
static_assert(sizeof(FZeuzProfileUserLookupIn) == 0x000020, "Wrong size on FZeuzProfileUserLookupIn");
static_assert(offsetof(FZeuzProfileUserLookupIn, Login) == 0x000000, "Member 'FZeuzProfileUserLookupIn::Login' has a wrong offset!");
static_assert(offsetof(FZeuzProfileUserLookupIn, Name) == 0x000010, "Member 'FZeuzProfileUserLookupIn::Name' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzTags
// 0x0010 (0x0010 - 0x0000)
struct FZeuzTags final 
{
public:
	TArray<class FString>                         Tags;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzTags) == 0x000008, "Wrong alignment on FZeuzTags");
static_assert(sizeof(FZeuzTags) == 0x000010, "Wrong size on FZeuzTags");
static_assert(offsetof(FZeuzTags, Tags) == 0x000000, "Member 'FZeuzTags::Tags' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProperties
// 0x0028 (0x0028 - 0x0000)
struct FZeuzProperties final 
{
public:
	int32                                         Version;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11EE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZeuzTags                              Tags;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FZeuzVariant                           Val;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProperties) == 0x000008, "Wrong alignment on FZeuzProperties");
static_assert(sizeof(FZeuzProperties) == 0x000028, "Wrong size on FZeuzProperties");
static_assert(offsetof(FZeuzProperties, Version) == 0x000000, "Member 'FZeuzProperties::Version' has a wrong offset!");
static_assert(offsetof(FZeuzProperties, Tags) == 0x000008, "Member 'FZeuzProperties::Tags' has a wrong offset!");
static_assert(offsetof(FZeuzProperties, Val) == 0x000018, "Member 'FZeuzProperties::Val' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzTimestamp
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FZeuzTimestamp final 
{
public:
	uint8                                         Pad_11EF[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzTimestamp) == 0x000008, "Wrong alignment on FZeuzTimestamp");
static_assert(sizeof(FZeuzTimestamp) == 0x000008, "Wrong size on FZeuzTimestamp");

// ScriptStruct Zeuzsdk.ZeuzItemCommon
// 0x0088 (0x0088 - 0x0000)
struct FZeuzItemCommon
{
public:
	int32                                         Version;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzACL                               ACL;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FZeuzProperties                        Props;                                             // 0x0028(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Created;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedBy;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Modified;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModifiedBy;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Expires;                                           // 0x0080(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzItemCommon) == 0x000008, "Wrong alignment on FZeuzItemCommon");
static_assert(sizeof(FZeuzItemCommon) == 0x000088, "Wrong size on FZeuzItemCommon");
static_assert(offsetof(FZeuzItemCommon, Version) == 0x000000, "Member 'FZeuzItemCommon::Version' has a wrong offset!");
static_assert(offsetof(FZeuzItemCommon, Title) == 0x000008, "Member 'FZeuzItemCommon::Title' has a wrong offset!");
static_assert(offsetof(FZeuzItemCommon, ACL) == 0x000018, "Member 'FZeuzItemCommon::ACL' has a wrong offset!");
static_assert(offsetof(FZeuzItemCommon, Props) == 0x000028, "Member 'FZeuzItemCommon::Props' has a wrong offset!");
static_assert(offsetof(FZeuzItemCommon, Created) == 0x000050, "Member 'FZeuzItemCommon::Created' has a wrong offset!");
static_assert(offsetof(FZeuzItemCommon, CreatedBy) == 0x000058, "Member 'FZeuzItemCommon::CreatedBy' has a wrong offset!");
static_assert(offsetof(FZeuzItemCommon, Modified) == 0x000068, "Member 'FZeuzItemCommon::Modified' has a wrong offset!");
static_assert(offsetof(FZeuzItemCommon, ModifiedBy) == 0x000070, "Member 'FZeuzItemCommon::ModifiedBy' has a wrong offset!");
static_assert(offsetof(FZeuzItemCommon, Expires) == 0x000080, "Member 'FZeuzItemCommon::Expires' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileItemMove
// 0x0018 (0x0018 - 0x0000)
struct FZeuzProfileItemMove
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F1[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzProfileItemMove) == 0x000008, "Wrong alignment on FZeuzProfileItemMove");
static_assert(sizeof(FZeuzProfileItemMove) == 0x000018, "Wrong size on FZeuzProfileItemMove");
static_assert(offsetof(FZeuzProfileItemMove, ID) == 0x000000, "Member 'FZeuzProfileItemMove::ID' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemMove, Count) == 0x000010, "Member 'FZeuzProfileItemMove::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileItemBarterIn
// 0x0040 (0x0040 - 0x0000)
struct FZeuzProfileItemBarterIn final 
{
public:
	class FString                                 UserIDA;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserIDB;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FZeuzProfileItemMove>           OfferA;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FZeuzProfileItemMove>           OfferB;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProfileItemBarterIn) == 0x000008, "Wrong alignment on FZeuzProfileItemBarterIn");
static_assert(sizeof(FZeuzProfileItemBarterIn) == 0x000040, "Wrong size on FZeuzProfileItemBarterIn");
static_assert(offsetof(FZeuzProfileItemBarterIn, UserIDA) == 0x000000, "Member 'FZeuzProfileItemBarterIn::UserIDA' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemBarterIn, UserIDB) == 0x000010, "Member 'FZeuzProfileItemBarterIn::UserIDB' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemBarterIn, OfferA) == 0x000020, "Member 'FZeuzProfileItemBarterIn::OfferA' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemBarterIn, OfferB) == 0x000030, "Member 'FZeuzProfileItemBarterIn::OfferB' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountDeveloperSetPwHashIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzAccountDeveloperSetPwHashIn final 
{
public:
	class FString                                 CurrentPWHash;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPWHash;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountDeveloperSetPwHashIn) == 0x000008, "Wrong alignment on FZeuzAccountDeveloperSetPwHashIn");
static_assert(sizeof(FZeuzAccountDeveloperSetPwHashIn) == 0x000020, "Wrong size on FZeuzAccountDeveloperSetPwHashIn");
static_assert(offsetof(FZeuzAccountDeveloperSetPwHashIn, CurrentPWHash) == 0x000000, "Member 'FZeuzAccountDeveloperSetPwHashIn::CurrentPWHash' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperSetPwHashIn, NewPWHash) == 0x000010, "Member 'FZeuzAccountDeveloperSetPwHashIn::NewPWHash' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzSession
// 0x0068 (0x00F0 - 0x0088)
struct FZeuzSession final  : public FZeuzItemCommon
{
public:
	class FString                                 ID;                                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionKey;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dev;                                               // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 User;                                              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApiKey;                                            // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Proj;                                              // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Admin;                                             // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F2[0x7];                                     // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzSession) == 0x000008, "Wrong alignment on FZeuzSession");
static_assert(sizeof(FZeuzSession) == 0x0000F0, "Wrong size on FZeuzSession");
static_assert(offsetof(FZeuzSession, ID) == 0x000088, "Member 'FZeuzSession::ID' has a wrong offset!");
static_assert(offsetof(FZeuzSession, SessionKey) == 0x000098, "Member 'FZeuzSession::SessionKey' has a wrong offset!");
static_assert(offsetof(FZeuzSession, Dev) == 0x0000A8, "Member 'FZeuzSession::Dev' has a wrong offset!");
static_assert(offsetof(FZeuzSession, User) == 0x0000B8, "Member 'FZeuzSession::User' has a wrong offset!");
static_assert(offsetof(FZeuzSession, ApiKey) == 0x0000C8, "Member 'FZeuzSession::ApiKey' has a wrong offset!");
static_assert(offsetof(FZeuzSession, Proj) == 0x0000D8, "Member 'FZeuzSession::Proj' has a wrong offset!");
static_assert(offsetof(FZeuzSession, Admin) == 0x0000E8, "Member 'FZeuzSession::Admin' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileUserPwHashIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzProfileUserPwHashIn final 
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWHash;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProfileUserPwHashIn) == 0x000008, "Wrong alignment on FZeuzProfileUserPwHashIn");
static_assert(sizeof(FZeuzProfileUserPwHashIn) == 0x000020, "Wrong size on FZeuzProfileUserPwHashIn");
static_assert(offsetof(FZeuzProfileUserPwHashIn, UserID) == 0x000000, "Member 'FZeuzProfileUserPwHashIn::UserID' has a wrong offset!");
static_assert(offsetof(FZeuzProfileUserPwHashIn, PWHash) == 0x000010, "Member 'FZeuzProfileUserPwHashIn::PWHash' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProvisioningAccount
// 0x00C0 (0x00C0 - 0x0000)
struct FZeuzProvisioningAccount final 
{
public:
	class FString                                 ProviderID;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnInstances;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F3[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Username;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApiKey;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecretKey;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubscriptionID;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TenantID;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientId;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientSecret;                                      // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GcpCredentialsFile;                                // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GcpFileName;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         GcpUploadFileDate;                                 // 0x00B8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProvisioningAccount) == 0x000008, "Wrong alignment on FZeuzProvisioningAccount");
static_assert(sizeof(FZeuzProvisioningAccount) == 0x0000C0, "Wrong size on FZeuzProvisioningAccount");
static_assert(offsetof(FZeuzProvisioningAccount, ProviderID) == 0x000000, "Member 'FZeuzProvisioningAccount::ProviderID' has a wrong offset!");
static_assert(offsetof(FZeuzProvisioningAccount, SpawnInstances) == 0x000010, "Member 'FZeuzProvisioningAccount::SpawnInstances' has a wrong offset!");
static_assert(offsetof(FZeuzProvisioningAccount, Username) == 0x000018, "Member 'FZeuzProvisioningAccount::Username' has a wrong offset!");
static_assert(offsetof(FZeuzProvisioningAccount, Password) == 0x000028, "Member 'FZeuzProvisioningAccount::Password' has a wrong offset!");
static_assert(offsetof(FZeuzProvisioningAccount, ApiKey) == 0x000038, "Member 'FZeuzProvisioningAccount::ApiKey' has a wrong offset!");
static_assert(offsetof(FZeuzProvisioningAccount, SecretKey) == 0x000048, "Member 'FZeuzProvisioningAccount::SecretKey' has a wrong offset!");
static_assert(offsetof(FZeuzProvisioningAccount, SubscriptionID) == 0x000058, "Member 'FZeuzProvisioningAccount::SubscriptionID' has a wrong offset!");
static_assert(offsetof(FZeuzProvisioningAccount, TenantID) == 0x000068, "Member 'FZeuzProvisioningAccount::TenantID' has a wrong offset!");
static_assert(offsetof(FZeuzProvisioningAccount, ClientId) == 0x000078, "Member 'FZeuzProvisioningAccount::ClientId' has a wrong offset!");
static_assert(offsetof(FZeuzProvisioningAccount, ClientSecret) == 0x000088, "Member 'FZeuzProvisioningAccount::ClientSecret' has a wrong offset!");
static_assert(offsetof(FZeuzProvisioningAccount, GcpCredentialsFile) == 0x000098, "Member 'FZeuzProvisioningAccount::GcpCredentialsFile' has a wrong offset!");
static_assert(offsetof(FZeuzProvisioningAccount, GcpFileName) == 0x0000A8, "Member 'FZeuzProvisioningAccount::GcpFileName' has a wrong offset!");
static_assert(offsetof(FZeuzProvisioningAccount, GcpUploadFileDate) == 0x0000B8, "Member 'FZeuzProvisioningAccount::GcpUploadFileDate' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccount
// 0x00E0 (0x0168 - 0x0088)
struct FZeuzAccount final  : public FZeuzItemCommon
{
public:
	class FString                                 ID;                                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Managers;                                          // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Projects;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Teams;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Devs;                                              // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EMail;                                             // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Company;                                           // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Department;                                        // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZIP;                                               // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 City;                                              // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StreetAddr;                                        // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FZeuzProvisioningAccount>       ProvisioningAccounts;                              // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccount) == 0x000008, "Wrong alignment on FZeuzAccount");
static_assert(sizeof(FZeuzAccount) == 0x000168, "Wrong size on FZeuzAccount");
static_assert(offsetof(FZeuzAccount, ID) == 0x000088, "Member 'FZeuzAccount::ID' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, Managers) == 0x000098, "Member 'FZeuzAccount::Managers' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, Projects) == 0x0000A8, "Member 'FZeuzAccount::Projects' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, Teams) == 0x0000B8, "Member 'FZeuzAccount::Teams' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, Devs) == 0x0000C8, "Member 'FZeuzAccount::Devs' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, Desc) == 0x0000D8, "Member 'FZeuzAccount::Desc' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, EMail) == 0x0000E8, "Member 'FZeuzAccount::EMail' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, Company) == 0x0000F8, "Member 'FZeuzAccount::Company' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, Department) == 0x000108, "Member 'FZeuzAccount::Department' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, Country) == 0x000118, "Member 'FZeuzAccount::Country' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, ZIP) == 0x000128, "Member 'FZeuzAccount::ZIP' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, City) == 0x000138, "Member 'FZeuzAccount::City' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, StreetAddr) == 0x000148, "Member 'FZeuzAccount::StreetAddr' has a wrong offset!");
static_assert(offsetof(FZeuzAccount, ProvisioningAccounts) == 0x000158, "Member 'FZeuzAccount::ProvisioningAccounts' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAdminAccountsIn
// 0x0001 (0x0001 - 0x0000)
struct FZeuzAdminAccountsIn final 
{
public:
	uint8                                         Pad_11F4[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzAdminAccountsIn) == 0x000001, "Wrong alignment on FZeuzAdminAccountsIn");
static_assert(sizeof(FZeuzAdminAccountsIn) == 0x000001, "Wrong size on FZeuzAdminAccountsIn");

// ScriptStruct Zeuzsdk.ZeuzAdminCountResoucesIn
// 0x0018 (0x0018 - 0x0000)
struct FZeuzAdminCountResoucesIn final 
{
public:
	bool                                          OnlyInUse;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RegionID;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAdminCountResoucesIn) == 0x000008, "Wrong alignment on FZeuzAdminCountResoucesIn");
static_assert(sizeof(FZeuzAdminCountResoucesIn) == 0x000018, "Wrong size on FZeuzAdminCountResoucesIn");
static_assert(offsetof(FZeuzAdminCountResoucesIn, OnlyInUse) == 0x000000, "Member 'FZeuzAdminCountResoucesIn::OnlyInUse' has a wrong offset!");
static_assert(offsetof(FZeuzAdminCountResoucesIn, RegionID) == 0x000008, "Member 'FZeuzAdminCountResoucesIn::RegionID' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzKVStoreKey
// 0x0020 (0x0020 - 0x0000)
struct FZeuzKVStoreKey
{
public:
	class FString                                 Partition;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzKVStoreKey) == 0x000008, "Wrong alignment on FZeuzKVStoreKey");
static_assert(sizeof(FZeuzKVStoreKey) == 0x000020, "Wrong size on FZeuzKVStoreKey");
static_assert(offsetof(FZeuzKVStoreKey, Partition) == 0x000000, "Member 'FZeuzKVStoreKey::Partition' has a wrong offset!");
static_assert(offsetof(FZeuzKVStoreKey, Key) == 0x000010, "Member 'FZeuzKVStoreKey::Key' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAPIKeyGenerateIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzAPIKeyGenerateIn final 
{
public:
	class FString                                 ProjID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAPIKeyGenerateIn) == 0x000008, "Wrong alignment on FZeuzAPIKeyGenerateIn");
static_assert(sizeof(FZeuzAPIKeyGenerateIn) == 0x000020, "Wrong size on FZeuzAPIKeyGenerateIn");
static_assert(offsetof(FZeuzAPIKeyGenerateIn, ProjID) == 0x000000, "Member 'FZeuzAPIKeyGenerateIn::ProjID' has a wrong offset!");
static_assert(offsetof(FZeuzAPIKeyGenerateIn, Title) == 0x000010, "Member 'FZeuzAPIKeyGenerateIn::Title' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAdminCountResoucesPerAccountOut
// 0x0028 (0x0028 - 0x0000)
struct FZeuzAdminCountResoucesPerAccountOut final 
{
public:
	class FString                                 AccountID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F6[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzAdminCountResoucesPerAccountOut) == 0x000008, "Wrong alignment on FZeuzAdminCountResoucesPerAccountOut");
static_assert(sizeof(FZeuzAdminCountResoucesPerAccountOut) == 0x000028, "Wrong size on FZeuzAdminCountResoucesPerAccountOut");
static_assert(offsetof(FZeuzAdminCountResoucesPerAccountOut, AccountID) == 0x000000, "Member 'FZeuzAdminCountResoucesPerAccountOut::AccountID' has a wrong offset!");
static_assert(offsetof(FZeuzAdminCountResoucesPerAccountOut, AccountName) == 0x000010, "Member 'FZeuzAdminCountResoucesPerAccountOut::AccountName' has a wrong offset!");
static_assert(offsetof(FZeuzAdminCountResoucesPerAccountOut, Count) == 0x000020, "Member 'FZeuzAdminCountResoucesPerAccountOut::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAdminTestpoolIn
// 0x0010 (0x0010 - 0x0000)
struct FZeuzAdminTestpoolIn final 
{
public:
	class FString                                 RegionID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAdminTestpoolIn) == 0x000008, "Wrong alignment on FZeuzAdminTestpoolIn");
static_assert(sizeof(FZeuzAdminTestpoolIn) == 0x000010, "Wrong size on FZeuzAdminTestpoolIn");
static_assert(offsetof(FZeuzAdminTestpoolIn, RegionID) == 0x000000, "Member 'FZeuzAdminTestpoolIn::RegionID' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPortDef
// 0x0018 (0x0018 - 0x0000)
struct FZeuzPortDef final 
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F7[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzPortDef) == 0x000008, "Wrong alignment on FZeuzPortDef");
static_assert(sizeof(FZeuzPortDef) == 0x000018, "Wrong size on FZeuzPortDef");
static_assert(offsetof(FZeuzPortDef, Name) == 0x000000, "Member 'FZeuzPortDef::Name' has a wrong offset!");
static_assert(offsetof(FZeuzPortDef, Port) == 0x000010, "Member 'FZeuzPortDef::Port' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadDef
// 0x0040 (0x0040 - 0x0000)
struct FZeuzPayloadDef final 
{
public:
	class FString                                 HostOS;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Cmd;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FZeuzPortDef>                   Ports;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzPayloadDef) == 0x000008, "Wrong alignment on FZeuzPayloadDef");
static_assert(sizeof(FZeuzPayloadDef) == 0x000040, "Wrong size on FZeuzPayloadDef");
static_assert(offsetof(FZeuzPayloadDef, HostOS) == 0x000000, "Member 'FZeuzPayloadDef::HostOS' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadDef, Image) == 0x000010, "Member 'FZeuzPayloadDef::Image' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadDef, Cmd) == 0x000020, "Member 'FZeuzPayloadDef::Cmd' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadDef, Ports) == 0x000030, "Member 'FZeuzPayloadDef::Ports' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileItemConfig
// 0x0090 (0x0090 - 0x0000)
struct FZeuzProfileItemConfig final 
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Class;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountMaxU;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stackable;                                         // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F8[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZeuzTimestamp                         LimitAddInterval;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Params;                                            // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FZeuzProfileItemNameCount>      BuyPrice;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProfileItemConfig) == 0x000008, "Wrong alignment on FZeuzProfileItemConfig");
static_assert(sizeof(FZeuzProfileItemConfig) == 0x000090, "Wrong size on FZeuzProfileItemConfig");
static_assert(offsetof(FZeuzProfileItemConfig, Name) == 0x000000, "Member 'FZeuzProfileItemConfig::Name' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemConfig, Class) == 0x000010, "Member 'FZeuzProfileItemConfig::Class' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemConfig, CountMaxU) == 0x000020, "Member 'FZeuzProfileItemConfig::CountMaxU' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemConfig, Stackable) == 0x000024, "Member 'FZeuzProfileItemConfig::Stackable' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemConfig, LimitAddInterval) == 0x000028, "Member 'FZeuzProfileItemConfig::LimitAddInterval' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemConfig, Params) == 0x000030, "Member 'FZeuzProfileItemConfig::Params' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemConfig, BuyPrice) == 0x000080, "Member 'FZeuzProfileItemConfig::BuyPrice' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzDeveloper
// 0x0098 (0x0120 - 0x0088)
struct FZeuzDeveloper final  : public FZeuzItemCommon
{
public:
	class FString                                 ID;                                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Account;                                           // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Role;                                              // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F9[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Login;                                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWHash;                                            // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         LastLogin;                                         // 0x00E0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Projects;                                          // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Teams;                                             // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Revoked;                                           // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FA[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZeuzTimestamp                         RevokedAt;                                         // 0x0110(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         PasswordRequestExpiry;                             // 0x0118(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzDeveloper) == 0x000008, "Wrong alignment on FZeuzDeveloper");
static_assert(sizeof(FZeuzDeveloper) == 0x000120, "Wrong size on FZeuzDeveloper");
static_assert(offsetof(FZeuzDeveloper, ID) == 0x000088, "Member 'FZeuzDeveloper::ID' has a wrong offset!");
static_assert(offsetof(FZeuzDeveloper, Account) == 0x000098, "Member 'FZeuzDeveloper::Account' has a wrong offset!");
static_assert(offsetof(FZeuzDeveloper, Role) == 0x0000A8, "Member 'FZeuzDeveloper::Role' has a wrong offset!");
static_assert(offsetof(FZeuzDeveloper, Login) == 0x0000B0, "Member 'FZeuzDeveloper::Login' has a wrong offset!");
static_assert(offsetof(FZeuzDeveloper, Desc) == 0x0000C0, "Member 'FZeuzDeveloper::Desc' has a wrong offset!");
static_assert(offsetof(FZeuzDeveloper, PWHash) == 0x0000D0, "Member 'FZeuzDeveloper::PWHash' has a wrong offset!");
static_assert(offsetof(FZeuzDeveloper, LastLogin) == 0x0000E0, "Member 'FZeuzDeveloper::LastLogin' has a wrong offset!");
static_assert(offsetof(FZeuzDeveloper, Projects) == 0x0000E8, "Member 'FZeuzDeveloper::Projects' has a wrong offset!");
static_assert(offsetof(FZeuzDeveloper, Teams) == 0x0000F8, "Member 'FZeuzDeveloper::Teams' has a wrong offset!");
static_assert(offsetof(FZeuzDeveloper, Revoked) == 0x000108, "Member 'FZeuzDeveloper::Revoked' has a wrong offset!");
static_assert(offsetof(FZeuzDeveloper, RevokedAt) == 0x000110, "Member 'FZeuzDeveloper::RevokedAt' has a wrong offset!");
static_assert(offsetof(FZeuzDeveloper, PasswordRequestExpiry) == 0x000118, "Member 'FZeuzDeveloper::PasswordRequestExpiry' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLogsearchAccountIn
// 0x0070 (0x0070 - 0x0000)
struct FZeuzLogsearchAccountIn final 
{
public:
	struct FZeuzTimestamp                         Start;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         End;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Level;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Query;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderBy;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderAsc;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FB[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastLevel;                                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastTime;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FC[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastID;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLogsearchAccountIn) == 0x000008, "Wrong alignment on FZeuzLogsearchAccountIn");
static_assert(sizeof(FZeuzLogsearchAccountIn) == 0x000070, "Wrong size on FZeuzLogsearchAccountIn");
static_assert(offsetof(FZeuzLogsearchAccountIn, Start) == 0x000000, "Member 'FZeuzLogsearchAccountIn::Start' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountIn, End) == 0x000008, "Member 'FZeuzLogsearchAccountIn::End' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountIn, Level) == 0x000010, "Member 'FZeuzLogsearchAccountIn::Level' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountIn, Payload) == 0x000020, "Member 'FZeuzLogsearchAccountIn::Payload' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountIn, Query) == 0x000030, "Member 'FZeuzLogsearchAccountIn::Query' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountIn, OrderBy) == 0x000040, "Member 'FZeuzLogsearchAccountIn::OrderBy' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountIn, OrderAsc) == 0x000050, "Member 'FZeuzLogsearchAccountIn::OrderAsc' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountIn, LastLevel) == 0x000054, "Member 'FZeuzLogsearchAccountIn::LastLevel' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountIn, LastTime) == 0x000058, "Member 'FZeuzLogsearchAccountIn::LastTime' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountIn, LastID) == 0x000060, "Member 'FZeuzLogsearchAccountIn::LastID' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAdminAccountIn
// 0x0010 (0x0010 - 0x0000)
struct FZeuzAdminAccountIn final 
{
public:
	class FString                                 AccountID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAdminAccountIn) == 0x000008, "Wrong alignment on FZeuzAdminAccountIn");
static_assert(sizeof(FZeuzAdminAccountIn) == 0x000010, "Wrong size on FZeuzAdminAccountIn");
static_assert(offsetof(FZeuzAdminAccountIn, AccountID) == 0x000000, "Member 'FZeuzAdminAccountIn::AccountID' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzUserProfile
// 0x0088 (0x0088 - 0x0000)
struct FZeuzUserProfile final 
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTags                              Tags;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         FirstLogin;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         BanStart;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         BanEnd;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Comments;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FZeuzVariant                           Data;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         LinkedAccounts;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Friends;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Blocked;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzUserProfile) == 0x000008, "Wrong alignment on FZeuzUserProfile");
static_assert(sizeof(FZeuzUserProfile) == 0x000088, "Wrong size on FZeuzUserProfile");
static_assert(offsetof(FZeuzUserProfile, ID) == 0x000000, "Member 'FZeuzUserProfile::ID' has a wrong offset!");
static_assert(offsetof(FZeuzUserProfile, Tags) == 0x000010, "Member 'FZeuzUserProfile::Tags' has a wrong offset!");
static_assert(offsetof(FZeuzUserProfile, FirstLogin) == 0x000020, "Member 'FZeuzUserProfile::FirstLogin' has a wrong offset!");
static_assert(offsetof(FZeuzUserProfile, BanStart) == 0x000028, "Member 'FZeuzUserProfile::BanStart' has a wrong offset!");
static_assert(offsetof(FZeuzUserProfile, BanEnd) == 0x000030, "Member 'FZeuzUserProfile::BanEnd' has a wrong offset!");
static_assert(offsetof(FZeuzUserProfile, Comments) == 0x000038, "Member 'FZeuzUserProfile::Comments' has a wrong offset!");
static_assert(offsetof(FZeuzUserProfile, Data) == 0x000048, "Member 'FZeuzUserProfile::Data' has a wrong offset!");
static_assert(offsetof(FZeuzUserProfile, LinkedAccounts) == 0x000058, "Member 'FZeuzUserProfile::LinkedAccounts' has a wrong offset!");
static_assert(offsetof(FZeuzUserProfile, Friends) == 0x000068, "Member 'FZeuzUserProfile::Friends' has a wrong offset!");
static_assert(offsetof(FZeuzUserProfile, Blocked) == 0x000078, "Member 'FZeuzUserProfile::Blocked' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzServiceCfg
// 0x0038 (0x0038 - 0x0000)
struct FZeuzServiceCfg final 
{
public:
	class FString                                 ServiceType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxScale;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurScale;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CloudScale;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Busy;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Idle;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FD[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Params;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzServiceCfg) == 0x000008, "Wrong alignment on FZeuzServiceCfg");
static_assert(sizeof(FZeuzServiceCfg) == 0x000038, "Wrong size on FZeuzServiceCfg");
static_assert(offsetof(FZeuzServiceCfg, ServiceType) == 0x000000, "Member 'FZeuzServiceCfg::ServiceType' has a wrong offset!");
static_assert(offsetof(FZeuzServiceCfg, MaxScale) == 0x000010, "Member 'FZeuzServiceCfg::MaxScale' has a wrong offset!");
static_assert(offsetof(FZeuzServiceCfg, CurScale) == 0x000014, "Member 'FZeuzServiceCfg::CurScale' has a wrong offset!");
static_assert(offsetof(FZeuzServiceCfg, CloudScale) == 0x000018, "Member 'FZeuzServiceCfg::CloudScale' has a wrong offset!");
static_assert(offsetof(FZeuzServiceCfg, Busy) == 0x00001C, "Member 'FZeuzServiceCfg::Busy' has a wrong offset!");
static_assert(offsetof(FZeuzServiceCfg, Idle) == 0x000020, "Member 'FZeuzServiceCfg::Idle' has a wrong offset!");
static_assert(offsetof(FZeuzServiceCfg, Params) == 0x000028, "Member 'FZeuzServiceCfg::Params' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzEnv
// 0x0060 (0x00E8 - 0x0088)
struct FZeuzEnv final  : public FZeuzItemCommon
{
public:
	class FString                                 ID;                                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Proj;                                              // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Account;                                           // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FE[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Desc;                                              // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxScale;                                          // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurScale;                                          // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FZeuzServiceCfg>                Services;                                          // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzEnv) == 0x000008, "Wrong alignment on FZeuzEnv");
static_assert(sizeof(FZeuzEnv) == 0x0000E8, "Wrong size on FZeuzEnv");
static_assert(offsetof(FZeuzEnv, ID) == 0x000088, "Member 'FZeuzEnv::ID' has a wrong offset!");
static_assert(offsetof(FZeuzEnv, Proj) == 0x000098, "Member 'FZeuzEnv::Proj' has a wrong offset!");
static_assert(offsetof(FZeuzEnv, Account) == 0x0000A8, "Member 'FZeuzEnv::Account' has a wrong offset!");
static_assert(offsetof(FZeuzEnv, Enabled) == 0x0000B8, "Member 'FZeuzEnv::Enabled' has a wrong offset!");
static_assert(offsetof(FZeuzEnv, Desc) == 0x0000C0, "Member 'FZeuzEnv::Desc' has a wrong offset!");
static_assert(offsetof(FZeuzEnv, MaxScale) == 0x0000D0, "Member 'FZeuzEnv::MaxScale' has a wrong offset!");
static_assert(offsetof(FZeuzEnv, CurScale) == 0x0000D4, "Member 'FZeuzEnv::CurScale' has a wrong offset!");
static_assert(offsetof(FZeuzEnv, Services) == 0x0000D8, "Member 'FZeuzEnv::Services' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAdminEnvIn
// 0x0010 (0x0010 - 0x0000)
struct FZeuzAdminEnvIn final 
{
public:
	class FString                                 ProjectID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAdminEnvIn) == 0x000008, "Wrong alignment on FZeuzAdminEnvIn");
static_assert(sizeof(FZeuzAdminEnvIn) == 0x000010, "Wrong size on FZeuzAdminEnvIn");
static_assert(offsetof(FZeuzAdminEnvIn, ProjectID) == 0x000000, "Member 'FZeuzAdminEnvIn::ProjectID' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountDeveloperPasswordResetExecuteRequestIn
// 0x0040 (0x0040 - 0x0000)
struct FZeuzAccountDeveloperPasswordResetExecuteRequestIn final 
{
public:
	class FString                                 EMail;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Hash;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PasswordHash;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PasswordConfirmHash;                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountDeveloperPasswordResetExecuteRequestIn) == 0x000008, "Wrong alignment on FZeuzAccountDeveloperPasswordResetExecuteRequestIn");
static_assert(sizeof(FZeuzAccountDeveloperPasswordResetExecuteRequestIn) == 0x000040, "Wrong size on FZeuzAccountDeveloperPasswordResetExecuteRequestIn");
static_assert(offsetof(FZeuzAccountDeveloperPasswordResetExecuteRequestIn, EMail) == 0x000000, "Member 'FZeuzAccountDeveloperPasswordResetExecuteRequestIn::EMail' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperPasswordResetExecuteRequestIn, Hash) == 0x000010, "Member 'FZeuzAccountDeveloperPasswordResetExecuteRequestIn::Hash' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperPasswordResetExecuteRequestIn, PasswordHash) == 0x000020, "Member 'FZeuzAccountDeveloperPasswordResetExecuteRequestIn::PasswordHash' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperPasswordResetExecuteRequestIn, PasswordConfirmHash) == 0x000030, "Member 'FZeuzAccountDeveloperPasswordResetExecuteRequestIn::PasswordConfirmHash' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAdminItem
// 0x0020 (0x0020 - 0x0000)
struct FZeuzAdminItem final 
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAdminItem) == 0x000008, "Wrong alignment on FZeuzAdminItem");
static_assert(sizeof(FZeuzAdminItem) == 0x000020, "Wrong size on FZeuzAdminItem");
static_assert(offsetof(FZeuzAdminItem, ID) == 0x000000, "Member 'FZeuzAdminItem::ID' has a wrong offset!");
static_assert(offsetof(FZeuzAdminItem, Name) == 0x000010, "Member 'FZeuzAdminItem::Name' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAdminItemsOut
// 0x0010 (0x0010 - 0x0000)
struct FZeuzAdminItemsOut final 
{
public:
	TArray<struct FZeuzAdminItem>                 Items;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAdminItemsOut) == 0x000008, "Wrong alignment on FZeuzAdminItemsOut");
static_assert(sizeof(FZeuzAdminItemsOut) == 0x000010, "Wrong size on FZeuzAdminItemsOut");
static_assert(offsetof(FZeuzAdminItemsOut, Items) == 0x000000, "Member 'FZeuzAdminItemsOut::Items' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileItemRemIn
// 0x0018 (0x0018 - 0x0000)
struct FZeuzProfileItemRemIn final 
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FF[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzProfileItemRemIn) == 0x000008, "Wrong alignment on FZeuzProfileItemRemIn");
static_assert(sizeof(FZeuzProfileItemRemIn) == 0x000018, "Wrong size on FZeuzProfileItemRemIn");
static_assert(offsetof(FZeuzProfileItemRemIn, ItemID) == 0x000000, "Member 'FZeuzProfileItemRemIn::ItemID' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemRemIn, Count) == 0x000010, "Member 'FZeuzProfileItemRemIn::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLogsearchOut
// 0x0010 (0x0010 - 0x0000)
struct FZeuzLogsearchOut final 
{
public:
	struct FZeuzVariant                           Stats;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLogsearchOut) == 0x000008, "Wrong alignment on FZeuzLogsearchOut");
static_assert(sizeof(FZeuzLogsearchOut) == 0x000010, "Wrong size on FZeuzLogsearchOut");
static_assert(offsetof(FZeuzLogsearchOut, Stats) == 0x000000, "Member 'FZeuzLogsearchOut::Stats' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyStateBase
// 0x0038 (0x0038 - 0x0000)
struct FZeuzLobbyStateBase
{
public:
	class FString                                 LobbyID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsersMax;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Private;                                           // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasStarted;                                        // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1200[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Compatibility;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzVariant                           Params;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyStateBase) == 0x000008, "Wrong alignment on FZeuzLobbyStateBase");
static_assert(sizeof(FZeuzLobbyStateBase) == 0x000038, "Wrong size on FZeuzLobbyStateBase");
static_assert(offsetof(FZeuzLobbyStateBase, LobbyID) == 0x000000, "Member 'FZeuzLobbyStateBase::LobbyID' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyStateBase, UsersMax) == 0x000010, "Member 'FZeuzLobbyStateBase::UsersMax' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyStateBase, Private) == 0x000014, "Member 'FZeuzLobbyStateBase::Private' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyStateBase, HasStarted) == 0x000015, "Member 'FZeuzLobbyStateBase::HasStarted' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyStateBase, Compatibility) == 0x000018, "Member 'FZeuzLobbyStateBase::Compatibility' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyStateBase, Params) == 0x000028, "Member 'FZeuzLobbyStateBase::Params' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyStateOut
// 0x0020 (0x0058 - 0x0038)
struct FZeuzLobbyStateOut final  : public FZeuzLobbyStateBase
{
public:
	class FString                                 InboxID;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasPassword;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1201[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UsersCur;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1202[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzLobbyStateOut) == 0x000008, "Wrong alignment on FZeuzLobbyStateOut");
static_assert(sizeof(FZeuzLobbyStateOut) == 0x000058, "Wrong size on FZeuzLobbyStateOut");
static_assert(offsetof(FZeuzLobbyStateOut, InboxID) == 0x000038, "Member 'FZeuzLobbyStateOut::InboxID' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyStateOut, HasPassword) == 0x000048, "Member 'FZeuzLobbyStateOut::HasPassword' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyStateOut, UsersCur) == 0x00004C, "Member 'FZeuzLobbyStateOut::UsersCur' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyStateOut, Version) == 0x000050, "Member 'FZeuzLobbyStateOut::Version' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyQueryOut
// 0x0018 (0x0018 - 0x0000)
struct FZeuzLobbyQueryOut final 
{
public:
	TArray<struct FZeuzLobbyStateOut>             Results;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ResultOfs;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultTotal;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyQueryOut) == 0x000008, "Wrong alignment on FZeuzLobbyQueryOut");
static_assert(sizeof(FZeuzLobbyQueryOut) == 0x000018, "Wrong size on FZeuzLobbyQueryOut");
static_assert(offsetof(FZeuzLobbyQueryOut, Results) == 0x000000, "Member 'FZeuzLobbyQueryOut::Results' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyQueryOut, ResultOfs) == 0x000010, "Member 'FZeuzLobbyQueryOut::ResultOfs' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyQueryOut, ResultTotal) == 0x000014, "Member 'FZeuzLobbyQueryOut::ResultTotal' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAdminLogsIn
// 0x0040 (0x0040 - 0x0000)
struct FZeuzAdminLogsIn final 
{
public:
	class FString                                 Start;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 End;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Account;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Project;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAdminLogsIn) == 0x000008, "Wrong alignment on FZeuzAdminLogsIn");
static_assert(sizeof(FZeuzAdminLogsIn) == 0x000040, "Wrong size on FZeuzAdminLogsIn");
static_assert(offsetof(FZeuzAdminLogsIn, Start) == 0x000000, "Member 'FZeuzAdminLogsIn::Start' has a wrong offset!");
static_assert(offsetof(FZeuzAdminLogsIn, End) == 0x000010, "Member 'FZeuzAdminLogsIn::End' has a wrong offset!");
static_assert(offsetof(FZeuzAdminLogsIn, Account) == 0x000020, "Member 'FZeuzAdminLogsIn::Account' has a wrong offset!");
static_assert(offsetof(FZeuzAdminLogsIn, Project) == 0x000030, "Member 'FZeuzAdminLogsIn::Project' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProjEnvInfo
// 0x0020 (0x0020 - 0x0000)
struct FZeuzProjEnvInfo final 
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProjEnvInfo) == 0x000008, "Wrong alignment on FZeuzProjEnvInfo");
static_assert(sizeof(FZeuzProjEnvInfo) == 0x000020, "Wrong size on FZeuzProjEnvInfo");
static_assert(offsetof(FZeuzProjEnvInfo, ID) == 0x000000, "Member 'FZeuzProjEnvInfo::ID' has a wrong offset!");
static_assert(offsetof(FZeuzProjEnvInfo, Title) == 0x000010, "Member 'FZeuzProjEnvInfo::Title' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProj
// 0x0040 (0x00C8 - 0x0088)
struct FZeuzProj final  : public FZeuzItemCommon
{
public:
	class FString                                 ID;                                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Account;                                           // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FZeuzProjEnvInfo>               Envs;                                              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProj) == 0x000008, "Wrong alignment on FZeuzProj");
static_assert(sizeof(FZeuzProj) == 0x0000C8, "Wrong size on FZeuzProj");
static_assert(offsetof(FZeuzProj, ID) == 0x000088, "Member 'FZeuzProj::ID' has a wrong offset!");
static_assert(offsetof(FZeuzProj, Account) == 0x000098, "Member 'FZeuzProj::Account' has a wrong offset!");
static_assert(offsetof(FZeuzProj, Desc) == 0x0000A8, "Member 'FZeuzProj::Desc' has a wrong offset!");
static_assert(offsetof(FZeuzProj, Envs) == 0x0000B8, "Member 'FZeuzProj::Envs' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountDeveloperCreateIn
// 0x0080 (0x0080 - 0x0000)
struct FZeuzAccountDeveloperCreateIn final 
{
public:
	class FString                                 Login;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountID;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccountRole;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1203[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PWHash;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzProperties                        Props;                                             // 0x0058(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountDeveloperCreateIn) == 0x000008, "Wrong alignment on FZeuzAccountDeveloperCreateIn");
static_assert(sizeof(FZeuzAccountDeveloperCreateIn) == 0x000080, "Wrong size on FZeuzAccountDeveloperCreateIn");
static_assert(offsetof(FZeuzAccountDeveloperCreateIn, Login) == 0x000000, "Member 'FZeuzAccountDeveloperCreateIn::Login' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperCreateIn, Title) == 0x000010, "Member 'FZeuzAccountDeveloperCreateIn::Title' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperCreateIn, Desc) == 0x000020, "Member 'FZeuzAccountDeveloperCreateIn::Desc' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperCreateIn, AccountID) == 0x000030, "Member 'FZeuzAccountDeveloperCreateIn::AccountID' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperCreateIn, AccountRole) == 0x000040, "Member 'FZeuzAccountDeveloperCreateIn::AccountRole' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperCreateIn, PWHash) == 0x000048, "Member 'FZeuzAccountDeveloperCreateIn::PWHash' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperCreateIn, Props) == 0x000058, "Member 'FZeuzAccountDeveloperCreateIn::Props' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountChange
// 0x0010 (0x0010 - 0x0000)
struct FZeuzAccountChange
{
public:
	class FString                                 Account;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountChange) == 0x000008, "Wrong alignment on FZeuzAccountChange");
static_assert(sizeof(FZeuzAccountChange) == 0x000010, "Wrong size on FZeuzAccountChange");
static_assert(offsetof(FZeuzAccountChange, Account) == 0x000000, "Member 'FZeuzAccountChange::Account' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountProjectDeleteIn
// 0x0010 (0x0020 - 0x0010)
struct FZeuzAccountProjectDeleteIn final  : public FZeuzAccountChange
{
public:
	class FString                                 Proj;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountProjectDeleteIn) == 0x000008, "Wrong alignment on FZeuzAccountProjectDeleteIn");
static_assert(sizeof(FZeuzAccountProjectDeleteIn) == 0x000020, "Wrong size on FZeuzAccountProjectDeleteIn");
static_assert(offsetof(FZeuzAccountProjectDeleteIn, Proj) == 0x000010, "Member 'FZeuzAccountProjectDeleteIn::Proj' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileUserCreateIn
// 0x0040 (0x0040 - 0x0000)
struct FZeuzProfileUserCreateIn final 
{
public:
	class FString                                 Login;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWHash;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProfileUserCreateIn) == 0x000008, "Wrong alignment on FZeuzProfileUserCreateIn");
static_assert(sizeof(FZeuzProfileUserCreateIn) == 0x000040, "Wrong size on FZeuzProfileUserCreateIn");
static_assert(offsetof(FZeuzProfileUserCreateIn, Login) == 0x000000, "Member 'FZeuzProfileUserCreateIn::Login' has a wrong offset!");
static_assert(offsetof(FZeuzProfileUserCreateIn, Name) == 0x000010, "Member 'FZeuzProfileUserCreateIn::Name' has a wrong offset!");
static_assert(offsetof(FZeuzProfileUserCreateIn, Desc) == 0x000020, "Member 'FZeuzProfileUserCreateIn::Desc' has a wrong offset!");
static_assert(offsetof(FZeuzProfileUserCreateIn, PWHash) == 0x000030, "Member 'FZeuzProfileUserCreateIn::PWHash' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAPIKeyGetIn
// 0x0028 (0x0028 - 0x0000)
struct FZeuzAPIKeyGetIn final 
{
public:
	class FString                                 APIKeyID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProjID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotRevoked;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1204[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzAPIKeyGetIn) == 0x000008, "Wrong alignment on FZeuzAPIKeyGetIn");
static_assert(sizeof(FZeuzAPIKeyGetIn) == 0x000028, "Wrong size on FZeuzAPIKeyGetIn");
static_assert(offsetof(FZeuzAPIKeyGetIn, APIKeyID) == 0x000000, "Member 'FZeuzAPIKeyGetIn::APIKeyID' has a wrong offset!");
static_assert(offsetof(FZeuzAPIKeyGetIn, ProjID) == 0x000010, "Member 'FZeuzAPIKeyGetIn::ProjID' has a wrong offset!");
static_assert(offsetof(FZeuzAPIKeyGetIn, NotRevoked) == 0x000020, "Member 'FZeuzAPIKeyGetIn::NotRevoked' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAdminStatsIn
// 0x0050 (0x0050 - 0x0000)
struct FZeuzAdminStatsIn final 
{
public:
	class FString                                 Table;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Start;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 End;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupBy;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Count;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAdminStatsIn) == 0x000008, "Wrong alignment on FZeuzAdminStatsIn");
static_assert(sizeof(FZeuzAdminStatsIn) == 0x000050, "Wrong size on FZeuzAdminStatsIn");
static_assert(offsetof(FZeuzAdminStatsIn, Table) == 0x000000, "Member 'FZeuzAdminStatsIn::Table' has a wrong offset!");
static_assert(offsetof(FZeuzAdminStatsIn, Start) == 0x000010, "Member 'FZeuzAdminStatsIn::Start' has a wrong offset!");
static_assert(offsetof(FZeuzAdminStatsIn, End) == 0x000020, "Member 'FZeuzAdminStatsIn::End' has a wrong offset!");
static_assert(offsetof(FZeuzAdminStatsIn, GroupBy) == 0x000030, "Member 'FZeuzAdminStatsIn::GroupBy' has a wrong offset!");
static_assert(offsetof(FZeuzAdminStatsIn, Count) == 0x000040, "Member 'FZeuzAdminStatsIn::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzInvItem
// 0x0038 (0x00C0 - 0x0088)
struct FZeuzInvItem final  : public FZeuzItemCommon
{
public:
	class FString                                 ID;                                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1205[0x4];                                     // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzInvItem) == 0x000008, "Wrong alignment on FZeuzInvItem");
static_assert(sizeof(FZeuzInvItem) == 0x0000C0, "Wrong size on FZeuzInvItem");
static_assert(offsetof(FZeuzInvItem, ID) == 0x000088, "Member 'FZeuzInvItem::ID' has a wrong offset!");
static_assert(offsetof(FZeuzInvItem, UserID) == 0x000098, "Member 'FZeuzInvItem::UserID' has a wrong offset!");
static_assert(offsetof(FZeuzInvItem, Name) == 0x0000A8, "Member 'FZeuzInvItem::Name' has a wrong offset!");
static_assert(offsetof(FZeuzInvItem, Count) == 0x0000B8, "Member 'FZeuzInvItem::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountDeveloperPasswordResetIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzAccountDeveloperPasswordResetIn final 
{
public:
	class FString                                 EMail;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountDeveloperPasswordResetIn) == 0x000008, "Wrong alignment on FZeuzAccountDeveloperPasswordResetIn");
static_assert(sizeof(FZeuzAccountDeveloperPasswordResetIn) == 0x000020, "Wrong size on FZeuzAccountDeveloperPasswordResetIn");
static_assert(offsetof(FZeuzAccountDeveloperPasswordResetIn, EMail) == 0x000000, "Member 'FZeuzAccountDeveloperPasswordResetIn::EMail' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperPasswordResetIn, Token) == 0x000010, "Member 'FZeuzAccountDeveloperPasswordResetIn::Token' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAuthLoginResult
// 0x0068 (0x0068 - 0x0000)
struct FZeuzAuthLoginResult final 
{
public:
	class FString                                 Dev;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 User;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApiKey;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Proj;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionNonce;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         ValidThru;                                         // 0x0060(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAuthLoginResult) == 0x000008, "Wrong alignment on FZeuzAuthLoginResult");
static_assert(sizeof(FZeuzAuthLoginResult) == 0x000068, "Wrong size on FZeuzAuthLoginResult");
static_assert(offsetof(FZeuzAuthLoginResult, Dev) == 0x000000, "Member 'FZeuzAuthLoginResult::Dev' has a wrong offset!");
static_assert(offsetof(FZeuzAuthLoginResult, User) == 0x000010, "Member 'FZeuzAuthLoginResult::User' has a wrong offset!");
static_assert(offsetof(FZeuzAuthLoginResult, ApiKey) == 0x000020, "Member 'FZeuzAuthLoginResult::ApiKey' has a wrong offset!");
static_assert(offsetof(FZeuzAuthLoginResult, Proj) == 0x000030, "Member 'FZeuzAuthLoginResult::Proj' has a wrong offset!");
static_assert(offsetof(FZeuzAuthLoginResult, SessionID) == 0x000040, "Member 'FZeuzAuthLoginResult::SessionID' has a wrong offset!");
static_assert(offsetof(FZeuzAuthLoginResult, SessionNonce) == 0x000050, "Member 'FZeuzAuthLoginResult::SessionNonce' has a wrong offset!");
static_assert(offsetof(FZeuzAuthLoginResult, ValidThru) == 0x000060, "Member 'FZeuzAuthLoginResult::ValidThru' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAuthLoginIn
// 0x0040 (0x0040 - 0x0000)
struct FZeuzAuthLoginIn final 
{
public:
	class FString                                 Login;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUser;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsApi;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1206[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZeuzTimestamp                         Time;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nonce;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Hash;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAuthLoginIn) == 0x000008, "Wrong alignment on FZeuzAuthLoginIn");
static_assert(sizeof(FZeuzAuthLoginIn) == 0x000040, "Wrong size on FZeuzAuthLoginIn");
static_assert(offsetof(FZeuzAuthLoginIn, Login) == 0x000000, "Member 'FZeuzAuthLoginIn::Login' has a wrong offset!");
static_assert(offsetof(FZeuzAuthLoginIn, IsUser) == 0x000010, "Member 'FZeuzAuthLoginIn::IsUser' has a wrong offset!");
static_assert(offsetof(FZeuzAuthLoginIn, IsApi) == 0x000011, "Member 'FZeuzAuthLoginIn::IsApi' has a wrong offset!");
static_assert(offsetof(FZeuzAuthLoginIn, Time) == 0x000018, "Member 'FZeuzAuthLoginIn::Time' has a wrong offset!");
static_assert(offsetof(FZeuzAuthLoginIn, Nonce) == 0x000020, "Member 'FZeuzAuthLoginIn::Nonce' has a wrong offset!");
static_assert(offsetof(FZeuzAuthLoginIn, Hash) == 0x000030, "Member 'FZeuzAuthLoginIn::Hash' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAPIKey
// 0x0058 (0x00E0 - 0x0088)
struct FZeuzAPIKey final  : public FZeuzItemCommon
{
public:
	class FString                                 APIKeyID;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProjID;                                            // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWHash;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Revoked;                                           // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1207[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZeuzTimestamp                         RevokedAt;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         LastLogin;                                         // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAPIKey) == 0x000008, "Wrong alignment on FZeuzAPIKey");
static_assert(sizeof(FZeuzAPIKey) == 0x0000E0, "Wrong size on FZeuzAPIKey");
static_assert(offsetof(FZeuzAPIKey, APIKeyID) == 0x000088, "Member 'FZeuzAPIKey::APIKeyID' has a wrong offset!");
static_assert(offsetof(FZeuzAPIKey, Key) == 0x000098, "Member 'FZeuzAPIKey::Key' has a wrong offset!");
static_assert(offsetof(FZeuzAPIKey, ProjID) == 0x0000A8, "Member 'FZeuzAPIKey::ProjID' has a wrong offset!");
static_assert(offsetof(FZeuzAPIKey, PWHash) == 0x0000B8, "Member 'FZeuzAPIKey::PWHash' has a wrong offset!");
static_assert(offsetof(FZeuzAPIKey, Revoked) == 0x0000C8, "Member 'FZeuzAPIKey::Revoked' has a wrong offset!");
static_assert(offsetof(FZeuzAPIKey, RevokedAt) == 0x0000D0, "Member 'FZeuzAPIKey::RevokedAt' has a wrong offset!");
static_assert(offsetof(FZeuzAPIKey, LastLogin) == 0x0000D8, "Member 'FZeuzAPIKey::LastLogin' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAPIKeyDeleteIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzAPIKeyDeleteIn final 
{
public:
	class FString                                 APIKeyID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProjID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAPIKeyDeleteIn) == 0x000008, "Wrong alignment on FZeuzAPIKeyDeleteIn");
static_assert(sizeof(FZeuzAPIKeyDeleteIn) == 0x000020, "Wrong size on FZeuzAPIKeyDeleteIn");
static_assert(offsetof(FZeuzAPIKeyDeleteIn, APIKeyID) == 0x000000, "Member 'FZeuzAPIKeyDeleteIn::APIKeyID' has a wrong offset!");
static_assert(offsetof(FZeuzAPIKeyDeleteIn, ProjID) == 0x000010, "Member 'FZeuzAPIKeyDeleteIn::ProjID' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAPIKeyPwHashIn
// 0x0030 (0x0030 - 0x0000)
struct FZeuzAPIKeyPwHashIn final 
{
public:
	class FString                                 APIKeyID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProjID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWHash;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAPIKeyPwHashIn) == 0x000008, "Wrong alignment on FZeuzAPIKeyPwHashIn");
static_assert(sizeof(FZeuzAPIKeyPwHashIn) == 0x000030, "Wrong size on FZeuzAPIKeyPwHashIn");
static_assert(offsetof(FZeuzAPIKeyPwHashIn, APIKeyID) == 0x000000, "Member 'FZeuzAPIKeyPwHashIn::APIKeyID' has a wrong offset!");
static_assert(offsetof(FZeuzAPIKeyPwHashIn, ProjID) == 0x000010, "Member 'FZeuzAPIKeyPwHashIn::ProjID' has a wrong offset!");
static_assert(offsetof(FZeuzAPIKeyPwHashIn, PWHash) == 0x000020, "Member 'FZeuzAPIKeyPwHashIn::PWHash' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileItemClassConfig
// 0x0070 (0x0070 - 0x0000)
struct FZeuzProfileItemClassConfig final 
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountMaxU;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1208[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZeuzTimestamp                         LimitAddInterval;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Params;                                            // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProfileItemClassConfig) == 0x000008, "Wrong alignment on FZeuzProfileItemClassConfig");
static_assert(sizeof(FZeuzProfileItemClassConfig) == 0x000070, "Wrong size on FZeuzProfileItemClassConfig");
static_assert(offsetof(FZeuzProfileItemClassConfig, Name) == 0x000000, "Member 'FZeuzProfileItemClassConfig::Name' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemClassConfig, CountMaxU) == 0x000010, "Member 'FZeuzProfileItemClassConfig::CountMaxU' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemClassConfig, LimitAddInterval) == 0x000018, "Member 'FZeuzProfileItemClassConfig::LimitAddInterval' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemClassConfig, Params) == 0x000020, "Member 'FZeuzProfileItemClassConfig::Params' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileItemConfigGetOut
// 0x0020 (0x0020 - 0x0000)
struct FZeuzProfileItemConfigGetOut final 
{
public:
	TArray<struct FZeuzProfileItemClassConfig>    Classes;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FZeuzProfileItemConfig>         Items;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProfileItemConfigGetOut) == 0x000008, "Wrong alignment on FZeuzProfileItemConfigGetOut");
static_assert(sizeof(FZeuzProfileItemConfigGetOut) == 0x000020, "Wrong size on FZeuzProfileItemConfigGetOut");
static_assert(offsetof(FZeuzProfileItemConfigGetOut, Classes) == 0x000000, "Member 'FZeuzProfileItemConfigGetOut::Classes' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemConfigGetOut, Items) == 0x000010, "Member 'FZeuzProfileItemConfigGetOut::Items' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzImageManagerListEntry
// 0x0048 (0x0048 - 0x0000)
struct FZeuzImageManagerListEntry final 
{
public:
	struct FZeuzTimestamp                         Timestamp;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageHash;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageURL;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzImageManagerListEntry) == 0x000008, "Wrong alignment on FZeuzImageManagerListEntry");
static_assert(sizeof(FZeuzImageManagerListEntry) == 0x000048, "Wrong size on FZeuzImageManagerListEntry");
static_assert(offsetof(FZeuzImageManagerListEntry, Timestamp) == 0x000000, "Member 'FZeuzImageManagerListEntry::Timestamp' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerListEntry, ImageHash) == 0x000008, "Member 'FZeuzImageManagerListEntry::ImageHash' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerListEntry, ImageURL) == 0x000018, "Member 'FZeuzImageManagerListEntry::ImageURL' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerListEntry, Title) == 0x000028, "Member 'FZeuzImageManagerListEntry::Title' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerListEntry, Version) == 0x000038, "Member 'FZeuzImageManagerListEntry::Version' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzKVStoreKeyValue
// 0x0010 (0x0030 - 0x0020)
struct FZeuzKVStoreKeyValue : public FZeuzKVStoreKey
{
public:
	class FString                                 Value;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzKVStoreKeyValue) == 0x000008, "Wrong alignment on FZeuzKVStoreKeyValue");
static_assert(sizeof(FZeuzKVStoreKeyValue) == 0x000030, "Wrong size on FZeuzKVStoreKeyValue");
static_assert(offsetof(FZeuzKVStoreKeyValue, Value) == 0x000020, "Member 'FZeuzKVStoreKeyValue::Value' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzUser
// 0x0050 (0x00D8 - 0x0088)
struct FZeuzUser final  : public FZeuzItemCommon
{
public:
	class FString                                 ID;                                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Login;                                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWHash;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzUser) == 0x000008, "Wrong alignment on FZeuzUser");
static_assert(sizeof(FZeuzUser) == 0x0000D8, "Wrong size on FZeuzUser");
static_assert(offsetof(FZeuzUser, ID) == 0x000088, "Member 'FZeuzUser::ID' has a wrong offset!");
static_assert(offsetof(FZeuzUser, Login) == 0x000098, "Member 'FZeuzUser::Login' has a wrong offset!");
static_assert(offsetof(FZeuzUser, Name) == 0x0000A8, "Member 'FZeuzUser::Name' has a wrong offset!");
static_assert(offsetof(FZeuzUser, PWHash) == 0x0000B8, "Member 'FZeuzUser::PWHash' has a wrong offset!");
static_assert(offsetof(FZeuzUser, Desc) == 0x0000C8, "Member 'FZeuzUser::Desc' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileUsersListOut
// 0x0018 (0x0018 - 0x0000)
struct FZeuzProfileUsersListOut final 
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1209[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         UserIDs;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProfileUsersListOut) == 0x000008, "Wrong alignment on FZeuzProfileUsersListOut");
static_assert(sizeof(FZeuzProfileUsersListOut) == 0x000018, "Wrong size on FZeuzProfileUsersListOut");
static_assert(offsetof(FZeuzProfileUsersListOut, Count) == 0x000000, "Member 'FZeuzProfileUsersListOut::Count' has a wrong offset!");
static_assert(offsetof(FZeuzProfileUsersListOut, UserIDs) == 0x000008, "Member 'FZeuzProfileUsersListOut::UserIDs' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileItemUserName
// 0x0020 (0x0020 - 0x0000)
struct FZeuzProfileItemUserName final 
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProfileItemUserName) == 0x000008, "Wrong alignment on FZeuzProfileItemUserName");
static_assert(sizeof(FZeuzProfileItemUserName) == 0x000020, "Wrong size on FZeuzProfileItemUserName");
static_assert(offsetof(FZeuzProfileItemUserName, UserID) == 0x000000, "Member 'FZeuzProfileItemUserName::UserID' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemUserName, Name) == 0x000010, "Member 'FZeuzProfileItemUserName::Name' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileItemRemByNameIn
// 0x0028 (0x0028 - 0x0000)
struct FZeuzProfileItemRemByNameIn final 
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120A[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzProfileItemRemByNameIn) == 0x000008, "Wrong alignment on FZeuzProfileItemRemByNameIn");
static_assert(sizeof(FZeuzProfileItemRemByNameIn) == 0x000028, "Wrong size on FZeuzProfileItemRemByNameIn");
static_assert(offsetof(FZeuzProfileItemRemByNameIn, UserID) == 0x000000, "Member 'FZeuzProfileItemRemByNameIn::UserID' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemRemByNameIn, Name) == 0x000010, "Member 'FZeuzProfileItemRemByNameIn::Name' has a wrong offset!");
static_assert(offsetof(FZeuzProfileItemRemByNameIn, Count) == 0x000020, "Member 'FZeuzProfileItemRemByNameIn::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileItemTransferIn
// 0x0010 (0x0028 - 0x0018)
struct FZeuzProfileItemTransferIn final  : public FZeuzProfileItemMove
{
public:
	class FString                                 UserIDTo;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProfileItemTransferIn) == 0x000008, "Wrong alignment on FZeuzProfileItemTransferIn");
static_assert(sizeof(FZeuzProfileItemTransferIn) == 0x000028, "Wrong size on FZeuzProfileItemTransferIn");
static_assert(offsetof(FZeuzProfileItemTransferIn, UserIDTo) == 0x000018, "Member 'FZeuzProfileItemTransferIn::UserIDTo' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProfileUsersListIn
// 0x0018 (0x0018 - 0x0000)
struct FZeuzProfileUsersListIn final 
{
public:
	class FString                                 Offset;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzProfileUsersListIn) == 0x000008, "Wrong alignment on FZeuzProfileUsersListIn");
static_assert(sizeof(FZeuzProfileUsersListIn) == 0x000018, "Wrong size on FZeuzProfileUsersListIn");
static_assert(offsetof(FZeuzProfileUsersListIn, Offset) == 0x000000, "Member 'FZeuzProfileUsersListIn::Offset' has a wrong offset!");
static_assert(offsetof(FZeuzProfileUsersListIn, Count) == 0x000010, "Member 'FZeuzProfileUsersListIn::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountCreateIn
// 0x00C8 (0x00C8 - 0x0000)
struct FZeuzAccountCreateIn final 
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EMail;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Company;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Department;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZIP;                                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 City;                                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StreetAddr;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzProperties                        Props;                                             // 0x0090(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FZeuzProvisioningAccount>       ProvisioningAccounts;                              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountCreateIn) == 0x000008, "Wrong alignment on FZeuzAccountCreateIn");
static_assert(sizeof(FZeuzAccountCreateIn) == 0x0000C8, "Wrong size on FZeuzAccountCreateIn");
static_assert(offsetof(FZeuzAccountCreateIn, Title) == 0x000000, "Member 'FZeuzAccountCreateIn::Title' has a wrong offset!");
static_assert(offsetof(FZeuzAccountCreateIn, Desc) == 0x000010, "Member 'FZeuzAccountCreateIn::Desc' has a wrong offset!");
static_assert(offsetof(FZeuzAccountCreateIn, EMail) == 0x000020, "Member 'FZeuzAccountCreateIn::EMail' has a wrong offset!");
static_assert(offsetof(FZeuzAccountCreateIn, Company) == 0x000030, "Member 'FZeuzAccountCreateIn::Company' has a wrong offset!");
static_assert(offsetof(FZeuzAccountCreateIn, Department) == 0x000040, "Member 'FZeuzAccountCreateIn::Department' has a wrong offset!");
static_assert(offsetof(FZeuzAccountCreateIn, Country) == 0x000050, "Member 'FZeuzAccountCreateIn::Country' has a wrong offset!");
static_assert(offsetof(FZeuzAccountCreateIn, ZIP) == 0x000060, "Member 'FZeuzAccountCreateIn::ZIP' has a wrong offset!");
static_assert(offsetof(FZeuzAccountCreateIn, City) == 0x000070, "Member 'FZeuzAccountCreateIn::City' has a wrong offset!");
static_assert(offsetof(FZeuzAccountCreateIn, StreetAddr) == 0x000080, "Member 'FZeuzAccountCreateIn::StreetAddr' has a wrong offset!");
static_assert(offsetof(FZeuzAccountCreateIn, Props) == 0x000090, "Member 'FZeuzAccountCreateIn::Props' has a wrong offset!");
static_assert(offsetof(FZeuzAccountCreateIn, ProvisioningAccounts) == 0x0000B8, "Member 'FZeuzAccountCreateIn::ProvisioningAccounts' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountDeveloperCreatePwHashIn
// 0x0040 (0x0040 - 0x0000)
struct FZeuzAccountDeveloperCreatePwHashIn final 
{
public:
	class FString                                 DevID;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountID;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Hash;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWHash;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountDeveloperCreatePwHashIn) == 0x000008, "Wrong alignment on FZeuzAccountDeveloperCreatePwHashIn");
static_assert(sizeof(FZeuzAccountDeveloperCreatePwHashIn) == 0x000040, "Wrong size on FZeuzAccountDeveloperCreatePwHashIn");
static_assert(offsetof(FZeuzAccountDeveloperCreatePwHashIn, DevID) == 0x000000, "Member 'FZeuzAccountDeveloperCreatePwHashIn::DevID' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperCreatePwHashIn, AccountID) == 0x000010, "Member 'FZeuzAccountDeveloperCreatePwHashIn::AccountID' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperCreatePwHashIn, Hash) == 0x000020, "Member 'FZeuzAccountDeveloperCreatePwHashIn::Hash' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDeveloperCreatePwHashIn, PWHash) == 0x000030, "Member 'FZeuzAccountDeveloperCreatePwHashIn::PWHash' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineResourceDeallocateIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzMachineResourceDeallocateIn final 
{
public:
	class FString                                 AllocationID;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Machines;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMachineResourceDeallocateIn) == 0x000008, "Wrong alignment on FZeuzMachineResourceDeallocateIn");
static_assert(sizeof(FZeuzMachineResourceDeallocateIn) == 0x000020, "Wrong size on FZeuzMachineResourceDeallocateIn");
static_assert(offsetof(FZeuzMachineResourceDeallocateIn, AllocationID) == 0x000000, "Member 'FZeuzMachineResourceDeallocateIn::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDeallocateIn, Machines) == 0x000010, "Member 'FZeuzMachineResourceDeallocateIn::Machines' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountDevQuickSetupOut
// 0x0080 (0x0080 - 0x0000)
struct FZeuzAccountDevQuickSetupOut final 
{
public:
	class FString                                 Login;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Account;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 User;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dev;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Team;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Proj;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Env;                                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApiKey;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountDevQuickSetupOut) == 0x000008, "Wrong alignment on FZeuzAccountDevQuickSetupOut");
static_assert(sizeof(FZeuzAccountDevQuickSetupOut) == 0x000080, "Wrong size on FZeuzAccountDevQuickSetupOut");
static_assert(offsetof(FZeuzAccountDevQuickSetupOut, Login) == 0x000000, "Member 'FZeuzAccountDevQuickSetupOut::Login' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDevQuickSetupOut, Account) == 0x000010, "Member 'FZeuzAccountDevQuickSetupOut::Account' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDevQuickSetupOut, User) == 0x000020, "Member 'FZeuzAccountDevQuickSetupOut::User' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDevQuickSetupOut, Dev) == 0x000030, "Member 'FZeuzAccountDevQuickSetupOut::Dev' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDevQuickSetupOut, Team) == 0x000040, "Member 'FZeuzAccountDevQuickSetupOut::Team' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDevQuickSetupOut, Proj) == 0x000050, "Member 'FZeuzAccountDevQuickSetupOut::Proj' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDevQuickSetupOut, Env) == 0x000060, "Member 'FZeuzAccountDevQuickSetupOut::Env' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDevQuickSetupOut, ApiKey) == 0x000070, "Member 'FZeuzAccountDevQuickSetupOut::ApiKey' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineSpec
// 0x0028 (0x0028 - 0x0000)
struct FZeuzMachineSpec final 
{
public:
	class FString                                 OS;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoreCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoreMhz;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemoryMB;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StorageGB;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IOBandwidthMBps;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InetBandwidthMBps;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMachineSpec) == 0x000008, "Wrong alignment on FZeuzMachineSpec");
static_assert(sizeof(FZeuzMachineSpec) == 0x000028, "Wrong size on FZeuzMachineSpec");
static_assert(offsetof(FZeuzMachineSpec, OS) == 0x000000, "Member 'FZeuzMachineSpec::OS' has a wrong offset!");
static_assert(offsetof(FZeuzMachineSpec, CoreCount) == 0x000010, "Member 'FZeuzMachineSpec::CoreCount' has a wrong offset!");
static_assert(offsetof(FZeuzMachineSpec, CoreMhz) == 0x000014, "Member 'FZeuzMachineSpec::CoreMhz' has a wrong offset!");
static_assert(offsetof(FZeuzMachineSpec, MemoryMB) == 0x000018, "Member 'FZeuzMachineSpec::MemoryMB' has a wrong offset!");
static_assert(offsetof(FZeuzMachineSpec, StorageGB) == 0x00001C, "Member 'FZeuzMachineSpec::StorageGB' has a wrong offset!");
static_assert(offsetof(FZeuzMachineSpec, IOBandwidthMBps) == 0x000020, "Member 'FZeuzMachineSpec::IOBandwidthMBps' has a wrong offset!");
static_assert(offsetof(FZeuzMachineSpec, InetBandwidthMBps) == 0x000024, "Member 'FZeuzMachineSpec::InetBandwidthMBps' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineResourceDataIn
// 0x00C0 (0x00C0 - 0x0000)
struct FZeuzMachineResourceDataIn final 
{
public:
	class FString                                 LocationID;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzMachineSpec                       Spec;                                              // 0x0010(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Hostname;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreOnAlloc;                                     // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120C[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AccountID;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TierLevel;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120D[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZeuzTags                              Tags;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ResourceClusterID;                                 // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NodeID;                                            // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocatingDisabled;                                // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120E[0x7];                                     // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzMachineResourceDataIn) == 0x000008, "Wrong alignment on FZeuzMachineResourceDataIn");
static_assert(sizeof(FZeuzMachineResourceDataIn) == 0x0000C0, "Wrong size on FZeuzMachineResourceDataIn");
static_assert(offsetof(FZeuzMachineResourceDataIn, LocationID) == 0x000000, "Member 'FZeuzMachineResourceDataIn::LocationID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDataIn, Spec) == 0x000010, "Member 'FZeuzMachineResourceDataIn::Spec' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDataIn, Hostname) == 0x000038, "Member 'FZeuzMachineResourceDataIn::Hostname' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDataIn, Provider) == 0x000048, "Member 'FZeuzMachineResourceDataIn::Provider' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDataIn, IP) == 0x000058, "Member 'FZeuzMachineResourceDataIn::IP' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDataIn, IgnoreOnAlloc) == 0x000068, "Member 'FZeuzMachineResourceDataIn::IgnoreOnAlloc' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDataIn, AccountID) == 0x000070, "Member 'FZeuzMachineResourceDataIn::AccountID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDataIn, TierLevel) == 0x000080, "Member 'FZeuzMachineResourceDataIn::TierLevel' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDataIn, Tags) == 0x000088, "Member 'FZeuzMachineResourceDataIn::Tags' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDataIn, ResourceClusterID) == 0x000098, "Member 'FZeuzMachineResourceDataIn::ResourceClusterID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDataIn, NodeID) == 0x0000A8, "Member 'FZeuzMachineResourceDataIn::NodeID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDataIn, AllocatingDisabled) == 0x0000B8, "Member 'FZeuzMachineResourceDataIn::AllocatingDisabled' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountDevQuickSetupIn
// 0x0030 (0x0030 - 0x0000)
struct FZeuzAccountDevQuickSetupIn final 
{
public:
	class FString                                 Login;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWHash;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountDevQuickSetupIn) == 0x000008, "Wrong alignment on FZeuzAccountDevQuickSetupIn");
static_assert(sizeof(FZeuzAccountDevQuickSetupIn) == 0x000030, "Wrong size on FZeuzAccountDevQuickSetupIn");
static_assert(offsetof(FZeuzAccountDevQuickSetupIn, Login) == 0x000000, "Member 'FZeuzAccountDevQuickSetupIn::Login' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDevQuickSetupIn, Title) == 0x000010, "Member 'FZeuzAccountDevQuickSetupIn::Title' has a wrong offset!");
static_assert(offsetof(FZeuzAccountDevQuickSetupIn, PWHash) == 0x000020, "Member 'FZeuzAccountDevQuickSetupIn::PWHash' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountEnvCreateIn
// 0x0058 (0x0058 - 0x0000)
struct FZeuzAccountEnvCreateIn final 
{
public:
	class FString                                 Proj;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzProperties                        Props;                                             // 0x0030(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountEnvCreateIn) == 0x000008, "Wrong alignment on FZeuzAccountEnvCreateIn");
static_assert(sizeof(FZeuzAccountEnvCreateIn) == 0x000058, "Wrong size on FZeuzAccountEnvCreateIn");
static_assert(offsetof(FZeuzAccountEnvCreateIn, Proj) == 0x000000, "Member 'FZeuzAccountEnvCreateIn::Proj' has a wrong offset!");
static_assert(offsetof(FZeuzAccountEnvCreateIn, Title) == 0x000010, "Member 'FZeuzAccountEnvCreateIn::Title' has a wrong offset!");
static_assert(offsetof(FZeuzAccountEnvCreateIn, Desc) == 0x000020, "Member 'FZeuzAccountEnvCreateIn::Desc' has a wrong offset!");
static_assert(offsetof(FZeuzAccountEnvCreateIn, Props) == 0x000030, "Member 'FZeuzAccountEnvCreateIn::Props' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineResourceAllocateIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzMachineResourceAllocateIn final 
{
public:
	class FString                                 AllocationID;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Resources;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMachineResourceAllocateIn) == 0x000008, "Wrong alignment on FZeuzMachineResourceAllocateIn");
static_assert(sizeof(FZeuzMachineResourceAllocateIn) == 0x000020, "Wrong size on FZeuzMachineResourceAllocateIn");
static_assert(offsetof(FZeuzMachineResourceAllocateIn, AllocationID) == 0x000000, "Member 'FZeuzMachineResourceAllocateIn::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceAllocateIn, Resources) == 0x000010, "Member 'FZeuzMachineResourceAllocateIn::Resources' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountEnvDeleteIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzAccountEnvDeleteIn final 
{
public:
	class FString                                 Proj;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Env;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountEnvDeleteIn) == 0x000008, "Wrong alignment on FZeuzAccountEnvDeleteIn");
static_assert(sizeof(FZeuzAccountEnvDeleteIn) == 0x000020, "Wrong size on FZeuzAccountEnvDeleteIn");
static_assert(offsetof(FZeuzAccountEnvDeleteIn, Proj) == 0x000000, "Member 'FZeuzAccountEnvDeleteIn::Proj' has a wrong offset!");
static_assert(offsetof(FZeuzAccountEnvDeleteIn, Env) == 0x000010, "Member 'FZeuzAccountEnvDeleteIn::Env' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountProjectCreateIn
// 0x0048 (0x0058 - 0x0010)
struct FZeuzAccountProjectCreateIn final  : public FZeuzAccountChange
{
public:
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzProperties                        Props;                                             // 0x0030(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountProjectCreateIn) == 0x000008, "Wrong alignment on FZeuzAccountProjectCreateIn");
static_assert(sizeof(FZeuzAccountProjectCreateIn) == 0x000058, "Wrong size on FZeuzAccountProjectCreateIn");
static_assert(offsetof(FZeuzAccountProjectCreateIn, Title) == 0x000010, "Member 'FZeuzAccountProjectCreateIn::Title' has a wrong offset!");
static_assert(offsetof(FZeuzAccountProjectCreateIn, Desc) == 0x000020, "Member 'FZeuzAccountProjectCreateIn::Desc' has a wrong offset!");
static_assert(offsetof(FZeuzAccountProjectCreateIn, Props) == 0x000030, "Member 'FZeuzAccountProjectCreateIn::Props' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountQuotaInfo
// 0x0018 (0x0018 - 0x0000)
struct FZeuzAccountQuotaInfo final 
{
public:
	class FString                                 Account;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuotaCL;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuotaBM;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountQuotaInfo) == 0x000008, "Wrong alignment on FZeuzAccountQuotaInfo");
static_assert(sizeof(FZeuzAccountQuotaInfo) == 0x000018, "Wrong size on FZeuzAccountQuotaInfo");
static_assert(offsetof(FZeuzAccountQuotaInfo, Account) == 0x000000, "Member 'FZeuzAccountQuotaInfo::Account' has a wrong offset!");
static_assert(offsetof(FZeuzAccountQuotaInfo, QuotaCL) == 0x000010, "Member 'FZeuzAccountQuotaInfo::QuotaCL' has a wrong offset!");
static_assert(offsetof(FZeuzAccountQuotaInfo, QuotaBM) == 0x000014, "Member 'FZeuzAccountQuotaInfo::QuotaBM' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountTeamCreateIn
// 0x0058 (0x0068 - 0x0010)
struct FZeuzAccountTeamCreateIn final  : public FZeuzAccountChange
{
public:
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzProperties                        Props;                                             // 0x0030(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         Devs;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountTeamCreateIn) == 0x000008, "Wrong alignment on FZeuzAccountTeamCreateIn");
static_assert(sizeof(FZeuzAccountTeamCreateIn) == 0x000068, "Wrong size on FZeuzAccountTeamCreateIn");
static_assert(offsetof(FZeuzAccountTeamCreateIn, Title) == 0x000010, "Member 'FZeuzAccountTeamCreateIn::Title' has a wrong offset!");
static_assert(offsetof(FZeuzAccountTeamCreateIn, Desc) == 0x000020, "Member 'FZeuzAccountTeamCreateIn::Desc' has a wrong offset!");
static_assert(offsetof(FZeuzAccountTeamCreateIn, Props) == 0x000030, "Member 'FZeuzAccountTeamCreateIn::Props' has a wrong offset!");
static_assert(offsetof(FZeuzAccountTeamCreateIn, Devs) == 0x000058, "Member 'FZeuzAccountTeamCreateIn::Devs' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAccountTeamDeleteIn
// 0x0010 (0x0020 - 0x0010)
struct FZeuzAccountTeamDeleteIn final  : public FZeuzAccountChange
{
public:
	class FString                                 Team;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAccountTeamDeleteIn) == 0x000008, "Wrong alignment on FZeuzAccountTeamDeleteIn");
static_assert(sizeof(FZeuzAccountTeamDeleteIn) == 0x000020, "Wrong size on FZeuzAccountTeamDeleteIn");
static_assert(offsetof(FZeuzAccountTeamDeleteIn, Team) == 0x000010, "Member 'FZeuzAccountTeamDeleteIn::Team' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzTeam
// 0x0040 (0x00C8 - 0x0088)
struct FZeuzTeam final  : public FZeuzItemCommon
{
public:
	class FString                                 ID;                                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Account;                                           // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Devs;                                              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzTeam) == 0x000008, "Wrong alignment on FZeuzTeam");
static_assert(sizeof(FZeuzTeam) == 0x0000C8, "Wrong size on FZeuzTeam");
static_assert(offsetof(FZeuzTeam, ID) == 0x000088, "Member 'FZeuzTeam::ID' has a wrong offset!");
static_assert(offsetof(FZeuzTeam, Account) == 0x000098, "Member 'FZeuzTeam::Account' has a wrong offset!");
static_assert(offsetof(FZeuzTeam, Desc) == 0x0000A8, "Member 'FZeuzTeam::Desc' has a wrong offset!");
static_assert(offsetof(FZeuzTeam, Devs) == 0x0000B8, "Member 'FZeuzTeam::Devs' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineResourceInfo
// 0x00F0 (0x00F0 - 0x0000)
struct FZeuzMachineResourceInfo final 
{
public:
	class FString                                 ResourceID;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocationID;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzMachineSpec                       Spec;                                              // 0x0020(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Hostname;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreOnAlloc;                                     // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bound;                                             // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120F[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MachineID;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountID;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TierLevel;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1210[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZeuzTags                              Tags;                                              // 0x00A8(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ProvisionJobID;                                    // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceClusterID;                                 // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NodeID;                                            // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocatingDisabled;                                // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1211[0x7];                                     // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzMachineResourceInfo) == 0x000008, "Wrong alignment on FZeuzMachineResourceInfo");
static_assert(sizeof(FZeuzMachineResourceInfo) == 0x0000F0, "Wrong size on FZeuzMachineResourceInfo");
static_assert(offsetof(FZeuzMachineResourceInfo, ResourceID) == 0x000000, "Member 'FZeuzMachineResourceInfo::ResourceID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, LocationID) == 0x000010, "Member 'FZeuzMachineResourceInfo::LocationID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, Spec) == 0x000020, "Member 'FZeuzMachineResourceInfo::Spec' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, Provider) == 0x000048, "Member 'FZeuzMachineResourceInfo::Provider' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, Hostname) == 0x000058, "Member 'FZeuzMachineResourceInfo::Hostname' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, IP) == 0x000068, "Member 'FZeuzMachineResourceInfo::IP' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, IgnoreOnAlloc) == 0x000078, "Member 'FZeuzMachineResourceInfo::IgnoreOnAlloc' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, Bound) == 0x000079, "Member 'FZeuzMachineResourceInfo::Bound' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, MachineID) == 0x000080, "Member 'FZeuzMachineResourceInfo::MachineID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, AccountID) == 0x000090, "Member 'FZeuzMachineResourceInfo::AccountID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, TierLevel) == 0x0000A0, "Member 'FZeuzMachineResourceInfo::TierLevel' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, Tags) == 0x0000A8, "Member 'FZeuzMachineResourceInfo::Tags' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, ProvisionJobID) == 0x0000B8, "Member 'FZeuzMachineResourceInfo::ProvisionJobID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, ResourceClusterID) == 0x0000C8, "Member 'FZeuzMachineResourceInfo::ResourceClusterID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, NodeID) == 0x0000D8, "Member 'FZeuzMachineResourceInfo::NodeID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceInfo, AllocatingDisabled) == 0x0000E8, "Member 'FZeuzMachineResourceInfo::AllocatingDisabled' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineInfo
// 0x00C8 (0x00C8 - 0x0000)
struct FZeuzMachineInfo final 
{
public:
	class FString                                 MachineID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceID;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocationID;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AllocationID;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountID;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzMachineSpec                       Spec;                                              // 0x0050(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FZeuzTags                              Tags;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Regions;                                           // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 LocationType;                                      // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Created;                                           // 0x00B8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Finished;                                          // 0x00C0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMachineInfo) == 0x000008, "Wrong alignment on FZeuzMachineInfo");
static_assert(sizeof(FZeuzMachineInfo) == 0x0000C8, "Wrong size on FZeuzMachineInfo");
static_assert(offsetof(FZeuzMachineInfo, MachineID) == 0x000000, "Member 'FZeuzMachineInfo::MachineID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineInfo, ResourceID) == 0x000010, "Member 'FZeuzMachineInfo::ResourceID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineInfo, LocationID) == 0x000020, "Member 'FZeuzMachineInfo::LocationID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineInfo, AllocationID) == 0x000030, "Member 'FZeuzMachineInfo::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineInfo, AccountID) == 0x000040, "Member 'FZeuzMachineInfo::AccountID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineInfo, Spec) == 0x000050, "Member 'FZeuzMachineInfo::Spec' has a wrong offset!");
static_assert(offsetof(FZeuzMachineInfo, Tags) == 0x000078, "Member 'FZeuzMachineInfo::Tags' has a wrong offset!");
static_assert(offsetof(FZeuzMachineInfo, IP) == 0x000088, "Member 'FZeuzMachineInfo::IP' has a wrong offset!");
static_assert(offsetof(FZeuzMachineInfo, Regions) == 0x000098, "Member 'FZeuzMachineInfo::Regions' has a wrong offset!");
static_assert(offsetof(FZeuzMachineInfo, LocationType) == 0x0000A8, "Member 'FZeuzMachineInfo::LocationType' has a wrong offset!");
static_assert(offsetof(FZeuzMachineInfo, Created) == 0x0000B8, "Member 'FZeuzMachineInfo::Created' has a wrong offset!");
static_assert(offsetof(FZeuzMachineInfo, Finished) == 0x0000C0, "Member 'FZeuzMachineInfo::Finished' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineGetOut
// 0x0018 (0x0018 - 0x0000)
struct FZeuzMachineGetOut final 
{
public:
	TArray<struct FZeuzMachineInfo>               Items;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1212[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzMachineGetOut) == 0x000008, "Wrong alignment on FZeuzMachineGetOut");
static_assert(sizeof(FZeuzMachineGetOut) == 0x000018, "Wrong size on FZeuzMachineGetOut");
static_assert(offsetof(FZeuzMachineGetOut, Items) == 0x000000, "Member 'FZeuzMachineGetOut::Items' has a wrong offset!");
static_assert(offsetof(FZeuzMachineGetOut, Count) == 0x000010, "Member 'FZeuzMachineGetOut::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineTagsSetIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzMachineTagsSetIn final 
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTags                              Tags;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMachineTagsSetIn) == 0x000008, "Wrong alignment on FZeuzMachineTagsSetIn");
static_assert(sizeof(FZeuzMachineTagsSetIn) == 0x000020, "Wrong size on FZeuzMachineTagsSetIn");
static_assert(offsetof(FZeuzMachineTagsSetIn, ID) == 0x000000, "Member 'FZeuzMachineTagsSetIn::ID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineTagsSetIn, Tags) == 0x000010, "Member 'FZeuzMachineTagsSetIn::Tags' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineResourcesCountIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzMachineResourcesCountIn final 
{
public:
	class FString                                 AccountID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMachineResourcesCountIn) == 0x000008, "Wrong alignment on FZeuzMachineResourcesCountIn");
static_assert(sizeof(FZeuzMachineResourcesCountIn) == 0x000020, "Wrong size on FZeuzMachineResourcesCountIn");
static_assert(offsetof(FZeuzMachineResourcesCountIn, AccountID) == 0x000000, "Member 'FZeuzMachineResourcesCountIn::AccountID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourcesCountIn, Type) == 0x000010, "Member 'FZeuzMachineResourcesCountIn::Type' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachinePagination
// 0x0028 (0x0028 - 0x0000)
struct FZeuzMachinePagination
{
public:
	bool                                          GetTotal;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1213[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Offset;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1214[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderBy;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderAsc;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1215[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzMachinePagination) == 0x000008, "Wrong alignment on FZeuzMachinePagination");
static_assert(sizeof(FZeuzMachinePagination) == 0x000028, "Wrong size on FZeuzMachinePagination");
static_assert(offsetof(FZeuzMachinePagination, GetTotal) == 0x000000, "Member 'FZeuzMachinePagination::GetTotal' has a wrong offset!");
static_assert(offsetof(FZeuzMachinePagination, Offset) == 0x000004, "Member 'FZeuzMachinePagination::Offset' has a wrong offset!");
static_assert(offsetof(FZeuzMachinePagination, Limit) == 0x000008, "Member 'FZeuzMachinePagination::Limit' has a wrong offset!");
static_assert(offsetof(FZeuzMachinePagination, OrderBy) == 0x000010, "Member 'FZeuzMachinePagination::OrderBy' has a wrong offset!");
static_assert(offsetof(FZeuzMachinePagination, OrderAsc) == 0x000020, "Member 'FZeuzMachinePagination::OrderAsc' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineGetIn
// 0x0060 (0x0088 - 0x0028)
struct FZeuzMachineGetIn final  : public FZeuzMachinePagination
{
public:
	class FString                                 MachineID;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AllocationID;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionID;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocationType;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Start;                                             // 0x0078(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         End;                                               // 0x0080(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMachineGetIn) == 0x000008, "Wrong alignment on FZeuzMachineGetIn");
static_assert(sizeof(FZeuzMachineGetIn) == 0x000088, "Wrong size on FZeuzMachineGetIn");
static_assert(offsetof(FZeuzMachineGetIn, MachineID) == 0x000028, "Member 'FZeuzMachineGetIn::MachineID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineGetIn, AllocationID) == 0x000038, "Member 'FZeuzMachineGetIn::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineGetIn, RegionID) == 0x000048, "Member 'FZeuzMachineGetIn::RegionID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineGetIn, LocationType) == 0x000058, "Member 'FZeuzMachineGetIn::LocationType' has a wrong offset!");
static_assert(offsetof(FZeuzMachineGetIn, Tags) == 0x000068, "Member 'FZeuzMachineGetIn::Tags' has a wrong offset!");
static_assert(offsetof(FZeuzMachineGetIn, Start) == 0x000078, "Member 'FZeuzMachineGetIn::Start' has a wrong offset!");
static_assert(offsetof(FZeuzMachineGetIn, End) == 0x000080, "Member 'FZeuzMachineGetIn::End' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineResourceGetIn
// 0x0090 (0x0090 - 0x0000)
struct FZeuzMachineResourceGetIn final 
{
public:
	TArray<class FString>                         ResourceIDs;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RegionID;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzMachineSpec                       MinSpec;                                           // 0x0020(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         MachineType;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Accounts;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Machines;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Providers;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MinTierLevel;                                      // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetBound;                                          // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetUnbound;                                        // 0x008D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForAllocation;                                     // 0x008E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForDeprovisioning;                                 // 0x008F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMachineResourceGetIn) == 0x000008, "Wrong alignment on FZeuzMachineResourceGetIn");
static_assert(sizeof(FZeuzMachineResourceGetIn) == 0x000090, "Wrong size on FZeuzMachineResourceGetIn");
static_assert(offsetof(FZeuzMachineResourceGetIn, ResourceIDs) == 0x000000, "Member 'FZeuzMachineResourceGetIn::ResourceIDs' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceGetIn, RegionID) == 0x000010, "Member 'FZeuzMachineResourceGetIn::RegionID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceGetIn, MinSpec) == 0x000020, "Member 'FZeuzMachineResourceGetIn::MinSpec' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceGetIn, MachineType) == 0x000048, "Member 'FZeuzMachineResourceGetIn::MachineType' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceGetIn, Accounts) == 0x000058, "Member 'FZeuzMachineResourceGetIn::Accounts' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceGetIn, Machines) == 0x000068, "Member 'FZeuzMachineResourceGetIn::Machines' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceGetIn, Providers) == 0x000078, "Member 'FZeuzMachineResourceGetIn::Providers' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceGetIn, MinTierLevel) == 0x000088, "Member 'FZeuzMachineResourceGetIn::MinTierLevel' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceGetIn, GetBound) == 0x00008C, "Member 'FZeuzMachineResourceGetIn::GetBound' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceGetIn, GetUnbound) == 0x00008D, "Member 'FZeuzMachineResourceGetIn::GetUnbound' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceGetIn, ForAllocation) == 0x00008E, "Member 'FZeuzMachineResourceGetIn::ForAllocation' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceGetIn, ForDeprovisioning) == 0x00008F, "Member 'FZeuzMachineResourceGetIn::ForDeprovisioning' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineResourceDeprovisionIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzMachineResourceDeprovisionIn final 
{
public:
	class FString                                 AllocationID;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Resources;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMachineResourceDeprovisionIn) == 0x000008, "Wrong alignment on FZeuzMachineResourceDeprovisionIn");
static_assert(sizeof(FZeuzMachineResourceDeprovisionIn) == 0x000020, "Wrong size on FZeuzMachineResourceDeprovisionIn");
static_assert(offsetof(FZeuzMachineResourceDeprovisionIn, AllocationID) == 0x000000, "Member 'FZeuzMachineResourceDeprovisionIn::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceDeprovisionIn, Resources) == 0x000010, "Member 'FZeuzMachineResourceDeprovisionIn::Resources' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineResourceUpdateIn
// 0x00D0 (0x00D0 - 0x0000)
struct FZeuzMachineResourceUpdateIn final 
{
public:
	class FString                                 ResourceID;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzMachineResourceDataIn             Data;                                              // 0x0010(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMachineResourceUpdateIn) == 0x000008, "Wrong alignment on FZeuzMachineResourceUpdateIn");
static_assert(sizeof(FZeuzMachineResourceUpdateIn) == 0x0000D0, "Wrong size on FZeuzMachineResourceUpdateIn");
static_assert(offsetof(FZeuzMachineResourceUpdateIn, ResourceID) == 0x000000, "Member 'FZeuzMachineResourceUpdateIn::ResourceID' has a wrong offset!");
static_assert(offsetof(FZeuzMachineResourceUpdateIn, Data) == 0x000010, "Member 'FZeuzMachineResourceUpdateIn::Data' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMetricsEvalCondition
// 0x0014 (0x0014 - 0x0000)
struct FZeuzMetricsEvalCondition final 
{
public:
	int32                                         TimeFrame;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoreUsageThreshold;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MemoryUsageThreshold;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IOBandwidthThreshold;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InetBandwidthThreshold;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMetricsEvalCondition) == 0x000004, "Wrong alignment on FZeuzMetricsEvalCondition");
static_assert(sizeof(FZeuzMetricsEvalCondition) == 0x000014, "Wrong size on FZeuzMetricsEvalCondition");
static_assert(offsetof(FZeuzMetricsEvalCondition, TimeFrame) == 0x000000, "Member 'FZeuzMetricsEvalCondition::TimeFrame' has a wrong offset!");
static_assert(offsetof(FZeuzMetricsEvalCondition, CoreUsageThreshold) == 0x000004, "Member 'FZeuzMetricsEvalCondition::CoreUsageThreshold' has a wrong offset!");
static_assert(offsetof(FZeuzMetricsEvalCondition, MemoryUsageThreshold) == 0x000008, "Member 'FZeuzMetricsEvalCondition::MemoryUsageThreshold' has a wrong offset!");
static_assert(offsetof(FZeuzMetricsEvalCondition, IOBandwidthThreshold) == 0x00000C, "Member 'FZeuzMetricsEvalCondition::IOBandwidthThreshold' has a wrong offset!");
static_assert(offsetof(FZeuzMetricsEvalCondition, InetBandwidthThreshold) == 0x000010, "Member 'FZeuzMetricsEvalCondition::InetBandwidthThreshold' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProviderResourceTypes
// 0x0020 (0x0020 - 0x0000)
struct FZeuzProviderResourceTypes final 
{
public:
	class FString                                 Provider;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ResourceTypes;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzProviderResourceTypes) == 0x000008, "Wrong alignment on FZeuzProviderResourceTypes");
static_assert(sizeof(FZeuzProviderResourceTypes) == 0x000020, "Wrong size on FZeuzProviderResourceTypes");
static_assert(offsetof(FZeuzProviderResourceTypes, Provider) == 0x000000, "Member 'FZeuzProviderResourceTypes::Provider' has a wrong offset!");
static_assert(offsetof(FZeuzProviderResourceTypes, ResourceTypes) == 0x000010, "Member 'FZeuzProviderResourceTypes::ResourceTypes' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMachineScalingRules
// 0x0050 (0x0050 - 0x0000)
struct FZeuzMachineScalingRules final 
{
public:
	bool                                          EnableScaling;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1216[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxCloudMachines;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAllBareMetalMachines;                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1217[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxBareMetalMachines;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinFreePayloadCapacity;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFreePayloadCapacity;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseMetrics;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1218[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CapEvalTimeFrame;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FZeuzMetricsEvalCondition>      BlockedConditions;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FZeuzMetricsEvalCondition>      IdleConditions;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FZeuzProviderResourceTypes>     AllowedResourceTypes;                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMachineScalingRules) == 0x000008, "Wrong alignment on FZeuzMachineScalingRules");
static_assert(sizeof(FZeuzMachineScalingRules) == 0x000050, "Wrong size on FZeuzMachineScalingRules");
static_assert(offsetof(FZeuzMachineScalingRules, EnableScaling) == 0x000000, "Member 'FZeuzMachineScalingRules::EnableScaling' has a wrong offset!");
static_assert(offsetof(FZeuzMachineScalingRules, MaxCloudMachines) == 0x000004, "Member 'FZeuzMachineScalingRules::MaxCloudMachines' has a wrong offset!");
static_assert(offsetof(FZeuzMachineScalingRules, UseAllBareMetalMachines) == 0x000008, "Member 'FZeuzMachineScalingRules::UseAllBareMetalMachines' has a wrong offset!");
static_assert(offsetof(FZeuzMachineScalingRules, MaxBareMetalMachines) == 0x00000C, "Member 'FZeuzMachineScalingRules::MaxBareMetalMachines' has a wrong offset!");
static_assert(offsetof(FZeuzMachineScalingRules, MinFreePayloadCapacity) == 0x000010, "Member 'FZeuzMachineScalingRules::MinFreePayloadCapacity' has a wrong offset!");
static_assert(offsetof(FZeuzMachineScalingRules, MaxFreePayloadCapacity) == 0x000014, "Member 'FZeuzMachineScalingRules::MaxFreePayloadCapacity' has a wrong offset!");
static_assert(offsetof(FZeuzMachineScalingRules, UseMetrics) == 0x000018, "Member 'FZeuzMachineScalingRules::UseMetrics' has a wrong offset!");
static_assert(offsetof(FZeuzMachineScalingRules, CapEvalTimeFrame) == 0x00001C, "Member 'FZeuzMachineScalingRules::CapEvalTimeFrame' has a wrong offset!");
static_assert(offsetof(FZeuzMachineScalingRules, BlockedConditions) == 0x000020, "Member 'FZeuzMachineScalingRules::BlockedConditions' has a wrong offset!");
static_assert(offsetof(FZeuzMachineScalingRules, IdleConditions) == 0x000030, "Member 'FZeuzMachineScalingRules::IdleConditions' has a wrong offset!");
static_assert(offsetof(FZeuzMachineScalingRules, AllowedResourceTypes) == 0x000040, "Member 'FZeuzMachineScalingRules::AllowedResourceTypes' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadQuota
// 0x0014 (0x0014 - 0x0000)
struct FZeuzPayloadQuota final 
{
public:
	float                                         CpuCores;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemoryMB;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StorageGB;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IOBandwidthMBps;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InetBandwidthMBps;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzPayloadQuota) == 0x000004, "Wrong alignment on FZeuzPayloadQuota");
static_assert(sizeof(FZeuzPayloadQuota) == 0x000014, "Wrong size on FZeuzPayloadQuota");
static_assert(offsetof(FZeuzPayloadQuota, CpuCores) == 0x000000, "Member 'FZeuzPayloadQuota::CpuCores' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadQuota, MemoryMB) == 0x000004, "Member 'FZeuzPayloadQuota::MemoryMB' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadQuota, StorageGB) == 0x000008, "Member 'FZeuzPayloadQuota::StorageGB' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadQuota, IOBandwidthMBps) == 0x00000C, "Member 'FZeuzPayloadQuota::IOBandwidthMBps' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadQuota, InetBandwidthMBps) == 0x000010, "Member 'FZeuzPayloadQuota::InetBandwidthMBps' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzSafetyLimits
// 0x0018 (0x0018 - 0x0000)
struct FZeuzSafetyLimits final 
{
public:
	float                                         CoreMaxUsageThreshold;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CpuRemainingCores;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemoryMBFree;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StorageGBFree;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IOMBpsFree;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InetMBpsFree;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzSafetyLimits) == 0x000004, "Wrong alignment on FZeuzSafetyLimits");
static_assert(sizeof(FZeuzSafetyLimits) == 0x000018, "Wrong size on FZeuzSafetyLimits");
static_assert(offsetof(FZeuzSafetyLimits, CoreMaxUsageThreshold) == 0x000000, "Member 'FZeuzSafetyLimits::CoreMaxUsageThreshold' has a wrong offset!");
static_assert(offsetof(FZeuzSafetyLimits, CpuRemainingCores) == 0x000004, "Member 'FZeuzSafetyLimits::CpuRemainingCores' has a wrong offset!");
static_assert(offsetof(FZeuzSafetyLimits, MemoryMBFree) == 0x000008, "Member 'FZeuzSafetyLimits::MemoryMBFree' has a wrong offset!");
static_assert(offsetof(FZeuzSafetyLimits, StorageGBFree) == 0x00000C, "Member 'FZeuzSafetyLimits::StorageGBFree' has a wrong offset!");
static_assert(offsetof(FZeuzSafetyLimits, IOMBpsFree) == 0x000010, "Member 'FZeuzSafetyLimits::IOMBpsFree' has a wrong offset!");
static_assert(offsetof(FZeuzSafetyLimits, InetMBpsFree) == 0x000014, "Member 'FZeuzSafetyLimits::InetMBpsFree' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadScalingRules
// 0x0080 (0x0080 - 0x0000)
struct FZeuzPayloadScalingRules final 
{
public:
	bool                                          EnableScaling;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1219[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZeuzPayloadDef                        PayloadDef;                                        // 0x0008(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FZeuzPayloadQuota                      PayloadQuota;                                      // 0x0048(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FZeuzSafetyLimits                      SafetyLimits;                                      // 0x005C(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MinUnreservedPayloads;                             // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxUnreservedPayloads;                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121A[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzPayloadScalingRules) == 0x000008, "Wrong alignment on FZeuzPayloadScalingRules");
static_assert(sizeof(FZeuzPayloadScalingRules) == 0x000080, "Wrong size on FZeuzPayloadScalingRules");
static_assert(offsetof(FZeuzPayloadScalingRules, EnableScaling) == 0x000000, "Member 'FZeuzPayloadScalingRules::EnableScaling' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadScalingRules, PayloadDef) == 0x000008, "Member 'FZeuzPayloadScalingRules::PayloadDef' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadScalingRules, PayloadQuota) == 0x000048, "Member 'FZeuzPayloadScalingRules::PayloadQuota' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadScalingRules, SafetyLimits) == 0x00005C, "Member 'FZeuzPayloadScalingRules::SafetyLimits' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadScalingRules, MinUnreservedPayloads) == 0x000074, "Member 'FZeuzPayloadScalingRules::MinUnreservedPayloads' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadScalingRules, MaxUnreservedPayloads) == 0x000078, "Member 'FZeuzPayloadScalingRules::MaxUnreservedPayloads' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzScalingRules
// 0x00D0 (0x00D0 - 0x0000)
struct FZeuzScalingRules final 
{
public:
	struct FZeuzMachineScalingRules               Machine;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FZeuzPayloadScalingRules               Payload;                                           // 0x0050(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzScalingRules) == 0x000008, "Wrong alignment on FZeuzScalingRules");
static_assert(sizeof(FZeuzScalingRules) == 0x0000D0, "Wrong size on FZeuzScalingRules");
static_assert(offsetof(FZeuzScalingRules, Machine) == 0x000000, "Member 'FZeuzScalingRules::Machine' has a wrong offset!");
static_assert(offsetof(FZeuzScalingRules, Payload) == 0x000050, "Member 'FZeuzScalingRules::Payload' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAllocationInfo
// 0x0168 (0x0168 - 0x0000)
struct FZeuzAllocationInfo final 
{
public:
	class FString                                 AllocationID;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProjID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnvID;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Regions;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Machines;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121B[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZeuzScalingRules                      ScalingRules;                                      // 0x0068(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FZeuzMachineSpec                       MachineMinSpec;                                    // 0x0138(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         ActivePayloads;                                    // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReservedPayloads;                                  // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAllocationInfo) == 0x000008, "Wrong alignment on FZeuzAllocationInfo");
static_assert(sizeof(FZeuzAllocationInfo) == 0x000168, "Wrong size on FZeuzAllocationInfo");
static_assert(offsetof(FZeuzAllocationInfo, AllocationID) == 0x000000, "Member 'FZeuzAllocationInfo::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationInfo, ProjID) == 0x000010, "Member 'FZeuzAllocationInfo::ProjID' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationInfo, EnvID) == 0x000020, "Member 'FZeuzAllocationInfo::EnvID' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationInfo, Regions) == 0x000030, "Member 'FZeuzAllocationInfo::Regions' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationInfo, Machines) == 0x000040, "Member 'FZeuzAllocationInfo::Machines' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationInfo, Description) == 0x000050, "Member 'FZeuzAllocationInfo::Description' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationInfo, Enabled) == 0x000060, "Member 'FZeuzAllocationInfo::Enabled' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationInfo, ScalingRules) == 0x000068, "Member 'FZeuzAllocationInfo::ScalingRules' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationInfo, MachineMinSpec) == 0x000138, "Member 'FZeuzAllocationInfo::MachineMinSpec' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationInfo, ActivePayloads) == 0x000160, "Member 'FZeuzAllocationInfo::ActivePayloads' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationInfo, ReservedPayloads) == 0x000164, "Member 'FZeuzAllocationInfo::ReservedPayloads' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadUpdateIn
// 0x0050 (0x0050 - 0x0000)
struct FZeuzPayloadUpdateIn final 
{
public:
	class FString                                 PayloadID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzPayloadDef                        PayloadDef;                                        // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzPayloadUpdateIn) == 0x000008, "Wrong alignment on FZeuzPayloadUpdateIn");
static_assert(sizeof(FZeuzPayloadUpdateIn) == 0x000050, "Wrong size on FZeuzPayloadUpdateIn");
static_assert(offsetof(FZeuzPayloadUpdateIn, PayloadID) == 0x000000, "Member 'FZeuzPayloadUpdateIn::PayloadID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadUpdateIn, PayloadDef) == 0x000010, "Member 'FZeuzPayloadUpdateIn::PayloadDef' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyStartDestroy
// 0x0020 (0x0020 - 0x0000)
struct FZeuzLobbyStartDestroy final 
{
public:
	class FString                                 LobbyID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyStartDestroy) == 0x000008, "Wrong alignment on FZeuzLobbyStartDestroy");
static_assert(sizeof(FZeuzLobbyStartDestroy) == 0x000020, "Wrong size on FZeuzLobbyStartDestroy");
static_assert(offsetof(FZeuzLobbyStartDestroy, LobbyID) == 0x000000, "Member 'FZeuzLobbyStartDestroy::LobbyID' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyStartDestroy, UserID) == 0x000010, "Member 'FZeuzLobbyStartDestroy::UserID' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAllocationDef
// 0x0118 (0x0118 - 0x0000)
struct FZeuzAllocationDef final 
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Regions;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FZeuzScalingRules                      ScalingRules;                                      // 0x0020(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FZeuzMachineSpec                       MachineMinSpec;                                    // 0x00F0(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAllocationDef) == 0x000008, "Wrong alignment on FZeuzAllocationDef");
static_assert(sizeof(FZeuzAllocationDef) == 0x000118, "Wrong size on FZeuzAllocationDef");
static_assert(offsetof(FZeuzAllocationDef, Description) == 0x000000, "Member 'FZeuzAllocationDef::Description' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationDef, Regions) == 0x000010, "Member 'FZeuzAllocationDef::Regions' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationDef, ScalingRules) == 0x000020, "Member 'FZeuzAllocationDef::ScalingRules' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationDef, MachineMinSpec) == 0x0000F0, "Member 'FZeuzAllocationDef::MachineMinSpec' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAllocationCreateIn
// 0x0138 (0x0138 - 0x0000)
struct FZeuzAllocationCreateIn final 
{
public:
	class FString                                 ProjID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnvID;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzAllocationDef                     AllocationDef;                                     // 0x0020(0x0118)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAllocationCreateIn) == 0x000008, "Wrong alignment on FZeuzAllocationCreateIn");
static_assert(sizeof(FZeuzAllocationCreateIn) == 0x000138, "Wrong size on FZeuzAllocationCreateIn");
static_assert(offsetof(FZeuzAllocationCreateIn, ProjID) == 0x000000, "Member 'FZeuzAllocationCreateIn::ProjID' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationCreateIn, EnvID) == 0x000010, "Member 'FZeuzAllocationCreateIn::EnvID' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationCreateIn, AllocationDef) == 0x000020, "Member 'FZeuzAllocationCreateIn::AllocationDef' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyKick
// 0x0048 (0x0048 - 0x0000)
struct FZeuzLobbyKick final 
{
public:
	class FString                                 LobbyID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetID;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ban;                                               // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121C[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyKick) == 0x000008, "Wrong alignment on FZeuzLobbyKick");
static_assert(sizeof(FZeuzLobbyKick) == 0x000048, "Wrong size on FZeuzLobbyKick");
static_assert(offsetof(FZeuzLobbyKick, LobbyID) == 0x000000, "Member 'FZeuzLobbyKick::LobbyID' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyKick, UserID) == 0x000010, "Member 'FZeuzLobbyKick::UserID' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyKick, TargetID) == 0x000020, "Member 'FZeuzLobbyKick::TargetID' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyKick, Ban) == 0x000030, "Member 'FZeuzLobbyKick::Ban' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyKick, Message) == 0x000038, "Member 'FZeuzLobbyKick::Message' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAllocationGetOut
// 0x0018 (0x0018 - 0x0000)
struct FZeuzAllocationGetOut final 
{
public:
	TArray<struct FZeuzAllocationInfo>            Items;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121D[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzAllocationGetOut) == 0x000008, "Wrong alignment on FZeuzAllocationGetOut");
static_assert(sizeof(FZeuzAllocationGetOut) == 0x000018, "Wrong size on FZeuzAllocationGetOut");
static_assert(offsetof(FZeuzAllocationGetOut, Items) == 0x000000, "Member 'FZeuzAllocationGetOut::Items' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationGetOut, Count) == 0x000010, "Member 'FZeuzAllocationGetOut::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAllocationPagination
// 0x0028 (0x0028 - 0x0000)
struct FZeuzAllocationPagination
{
public:
	bool                                          GetTotal;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Offset;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderBy;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderAsc;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1220[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzAllocationPagination) == 0x000008, "Wrong alignment on FZeuzAllocationPagination");
static_assert(sizeof(FZeuzAllocationPagination) == 0x000028, "Wrong size on FZeuzAllocationPagination");
static_assert(offsetof(FZeuzAllocationPagination, GetTotal) == 0x000000, "Member 'FZeuzAllocationPagination::GetTotal' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPagination, Offset) == 0x000004, "Member 'FZeuzAllocationPagination::Offset' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPagination, Limit) == 0x000008, "Member 'FZeuzAllocationPagination::Limit' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPagination, OrderBy) == 0x000010, "Member 'FZeuzAllocationPagination::OrderBy' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPagination, OrderAsc) == 0x000020, "Member 'FZeuzAllocationPagination::OrderAsc' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAllocationGetIn
// 0x0038 (0x0060 - 0x0028)
struct FZeuzAllocationGetIn final  : public FZeuzAllocationPagination
{
public:
	TArray<class FString>                         AllocationIDs;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          GetDisabled;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetEnabled;                                        // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1221[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OS;                                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAllocationGetIn) == 0x000008, "Wrong alignment on FZeuzAllocationGetIn");
static_assert(sizeof(FZeuzAllocationGetIn) == 0x000060, "Wrong size on FZeuzAllocationGetIn");
static_assert(offsetof(FZeuzAllocationGetIn, AllocationIDs) == 0x000028, "Member 'FZeuzAllocationGetIn::AllocationIDs' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationGetIn, GetDisabled) == 0x000038, "Member 'FZeuzAllocationGetIn::GetDisabled' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationGetIn, GetEnabled) == 0x000039, "Member 'FZeuzAllocationGetIn::GetEnabled' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationGetIn, Region) == 0x000040, "Member 'FZeuzAllocationGetIn::Region' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationGetIn, OS) == 0x000050, "Member 'FZeuzAllocationGetIn::OS' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAllocationPayloadPortMapping
// 0x0008 (0x0008 - 0x0000)
struct FZeuzAllocationPayloadPortMapping final 
{
public:
	int32                                         InternalPort;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExternalPort;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAllocationPayloadPortMapping) == 0x000004, "Wrong alignment on FZeuzAllocationPayloadPortMapping");
static_assert(sizeof(FZeuzAllocationPayloadPortMapping) == 0x000008, "Wrong size on FZeuzAllocationPayloadPortMapping");
static_assert(offsetof(FZeuzAllocationPayloadPortMapping, InternalPort) == 0x000000, "Member 'FZeuzAllocationPayloadPortMapping::InternalPort' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadPortMapping, ExternalPort) == 0x000004, "Member 'FZeuzAllocationPayloadPortMapping::ExternalPort' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAllocationPayloadInfo
// 0x00E8 (0x00E8 - 0x0000)
struct FZeuzAllocationPayloadInfo final 
{
public:
	class FString                                 PayloadID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MachineID;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AllocationID;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnvID;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Regions;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FZeuzPayloadDef                        PayloadDef;                                        // 0x0050(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reserved;                                          // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1222[0x6];                                     // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IP;                                                // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FZeuzAllocationPayloadPortMapping> PortMapping;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Handling;                                          // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocationType;                                      // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Created;                                           // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Modified;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzAllocationPayloadInfo) == 0x000008, "Wrong alignment on FZeuzAllocationPayloadInfo");
static_assert(sizeof(FZeuzAllocationPayloadInfo) == 0x0000E8, "Wrong size on FZeuzAllocationPayloadInfo");
static_assert(offsetof(FZeuzAllocationPayloadInfo, PayloadID) == 0x000000, "Member 'FZeuzAllocationPayloadInfo::PayloadID' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, MachineID) == 0x000010, "Member 'FZeuzAllocationPayloadInfo::MachineID' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, AllocationID) == 0x000020, "Member 'FZeuzAllocationPayloadInfo::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, EnvID) == 0x000030, "Member 'FZeuzAllocationPayloadInfo::EnvID' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, Regions) == 0x000040, "Member 'FZeuzAllocationPayloadInfo::Regions' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, PayloadDef) == 0x000050, "Member 'FZeuzAllocationPayloadInfo::PayloadDef' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, Active) == 0x000090, "Member 'FZeuzAllocationPayloadInfo::Active' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, Reserved) == 0x000091, "Member 'FZeuzAllocationPayloadInfo::Reserved' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, IP) == 0x000098, "Member 'FZeuzAllocationPayloadInfo::IP' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, PortMapping) == 0x0000A8, "Member 'FZeuzAllocationPayloadInfo::PortMapping' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, Handling) == 0x0000B8, "Member 'FZeuzAllocationPayloadInfo::Handling' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, LocationType) == 0x0000C8, "Member 'FZeuzAllocationPayloadInfo::LocationType' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, Created) == 0x0000D8, "Member 'FZeuzAllocationPayloadInfo::Created' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationPayloadInfo, Modified) == 0x0000E0, "Member 'FZeuzAllocationPayloadInfo::Modified' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAllocationRegionCount
// 0x0018 (0x0018 - 0x0000)
struct FZeuzAllocationRegionCount final 
{
public:
	class FString                                 RegionID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1223[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzAllocationRegionCount) == 0x000008, "Wrong alignment on FZeuzAllocationRegionCount");
static_assert(sizeof(FZeuzAllocationRegionCount) == 0x000018, "Wrong size on FZeuzAllocationRegionCount");
static_assert(offsetof(FZeuzAllocationRegionCount, RegionID) == 0x000000, "Member 'FZeuzAllocationRegionCount::RegionID' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationRegionCount, Count) == 0x000010, "Member 'FZeuzAllocationRegionCount::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAllocationRequestServiceIn
// 0x0028 (0x0028 - 0x0000)
struct FZeuzAllocationRequestServiceIn final 
{
public:
	class FString                                 AllocationID;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FZeuzAllocationRegionCount>     RegionCount;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TimeoutSeconds;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1224[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzAllocationRequestServiceIn) == 0x000008, "Wrong alignment on FZeuzAllocationRequestServiceIn");
static_assert(sizeof(FZeuzAllocationRequestServiceIn) == 0x000028, "Wrong size on FZeuzAllocationRequestServiceIn");
static_assert(offsetof(FZeuzAllocationRequestServiceIn, AllocationID) == 0x000000, "Member 'FZeuzAllocationRequestServiceIn::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationRequestServiceIn, RegionCount) == 0x000010, "Member 'FZeuzAllocationRequestServiceIn::RegionCount' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationRequestServiceIn, TimeoutSeconds) == 0x000020, "Member 'FZeuzAllocationRequestServiceIn::TimeoutSeconds' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzAllocationUpdateIn
// 0x0130 (0x0130 - 0x0000)
struct FZeuzAllocationUpdateIn final 
{
public:
	class FString                                 AllocationID;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzAllocationDef                     AllocationDef;                                     // 0x0010(0x0118)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1225[0x7];                                     // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzAllocationUpdateIn) == 0x000008, "Wrong alignment on FZeuzAllocationUpdateIn");
static_assert(sizeof(FZeuzAllocationUpdateIn) == 0x000130, "Wrong size on FZeuzAllocationUpdateIn");
static_assert(offsetof(FZeuzAllocationUpdateIn, AllocationID) == 0x000000, "Member 'FZeuzAllocationUpdateIn::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationUpdateIn, AllocationDef) == 0x000010, "Member 'FZeuzAllocationUpdateIn::AllocationDef' has a wrong offset!");
static_assert(offsetof(FZeuzAllocationUpdateIn, Enabled) == 0x000128, "Member 'FZeuzAllocationUpdateIn::Enabled' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyStateIn
// 0x0020 (0x0058 - 0x0038)
struct FZeuzLobbyStateIn final  : public FZeuzLobbyStateBase
{
public:
	class FString                                 UserID;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyStateIn) == 0x000008, "Wrong alignment on FZeuzLobbyStateIn");
static_assert(sizeof(FZeuzLobbyStateIn) == 0x000058, "Wrong size on FZeuzLobbyStateIn");
static_assert(offsetof(FZeuzLobbyStateIn, UserID) == 0x000038, "Member 'FZeuzLobbyStateIn::UserID' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyStateIn, Password) == 0x000048, "Member 'FZeuzLobbyStateIn::Password' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzEchoOut
// 0x0010 (0x0010 - 0x0000)
struct FZeuzEchoOut final 
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzEchoOut) == 0x000008, "Wrong alignment on FZeuzEchoOut");
static_assert(sizeof(FZeuzEchoOut) == 0x000010, "Wrong size on FZeuzEchoOut");
static_assert(offsetof(FZeuzEchoOut, Text) == 0x000000, "Member 'FZeuzEchoOut::Text' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzEcho2Out
// 0x0010 (0x0010 - 0x0000)
struct FZeuzEcho2Out final 
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzEcho2Out) == 0x000008, "Wrong alignment on FZeuzEcho2Out");
static_assert(sizeof(FZeuzEcho2Out) == 0x000010, "Wrong size on FZeuzEcho2Out");
static_assert(offsetof(FZeuzEcho2Out, Text) == 0x000000, "Member 'FZeuzEcho2Out::Text' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzEchoIn
// 0x0010 (0x0010 - 0x0000)
struct FZeuzEchoIn final 
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzEchoIn) == 0x000008, "Wrong alignment on FZeuzEchoIn");
static_assert(sizeof(FZeuzEchoIn) == 0x000010, "Wrong size on FZeuzEchoIn");
static_assert(offsetof(FZeuzEchoIn, Text) == 0x000000, "Member 'FZeuzEchoIn::Text' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyUser
// 0x0050 (0x0050 - 0x0000)
struct FZeuzLobbyUser
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Team;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Slot;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Info;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyUser) == 0x000008, "Wrong alignment on FZeuzLobbyUser");
static_assert(sizeof(FZeuzLobbyUser) == 0x000050, "Wrong size on FZeuzLobbyUser");
static_assert(offsetof(FZeuzLobbyUser, UserID) == 0x000000, "Member 'FZeuzLobbyUser::UserID' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyUser, DisplayName) == 0x000010, "Member 'FZeuzLobbyUser::DisplayName' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyUser, Team) == 0x000020, "Member 'FZeuzLobbyUser::Team' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyUser, Slot) == 0x000030, "Member 'FZeuzLobbyUser::Slot' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyUser, Info) == 0x000040, "Member 'FZeuzLobbyUser::Info' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyUserBase
// 0x0028 (0x0078 - 0x0050)
struct FZeuzLobbyUserBase : public FZeuzLobbyUser
{
public:
	bool                                          Ready;                                             // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1226[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZeuzVariant                           Params;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Created;                                           // 0x0068(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Updated;                                           // 0x0070(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyUserBase) == 0x000008, "Wrong alignment on FZeuzLobbyUserBase");
static_assert(sizeof(FZeuzLobbyUserBase) == 0x000078, "Wrong size on FZeuzLobbyUserBase");
static_assert(offsetof(FZeuzLobbyUserBase, Ready) == 0x000050, "Member 'FZeuzLobbyUserBase::Ready' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyUserBase, Params) == 0x000058, "Member 'FZeuzLobbyUserBase::Params' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyUserBase, Created) == 0x000068, "Member 'FZeuzLobbyUserBase::Created' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyUserBase, Updated) == 0x000070, "Member 'FZeuzLobbyUserBase::Updated' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyUserState
// 0x0010 (0x0088 - 0x0078)
struct FZeuzLobbyUserState : public FZeuzLobbyUserBase
{
public:
	class FString                                 ServerConnect;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyUserState) == 0x000008, "Wrong alignment on FZeuzLobbyUserState");
static_assert(sizeof(FZeuzLobbyUserState) == 0x000088, "Wrong size on FZeuzLobbyUserState");
static_assert(offsetof(FZeuzLobbyUserState, ServerConnect) == 0x000078, "Member 'FZeuzLobbyUserState::ServerConnect' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyUserIn
// 0x0010 (0x0098 - 0x0088)
struct FZeuzLobbyUserIn final  : public FZeuzLobbyUserState
{
public:
	class FString                                 LobbyID;                                           // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyUserIn) == 0x000008, "Wrong alignment on FZeuzLobbyUserIn");
static_assert(sizeof(FZeuzLobbyUserIn) == 0x000098, "Wrong size on FZeuzLobbyUserIn");
static_assert(offsetof(FZeuzLobbyUserIn, LobbyID) == 0x000088, "Member 'FZeuzLobbyUserIn::LobbyID' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzEcho2In
// 0x0010 (0x0010 - 0x0000)
struct FZeuzEcho2In final 
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzEcho2In) == 0x000008, "Wrong alignment on FZeuzEcho2In");
static_assert(sizeof(FZeuzEcho2In) == 0x000010, "Wrong size on FZeuzEcho2In");
static_assert(offsetof(FZeuzEcho2In, Text) == 0x000000, "Member 'FZeuzEcho2In::Text' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzEcho3In
// 0x0004 (0x0004 - 0x0000)
struct FZeuzEcho3In final 
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzEcho3In) == 0x000004, "Wrong alignment on FZeuzEcho3In");
static_assert(sizeof(FZeuzEcho3In) == 0x000004, "Wrong size on FZeuzEcho3In");
static_assert(offsetof(FZeuzEcho3In, Num) == 0x000000, "Member 'FZeuzEcho3In::Num' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzImageManagerPublishOutput
// 0x0040 (0x0040 - 0x0000)
struct FZeuzImageManagerPublishOutput final 
{
public:
	class FString                                 ImageHash;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageURL;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzImageManagerPublishOutput) == 0x000008, "Wrong alignment on FZeuzImageManagerPublishOutput");
static_assert(sizeof(FZeuzImageManagerPublishOutput) == 0x000040, "Wrong size on FZeuzImageManagerPublishOutput");
static_assert(offsetof(FZeuzImageManagerPublishOutput, ImageHash) == 0x000000, "Member 'FZeuzImageManagerPublishOutput::ImageHash' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerPublishOutput, ImageURL) == 0x000010, "Member 'FZeuzImageManagerPublishOutput::ImageURL' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerPublishOutput, Version) == 0x000020, "Member 'FZeuzImageManagerPublishOutput::Version' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerPublishOutput, Description) == 0x000030, "Member 'FZeuzImageManagerPublishOutput::Description' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzImagemanagerPublishState
// 0x0080 (0x0080 - 0x0000)
struct FZeuzImagemanagerPublishState final 
{
public:
	class FString                                 ImageID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageHash;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 State;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzImageManagerPublishOutput         Result;                                            // 0x0040(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzImagemanagerPublishState) == 0x000008, "Wrong alignment on FZeuzImagemanagerPublishState");
static_assert(sizeof(FZeuzImagemanagerPublishState) == 0x000080, "Wrong size on FZeuzImagemanagerPublishState");
static_assert(offsetof(FZeuzImagemanagerPublishState, ImageID) == 0x000000, "Member 'FZeuzImagemanagerPublishState::ImageID' has a wrong offset!");
static_assert(offsetof(FZeuzImagemanagerPublishState, ImageHash) == 0x000010, "Member 'FZeuzImagemanagerPublishState::ImageHash' has a wrong offset!");
static_assert(offsetof(FZeuzImagemanagerPublishState, State) == 0x000020, "Member 'FZeuzImagemanagerPublishState::State' has a wrong offset!");
static_assert(offsetof(FZeuzImagemanagerPublishState, Message) == 0x000030, "Member 'FZeuzImagemanagerPublishState::Message' has a wrong offset!");
static_assert(offsetof(FZeuzImagemanagerPublishState, Result) == 0x000040, "Member 'FZeuzImagemanagerPublishState::Result' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzImageManagerManifestEntryPart
// 0x0030 (0x0030 - 0x0000)
struct FZeuzImageManagerManifestEntryPart final 
{
public:
	class FString                                 Hash;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartByte;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1227[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzImageManagerManifestEntryPart) == 0x000008, "Wrong alignment on FZeuzImageManagerManifestEntryPart");
static_assert(sizeof(FZeuzImageManagerManifestEntryPart) == 0x000030, "Wrong size on FZeuzImageManagerManifestEntryPart");
static_assert(offsetof(FZeuzImageManagerManifestEntryPart, Hash) == 0x000000, "Member 'FZeuzImageManagerManifestEntryPart::Hash' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerManifestEntryPart, URL) == 0x000010, "Member 'FZeuzImageManagerManifestEntryPart::URL' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerManifestEntryPart, Index) == 0x000020, "Member 'FZeuzImageManagerManifestEntryPart::Index' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerManifestEntryPart, StartByte) == 0x000024, "Member 'FZeuzImageManagerManifestEntryPart::StartByte' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerManifestEntryPart, Length) == 0x000028, "Member 'FZeuzImageManagerManifestEntryPart::Length' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzImageManagerManifestEntry
// 0x0048 (0x0048 - 0x0000)
struct FZeuzImageManagerManifestEntry final 
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Filesize;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1228[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Hash;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FZeuzImageManagerManifestEntryPart> Parts;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzImageManagerManifestEntry) == 0x000008, "Wrong alignment on FZeuzImageManagerManifestEntry");
static_assert(sizeof(FZeuzImageManagerManifestEntry) == 0x000048, "Wrong size on FZeuzImageManagerManifestEntry");
static_assert(offsetof(FZeuzImageManagerManifestEntry, Filename) == 0x000000, "Member 'FZeuzImageManagerManifestEntry::Filename' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerManifestEntry, Filesize) == 0x000010, "Member 'FZeuzImageManagerManifestEntry::Filesize' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerManifestEntry, Hash) == 0x000018, "Member 'FZeuzImageManagerManifestEntry::Hash' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerManifestEntry, URL) == 0x000028, "Member 'FZeuzImageManagerManifestEntry::URL' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerManifestEntry, Parts) == 0x000038, "Member 'FZeuzImageManagerManifestEntry::Parts' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzImageManagerManifest
// 0x0010 (0x0010 - 0x0000)
struct FZeuzImageManagerManifest final 
{
public:
	TArray<struct FZeuzImageManagerManifestEntry> Entries;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzImageManagerManifest) == 0x000008, "Wrong alignment on FZeuzImageManagerManifest");
static_assert(sizeof(FZeuzImageManagerManifest) == 0x000010, "Wrong size on FZeuzImageManagerManifest");
static_assert(offsetof(FZeuzImageManagerManifest, Entries) == 0x000000, "Member 'FZeuzImageManagerManifest::Entries' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzImageManagerPushPullOutput
// 0x0030 (0x0030 - 0x0000)
struct FZeuzImageManagerPushPullOutput final 
{
public:
	struct FZeuzImageManagerManifest              Manifest;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ManifestHash;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TransferHashes;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzImageManagerPushPullOutput) == 0x000008, "Wrong alignment on FZeuzImageManagerPushPullOutput");
static_assert(sizeof(FZeuzImageManagerPushPullOutput) == 0x000030, "Wrong size on FZeuzImageManagerPushPullOutput");
static_assert(offsetof(FZeuzImageManagerPushPullOutput, Manifest) == 0x000000, "Member 'FZeuzImageManagerPushPullOutput::Manifest' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerPushPullOutput, ManifestHash) == 0x000010, "Member 'FZeuzImageManagerPushPullOutput::ManifestHash' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerPushPullOutput, TransferHashes) == 0x000020, "Member 'FZeuzImageManagerPushPullOutput::TransferHashes' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzImageManagerPublishInput
// 0x0020 (0x0020 - 0x0000)
struct FZeuzImageManagerPublishInput final 
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzImageManagerPublishInput) == 0x000008, "Wrong alignment on FZeuzImageManagerPublishInput");
static_assert(sizeof(FZeuzImageManagerPublishInput) == 0x000020, "Wrong size on FZeuzImageManagerPublishInput");
static_assert(offsetof(FZeuzImageManagerPublishInput, Description) == 0x000000, "Member 'FZeuzImageManagerPublishInput::Description' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerPublishInput, Version) == 0x000010, "Member 'FZeuzImageManagerPublishInput::Version' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzImageManagerPullInput
// 0x0010 (0x0010 - 0x0000)
struct FZeuzImageManagerPullInput final 
{
public:
	class FString                                 ImageHash;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzImageManagerPullInput) == 0x000008, "Wrong alignment on FZeuzImageManagerPullInput");
static_assert(sizeof(FZeuzImageManagerPullInput) == 0x000010, "Wrong size on FZeuzImageManagerPullInput");
static_assert(offsetof(FZeuzImageManagerPullInput, ImageHash) == 0x000000, "Member 'FZeuzImageManagerPullInput::ImageHash' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzImageManagerPresignedFileUrlIn
// 0x0020 (0x0020 - 0x0000)
struct FZeuzImageManagerPresignedFileUrlIn final 
{
public:
	class FString                                 ManifestHash;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzImageManagerPresignedFileUrlIn) == 0x000008, "Wrong alignment on FZeuzImageManagerPresignedFileUrlIn");
static_assert(sizeof(FZeuzImageManagerPresignedFileUrlIn) == 0x000020, "Wrong size on FZeuzImageManagerPresignedFileUrlIn");
static_assert(offsetof(FZeuzImageManagerPresignedFileUrlIn, ManifestHash) == 0x000000, "Member 'FZeuzImageManagerPresignedFileUrlIn::ManifestHash' has a wrong offset!");
static_assert(offsetof(FZeuzImageManagerPresignedFileUrlIn, Filename) == 0x000010, "Member 'FZeuzImageManagerPresignedFileUrlIn::Filename' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzKVStoreKVEntry
// 0x0038 (0x0038 - 0x0000)
struct FZeuzKVStoreKVEntry final 
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1229[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Partition;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzKVStoreKVEntry) == 0x000008, "Wrong alignment on FZeuzKVStoreKVEntry");
static_assert(sizeof(FZeuzKVStoreKVEntry) == 0x000038, "Wrong size on FZeuzKVStoreKVEntry");
static_assert(offsetof(FZeuzKVStoreKVEntry, ID) == 0x000000, "Member 'FZeuzKVStoreKVEntry::ID' has a wrong offset!");
static_assert(offsetof(FZeuzKVStoreKVEntry, Partition) == 0x000008, "Member 'FZeuzKVStoreKVEntry::Partition' has a wrong offset!");
static_assert(offsetof(FZeuzKVStoreKVEntry, Key) == 0x000018, "Member 'FZeuzKVStoreKVEntry::Key' has a wrong offset!");
static_assert(offsetof(FZeuzKVStoreKVEntry, Value) == 0x000028, "Member 'FZeuzKVStoreKVEntry::Value' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzKVStoreDelIn
// 0x0000 (0x0020 - 0x0020)
struct FZeuzKVStoreDelIn final  : public FZeuzKVStoreKey
{
};
static_assert(alignof(FZeuzKVStoreDelIn) == 0x000008, "Wrong alignment on FZeuzKVStoreDelIn");
static_assert(sizeof(FZeuzKVStoreDelIn) == 0x000020, "Wrong size on FZeuzKVStoreDelIn");

// ScriptStruct Zeuzsdk.ZeuzKVStorePutIn
// 0x0000 (0x0030 - 0x0030)
struct FZeuzKVStorePutIn final  : public FZeuzKVStoreKeyValue
{
};
static_assert(alignof(FZeuzKVStorePutIn) == 0x000008, "Wrong alignment on FZeuzKVStorePutIn");
static_assert(sizeof(FZeuzKVStorePutIn) == 0x000030, "Wrong size on FZeuzKVStorePutIn");

// ScriptStruct Zeuzsdk.ZeuzLobbyUsersOut
// 0x0078 (0x0078 - 0x0000)
struct FZeuzLobbyUsersOut final 
{
public:
	struct FZeuzLobbyStateOut                     Lobby;                                             // 0x0000(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FZeuzLobbyUserBase>             Users;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ServerConnect;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyUsersOut) == 0x000008, "Wrong alignment on FZeuzLobbyUsersOut");
static_assert(sizeof(FZeuzLobbyUsersOut) == 0x000078, "Wrong size on FZeuzLobbyUsersOut");
static_assert(offsetof(FZeuzLobbyUsersOut, Lobby) == 0x000000, "Member 'FZeuzLobbyUsersOut::Lobby' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyUsersOut, Users) == 0x000058, "Member 'FZeuzLobbyUsersOut::Users' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyUsersOut, ServerConnect) == 0x000068, "Member 'FZeuzLobbyUsersOut::ServerConnect' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyServerConnect
// 0x0010 (0x0010 - 0x0000)
struct FZeuzLobbyServerConnect final 
{
public:
	class FString                                 ServerConnect;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyServerConnect) == 0x000008, "Wrong alignment on FZeuzLobbyServerConnect");
static_assert(sizeof(FZeuzLobbyServerConnect) == 0x000010, "Wrong size on FZeuzLobbyServerConnect");
static_assert(offsetof(FZeuzLobbyServerConnect, ServerConnect) == 0x000000, "Member 'FZeuzLobbyServerConnect::ServerConnect' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyJoin
// 0x0030 (0x0030 - 0x0000)
struct FZeuzLobbyJoin final 
{
public:
	class FString                                 LobbyID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyJoin) == 0x000008, "Wrong alignment on FZeuzLobbyJoin");
static_assert(sizeof(FZeuzLobbyJoin) == 0x000030, "Wrong size on FZeuzLobbyJoin");
static_assert(offsetof(FZeuzLobbyJoin, LobbyID) == 0x000000, "Member 'FZeuzLobbyJoin::LobbyID' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyJoin, UserID) == 0x000010, "Member 'FZeuzLobbyJoin::UserID' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyJoin, Password) == 0x000020, "Member 'FZeuzLobbyJoin::Password' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyQueryIn
// 0x0038 (0x0038 - 0x0000)
struct FZeuzLobbyQueryIn final 
{
public:
	int32                                         ListMax;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListOfs;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filter;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Compatibility;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzVariant                           Params;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLobbyQueryIn) == 0x000008, "Wrong alignment on FZeuzLobbyQueryIn");
static_assert(sizeof(FZeuzLobbyQueryIn) == 0x000038, "Wrong size on FZeuzLobbyQueryIn");
static_assert(offsetof(FZeuzLobbyQueryIn, ListMax) == 0x000000, "Member 'FZeuzLobbyQueryIn::ListMax' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyQueryIn, ListOfs) == 0x000004, "Member 'FZeuzLobbyQueryIn::ListOfs' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyQueryIn, Filter) == 0x000008, "Member 'FZeuzLobbyQueryIn::Filter' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyQueryIn, Compatibility) == 0x000018, "Member 'FZeuzLobbyQueryIn::Compatibility' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyQueryIn, Params) == 0x000028, "Member 'FZeuzLobbyQueryIn::Params' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLobbyRefresh
// 0x0028 (0x0028 - 0x0000)
struct FZeuzLobbyRefresh final 
{
public:
	class FString                                 LobbyID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastVersion;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122A[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzLobbyRefresh) == 0x000008, "Wrong alignment on FZeuzLobbyRefresh");
static_assert(sizeof(FZeuzLobbyRefresh) == 0x000028, "Wrong size on FZeuzLobbyRefresh");
static_assert(offsetof(FZeuzLobbyRefresh, LobbyID) == 0x000000, "Member 'FZeuzLobbyRefresh::LobbyID' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyRefresh, UserID) == 0x000010, "Member 'FZeuzLobbyRefresh::UserID' has a wrong offset!");
static_assert(offsetof(FZeuzLobbyRefresh, LastVersion) == 0x000020, "Member 'FZeuzLobbyRefresh::LastVersion' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLocation
// 0x00C8 (0x0150 - 0x0088)
struct FZeuzLocation final  : public FZeuzItemCommon
{
public:
	class FString                                 LocationID;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Regions;                                           // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ranking;                                           // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122B[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PingServer;                                        // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ProvisionTemplateName;                             // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ProvisionTemplateParams;                           // 0x0100(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLocation) == 0x000008, "Wrong alignment on FZeuzLocation");
static_assert(sizeof(FZeuzLocation) == 0x000150, "Wrong size on FZeuzLocation");
static_assert(offsetof(FZeuzLocation, LocationID) == 0x000088, "Member 'FZeuzLocation::LocationID' has a wrong offset!");
static_assert(offsetof(FZeuzLocation, Regions) == 0x000098, "Member 'FZeuzLocation::Regions' has a wrong offset!");
static_assert(offsetof(FZeuzLocation, DisplayName) == 0x0000A8, "Member 'FZeuzLocation::DisplayName' has a wrong offset!");
static_assert(offsetof(FZeuzLocation, Provider) == 0x0000B8, "Member 'FZeuzLocation::Provider' has a wrong offset!");
static_assert(offsetof(FZeuzLocation, Type) == 0x0000C8, "Member 'FZeuzLocation::Type' has a wrong offset!");
static_assert(offsetof(FZeuzLocation, Ranking) == 0x0000D8, "Member 'FZeuzLocation::Ranking' has a wrong offset!");
static_assert(offsetof(FZeuzLocation, PingServer) == 0x0000E0, "Member 'FZeuzLocation::PingServer' has a wrong offset!");
static_assert(offsetof(FZeuzLocation, ProvisionTemplateName) == 0x0000F0, "Member 'FZeuzLocation::ProvisionTemplateName' has a wrong offset!");
static_assert(offsetof(FZeuzLocation, ProvisionTemplateParams) == 0x000100, "Member 'FZeuzLocation::ProvisionTemplateParams' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzProvider
// 0x0028 (0x00B0 - 0x0088)
struct FZeuzProvider final  : public FZeuzItemCommon
{
public:
	class FString                                 ProviderID;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientProvisionable;                               // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProvisioningAllowed;                               // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122C[0x6];                                     // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzProvider) == 0x000008, "Wrong alignment on FZeuzProvider");
static_assert(sizeof(FZeuzProvider) == 0x0000B0, "Wrong size on FZeuzProvider");
static_assert(offsetof(FZeuzProvider, ProviderID) == 0x000088, "Member 'FZeuzProvider::ProviderID' has a wrong offset!");
static_assert(offsetof(FZeuzProvider, Name) == 0x000098, "Member 'FZeuzProvider::Name' has a wrong offset!");
static_assert(offsetof(FZeuzProvider, ClientProvisionable) == 0x0000A8, "Member 'FZeuzProvider::ClientProvisionable' has a wrong offset!");
static_assert(offsetof(FZeuzProvider, ProvisioningAllowed) == 0x0000A9, "Member 'FZeuzProvider::ProvisioningAllowed' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzRegion
// 0x0020 (0x00A8 - 0x0088)
struct FZeuzRegion final  : public FZeuzItemCommon
{
public:
	class FString                                 RegionID;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzRegion) == 0x000008, "Wrong alignment on FZeuzRegion");
static_assert(sizeof(FZeuzRegion) == 0x0000A8, "Wrong size on FZeuzRegion");
static_assert(offsetof(FZeuzRegion, RegionID) == 0x000088, "Member 'FZeuzRegion::RegionID' has a wrong offset!");
static_assert(offsetof(FZeuzRegion, DisplayName) == 0x000098, "Member 'FZeuzRegion::DisplayName' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLocalityLocationGetIn
// 0x0050 (0x0050 - 0x0000)
struct FZeuzLocalityLocationGetIn final 
{
public:
	TArray<class FString>                         LocationIDs;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DisplayNames;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Providers;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LocationType;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 WithinRegion;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLocalityLocationGetIn) == 0x000008, "Wrong alignment on FZeuzLocalityLocationGetIn");
static_assert(sizeof(FZeuzLocalityLocationGetIn) == 0x000050, "Wrong size on FZeuzLocalityLocationGetIn");
static_assert(offsetof(FZeuzLocalityLocationGetIn, LocationIDs) == 0x000000, "Member 'FZeuzLocalityLocationGetIn::LocationIDs' has a wrong offset!");
static_assert(offsetof(FZeuzLocalityLocationGetIn, DisplayNames) == 0x000010, "Member 'FZeuzLocalityLocationGetIn::DisplayNames' has a wrong offset!");
static_assert(offsetof(FZeuzLocalityLocationGetIn, Providers) == 0x000020, "Member 'FZeuzLocalityLocationGetIn::Providers' has a wrong offset!");
static_assert(offsetof(FZeuzLocalityLocationGetIn, LocationType) == 0x000030, "Member 'FZeuzLocalityLocationGetIn::LocationType' has a wrong offset!");
static_assert(offsetof(FZeuzLocalityLocationGetIn, WithinRegion) == 0x000040, "Member 'FZeuzLocalityLocationGetIn::WithinRegion' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLocalityProviderGetIn
// 0x0028 (0x0028 - 0x0000)
struct FZeuzLocalityProviderGetIn final 
{
public:
	TArray<class FString>                         ProviderIDs;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Names;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          GetClientProvisionable;                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetNonClientProvisionable;                         // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122D[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzLocalityProviderGetIn) == 0x000008, "Wrong alignment on FZeuzLocalityProviderGetIn");
static_assert(sizeof(FZeuzLocalityProviderGetIn) == 0x000028, "Wrong size on FZeuzLocalityProviderGetIn");
static_assert(offsetof(FZeuzLocalityProviderGetIn, ProviderIDs) == 0x000000, "Member 'FZeuzLocalityProviderGetIn::ProviderIDs' has a wrong offset!");
static_assert(offsetof(FZeuzLocalityProviderGetIn, Names) == 0x000010, "Member 'FZeuzLocalityProviderGetIn::Names' has a wrong offset!");
static_assert(offsetof(FZeuzLocalityProviderGetIn, GetClientProvisionable) == 0x000020, "Member 'FZeuzLocalityProviderGetIn::GetClientProvisionable' has a wrong offset!");
static_assert(offsetof(FZeuzLocalityProviderGetIn, GetNonClientProvisionable) == 0x000021, "Member 'FZeuzLocalityProviderGetIn::GetNonClientProvisionable' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLocalityRegionGetIn
// 0x0030 (0x0030 - 0x0000)
struct FZeuzLocalityRegionGetIn final 
{
public:
	TArray<class FString>                         RegionIDs;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DisplayNames;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ContainsLocations;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLocalityRegionGetIn) == 0x000008, "Wrong alignment on FZeuzLocalityRegionGetIn");
static_assert(sizeof(FZeuzLocalityRegionGetIn) == 0x000030, "Wrong size on FZeuzLocalityRegionGetIn");
static_assert(offsetof(FZeuzLocalityRegionGetIn, RegionIDs) == 0x000000, "Member 'FZeuzLocalityRegionGetIn::RegionIDs' has a wrong offset!");
static_assert(offsetof(FZeuzLocalityRegionGetIn, DisplayNames) == 0x000010, "Member 'FZeuzLocalityRegionGetIn::DisplayNames' has a wrong offset!");
static_assert(offsetof(FZeuzLocalityRegionGetIn, ContainsLocations) == 0x000020, "Member 'FZeuzLocalityRegionGetIn::ContainsLocations' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLogsearchAccountLog
// 0x00A0 (0x00A0 - 0x0000)
struct FZeuzLogsearchAccountLog final 
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122F[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Subroutine;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Container;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Proj;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Env;                                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Allocation;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Machine;                                           // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLogsearchAccountLog) == 0x000008, "Wrong alignment on FZeuzLogsearchAccountLog");
static_assert(sizeof(FZeuzLogsearchAccountLog) == 0x0000A0, "Wrong size on FZeuzLogsearchAccountLog");
static_assert(offsetof(FZeuzLogsearchAccountLog, ID) == 0x000000, "Member 'FZeuzLogsearchAccountLog::ID' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountLog, Time) == 0x000010, "Member 'FZeuzLogsearchAccountLog::Time' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountLog, Message) == 0x000018, "Member 'FZeuzLogsearchAccountLog::Message' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountLog, Level) == 0x000028, "Member 'FZeuzLogsearchAccountLog::Level' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountLog, Subroutine) == 0x000030, "Member 'FZeuzLogsearchAccountLog::Subroutine' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountLog, Container) == 0x000040, "Member 'FZeuzLogsearchAccountLog::Container' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountLog, Proj) == 0x000050, "Member 'FZeuzLogsearchAccountLog::Proj' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountLog, Env) == 0x000060, "Member 'FZeuzLogsearchAccountLog::Env' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountLog, Allocation) == 0x000070, "Member 'FZeuzLogsearchAccountLog::Allocation' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountLog, Payload) == 0x000080, "Member 'FZeuzLogsearchAccountLog::Payload' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountLog, Machine) == 0x000090, "Member 'FZeuzLogsearchAccountLog::Machine' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLogsearchAccountOut
// 0x0018 (0x0018 - 0x0000)
struct FZeuzLogsearchAccountOut final 
{
public:
	TArray<struct FZeuzLogsearchAccountLog>       Logs;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1230[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzLogsearchAccountOut) == 0x000008, "Wrong alignment on FZeuzLogsearchAccountOut");
static_assert(sizeof(FZeuzLogsearchAccountOut) == 0x000018, "Wrong size on FZeuzLogsearchAccountOut");
static_assert(offsetof(FZeuzLogsearchAccountOut, Logs) == 0x000000, "Member 'FZeuzLogsearchAccountOut::Logs' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchAccountOut, Total) == 0x000010, "Member 'FZeuzLogsearchAccountOut::Total' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzLogsearchLogsStatus
// 0x0018 (0x0018 - 0x0000)
struct FZeuzLogsearchLogsStatus final 
{
public:
	class FString                                 Status;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Step;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzLogsearchLogsStatus) == 0x000008, "Wrong alignment on FZeuzLogsearchLogsStatus");
static_assert(sizeof(FZeuzLogsearchLogsStatus) == 0x000018, "Wrong size on FZeuzLogsearchLogsStatus");
static_assert(offsetof(FZeuzLogsearchLogsStatus, Status) == 0x000000, "Member 'FZeuzLogsearchLogsStatus::Status' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchLogsStatus, Step) == 0x000010, "Member 'FZeuzLogsearchLogsStatus::Step' has a wrong offset!");
static_assert(offsetof(FZeuzLogsearchLogsStatus, Total) == 0x000014, "Member 'FZeuzLogsearchLogsStatus::Total' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMatchmakingUser
// 0x0050 (0x0050 - 0x0000)
struct FZeuzMatchmakingUser final 
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Team;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Slot;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Info;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMatchmakingUser) == 0x000008, "Wrong alignment on FZeuzMatchmakingUser");
static_assert(sizeof(FZeuzMatchmakingUser) == 0x000050, "Wrong size on FZeuzMatchmakingUser");
static_assert(offsetof(FZeuzMatchmakingUser, UserID) == 0x000000, "Member 'FZeuzMatchmakingUser::UserID' has a wrong offset!");
static_assert(offsetof(FZeuzMatchmakingUser, DisplayName) == 0x000010, "Member 'FZeuzMatchmakingUser::DisplayName' has a wrong offset!");
static_assert(offsetof(FZeuzMatchmakingUser, Team) == 0x000020, "Member 'FZeuzMatchmakingUser::Team' has a wrong offset!");
static_assert(offsetof(FZeuzMatchmakingUser, Slot) == 0x000030, "Member 'FZeuzMatchmakingUser::Slot' has a wrong offset!");
static_assert(offsetof(FZeuzMatchmakingUser, Info) == 0x000040, "Member 'FZeuzMatchmakingUser::Info' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMatchMakingResult
// 0x0098 (0x0098 - 0x0000)
struct FZeuzMatchMakingResult final 
{
public:
	class FString                                 Result;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FZeuzMatchmakingUser>           Users;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ServerConnect;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ServerPorts;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 AllocationID;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Opt;                                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Signature;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Timestamp;                                         // 0x0090(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMatchMakingResult) == 0x000008, "Wrong alignment on FZeuzMatchMakingResult");
static_assert(sizeof(FZeuzMatchMakingResult) == 0x000098, "Wrong size on FZeuzMatchMakingResult");
static_assert(offsetof(FZeuzMatchMakingResult, Result) == 0x000000, "Member 'FZeuzMatchMakingResult::Result' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingResult, Map) == 0x000010, "Member 'FZeuzMatchMakingResult::Map' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingResult, Region) == 0x000020, "Member 'FZeuzMatchMakingResult::Region' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingResult, Users) == 0x000030, "Member 'FZeuzMatchMakingResult::Users' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingResult, ServerConnect) == 0x000040, "Member 'FZeuzMatchMakingResult::ServerConnect' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingResult, ServerPorts) == 0x000050, "Member 'FZeuzMatchMakingResult::ServerPorts' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingResult, AllocationID) == 0x000060, "Member 'FZeuzMatchMakingResult::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingResult, Opt) == 0x000070, "Member 'FZeuzMatchMakingResult::Opt' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingResult, Signature) == 0x000080, "Member 'FZeuzMatchMakingResult::Signature' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingResult, Timestamp) == 0x000090, "Member 'FZeuzMatchMakingResult::Timestamp' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMatchMakingStatus
// 0x00D0 (0x00D0 - 0x0000)
struct FZeuzMatchMakingStatus final 
{
public:
	class FString                                 MatchMakingId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         ETA;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzMatchMakingResult                 Result;                                            // 0x0018(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 State;                                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMatchMakingStatus) == 0x000008, "Wrong alignment on FZeuzMatchMakingStatus");
static_assert(sizeof(FZeuzMatchMakingStatus) == 0x0000D0, "Wrong size on FZeuzMatchMakingStatus");
static_assert(offsetof(FZeuzMatchMakingStatus, MatchMakingId) == 0x000000, "Member 'FZeuzMatchMakingStatus::MatchMakingId' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingStatus, ETA) == 0x000010, "Member 'FZeuzMatchMakingStatus::ETA' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingStatus, Result) == 0x000018, "Member 'FZeuzMatchMakingStatus::Result' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingStatus, Error) == 0x0000B0, "Member 'FZeuzMatchMakingStatus::Error' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingStatus, State) == 0x0000C0, "Member 'FZeuzMatchMakingStatus::State' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMatchMakingStats
// 0x0004 (0x0004 - 0x0000)
struct FZeuzMatchMakingStats final 
{
public:
	int32                                         UsersCount;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMatchMakingStats) == 0x000004, "Wrong alignment on FZeuzMatchMakingStats");
static_assert(sizeof(FZeuzMatchMakingStats) == 0x000004, "Wrong size on FZeuzMatchMakingStats");
static_assert(offsetof(FZeuzMatchMakingStats, UsersCount) == 0x000000, "Member 'FZeuzMatchMakingStats::UsersCount' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMatchMakingInit
// 0x0080 (0x0080 - 0x0000)
struct FZeuzMatchMakingInit
{
public:
	struct FZeuzMatchmakingUser                   User;                                              // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Compatibility;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzVariant                           Params;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMatchMakingInit) == 0x000008, "Wrong alignment on FZeuzMatchMakingInit");
static_assert(sizeof(FZeuzMatchMakingInit) == 0x000080, "Wrong size on FZeuzMatchMakingInit");
static_assert(offsetof(FZeuzMatchMakingInit, User) == 0x000000, "Member 'FZeuzMatchMakingInit::User' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingInit, Compatibility) == 0x000050, "Member 'FZeuzMatchMakingInit::Compatibility' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingInit, Region) == 0x000060, "Member 'FZeuzMatchMakingInit::Region' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingInit, Params) == 0x000070, "Member 'FZeuzMatchMakingInit::Params' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzSimpleProfileUserCreateIn
// 0x0040 (0x0040 - 0x0000)
struct FZeuzSimpleProfileUserCreateIn final 
{
public:
	class FString                                 Login;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzSimpleProfileUserCreateIn) == 0x000008, "Wrong alignment on FZeuzSimpleProfileUserCreateIn");
static_assert(sizeof(FZeuzSimpleProfileUserCreateIn) == 0x000040, "Wrong size on FZeuzSimpleProfileUserCreateIn");
static_assert(offsetof(FZeuzSimpleProfileUserCreateIn, Login) == 0x000000, "Member 'FZeuzSimpleProfileUserCreateIn::Login' has a wrong offset!");
static_assert(offsetof(FZeuzSimpleProfileUserCreateIn, Name) == 0x000010, "Member 'FZeuzSimpleProfileUserCreateIn::Name' has a wrong offset!");
static_assert(offsetof(FZeuzSimpleProfileUserCreateIn, Desc) == 0x000020, "Member 'FZeuzSimpleProfileUserCreateIn::Desc' has a wrong offset!");
static_assert(offsetof(FZeuzSimpleProfileUserCreateIn, Password) == 0x000030, "Member 'FZeuzSimpleProfileUserCreateIn::Password' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMatchMakingPartyInit
// 0x0030 (0x00B0 - 0x0080)
struct FZeuzMatchMakingPartyInit final  : public FZeuzMatchMakingInit
{
public:
	TArray<struct FZeuzMatchmakingUser>           Party;                                             // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 AllocationID;                                      // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerConnect;                                     // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMatchMakingPartyInit) == 0x000008, "Wrong alignment on FZeuzMatchMakingPartyInit");
static_assert(sizeof(FZeuzMatchMakingPartyInit) == 0x0000B0, "Wrong size on FZeuzMatchMakingPartyInit");
static_assert(offsetof(FZeuzMatchMakingPartyInit, Party) == 0x000080, "Member 'FZeuzMatchMakingPartyInit::Party' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingPartyInit, AllocationID) == 0x000090, "Member 'FZeuzMatchMakingPartyInit::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingPartyInit, ServerConnect) == 0x0000A0, "Member 'FZeuzMatchMakingPartyInit::ServerConnect' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzSimpleAuthLoginIn
// 0x0028 (0x0028 - 0x0000)
struct FZeuzSimpleAuthLoginIn final 
{
public:
	class FString                                 Login;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EZeuzSessionType                              LoginType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1231[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzSimpleAuthLoginIn) == 0x000008, "Wrong alignment on FZeuzSimpleAuthLoginIn");
static_assert(sizeof(FZeuzSimpleAuthLoginIn) == 0x000028, "Wrong size on FZeuzSimpleAuthLoginIn");
static_assert(offsetof(FZeuzSimpleAuthLoginIn, Login) == 0x000000, "Member 'FZeuzSimpleAuthLoginIn::Login' has a wrong offset!");
static_assert(offsetof(FZeuzSimpleAuthLoginIn, Password) == 0x000010, "Member 'FZeuzSimpleAuthLoginIn::Password' has a wrong offset!");
static_assert(offsetof(FZeuzSimpleAuthLoginIn, LoginType) == 0x000020, "Member 'FZeuzSimpleAuthLoginIn::LoginType' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMatchMakingServerInfo
// 0x0078 (0x0078 - 0x0000)
struct FZeuzMatchMakingServerInfo final 
{
public:
	class FString                                 PayloadID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Allocatable;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1232[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UserCount;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Ports;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 MachineID;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AllocationID;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Regions;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Created;                                           // 0x0068(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Updated;                                           // 0x0070(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMatchMakingServerInfo) == 0x000008, "Wrong alignment on FZeuzMatchMakingServerInfo");
static_assert(sizeof(FZeuzMatchMakingServerInfo) == 0x000078, "Wrong size on FZeuzMatchMakingServerInfo");
static_assert(offsetof(FZeuzMatchMakingServerInfo, PayloadID) == 0x000000, "Member 'FZeuzMatchMakingServerInfo::PayloadID' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingServerInfo, Allocatable) == 0x000010, "Member 'FZeuzMatchMakingServerInfo::Allocatable' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingServerInfo, UserCount) == 0x000014, "Member 'FZeuzMatchMakingServerInfo::UserCount' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingServerInfo, IP) == 0x000018, "Member 'FZeuzMatchMakingServerInfo::IP' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingServerInfo, Ports) == 0x000028, "Member 'FZeuzMatchMakingServerInfo::Ports' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingServerInfo, MachineID) == 0x000038, "Member 'FZeuzMatchMakingServerInfo::MachineID' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingServerInfo, AllocationID) == 0x000048, "Member 'FZeuzMatchMakingServerInfo::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingServerInfo, Regions) == 0x000058, "Member 'FZeuzMatchMakingServerInfo::Regions' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingServerInfo, Created) == 0x000068, "Member 'FZeuzMatchMakingServerInfo::Created' has a wrong offset!");
static_assert(offsetof(FZeuzMatchMakingServerInfo, Updated) == 0x000070, "Member 'FZeuzMatchMakingServerInfo::Updated' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzMetricsQueryIn
// 0x0058 (0x0058 - 0x0000)
struct FZeuzMetricsQueryIn final 
{
public:
	struct FZeuzTimestamp                         Start;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         End;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Step;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1233[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GroupBy;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PayloadIDs;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         MachineIDs;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AllocationIDs;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzMetricsQueryIn) == 0x000008, "Wrong alignment on FZeuzMetricsQueryIn");
static_assert(sizeof(FZeuzMetricsQueryIn) == 0x000058, "Wrong size on FZeuzMetricsQueryIn");
static_assert(offsetof(FZeuzMetricsQueryIn, Start) == 0x000000, "Member 'FZeuzMetricsQueryIn::Start' has a wrong offset!");
static_assert(offsetof(FZeuzMetricsQueryIn, End) == 0x000008, "Member 'FZeuzMetricsQueryIn::End' has a wrong offset!");
static_assert(offsetof(FZeuzMetricsQueryIn, Step) == 0x000010, "Member 'FZeuzMetricsQueryIn::Step' has a wrong offset!");
static_assert(offsetof(FZeuzMetricsQueryIn, GroupBy) == 0x000018, "Member 'FZeuzMetricsQueryIn::GroupBy' has a wrong offset!");
static_assert(offsetof(FZeuzMetricsQueryIn, PayloadIDs) == 0x000028, "Member 'FZeuzMetricsQueryIn::PayloadIDs' has a wrong offset!");
static_assert(offsetof(FZeuzMetricsQueryIn, MachineIDs) == 0x000038, "Member 'FZeuzMetricsQueryIn::MachineIDs' has a wrong offset!");
static_assert(offsetof(FZeuzMetricsQueryIn, AllocationIDs) == 0x000048, "Member 'FZeuzMetricsQueryIn::AllocationIDs' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadPortMapping
// 0x0008 (0x0008 - 0x0000)
struct FZeuzPayloadPortMapping final 
{
public:
	int32                                         InternalPort;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExternalPort;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzPayloadPortMapping) == 0x000004, "Wrong alignment on FZeuzPayloadPortMapping");
static_assert(sizeof(FZeuzPayloadPortMapping) == 0x000008, "Wrong size on FZeuzPayloadPortMapping");
static_assert(offsetof(FZeuzPayloadPortMapping, InternalPort) == 0x000000, "Member 'FZeuzPayloadPortMapping::InternalPort' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadPortMapping, ExternalPort) == 0x000004, "Member 'FZeuzPayloadPortMapping::ExternalPort' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadInfo
// 0x00E8 (0x00E8 - 0x0000)
struct FZeuzPayloadInfo final 
{
public:
	class FString                                 PayloadID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MachineID;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AllocationID;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnvID;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Regions;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FZeuzPayloadDef                        PayloadDef;                                        // 0x0050(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reserved;                                          // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1234[0x6];                                     // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IP;                                                // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FZeuzPayloadPortMapping>        PortMapping;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Handling;                                          // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocationType;                                      // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Created;                                           // 0x00D8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzTimestamp                         Modified;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzPayloadInfo) == 0x000008, "Wrong alignment on FZeuzPayloadInfo");
static_assert(sizeof(FZeuzPayloadInfo) == 0x0000E8, "Wrong size on FZeuzPayloadInfo");
static_assert(offsetof(FZeuzPayloadInfo, PayloadID) == 0x000000, "Member 'FZeuzPayloadInfo::PayloadID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, MachineID) == 0x000010, "Member 'FZeuzPayloadInfo::MachineID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, AllocationID) == 0x000020, "Member 'FZeuzPayloadInfo::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, EnvID) == 0x000030, "Member 'FZeuzPayloadInfo::EnvID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, Regions) == 0x000040, "Member 'FZeuzPayloadInfo::Regions' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, PayloadDef) == 0x000050, "Member 'FZeuzPayloadInfo::PayloadDef' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, Active) == 0x000090, "Member 'FZeuzPayloadInfo::Active' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, Reserved) == 0x000091, "Member 'FZeuzPayloadInfo::Reserved' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, IP) == 0x000098, "Member 'FZeuzPayloadInfo::IP' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, PortMapping) == 0x0000A8, "Member 'FZeuzPayloadInfo::PortMapping' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, Handling) == 0x0000B8, "Member 'FZeuzPayloadInfo::Handling' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, LocationType) == 0x0000C8, "Member 'FZeuzPayloadInfo::LocationType' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, Created) == 0x0000D8, "Member 'FZeuzPayloadInfo::Created' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadInfo, Modified) == 0x0000E0, "Member 'FZeuzPayloadInfo::Modified' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadGetOut
// 0x0018 (0x0018 - 0x0000)
struct FZeuzPayloadGetOut final 
{
public:
	TArray<struct FZeuzPayloadInfo>               Items;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1235[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzPayloadGetOut) == 0x000008, "Wrong alignment on FZeuzPayloadGetOut");
static_assert(sizeof(FZeuzPayloadGetOut) == 0x000018, "Wrong size on FZeuzPayloadGetOut");
static_assert(offsetof(FZeuzPayloadGetOut, Items) == 0x000000, "Member 'FZeuzPayloadGetOut::Items' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadGetOut, Count) == 0x000010, "Member 'FZeuzPayloadGetOut::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadStateInfo
// 0x0068 (0x0068 - 0x0000)
struct FZeuzPayloadStateInfo final 
{
public:
	class FString                                 PayloadID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         State;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerCount;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            PlayerList;                                        // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzPayloadStateInfo) == 0x000008, "Wrong alignment on FZeuzPayloadStateInfo");
static_assert(sizeof(FZeuzPayloadStateInfo) == 0x000068, "Wrong size on FZeuzPayloadStateInfo");
static_assert(offsetof(FZeuzPayloadStateInfo, PayloadID) == 0x000000, "Member 'FZeuzPayloadStateInfo::PayloadID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadStateInfo, State) == 0x000010, "Member 'FZeuzPayloadStateInfo::State' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadStateInfo, PlayerCount) == 0x000014, "Member 'FZeuzPayloadStateInfo::PlayerCount' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadStateInfo, PlayerList) == 0x000018, "Member 'FZeuzPayloadStateInfo::PlayerList' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadAllocateIn
// 0x0028 (0x0028 - 0x0000)
struct FZeuzPayloadAllocateIn final 
{
public:
	class FString                                 AllocationID;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionID;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1236[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzPayloadAllocateIn) == 0x000008, "Wrong alignment on FZeuzPayloadAllocateIn");
static_assert(sizeof(FZeuzPayloadAllocateIn) == 0x000028, "Wrong size on FZeuzPayloadAllocateIn");
static_assert(offsetof(FZeuzPayloadAllocateIn, AllocationID) == 0x000000, "Member 'FZeuzPayloadAllocateIn::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadAllocateIn, RegionID) == 0x000010, "Member 'FZeuzPayloadAllocateIn::RegionID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadAllocateIn, Count) == 0x000020, "Member 'FZeuzPayloadAllocateIn::Count' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadCreateIn
// 0x0078 (0x0078 - 0x0000)
struct FZeuzPayloadCreateIn final 
{
public:
	class FString                                 AllocationID;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MachineID;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzPayloadDef                        PayloadDef;                                        // 0x0020(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Hostname;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TTL;                                               // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1237[0x4];                                     // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzPayloadCreateIn) == 0x000008, "Wrong alignment on FZeuzPayloadCreateIn");
static_assert(sizeof(FZeuzPayloadCreateIn) == 0x000078, "Wrong size on FZeuzPayloadCreateIn");
static_assert(offsetof(FZeuzPayloadCreateIn, AllocationID) == 0x000000, "Member 'FZeuzPayloadCreateIn::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadCreateIn, MachineID) == 0x000010, "Member 'FZeuzPayloadCreateIn::MachineID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadCreateIn, PayloadDef) == 0x000020, "Member 'FZeuzPayloadCreateIn::PayloadDef' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadCreateIn, Hostname) == 0x000060, "Member 'FZeuzPayloadCreateIn::Hostname' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadCreateIn, TTL) == 0x000070, "Member 'FZeuzPayloadCreateIn::TTL' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadPagination
// 0x0028 (0x0028 - 0x0000)
struct FZeuzPayloadPagination
{
public:
	bool                                          GetTotal;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1238[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Offset;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1239[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderBy;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderAsc;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123A[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzPayloadPagination) == 0x000008, "Wrong alignment on FZeuzPayloadPagination");
static_assert(sizeof(FZeuzPayloadPagination) == 0x000028, "Wrong size on FZeuzPayloadPagination");
static_assert(offsetof(FZeuzPayloadPagination, GetTotal) == 0x000000, "Member 'FZeuzPayloadPagination::GetTotal' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadPagination, Offset) == 0x000004, "Member 'FZeuzPayloadPagination::Offset' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadPagination, Limit) == 0x000008, "Member 'FZeuzPayloadPagination::Limit' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadPagination, OrderBy) == 0x000010, "Member 'FZeuzPayloadPagination::OrderBy' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadPagination, OrderAsc) == 0x000020, "Member 'FZeuzPayloadPagination::OrderAsc' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadGetIn
// 0x0058 (0x0080 - 0x0028)
struct FZeuzPayloadGetIn final  : public FZeuzPayloadPagination
{
public:
	TArray<class FString>                         AllocationIDs;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         MachineIDs;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         PayloadIDs;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 LocationType;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionID;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetReserved;                                       // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetUnreserved;                                     // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetActive;                                         // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetInactive;                                       // 0x007B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123B[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzPayloadGetIn) == 0x000008, "Wrong alignment on FZeuzPayloadGetIn");
static_assert(sizeof(FZeuzPayloadGetIn) == 0x000080, "Wrong size on FZeuzPayloadGetIn");
static_assert(offsetof(FZeuzPayloadGetIn, AllocationIDs) == 0x000028, "Member 'FZeuzPayloadGetIn::AllocationIDs' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadGetIn, MachineIDs) == 0x000038, "Member 'FZeuzPayloadGetIn::MachineIDs' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadGetIn, PayloadIDs) == 0x000048, "Member 'FZeuzPayloadGetIn::PayloadIDs' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadGetIn, LocationType) == 0x000058, "Member 'FZeuzPayloadGetIn::LocationType' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadGetIn, RegionID) == 0x000068, "Member 'FZeuzPayloadGetIn::RegionID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadGetIn, GetReserved) == 0x000078, "Member 'FZeuzPayloadGetIn::GetReserved' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadGetIn, GetUnreserved) == 0x000079, "Member 'FZeuzPayloadGetIn::GetUnreserved' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadGetIn, GetActive) == 0x00007A, "Member 'FZeuzPayloadGetIn::GetActive' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadGetIn, GetInactive) == 0x00007B, "Member 'FZeuzPayloadGetIn::GetInactive' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadResumeIn
// 0x0088 (0x0088 - 0x0000)
struct FZeuzPayloadResumeIn final 
{
public:
	class FString                                 PayloadID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AllocationID;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MachineID;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzPayloadDef                        PayloadDef;                                        // 0x0030(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Hostname;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TTL;                                               // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123C[0x4];                                     // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzPayloadResumeIn) == 0x000008, "Wrong alignment on FZeuzPayloadResumeIn");
static_assert(sizeof(FZeuzPayloadResumeIn) == 0x000088, "Wrong size on FZeuzPayloadResumeIn");
static_assert(offsetof(FZeuzPayloadResumeIn, PayloadID) == 0x000000, "Member 'FZeuzPayloadResumeIn::PayloadID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadResumeIn, AllocationID) == 0x000010, "Member 'FZeuzPayloadResumeIn::AllocationID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadResumeIn, MachineID) == 0x000020, "Member 'FZeuzPayloadResumeIn::MachineID' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadResumeIn, PayloadDef) == 0x000030, "Member 'FZeuzPayloadResumeIn::PayloadDef' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadResumeIn, Hostname) == 0x000070, "Member 'FZeuzPayloadResumeIn::Hostname' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadResumeIn, TTL) == 0x000080, "Member 'FZeuzPayloadResumeIn::TTL' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzPayloadStateGetIn
// 0x0030 (0x0030 - 0x0000)
struct FZeuzPayloadStateGetIn final 
{
public:
	TArray<class FString>                         AllocationIDs;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         MachineIDs;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         PayloadIDs;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzPayloadStateGetIn) == 0x000008, "Wrong alignment on FZeuzPayloadStateGetIn");
static_assert(sizeof(FZeuzPayloadStateGetIn) == 0x000030, "Wrong size on FZeuzPayloadStateGetIn");
static_assert(offsetof(FZeuzPayloadStateGetIn, AllocationIDs) == 0x000000, "Member 'FZeuzPayloadStateGetIn::AllocationIDs' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadStateGetIn, MachineIDs) == 0x000010, "Member 'FZeuzPayloadStateGetIn::MachineIDs' has a wrong offset!");
static_assert(offsetof(FZeuzPayloadStateGetIn, PayloadIDs) == 0x000020, "Member 'FZeuzPayloadStateGetIn::PayloadIDs' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzServerBrowserStateBase
// 0x0048 (0x0048 - 0x0000)
struct FZeuzServerBrowserStateBase
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientAddr;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsersCur;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsersMax;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Compatibility;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzVariant                           Params;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzServerBrowserStateBase) == 0x000008, "Wrong alignment on FZeuzServerBrowserStateBase");
static_assert(sizeof(FZeuzServerBrowserStateBase) == 0x000048, "Wrong size on FZeuzServerBrowserStateBase");
static_assert(offsetof(FZeuzServerBrowserStateBase, ID) == 0x000000, "Member 'FZeuzServerBrowserStateBase::ID' has a wrong offset!");
static_assert(offsetof(FZeuzServerBrowserStateBase, ClientAddr) == 0x000010, "Member 'FZeuzServerBrowserStateBase::ClientAddr' has a wrong offset!");
static_assert(offsetof(FZeuzServerBrowserStateBase, UsersCur) == 0x000020, "Member 'FZeuzServerBrowserStateBase::UsersCur' has a wrong offset!");
static_assert(offsetof(FZeuzServerBrowserStateBase, UsersMax) == 0x000024, "Member 'FZeuzServerBrowserStateBase::UsersMax' has a wrong offset!");
static_assert(offsetof(FZeuzServerBrowserStateBase, Compatibility) == 0x000028, "Member 'FZeuzServerBrowserStateBase::Compatibility' has a wrong offset!");
static_assert(offsetof(FZeuzServerBrowserStateBase, Params) == 0x000038, "Member 'FZeuzServerBrowserStateBase::Params' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzServerBrowserStateOut
// 0x0000 (0x0048 - 0x0048)
struct FZeuzServerBrowserStateOut final  : public FZeuzServerBrowserStateBase
{
};
static_assert(alignof(FZeuzServerBrowserStateOut) == 0x000008, "Wrong alignment on FZeuzServerBrowserStateOut");
static_assert(sizeof(FZeuzServerBrowserStateOut) == 0x000048, "Wrong size on FZeuzServerBrowserStateOut");

// ScriptStruct Zeuzsdk.ZeuzServerBrowserQueryOut
// 0x0028 (0x0028 - 0x0000)
struct FZeuzServerBrowserQueryOut final 
{
public:
	TArray<struct FZeuzServerBrowserStateOut>     Results;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ResultOfs;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultTotal;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Errors;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzServerBrowserQueryOut) == 0x000008, "Wrong alignment on FZeuzServerBrowserQueryOut");
static_assert(sizeof(FZeuzServerBrowserQueryOut) == 0x000028, "Wrong size on FZeuzServerBrowserQueryOut");
static_assert(offsetof(FZeuzServerBrowserQueryOut, Results) == 0x000000, "Member 'FZeuzServerBrowserQueryOut::Results' has a wrong offset!");
static_assert(offsetof(FZeuzServerBrowserQueryOut, ResultOfs) == 0x000010, "Member 'FZeuzServerBrowserQueryOut::ResultOfs' has a wrong offset!");
static_assert(offsetof(FZeuzServerBrowserQueryOut, ResultTotal) == 0x000014, "Member 'FZeuzServerBrowserQueryOut::ResultTotal' has a wrong offset!");
static_assert(offsetof(FZeuzServerBrowserQueryOut, Errors) == 0x000018, "Member 'FZeuzServerBrowserQueryOut::Errors' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzServerBrowserQueryIn
// 0x0038 (0x0038 - 0x0000)
struct FZeuzServerBrowserQueryIn final 
{
public:
	int32                                         ListMax;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListOfs;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filter;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Compatibility;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZeuzVariant                           Params;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZeuzServerBrowserQueryIn) == 0x000008, "Wrong alignment on FZeuzServerBrowserQueryIn");
static_assert(sizeof(FZeuzServerBrowserQueryIn) == 0x000038, "Wrong size on FZeuzServerBrowserQueryIn");
static_assert(offsetof(FZeuzServerBrowserQueryIn, ListMax) == 0x000000, "Member 'FZeuzServerBrowserQueryIn::ListMax' has a wrong offset!");
static_assert(offsetof(FZeuzServerBrowserQueryIn, ListOfs) == 0x000004, "Member 'FZeuzServerBrowserQueryIn::ListOfs' has a wrong offset!");
static_assert(offsetof(FZeuzServerBrowserQueryIn, Filter) == 0x000008, "Member 'FZeuzServerBrowserQueryIn::Filter' has a wrong offset!");
static_assert(offsetof(FZeuzServerBrowserQueryIn, Compatibility) == 0x000018, "Member 'FZeuzServerBrowserQueryIn::Compatibility' has a wrong offset!");
static_assert(offsetof(FZeuzServerBrowserQueryIn, Params) == 0x000028, "Member 'FZeuzServerBrowserQueryIn::Params' has a wrong offset!");

// ScriptStruct Zeuzsdk.ZeuzServerBrowserStateIn
// 0x0000 (0x0048 - 0x0048)
struct FZeuzServerBrowserStateIn final  : public FZeuzServerBrowserStateBase
{
};
static_assert(alignof(FZeuzServerBrowserStateIn) == 0x000008, "Wrong alignment on FZeuzServerBrowserStateIn");
static_assert(sizeof(FZeuzServerBrowserStateIn) == 0x000048, "Wrong size on FZeuzServerBrowserStateIn");

// ScriptStruct Zeuzsdk.ZeuzItem
// 0x0001 (0x0001 - 0x0000)
struct FZeuzItem final 
{
public:
	uint8                                         Pad_123D[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzItem) == 0x000001, "Wrong alignment on FZeuzItem");
static_assert(sizeof(FZeuzItem) == 0x000001, "Wrong size on FZeuzItem");

// ScriptStruct Zeuzsdk.ZeuzACLPermission
// 0x0001 (0x0001 - 0x0000)
struct FZeuzACLPermission final 
{
public:
	uint8                                         Pad_123E[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzACLPermission) == 0x000001, "Wrong alignment on FZeuzACLPermission");
static_assert(sizeof(FZeuzACLPermission) == 0x000001, "Wrong size on FZeuzACLPermission");

// ScriptStruct Zeuzsdk.ZeuzPropVal
// 0x0001 (0x0001 - 0x0000)
struct FZeuzPropVal final 
{
public:
	uint8                                         Pad_123F[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZeuzPropVal) == 0x000001, "Wrong alignment on FZeuzPropVal");
static_assert(sizeof(FZeuzPropVal) == 0x000001, "Wrong size on FZeuzPropVal");

}

