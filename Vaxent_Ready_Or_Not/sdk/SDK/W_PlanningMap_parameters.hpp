#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PlanningMap

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_PlanningMap.W_PlanningMap_C.PanMap__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct W_PlanningMap_C_PanMap__DelegateSignature final 
{
public:
	bool                                          Param_Pressed;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3806[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CursorPos;                                         // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_PanMap__DelegateSignature) == 0x000004, "Wrong alignment on W_PlanningMap_C_PanMap__DelegateSignature");
static_assert(sizeof(W_PlanningMap_C_PanMap__DelegateSignature) == 0x00000C, "Wrong size on W_PlanningMap_C_PanMap__DelegateSignature");
static_assert(offsetof(W_PlanningMap_C_PanMap__DelegateSignature, Param_Pressed) == 0x000000, "Member 'W_PlanningMap_C_PanMap__DelegateSignature::Param_Pressed' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_PanMap__DelegateSignature, CursorPos) == 0x000004, "Member 'W_PlanningMap_C_PanMap__DelegateSignature::CursorPos' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.UpdateMapMaterial__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PlanningMap_C_UpdateMapMaterial__DelegateSignature final 
{
public:
	class UTexture2D*                             LayoutTexture;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_UpdateMapMaterial__DelegateSignature) == 0x000008, "Wrong alignment on W_PlanningMap_C_UpdateMapMaterial__DelegateSignature");
static_assert(sizeof(W_PlanningMap_C_UpdateMapMaterial__DelegateSignature) == 0x000008, "Wrong size on W_PlanningMap_C_UpdateMapMaterial__DelegateSignature");
static_assert(offsetof(W_PlanningMap_C_UpdateMapMaterial__DelegateSignature, LayoutTexture) == 0x000000, "Member 'W_PlanningMap_C_UpdateMapMaterial__DelegateSignature::LayoutTexture' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.ExecuteUbergraph_W_PlanningMap
// 0x0AE8 (0x0AE8 - 0x0000)
struct W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_GetLevelLookupDataTable_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3807[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelDataLookupTable                  CallFunc_GetDataTableRowFromName_OutRow;           // 0x0018(0x0788)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x07A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3808[0x3];                                     // 0x07A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_FloorIndex;                     // 0x07A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x07AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x07B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x07B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x07B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3809[0x7];                                     // 0x07B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelFloorData                        CallFunc_Array_Get_Item;                           // 0x07C0(0x0080)()
	struct FPointerEvent                          K2Node_Event_PointerEvent;                         // 0x0840(0x0070)(ConstParm)
	class UDragDropOperation*                     K2Node_Event_Operation;                            // 0x08B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_UI_PlanningMap_SpawnPoint_C*> K2Node_CustomEvent_SpawnPointComponents;           // 0x08B8(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	class ABP_UI_PlanningMap_C*                   K2Node_CustomEvent_PlanningMapActor;               // 0x08C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_Button_C* Button)>    K2Node_CreateDelegate_OutputDelegate;              // 0x08D0(0x0010)(ZeroConstructor, NoDestructor)
	class UW_Button_C*                            K2Node_CustomEvent_Button;                         // 0x08E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x08E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x08EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            CallFunc_Array_Get_Item_1;                         // 0x08F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Floor;                          // 0x08F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 Floor)>                  K2Node_CreateDelegate_OutputDelegate_1;            // 0x08FC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float ZoomValue)>              K2Node_CreateDelegate_OutputDelegate_2;            // 0x090C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_380A[0x4];                                     // 0x091C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UW_PlanningMap_BreachPoint_C*>   CallFunc_Map_Values_Values;                        // 0x0920(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0930(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_380B[0x7];                                     // 0x0931(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PlanningMap_BreachPoint_C*           CallFunc_Array_Get_Item_2;                         // 0x0938(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0940(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_380C[0x4];                                     // 0x0944(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0948(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0950(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_380D[0x7];                                     // 0x0951(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PlanningMap_BreachPoint_C*           K2Node_CustomEvent_HoveredPoint;                   // 0x0958(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PlanningMap_BreachPoint_C*           K2Node_CustomEvent_ClickedPoint;                   // 0x0960(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSpawnPoints                           CallFunc_GetSpawnPointInfo_SpawnPointInfo;         // 0x0968(0x0090)()
	int32                                         CallFunc_GetSpawnPointInfo_Index;                  // 0x09F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_380E[0x4];                                     // 0x09FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0A00(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0A08(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0A10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDetailPanePosition_ReturnValue;        // 0x0A18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0A20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_380F[0x7];                                     // 0x0A21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_3;           // 0x0A28(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSpawnPoints                           CallFunc_GetSpawnPointInfo_SpawnPointInfo_1;       // 0x0A30(0x0090)()
	int32                                         CallFunc_GetSpawnPointInfo_Index_1;                // 0x0AC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3810[0x4];                                     // 0x0AC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Button_C*                            CallFunc_Array_Get_Item_3;                         // 0x0AC8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            CallFunc_Create_ReturnValue;                       // 0x0AD0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue;        // 0x0AD8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0AE0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0AE4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0AE5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap) == 0x000008, "Wrong alignment on W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap");
static_assert(sizeof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap) == 0x000AE8, "Wrong size on W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, EntryPoint) == 0x000000, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetLevelLookupDataTable_ReturnValue) == 0x000008, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetLevelLookupDataTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetDataTableRowFromName_OutRow) == 0x000018, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0007A0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_FloorIndex) == 0x0007A4, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_FloorIndex' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, Temp_int_Loop_Counter_Variable_1) == 0x0007A8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Add_IntInt_ReturnValue_1) == 0x0007AC, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Length_ReturnValue) == 0x0007B0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, Temp_int_Array_Index_Variable) == 0x0007B4, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Less_IntInt_ReturnValue) == 0x0007B8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Get_Item) == 0x0007C0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_Event_PointerEvent) == 0x000840, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_Event_PointerEvent' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_Event_Operation) == 0x0008B0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_Event_Operation' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_SpawnPointComponents) == 0x0008B8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_SpawnPointComponents' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_PlanningMapActor) == 0x0008C8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_PlanningMapActor' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CreateDelegate_OutputDelegate) == 0x0008D0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_Button) == 0x0008E0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_Button' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Find_ReturnValue) == 0x0008E8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, Temp_int_Array_Index_Variable_1) == 0x0008EC, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Get_Item_1) == 0x0008F0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_Floor) == 0x0008F8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_Floor' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CreateDelegate_OutputDelegate_1) == 0x0008FC, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CreateDelegate_OutputDelegate_2) == 0x00090C, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Map_Values_Values) == 0x000920, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_IsValid_ReturnValue) == 0x000930, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Get_Item_2) == 0x000938, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Length_ReturnValue_1) == 0x000940, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000948, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Less_IntInt_ReturnValue_1) == 0x000950, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_HoveredPoint) == 0x000958, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_HoveredPoint' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_ClickedPoint) == 0x000960, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_ClickedPoint' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetSpawnPointInfo_SpawnPointInfo) == 0x000968, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetSpawnPointInfo_SpawnPointInfo' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetSpawnPointInfo_Index) == 0x0009F8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetSpawnPointInfo_Index' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000A00, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000A08, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetPosition_ReturnValue) == 0x000A10, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetDetailPanePosition_ReturnValue) == 0x000A18, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetDetailPanePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000A20, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_SlotAsCanvasSlot_ReturnValue_3) == 0x000A28, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_SlotAsCanvasSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetSpawnPointInfo_SpawnPointInfo_1) == 0x000A30, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetSpawnPointInfo_SpawnPointInfo_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetSpawnPointInfo_Index_1) == 0x000AC0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetSpawnPointInfo_Index_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Get_Item_3) == 0x000AC8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Create_ReturnValue) == 0x000AD0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_AddChildToVerticalBox_ReturnValue) == 0x000AD8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_AddChildToVerticalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Add_ReturnValue) == 0x000AE0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000AE4, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Not_PreBool_ReturnValue) == 0x000AE5, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.PointClicked
// 0x0008 (0x0008 - 0x0000)
struct W_PlanningMap_C_PointClicked final 
{
public:
	class UW_PlanningMap_BreachPoint_C*           ClickedPoint;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_PointClicked) == 0x000008, "Wrong alignment on W_PlanningMap_C_PointClicked");
static_assert(sizeof(W_PlanningMap_C_PointClicked) == 0x000008, "Wrong size on W_PlanningMap_C_PointClicked");
static_assert(offsetof(W_PlanningMap_C_PointClicked, ClickedPoint) == 0x000000, "Member 'W_PlanningMap_C_PointClicked::ClickedPoint' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.PointHovered
// 0x0008 (0x0008 - 0x0000)
struct W_PlanningMap_C_PointHovered final 
{
public:
	class UW_PlanningMap_BreachPoint_C*           HoveredPoint;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_PointHovered) == 0x000008, "Wrong alignment on W_PlanningMap_C_PointHovered");
static_assert(sizeof(W_PlanningMap_C_PointHovered) == 0x000008, "Wrong size on W_PlanningMap_C_PointHovered");
static_assert(offsetof(W_PlanningMap_C_PointHovered, HoveredPoint) == 0x000000, "Member 'W_PlanningMap_C_PointHovered::HoveredPoint' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.MapFloorUpdated
// 0x0004 (0x0004 - 0x0000)
struct W_PlanningMap_C_MapFloorUpdated final 
{
public:
	int32                                         Floor;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_MapFloorUpdated) == 0x000004, "Wrong alignment on W_PlanningMap_C_MapFloorUpdated");
static_assert(sizeof(W_PlanningMap_C_MapFloorUpdated) == 0x000004, "Wrong size on W_PlanningMap_C_MapFloorUpdated");
static_assert(offsetof(W_PlanningMap_C_MapFloorUpdated, Floor) == 0x000000, "Member 'W_PlanningMap_C_MapFloorUpdated::Floor' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.ChangeFloor
// 0x0008 (0x0008 - 0x0000)
struct W_PlanningMap_C_ChangeFloor final 
{
public:
	class UW_Button_C*                            Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_ChangeFloor) == 0x000008, "Wrong alignment on W_PlanningMap_C_ChangeFloor");
static_assert(sizeof(W_PlanningMap_C_ChangeFloor) == 0x000008, "Wrong size on W_PlanningMap_C_ChangeFloor");
static_assert(offsetof(W_PlanningMap_C_ChangeFloor, Button) == 0x000000, "Member 'W_PlanningMap_C_ChangeFloor::Button' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.InitPlanningMap
// 0x0008 (0x0008 - 0x0000)
struct W_PlanningMap_C_InitPlanningMap final 
{
public:
	class ABP_UI_PlanningMap_C*                   Param_PlanningMapActor;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_InitPlanningMap) == 0x000008, "Wrong alignment on W_PlanningMap_C_InitPlanningMap");
static_assert(sizeof(W_PlanningMap_C_InitPlanningMap) == 0x000008, "Wrong size on W_PlanningMap_C_InitPlanningMap");
static_assert(offsetof(W_PlanningMap_C_InitPlanningMap, Param_PlanningMapActor) == 0x000000, "Member 'W_PlanningMap_C_InitPlanningMap::Param_PlanningMapActor' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.UpdateSpawns
// 0x0010 (0x0010 - 0x0000)
struct W_PlanningMap_C_UpdateSpawns final 
{
public:
	TArray<class UBP_UI_PlanningMap_SpawnPoint_C*> Param_SpawnPointComponents;                        // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(W_PlanningMap_C_UpdateSpawns) == 0x000008, "Wrong alignment on W_PlanningMap_C_UpdateSpawns");
static_assert(sizeof(W_PlanningMap_C_UpdateSpawns) == 0x000010, "Wrong size on W_PlanningMap_C_UpdateSpawns");
static_assert(offsetof(W_PlanningMap_C_UpdateSpawns, Param_SpawnPointComponents) == 0x000000, "Member 'W_PlanningMap_C_UpdateSpawns::Param_SpawnPointComponents' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.OnDragCancelled
// 0x0078 (0x0078 - 0x0000)
struct W_PlanningMap_C_OnDragCancelled final 
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_OnDragCancelled) == 0x000008, "Wrong alignment on W_PlanningMap_C_OnDragCancelled");
static_assert(sizeof(W_PlanningMap_C_OnDragCancelled) == 0x000078, "Wrong size on W_PlanningMap_C_OnDragCancelled");
static_assert(offsetof(W_PlanningMap_C_OnDragCancelled, PointerEvent) == 0x000000, "Member 'W_PlanningMap_C_OnDragCancelled::PointerEvent' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnDragCancelled, Operation) == 0x000070, "Member 'W_PlanningMap_C_OnDragCancelled::Operation' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.UpdateMap
// 0x0004 (0x0004 - 0x0000)
struct W_PlanningMap_C_UpdateMap final 
{
public:
	int32                                         FloorIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_UpdateMap) == 0x000004, "Wrong alignment on W_PlanningMap_C_UpdateMap");
static_assert(sizeof(W_PlanningMap_C_UpdateMap) == 0x000004, "Wrong size on W_PlanningMap_C_UpdateMap");
static_assert(offsetof(W_PlanningMap_C_UpdateMap, FloorIndex) == 0x000000, "Member 'W_PlanningMap_C_UpdateMap::FloorIndex' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.OnMouseMove
// 0x03A0 (0x03A0 - 0x0000)
struct W_PlanningMap_C_OnMouseMove final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector2D                              CallFunc_PointerEvent_GetCursorDelta_ReturnValue;  // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue;  // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3811[0x7];                                     // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0170(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x0228(0x00B8)()
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue_1; // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3812[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue_2;                    // 0x02E8(0x00B8)()
};
static_assert(alignof(W_PlanningMap_C_OnMouseMove) == 0x000008, "Wrong alignment on W_PlanningMap_C_OnMouseMove");
static_assert(sizeof(W_PlanningMap_C_OnMouseMove) == 0x0003A0, "Wrong size on W_PlanningMap_C_OnMouseMove");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'W_PlanningMap_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, MouseEvent) == 0x000038, "Member 'W_PlanningMap_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, ReturnValue) == 0x0000A8, "Member 'W_PlanningMap_C_OnMouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, CallFunc_PointerEvent_GetCursorDelta_ReturnValue) == 0x000160, "Member 'W_PlanningMap_C_OnMouseMove::CallFunc_PointerEvent_GetCursorDelta_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue) == 0x000168, "Member 'W_PlanningMap_C_OnMouseMove::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, CallFunc_Handled_ReturnValue) == 0x000170, "Member 'W_PlanningMap_C_OnMouseMove::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, CallFunc_Handled_ReturnValue_1) == 0x000228, "Member 'W_PlanningMap_C_OnMouseMove::CallFunc_Handled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue_1) == 0x0002E0, "Member 'W_PlanningMap_C_OnMouseMove::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, CallFunc_Handled_ReturnValue_2) == 0x0002E8, "Member 'W_PlanningMap_C_OnMouseMove::CallFunc_Handled_ReturnValue_2' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.OnMouseButtonDown
// 0x0238 (0x0238 - 0x0000)
struct W_PlanningMap_C_OnMouseButtonDown final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0160(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0178(0x00B8)()
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PlanningMap_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on W_PlanningMap_C_OnMouseButtonDown");
static_assert(sizeof(W_PlanningMap_C_OnMouseButtonDown) == 0x000238, "Wrong size on W_PlanningMap_C_OnMouseButtonDown");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'W_PlanningMap_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'W_PlanningMap_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonDown, ReturnValue) == 0x0000A8, "Member 'W_PlanningMap_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonDown, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000160, "Member 'W_PlanningMap_C_OnMouseButtonDown::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000178, "Member 'W_PlanningMap_C_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000230, "Member 'W_PlanningMap_C_OnMouseButtonDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.OnDragDetected
// 0x00B0 (0x00B0 - 0x0000)
struct W_PlanningMap_C_OnDragDetected final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_OnDragDetected) == 0x000008, "Wrong alignment on W_PlanningMap_C_OnDragDetected");
static_assert(sizeof(W_PlanningMap_C_OnDragDetected) == 0x0000B0, "Wrong size on W_PlanningMap_C_OnDragDetected");
static_assert(offsetof(W_PlanningMap_C_OnDragDetected, MyGeometry) == 0x000000, "Member 'W_PlanningMap_C_OnDragDetected::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnDragDetected, PointerEvent) == 0x000038, "Member 'W_PlanningMap_C_OnDragDetected::PointerEvent' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnDragDetected, Operation) == 0x0000A8, "Member 'W_PlanningMap_C_OnDragDetected::Operation' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.OnMouseButtonUp
// 0x02F0 (0x02F0 - 0x0000)
struct W_PlanningMap_C_OnMouseButtonUp final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0160(0x00B8)()
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0218(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3813[0x6];                                     // 0x0232(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x0238(0x00B8)()
};
static_assert(alignof(W_PlanningMap_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on W_PlanningMap_C_OnMouseButtonUp");
static_assert(sizeof(W_PlanningMap_C_OnMouseButtonUp) == 0x0002F0, "Wrong size on W_PlanningMap_C_OnMouseButtonUp");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'W_PlanningMap_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, MouseEvent) == 0x000038, "Member 'W_PlanningMap_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, ReturnValue) == 0x0000A8, "Member 'W_PlanningMap_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue) == 0x000160, "Member 'W_PlanningMap_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000218, "Member 'W_PlanningMap_C_OnMouseButtonUp::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000230, "Member 'W_PlanningMap_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000231, "Member 'W_PlanningMap_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue_1) == 0x000238, "Member 'W_PlanningMap_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue_1' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.OpenPlanningMarker
// 0x00E0 (0x00E0 - 0x0000)
struct W_PlanningMap_C_OpenPlanningMarker final 
{
public:
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	struct FVector2D                              CallFunc_GetMousePositionOnViewport_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectScreenToWorld_WorldPosition;     // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectScreenToWorld_WorldDirection;    // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DeprojectScreenToWorld_ReturnValue;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3814[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0054(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PlanningMap_C_OpenPlanningMarker) == 0x000008, "Wrong alignment on W_PlanningMap_C_OpenPlanningMarker");
static_assert(sizeof(W_PlanningMap_C_OpenPlanningMarker) == 0x0000E0, "Wrong size on W_PlanningMap_C_OpenPlanningMarker");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, Temp_object_Variable) == 0x000000, "Member 'W_PlanningMap_C_OpenPlanningMarker::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_GetMousePositionOnViewport_ReturnValue) == 0x000010, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_GetMousePositionOnViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_DeprojectScreenToWorld_WorldPosition) == 0x000020, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_DeprojectScreenToWorld_WorldPosition' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_DeprojectScreenToWorld_WorldDirection) == 0x00002C, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_DeprojectScreenToWorld_WorldDirection' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_DeprojectScreenToWorld_ReturnValue) == 0x000038, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_DeprojectScreenToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00003C, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_Add_VectorVector_ReturnValue) == 0x000048, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_LineTraceSingle_OutHit) == 0x000054, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_LineTraceSingle_ReturnValue) == 0x0000DC, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.RefreshSpawns
// 0x0098 (0x0098 - 0x0000)
struct W_PlanningMap_C_RefreshSpawns final 
{
public:
	float                                         ZoomValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ScreenPosition;                                    // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_PlanningMap_BreachPoint_C* ClickedPoint)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UW_PlanningMap_BreachPoint_C* HoveredPoint)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3815[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PlanningMap_BreachPoint_C*           CallFunc_Create_ReturnValue;                       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3816[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_UI_PlanningMap_SpawnPoint_C*        CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PlanningMap_BreachPoint_C*           CallFunc_Map_Find_Value;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3817[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition; // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue; // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PlanningMap_C_RefreshSpawns) == 0x000008, "Wrong alignment on W_PlanningMap_C_RefreshSpawns");
static_assert(sizeof(W_PlanningMap_C_RefreshSpawns) == 0x000098, "Wrong size on W_PlanningMap_C_RefreshSpawns");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, ZoomValue) == 0x000000, "Member 'W_PlanningMap_C_RefreshSpawns::ZoomValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, ScreenPosition) == 0x000004, "Member 'W_PlanningMap_C_RefreshSpawns::ScreenPosition' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'W_PlanningMap_C_RefreshSpawns::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'W_PlanningMap_C_RefreshSpawns::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'W_PlanningMap_C_RefreshSpawns::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Create_ReturnValue) == 0x000040, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_GetPlayerController_ReturnValue) == 0x000048, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, Temp_int_Array_Index_Variable) == 0x000050, "Member 'W_PlanningMap_C_RefreshSpawns::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_AddChildToCanvas_ReturnValue) == 0x000058, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Array_Get_Item) == 0x000060, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Map_Find_Value) == 0x000068, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Map_Find_ReturnValue) == 0x000070, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Subtract_IntInt_ReturnValue) == 0x000074, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000078, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000080, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition) == 0x00008C, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue) == 0x000094, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000095, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_BooleanAND_ReturnValue) == 0x000096, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.GetSpawnPointInfo
// 0x00D0 (0x00D0 - 0x0000)
struct W_PlanningMap_C_GetSpawnPointInfo final 
{
public:
	class UW_PlanningMap_BreachPoint_C*           BreachPointButton;                                 // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSpawnPoints                           SpawnPointInfo;                                    // 0x0008(0x0090)(Parm, OutParm)
	int32                                         Param_Index;                                       // 0x0098(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3818[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UW_PlanningMap_BreachPoint_C*>   CallFunc_Map_Values_Values;                        // 0x00A0(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UBP_UI_PlanningMap_SpawnPoint_C*> CallFunc_Map_Keys_Keys;                            // 0x00B0(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3819[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UI_PlanningMap_SpawnPoint_C*        CallFunc_Array_Get_Item;                           // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_GetSpawnPointInfo) == 0x000008, "Wrong alignment on W_PlanningMap_C_GetSpawnPointInfo");
static_assert(sizeof(W_PlanningMap_C_GetSpawnPointInfo) == 0x0000D0, "Wrong size on W_PlanningMap_C_GetSpawnPointInfo");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, BreachPointButton) == 0x000000, "Member 'W_PlanningMap_C_GetSpawnPointInfo::BreachPointButton' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, SpawnPointInfo) == 0x000008, "Member 'W_PlanningMap_C_GetSpawnPointInfo::SpawnPointInfo' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, Param_Index) == 0x000098, "Member 'W_PlanningMap_C_GetSpawnPointInfo::Param_Index' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, CallFunc_Map_Values_Values) == 0x0000A0, "Member 'W_PlanningMap_C_GetSpawnPointInfo::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, CallFunc_Map_Keys_Keys) == 0x0000B0, "Member 'W_PlanningMap_C_GetSpawnPointInfo::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, CallFunc_Array_Find_ReturnValue) == 0x0000C0, "Member 'W_PlanningMap_C_GetSpawnPointInfo::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'W_PlanningMap_C_GetSpawnPointInfo::CallFunc_Array_Get_Item' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.GetDetailPanePosition
// 0x005C (0x005C - 0x0000)
struct W_PlanningMap_C_GetDetailPanePosition final 
{
public:
	struct FVector2D                              PointScreenPosition;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381A[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381B[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_GetDetailPanePosition) == 0x000004, "Wrong alignment on W_PlanningMap_C_GetDetailPanePosition");
static_assert(sizeof(W_PlanningMap_C_GetDetailPanePosition) == 0x00005C, "Wrong size on W_PlanningMap_C_GetDetailPanePosition");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, PointScreenPosition) == 0x000000, "Member 'W_PlanningMap_C_GetDetailPanePosition::PointScreenPosition' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, ReturnValue) == 0x000008, "Member 'W_PlanningMap_C_GetDetailPanePosition::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_GetViewportSize_ReturnValue) == 0x000010, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_BreakVector2D_X) == 0x000018, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_BreakVector2D_Y) == 0x00001C, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000024, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_BreakVector2D_X_1) == 0x00002C, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_BreakVector2D_Y_1) == 0x000030, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000034, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000035, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000040, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000044, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_SelectFloat_ReturnValue) == 0x000048, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_SelectFloat_ReturnValue_1) == 0x00004C, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_SelectFloat_ReturnValue_2) == 0x000050, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_MakeVector2D_ReturnValue) == 0x000054, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

}

