#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_SubtitlesOverlay

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"


namespace SDK::Params
{

// Function W_SubtitlesOverlay.W_SubtitlesOverlay_C.ExecuteUbergraph_W_SubtitlesOverlay
// 0x001C (0x001C - 0x0000)
struct W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESubtitlesSize                                K2Node_Event_Size;                                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESubtitlesSize                                Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4293[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay) == 0x000004, "Wrong alignment on W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay");
static_assert(sizeof(W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay) == 0x00001C, "Wrong size on W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay");
static_assert(offsetof(W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay, EntryPoint) == 0x000000, "Member 'W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay, K2Node_Event_Size) == 0x000004, "Member 'W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay::K2Node_Event_Size' has a wrong offset!");
static_assert(offsetof(W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay, Temp_byte_Variable) == 0x000005, "Member 'W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay, Temp_float_Variable) == 0x000008, "Member 'W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay, Temp_float_Variable_1) == 0x00000C, "Member 'W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay, Temp_float_Variable_2) == 0x000010, "Member 'W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay, Temp_float_Variable_3) == 0x000014, "Member 'W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay, K2Node_Select_Default) == 0x000018, "Member 'W_SubtitlesOverlay_C_ExecuteUbergraph_W_SubtitlesOverlay::K2Node_Select_Default' has a wrong offset!");

// Function W_SubtitlesOverlay.W_SubtitlesOverlay_C.SetSubtitlesSize
// 0x0001 (0x0001 - 0x0000)
struct W_SubtitlesOverlay_C_SetSubtitlesSize final 
{
public:
	ESubtitlesSize                                Size;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SubtitlesOverlay_C_SetSubtitlesSize) == 0x000001, "Wrong alignment on W_SubtitlesOverlay_C_SetSubtitlesSize");
static_assert(sizeof(W_SubtitlesOverlay_C_SetSubtitlesSize) == 0x000001, "Wrong size on W_SubtitlesOverlay_C_SetSubtitlesSize");
static_assert(offsetof(W_SubtitlesOverlay_C_SetSubtitlesSize, Size) == 0x000000, "Member 'W_SubtitlesOverlay_C_SetSubtitlesSize::Size' has a wrong offset!");

}

