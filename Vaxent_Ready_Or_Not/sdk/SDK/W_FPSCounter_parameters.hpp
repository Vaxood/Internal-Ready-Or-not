#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_FPSCounter

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function W_FPSCounter.W_FPSCounter_C.ExecuteUbergraph_W_FPSCounter
// 0x01E8 (0x01E8 - 0x0000)
struct W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetShowFPS_bShowFPS;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetShowFPS_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41E5[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41E6[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0018(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0068(0x0018)()
	bool                                          CallFunc_GetReflexLatency_bGameToRenderLatencyEnabled; // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41E7[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetReflexLatency_GametoRenderLatency;     // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetReflexLatency_bGameLatencyEnabled;     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41E8[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetReflexLatency_GameLatencyInMS;         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetReflexLatency_bRenderLatencyEnabled;   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41E9[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetReflexLatency_RenderLatencyInMS;       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0098(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x00D8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x00E8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0100(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0140(0x0010)(ReferenceParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0150(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x0190(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_3;                          // 0x01A8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_3;                     // 0x01B8(0x0018)()
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x01D0(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x01E0(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter) == 0x000008, "Wrong alignment on W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter");
static_assert(sizeof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter) == 0x0001E8, "Wrong size on W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, EntryPoint) == 0x000000, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, K2Node_Event_IsDesignTime) == 0x000004, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_GetShowFPS_bShowFPS) == 0x000005, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_GetShowFPS_bShowFPS' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_GetShowFPS_ReturnValue) == 0x000006, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_GetShowFPS_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000008, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_FFloor_ReturnValue) == 0x000010, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, K2Node_MakeStruct_FormatArgumentData) == 0x000018, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, K2Node_MakeArray_Array) == 0x000058, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_Format_ReturnValue) == 0x000068, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_GetReflexLatency_bGameToRenderLatencyEnabled) == 0x000080, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_GetReflexLatency_bGameToRenderLatencyEnabled' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_GetReflexLatency_GametoRenderLatency) == 0x000084, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_GetReflexLatency_GametoRenderLatency' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_GetReflexLatency_bGameLatencyEnabled) == 0x000088, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_GetReflexLatency_bGameLatencyEnabled' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_GetReflexLatency_GameLatencyInMS) == 0x00008C, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_GetReflexLatency_GameLatencyInMS' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_GetReflexLatency_bRenderLatencyEnabled) == 0x000090, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_GetReflexLatency_bRenderLatencyEnabled' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_GetReflexLatency_RenderLatencyInMS) == 0x000094, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_GetReflexLatency_RenderLatencyInMS' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, K2Node_MakeStruct_FormatArgumentData_1) == 0x000098, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, K2Node_MakeArray_Array_1) == 0x0000D8, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_Format_ReturnValue_1) == 0x0000E8, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, K2Node_MakeStruct_FormatArgumentData_2) == 0x000100, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, K2Node_MakeArray_Array_2) == 0x000140, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, K2Node_MakeStruct_FormatArgumentData_3) == 0x000150, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_Format_ReturnValue_2) == 0x000190, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, K2Node_MakeArray_Array_3) == 0x0001A8, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_Format_ReturnValue_3) == 0x0001B8, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_Format_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, K2Node_CreateDelegate_OutputDelegate) == 0x0001D0, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0001E0, "Member 'W_FPSCounter_C_ExecuteUbergraph_W_FPSCounter::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function W_FPSCounter.W_FPSCounter_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_FPSCounter_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_FPSCounter_C_PreConstruct) == 0x000001, "Wrong alignment on W_FPSCounter_C_PreConstruct");
static_assert(sizeof(W_FPSCounter_C_PreConstruct) == 0x000001, "Wrong size on W_FPSCounter_C_PreConstruct");
static_assert(offsetof(W_FPSCounter_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_FPSCounter_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

