#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_PlanningMap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CommonInput_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_PreMission_PlanningMap.W_PreMission_PlanningMap_C
// 0x0308 (0x0638 - 0x0330)
class UW_PreMission_PlanningMap_C final  : public UMissionPlanWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0330(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                btn_EntryPointClickAway;                           // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PremissionTablet_Button_C*           btn_GlobalEntryPoints;                             // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PremissionTablet_Button_C*           btn_Legend;                                        // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           EntryPointsBox;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                GlobalEntryPoints;                                 // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icn_GPS;                                           // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Lbl_GPS;                                           // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        LevelSwitcher;                                     // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           MainCanvas;                                        // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              MapBaseScale;                                      // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           PreviewCanvas;                                     // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMissionPlanLinesWidget*                PreviewLineRenderer;                               // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Size_EntryPointList;                               // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              SwitcherScaleBox;                                  // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_NoMap;                                         // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_Level_C*      W_PreMission_PlanningMap_Level;                    // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_Legend_C*          W_PreMission_Tablet_Legend;                        // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMap<int32, class UW_PreMission_Tablet_MapMarker_C*> MarkerMap;                                         // 0x03C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         ZoomIncrements;                                    // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinZoom;                                           // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxZoom;                                           // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentZoom;                                       // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LastNormalizedLocation;                            // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Radial_MapMarking_C*                 Radial;                                            // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RadialCoords;                                      // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RecreateRadial;                                    // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Panning;                                           // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CreatingLine;                                      // 0x043A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RadialOpen;                                        // 0x043B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33DB[0x4];                                     // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_PlanningMap_Line_C*       PreviewLine_0;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningLine                          NewLine;                                           // 0x0448(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UWidget*>                        TempLine;                                          // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<int32, class UCanvasPanel*>              LineMap;                                           // 0x0480(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UW_PreMission_Tablet_MapMarker_C*       RotatingMarker;                                    // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentFloor;                                      // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33DC[0x4];                                     // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FLevelFloorData>           Levels;                                            // 0x04E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnMapLevelChanged;                                 // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<int32, class UW_PreMission_PlanningMap_Level_C*> LevelCanvases;                                     // 0x0540(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UCanvasPanel*                           CurrentMarkerCanvas;                               // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CursorZoomWeight;                                  // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33DD[0x4];                                     // 0x059C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentMission;                                    // 0x05A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<int32, struct FLevelFloor>               OrderedFloors;                                     // 0x05B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          LegendOpen;                                        // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EntryPointsOpen;                                   // 0x0601(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33DE[0x6];                                     // 0x0602(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_EntryPoint_C*      CurrentActiveEntryPointButton;                     // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeadPlayer;                                      // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33DF[0x7];                                     // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_EntryPoint_Selection_C* EntryPointPopout;                                  // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PanMouseStart;                                     // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PanCanvasStart;                                    // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsingGamepad;                                    // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnMapLevelChanged__DelegateSignature(const class FString& MissionURL, const struct FLevelFloor& FloorData);
	void ExecuteUbergraph_W_PreMission_PlanningMap(int32 EntryPoint, bool Temp_bool_Variable, int32 K2Node_Event_ID_1, struct FPlanningLine& K2Node_Event_Line, int32 K2Node_Event_ID, struct FGeometry& K2Node_Event_InGeometry, struct FPointerEvent& K2Node_Event_InMouseEvent, const struct FGeometry& K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool K2Node_Event_IsDesignTime, class FName K2Node_Event_PageName, bool K2Node_Event_IsGamepad, int32 K2Node_CustomEvent_MarkerID, class UW_PreMission_Tablet_MapMarker_C* K2Node_CustomEvent_Marker, int32 K2Node_CustomEvent_LineID, class UCanvasPanel* K2Node_CustomEvent_LineCanvas, float K2Node_Event_Delay_1, class UW_PreMission_Tablet_EntryPoint_C* K2Node_CustomEvent_Clicked, int32 K2Node_Event_ID_2, class UW_PreMission_Tablet_MapMarker_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, class UW_PremissionTablet_Button_C* K2Node_ComponentBoundEvent_TriggeringButton_1, bool CallFunc_Toggle_IsOpen, class UW_PremissionTablet_Button_C* K2Node_ComponentBoundEvent_TriggeringButton, int32 K2Node_Event_ID_3, struct FPlanningMarker& K2Node_Event_Marker, bool CallFunc_Not_PreBool_ReturnValue, class UCommonInputSubsystem* CallFunc_GetLocalPlayerSubsystem_ReturnValue, const class FString& K2Node_Event_MissionURL, const struct FLevelDataLookupTable& K2Node_Event_LevelData_1, ECommonInputType CallFunc_GetCurrentInputType_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_NotEqual_ObjectObject_ReturnValue, class APlayerController* CallFunc_GetOwningPlayer_ReturnValue, const struct FEntryPoint& K2Node_Event_NewEntryPoint, bool CallFunc_HasAuthority_ReturnValue, TDelegate<void(class UW_PreMission_Tablet_EntryPoint_C* Clicked)> K2Node_CreateDelegate_OutputDelegate, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, ESlateVisibility K2Node_Select_Default, TScriptInterface<class IReadyOrNotUI_C> K2Node_DynamicCast_AsReady_or_Not_UI, bool K2Node_DynamicCast_bSuccess, TScriptInterface<class IReadyOrNotUI_C> CallFunc_Hide_self_CastInput, TScriptInterface<class IReadyOrNotUI_C> CallFunc_Reveal_self_CastInput, const class FString& K2Node_Event_URL, struct FLevelDataLookupTable& K2Node_Event_LevelData, class UW_PreMission_Tablet_EntryPoint_Selection_C* K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Entry_Point_Selection, bool K2Node_DynamicCast_bSuccess_1, float K2Node_Event_Delay, bool K2Node_Event_Collapse, const struct FFocusEvent& K2Node_Event_InFocusEvent, class UW_PreMission_PlanningMap_Level_C* CallFunc_Map_Find_Value_1, bool CallFunc_Map_Find_ReturnValue_1, class UW_PreMission_PlanningMap_Level_C* CallFunc_Map_Find_Value_2, bool CallFunc_Map_Find_ReturnValue_2, float K2Node_Event_CurrentZoom, TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate_1, ECommonInputType K2Node_CustomEvent_bNewInputType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void OnInputChange(ECommonInputType bNewInputType);
	void ScaleLineWeightByZoom(float Param_CurrentZoom);
	void OnFocusLost(const struct FFocusEvent& InFocusEvent);
	void Hide(float Delay, bool Collapse);
	void OnMissionChanged(const class FString& URL, struct FLevelDataLookupTable& LevelData);
	void BndEvt__W_PreMission_PlanningMap_btn_GlobalEntryPoints_K2Node_ComponentBoundEvent_3_OnHovered__DelegateSignature();
	void BndEvt__W_PreMission_PlanningMap_btn_EntryPointClickAway_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();
	void OnEntryPointChanged(const struct FEntryPoint& NewEntryPoint);
	void MissionChanged(const class FString& MissionURL, const struct FLevelDataLookupTable& LevelData);
	void ToggleEntrySelection();
	void ToggleLegend();
	void BndEvt__W_PreMission_PlanningMap_btn_GlobalEntryPoints_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature(class UW_PremissionTablet_Button_C* TriggeringButton);
	void BndEvt__W_PreMission_PlanningMap_btn_Legend_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature(class UW_PremissionTablet_Button_C* TriggeringButton);
	void OnEntryPointSelected(class UW_PreMission_Tablet_EntryPoint_C* Clicked);
	void Reveal(float Delay);
	void LineDrawn(int32 LineID, class UCanvasPanel* LineCanvas);
	void MapMarkerDrawn(int32 MarkerID, class UW_PreMission_Tablet_MapMarker_C* Marker);
	void SetInputMode(bool IsGamepad);
	void ChangePage(class FName PageName);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnLeftClickUp(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent);
	void OnLineRemoved(int32 ID);
	void OnLineAdded(int32 ID, struct FPlanningLine& Line);
	void OnMarkerRemoved(int32 ID);
	void OnMarkerAdded(int32 ID, struct FPlanningMarker& Marker);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent, const struct FEventReply& CallFunc_Handled_ReturnValue, const struct FKey& CallFunc_GetKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue_1, bool CallFunc_EqualEqual_KeyKey_ReturnValue_2, const struct FEventReply& CallFunc_Unhandled_ReturnValue, const struct FEventReply& CallFunc_Handled_ReturnValue_1);
	void ZoomIn(const struct FGeometry& Geometry, const struct FPointerEvent& PointerEvent, bool Param_ZoomOnCursor, float PreviousZoom, const struct FVector2D& CallFunc_GetViewportSize_ReturnValue, const struct FVector2D& CallFunc_GetMousePositionOnViewport_ReturnValue, const struct FVector2D& CallFunc_Divide_Vector2DVector2D_ReturnValue, const struct FVector2D& CallFunc_Subtract_Vector2DFloat_ReturnValue, float CallFunc_NormalizeToRange_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DVector2D_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DFloat_ReturnValue, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, const struct FVector2D& CallFunc_GetPosition_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DFloat_ReturnValue_1, const struct FVector2D& CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue);
	void ZoomOut(const struct FGeometry& Geometry, const struct FPointerEvent& PointerEvent, bool Param_ZoomOnCursor, float PreviousZoom, float CallFunc_NormalizeToRange_ReturnValue, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, const struct FVector2D& CallFunc_GetPosition_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue);
	void OpenRadial(const struct FVector2D& CursorPosition, bool CallFunc_IsValid_ReturnValue, class UW_Radial_MapMarking_C* CallFunc_Create_ReturnValue, struct FGeometry& CallFunc_GetCachedGeometry_ReturnValue, const struct FVector2D& CallFunc_GetLocalSize_ReturnValue, struct FGeometry& CallFunc_GetCachedGeometry_ReturnValue_1, const struct FVector2D& CallFunc_AbsoluteToLocal_ReturnValue, const struct FVector2D& CallFunc_GetLocalSize_ReturnValue_1, const struct FVector2D& CallFunc_Divide_Vector2DVector2D_ReturnValue, const struct FVector2D& CallFunc_AbsoluteToLocal_ReturnValue_1, const struct FVector2D& CallFunc_Divide_Vector2DVector2D_ReturnValue_1, class APlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetMousePosition_LocationX, float CallFunc_GetMousePosition_LocationY, bool CallFunc_GetMousePosition_ReturnValue, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue, TDelegate<void(class FName Category, class FName MarkerName)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_1, const struct FAnchors& K2Node_MakeStruct_Anchors, const struct FAnchorData& K2Node_MakeStruct_AnchorData, class UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);
	void RadialCollapsed(bool CallFunc_IsValid_ReturnValue);
	void CloseRadial(bool CallFunc_IsValid_ReturnValue);
	void RadialMarkerSelected(class FName CategoryName, class FName MarkerName, const struct FPlanningMarker& K2Node_MakeStruct_PlanningMarker);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FKey& CallFunc_PointerEvent_GetEffectingButton_ReturnValue, const struct FVector2D& CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, const struct FEventReply& CallFunc_Unhandled_ReturnValue, const struct FVector2D& CallFunc_GetPosition_ReturnValue);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FEventReply& CallFunc_Handled_ReturnValue, const struct FVector2D& CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, const struct FKey& CallFunc_PointerEvent_GetEffectingButton_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue_1, struct FGeometry& CallFunc_GetCachedGeometry_ReturnValue, const struct FVector2D& CallFunc_GetNormalizedClick_ReturnValue, const struct FEventReply& CallFunc_Handled_ReturnValue_1, const struct FEventReply& CallFunc_Handled_ReturnValue_2, const struct FEventReply& CallFunc_ReleaseMouseCapture_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, const struct FEventReply& CallFunc_Handled_ReturnValue_3, const struct FEventReply& CallFunc_Unhandled_ReturnValue);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FEventReply& CallFunc_Unhandled_ReturnValue, float CallFunc_PointerEvent_GetWheelDelta_ReturnValue, const struct FEventReply& CallFunc_Handled_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FEventReply& CallFunc_Handled_ReturnValue, bool CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue, const struct FVector2D& CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, bool CallFunc_IsValid_ReturnValue, struct FGeometry& CallFunc_GetCachedGeometry_ReturnValue, const struct FEventReply& CallFunc_Unhandled_ReturnValue, const struct FVector2D& CallFunc_GetNormalizedClick_ReturnValue, const struct FVector2D& CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_1, const struct FVector2D& CallFunc_Subtract_Vector2DVector2D_ReturnValue, const struct FVector2D& CallFunc_Add_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Distance2D_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, const struct FVector2D& CallFunc_GetSize_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DFloat_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DFloat_ReturnValue_1, float CallFunc_BreakVector2D_X_1, float CallFunc_BreakVector2D_Y_1, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue_1, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue_1, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue);
	void AddPreviewLinePoint(const struct FVector2D& Coordinates, const TArray<struct FVector2D>& LinePoints, bool FirstPoint, class UWidget* NodeWidget, const struct FAnchors& K2Node_MakeStruct_Anchors, float CallFunc_SelectFloat_ReturnValue, const struct FAnchorData& K2Node_MakeStruct_AnchorData, class AReadyOrNotPlayerController* CallFunc_GetReadyOrNotPlayerController_ReturnValue, class AReadyOrNotPlayerState* K2Node_DynamicCast_AsReady_or_Not_Player_State, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_Add_ReturnValue, const struct FAnchors& K2Node_MakeStruct_Anchors_1, class UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, const struct FAnchorData& K2Node_MakeStruct_AnchorData_1, class AReadyOrNotPlayerController* CallFunc_GetReadyOrNotPlayerController_ReturnValue_1, int32 CallFunc_Array_Add_ReturnValue_1, class UW_OfficerMarker_C* CallFunc_Create_ReturnValue, class UW_PreMission_Tablet_PlayerNode_C* CallFunc_Create_ReturnValue_1, class UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue_1, class UW_PreMission_PlanningMap_Line_C* CallFunc_Create_ReturnValue_2, int32 CallFunc_Array_Add_ReturnValue_2);
	void DrawLine(int32 ID, const struct FPlanningLine& LineData, class AReadyOrNotPlayerState* LineOwner, class UCanvasPanel* Canvas, class UW_PreMission_PlanningMap_Line_C* Line, bool LastNode, float EndOffset, float StartOffset, const struct FVector2D& PreviousPoint, const struct FVector2D& Coordinates, class UWidget* NodeWidget, bool FirstNode, class UW_PreMission_PlanningMap_Line_C* CallFunc_Create_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_LastIndex_ReturnValue, class AReadyOrNotPlayerState* CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue, class UW_OfficerMarker_C* CallFunc_Create_ReturnValue_1, class UW_PreMission_Tablet_PlayerNode_C* CallFunc_Create_ReturnValue_2, int32 Temp_int_Array_Index_Variable, TDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> K2Node_CreateDelegate_OutputDelegate, const struct FVector2D& CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue_1, const struct FLinearColor& CallFunc_GetPlayerTeamColor_LinearColor, const struct FSlateColor& CallFunc_GetPlayerTeamColor_SlateColor, TDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> K2Node_CreateDelegate_OutputDelegate_1, class UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, const struct FAnchors& K2Node_MakeStruct_Anchors, int32 Temp_int_Loop_Counter_Variable, const struct FAnchorData& K2Node_MakeStruct_AnchorData, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetLineAngle_Angle, float CallFunc_GetLineLength_Length, const struct FAnchors& K2Node_MakeStruct_Anchors_1, const struct FAnchorData& K2Node_MakeStruct_AnchorData_1, class UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue_1, class UCanvasPanel* CallFunc_SpawnObject_ReturnValue, const struct FAnchors& K2Node_MakeStruct_Anchors_2, class UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue_2, const struct FAnchorData& K2Node_MakeStruct_AnchorData_2);
	void UpdatePreviewLine(const struct FVector2D& MousePos, const TArray<struct FVector2D>& PointsCopy, const struct FVector2D& LastPoint, int32 CallFunc_Array_Add_ReturnValue, const struct FPlanningLine& K2Node_MakeStruct_PlanningLine);
	void GetLineLength(const struct FVector2D& PointA, const struct FVector2D& PointB, float* Length, const struct FVector2D& CallFunc_GetWidgetSize_Absolute_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DVector2D_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DVector2D_ReturnValue_1, float CallFunc_Distance2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);
	void GetLineAngle(const struct FVector2D& PointA, const struct FVector2D& PointB, float* Angle, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X_1, float CallFunc_BreakVector2D_Y_1, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue_1, const struct FRotator& CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw);
	bool GetVectorOverThreshold(const struct FVector2D& Delta, float Threshold, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Abs_ReturnValue, float CallFunc_Abs_ReturnValue_1, float CallFunc_FMax_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);
	void EraseLine(int32 ID, bool CallFunc_Map_Remove_ReturnValue, class UCanvasPanel* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
	void LineStartNodeSelected(class UW_OfficerMarker_C* OfficerMarker);
	void DrawMarker(int32& MarkerID, struct FPlanningMarker& MarkerData, class UW_PreMission_Tablet_MapMarker_C* Marker);
	void StartMarkerRotation(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker);
	void EndMarkerRotation(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);
	void RotateMarker(class UW_PreMission_Tablet_MapMarker_C* Param_RotatingMarker, const struct FVector2D& MousePos, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X_1, float CallFunc_BreakVector2D_Y_1, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_1, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_2, const struct FVector& CallFunc_MakeVector_ReturnValue_1, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_3, const struct FRotator& CallFunc_FindLookAtRotation_ReturnValue, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, class FText CallFunc_Format_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, const class FString& CallFunc_Conv_TextToString_ReturnValue);
	void ChangeFloorByIndex(int32 Param_Index, const struct FLevelFloorData& FloorData, TArray<int32>& CallFunc_Map_Keys_Keys, TArray<int32>& CallFunc_Map_Keys_Keys_1, int32 CallFunc_Array_Get_Item, class UW_PreMission_PlanningMap_Level_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, class UTexture2D* CallFunc_GetLazyLoadedImage_ReturnValue, int32 CallFunc_Blueprint_GetSizeY_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);
	void CreateMapLevelCanvas(int32 Param_Index, const struct FLevelFloor& LevelData, class UW_PreMission_PlanningMap_Level_C* LevelCanvas, TDelegate<void(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, int32 FloorLevel, float Rotation)> K2Node_CreateDelegate_OutputDelegate, class UW_PreMission_PlanningMap_Level_C* CallFunc_Create_ReturnValue, TDelegate<void(int32 LineID, class UCanvasPanel* LineCanvas)> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void(int32 MarkerID, class UW_PreMission_Tablet_MapMarker_C* Marker)> K2Node_CreateDelegate_OutputDelegate_2, class UPanelSlot* CallFunc_AddChild_ReturnValue, class UWidgetSwitcherSlot* K2Node_DynamicCast_AsWidget_Switcher_Slot, bool K2Node_DynamicCast_bSuccess);
	void LineStartNodeRightClicked(class UW_OfficerMarker_C* OfficerMarker, class APlayerController* CallFunc_GetPlayerController_ReturnValue, class APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);
	void GetCurrentLevelMap(class UW_PreMission_PlanningMap_Level_C** CurrentLevelCanvas, class UW_PreMission_PlanningMap_Level_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
	void RemovePreviewLine(int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, class UWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
	void MarkerRotated(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, int32 Floor, float Rotation, const struct FPlanningMarker& K2Node_MakeStruct_PlanningMarker);
	void MissionSetup(const class FString& URL, const struct FLevelDataLookupTable& LevelData, bool CallFunc_Array_IsValidIndex_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_StringNotEmpty_ReturnValue, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, const struct FLevelFloor& CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue);
	void ZoomOnCursor(const struct FGeometry& Geometry, const struct FPointerEvent& PointerEvent, float PreviousZoom, float NewZoom, float CallFunc_Divide_FloatFloat_ReturnValue, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, const struct FVector2D& CallFunc_GetPosition_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, const struct FVector2D& CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, const struct FVector2D& CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1, const struct FVector2D& CallFunc_AbsoluteToLocal_ReturnValue, const struct FVector2D& CallFunc_GetLocalSize_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DFloat_ReturnValue, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue_1, const struct FVector2D& CallFunc_Subtract_Vector2DVector2D_ReturnValue, const struct FVector2D& CallFunc_GetPosition_ReturnValue_1, const struct FVector2D& CallFunc_Subtract_Vector2DVector2D_ReturnValue_1, const struct FVector2D& CallFunc_Multiply_Vector2DFloat_ReturnValue_1, const struct FVector2D& CallFunc_Subtract_Vector2DVector2D_ReturnValue_2);
	void ChangeFloorByNumber(int32 FloorNumber, const struct FLevelFloorData& FloorData, class UW_PreMission_PlanningMap_Level_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
	void UpdateEntryPointSelection(const struct FEntryPoint& EntryPointData, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, TArray<class UWidget*>& CallFunc_GetAllChildren_ReturnValue, class UWidget* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue_1, class UW_PreMission_Tablet_EntryPoint_C* K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Entry_Point, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
	void CreateEntryPoints(struct FLevelDataLookupTable& LevelDataLookupTable, TDelegate<void(class UW_PreMission_Tablet_EntryPoint_C* Clicked)>& OnEntryPointSelected, class FName PointTag, class FText PointName, const TArray<struct FEntryPoint>& EntryPoints, class UW_PreMission_Tablet_EntryPoint_C* NewEntryPoint, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Array_Index_Variable_1, const struct FLevelFloor& CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue_1, int32 CallFunc_Array_Length_ReturnValue_2, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, class UW_PreMission_Tablet_EntryPoint_C* CallFunc_Create_ReturnValue, const class FString& CallFunc_GetSelectedMode_OutMode, bool CallFunc_GetSelectedMode_ReturnValue, ECOOPMode CallFunc_GetCoopModeFromModeName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, int32 Temp_int_Loop_Counter_Variable_1, const struct FEntryPoint& CallFunc_Array_Get_Item_1, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue_1, int32 CallFunc_Array_Length_ReturnValue_3, bool CallFunc_Less_IntInt_ReturnValue_1, class UVerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, const struct FMargin& K2Node_MakeStruct_Margin);
	void IsValidEntryPoint(TArray<ECOOPMode>& ExcludedGameModes, bool* IsValid, const class FString& CallFunc_GetSelectedMode_OutMode, bool CallFunc_GetSelectedMode_ReturnValue, ECOOPMode CallFunc_GetCoopModeFromModeName_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);
	struct FEventReply HandleEntryPointsBorderClicked(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FEventReply& CallFunc_Handled_ReturnValue);
	void HandleGamepad(const struct FEventReply& CallFunc_SetLinePart_ReturnValue, const struct FVector2D& CallFunc_GetGamepadMidPoint_Coordinates, const struct FVector2D& CallFunc_GetGamepadMidPoint_Coordinates_1, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, const struct FVector2D& CallFunc_GetWidgetSize_Absolute_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DFloat_ReturnValue, const struct FVector2D& CallFunc_GetWidgetSize_Absolute_ReturnValue_1, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DFloat_ReturnValue_1, const struct FVector2D& CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X_1, float CallFunc_BreakVector2D_Y_1, float CallFunc_Multiply_FloatFloat_ReturnValue_1, float CallFunc_Multiply_FloatFloat_ReturnValue_2, class AReadyOrNotPlayerController* CallFunc_GetReadyOrNotPlayerController_ReturnValue, bool CallFunc_WasInputKeyJustPressed_ReturnValue, bool CallFunc_WasInputKeyJustPressed_ReturnValue_1, bool CallFunc_WasInputKeyJustPressed_ReturnValue_2, float CallFunc_GetInputAnalogStickState_StickX, float CallFunc_GetInputAnalogStickState_StickY, float CallFunc_Multiply_FloatFloat_ReturnValue_3, float CallFunc_Multiply_FloatFloat_ReturnValue_4, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue_5, float CallFunc_FClamp_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue_1, bool CallFunc_WasInputKeyJustPressed_ReturnValue_3, float CallFunc_FClamp_ReturnValue_1, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue, bool CallFunc_WasInputKeyJustPressed_ReturnValue_4, bool CallFunc_WasInputKeyJustPressed_ReturnValue_5);
	void GetGamepadMidPoint(struct FVector2D* Coordinates, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, const struct FVector2D& CallFunc_GetWidgetSize_Absolute_ReturnValue, const struct FVector2D& CallFunc_GetPosition_ReturnValue, const struct FVector2D& CallFunc_Subtract_Vector2DFloat_ReturnValue, const struct FVector2D& CallFunc_Divide_Vector2DVector2D_ReturnValue, const struct FVector2D& CallFunc_Subtract_Vector2DVector2D_ReturnValue);
	struct FEventReply SetLinePart(const struct FEventReply& CallFunc_Handled_ReturnValue, const struct FEventReply& CallFunc_ReleaseMouseCapture_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
	void BackPage(bool* Handled);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_PreMission_PlanningMap_C">();
	}
	static class UW_PreMission_PlanningMap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_PreMission_PlanningMap_C>();
	}
};
static_assert(alignof(UW_PreMission_PlanningMap_C) == 0x000008, "Wrong alignment on UW_PreMission_PlanningMap_C");
static_assert(sizeof(UW_PreMission_PlanningMap_C) == 0x000638, "Wrong size on UW_PreMission_PlanningMap_C");
static_assert(offsetof(UW_PreMission_PlanningMap_C, UberGraphFrame) == 0x000330, "Member 'UW_PreMission_PlanningMap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, btn_EntryPointClickAway) == 0x000338, "Member 'UW_PreMission_PlanningMap_C::btn_EntryPointClickAway' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, btn_GlobalEntryPoints) == 0x000340, "Member 'UW_PreMission_PlanningMap_C::btn_GlobalEntryPoints' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, btn_Legend) == 0x000348, "Member 'UW_PreMission_PlanningMap_C::btn_Legend' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, EntryPointsBox) == 0x000350, "Member 'UW_PreMission_PlanningMap_C::EntryPointsBox' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, GlobalEntryPoints) == 0x000358, "Member 'UW_PreMission_PlanningMap_C::GlobalEntryPoints' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, Icn_GPS) == 0x000360, "Member 'UW_PreMission_PlanningMap_C::Icn_GPS' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, Lbl_GPS) == 0x000368, "Member 'UW_PreMission_PlanningMap_C::Lbl_GPS' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, LevelSwitcher) == 0x000370, "Member 'UW_PreMission_PlanningMap_C::LevelSwitcher' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, MainCanvas) == 0x000378, "Member 'UW_PreMission_PlanningMap_C::MainCanvas' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, MapBaseScale) == 0x000380, "Member 'UW_PreMission_PlanningMap_C::MapBaseScale' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, PreviewCanvas) == 0x000388, "Member 'UW_PreMission_PlanningMap_C::PreviewCanvas' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, PreviewLineRenderer) == 0x000390, "Member 'UW_PreMission_PlanningMap_C::PreviewLineRenderer' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, Size_EntryPointList) == 0x000398, "Member 'UW_PreMission_PlanningMap_C::Size_EntryPointList' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, SwitcherScaleBox) == 0x0003A0, "Member 'UW_PreMission_PlanningMap_C::SwitcherScaleBox' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, Txt_NoMap) == 0x0003A8, "Member 'UW_PreMission_PlanningMap_C::Txt_NoMap' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, W_PreMission_PlanningMap_Level) == 0x0003B0, "Member 'UW_PreMission_PlanningMap_C::W_PreMission_PlanningMap_Level' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, W_PreMission_Tablet_Legend) == 0x0003B8, "Member 'UW_PreMission_PlanningMap_C::W_PreMission_Tablet_Legend' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, MarkerMap) == 0x0003C0, "Member 'UW_PreMission_PlanningMap_C::MarkerMap' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, ZoomIncrements) == 0x000410, "Member 'UW_PreMission_PlanningMap_C::ZoomIncrements' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, MinZoom) == 0x000414, "Member 'UW_PreMission_PlanningMap_C::MinZoom' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, MaxZoom) == 0x000418, "Member 'UW_PreMission_PlanningMap_C::MaxZoom' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, CurrentZoom) == 0x00041C, "Member 'UW_PreMission_PlanningMap_C::CurrentZoom' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, LastNormalizedLocation) == 0x000420, "Member 'UW_PreMission_PlanningMap_C::LastNormalizedLocation' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, Radial) == 0x000428, "Member 'UW_PreMission_PlanningMap_C::Radial' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, RadialCoords) == 0x000430, "Member 'UW_PreMission_PlanningMap_C::RadialCoords' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, RecreateRadial) == 0x000438, "Member 'UW_PreMission_PlanningMap_C::RecreateRadial' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, Panning) == 0x000439, "Member 'UW_PreMission_PlanningMap_C::Panning' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, CreatingLine) == 0x00043A, "Member 'UW_PreMission_PlanningMap_C::CreatingLine' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, RadialOpen) == 0x00043B, "Member 'UW_PreMission_PlanningMap_C::RadialOpen' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, PreviewLine_0) == 0x000440, "Member 'UW_PreMission_PlanningMap_C::PreviewLine_0' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, NewLine) == 0x000448, "Member 'UW_PreMission_PlanningMap_C::NewLine' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, TempLine) == 0x000470, "Member 'UW_PreMission_PlanningMap_C::TempLine' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, LineMap) == 0x000480, "Member 'UW_PreMission_PlanningMap_C::LineMap' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, RotatingMarker) == 0x0004D0, "Member 'UW_PreMission_PlanningMap_C::RotatingMarker' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, CurrentFloor) == 0x0004D8, "Member 'UW_PreMission_PlanningMap_C::CurrentFloor' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, Levels) == 0x0004E0, "Member 'UW_PreMission_PlanningMap_C::Levels' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, OnMapLevelChanged) == 0x000530, "Member 'UW_PreMission_PlanningMap_C::OnMapLevelChanged' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, LevelCanvases) == 0x000540, "Member 'UW_PreMission_PlanningMap_C::LevelCanvases' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, CurrentMarkerCanvas) == 0x000590, "Member 'UW_PreMission_PlanningMap_C::CurrentMarkerCanvas' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, CursorZoomWeight) == 0x000598, "Member 'UW_PreMission_PlanningMap_C::CursorZoomWeight' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, CurrentMission) == 0x0005A0, "Member 'UW_PreMission_PlanningMap_C::CurrentMission' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, OrderedFloors) == 0x0005B0, "Member 'UW_PreMission_PlanningMap_C::OrderedFloors' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, LegendOpen) == 0x000600, "Member 'UW_PreMission_PlanningMap_C::LegendOpen' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, EntryPointsOpen) == 0x000601, "Member 'UW_PreMission_PlanningMap_C::EntryPointsOpen' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, CurrentActiveEntryPointButton) == 0x000608, "Member 'UW_PreMission_PlanningMap_C::CurrentActiveEntryPointButton' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, IsLeadPlayer) == 0x000610, "Member 'UW_PreMission_PlanningMap_C::IsLeadPlayer' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, EntryPointPopout) == 0x000618, "Member 'UW_PreMission_PlanningMap_C::EntryPointPopout' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, PanMouseStart) == 0x000620, "Member 'UW_PreMission_PlanningMap_C::PanMouseStart' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, PanCanvasStart) == 0x000628, "Member 'UW_PreMission_PlanningMap_C::PanCanvasStart' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_C, IsUsingGamepad) == 0x000630, "Member 'UW_PreMission_PlanningMap_C::IsUsingGamepad' has a wrong offset!");

}

