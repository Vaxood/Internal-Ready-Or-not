#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Roster_EKG

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_Roster_EKG.W_Roster_EKG_C.ExecuteUbergraph_W_Roster_EKG
// 0x0158 (0x0158 - 0x0000)
struct W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_328B[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	EPlayerHealthStatus                           Temp_byte_Variable_1;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_328C[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_4;                            // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_5;                            // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_6;                            // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_328D[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0078(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHealthStatus                           K2Node_CustomEvent_HealthStatus;                   // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_328E[0x2];                                     // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetColorByHealth_Linear;                  // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByHealth_Slate;                   // 0x00D0(0x0028)()
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_328F[0x6];                                     // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       K2Node_Select_Default_4;                           // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       K2Node_Select_Default_5;                           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPulse_ReturnValue;                     // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPulse_ReturnValue_1;                   // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0128(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0140(0x0018)()
};
static_assert(alignof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG) == 0x000008, "Wrong alignment on W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG");
static_assert(sizeof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG) == 0x000158, "Wrong size on W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, EntryPoint) == 0x000000, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_byte_Variable) == 0x000004, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_byte_Variable_1) == 0x000030, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_struct_Variable) == 0x000034, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_struct_Variable_1) == 0x00003C, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_struct_Variable_2) == 0x000044, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_struct_Variable_3) == 0x00004C, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_struct_Variable_4) == 0x000054, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_struct_Variable_5) == 0x00005C, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_struct_Variable_6) == 0x000064, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_bool_Variable) == 0x00006C, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_byte_Variable_2) == 0x00006D, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_byte_Variable_3) == 0x00006E, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_bool_Variable_1) == 0x00006F, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_byte_Variable_4) == 0x000070, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_byte_Variable_5) == 0x000071, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_bool_Variable_2) == 0x000072, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_bool_Variable_3) == 0x000073, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, K2Node_Event_IsDesignTime) == 0x000074, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, K2Node_Event_MyGeometry) == 0x000078, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, K2Node_Event_InDeltaTime) == 0x0000B0, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, K2Node_CustomEvent_HealthStatus) == 0x0000B4, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::K2Node_CustomEvent_HealthStatus' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_byte_Variable_6) == 0x0000B5, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B6, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000B7, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x0000B8, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x0000B9, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_BooleanOR_ReturnValue) == 0x0000BA, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, Temp_bool_Variable_4) == 0x0000BB, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_BooleanOR_ReturnValue_1) == 0x0000BC, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, K2Node_Select_Default) == 0x0000BD, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_GetColorByHealth_Linear) == 0x0000C0, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_GetColorByHealth_Linear' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_GetColorByHealth_Slate) == 0x0000D0, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_GetColorByHealth_Slate' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, K2Node_Select_Default_1) == 0x0000F8, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_PlayAnimation_ReturnValue) == 0x000100, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, K2Node_Select_Default_2) == 0x000108, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, K2Node_Select_Default_3) == 0x000109, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, K2Node_Select_Default_4) == 0x000110, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, K2Node_Select_Default_5) == 0x000118, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_GetPulse_ReturnValue) == 0x000120, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_GetPulse_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_GetPulse_ReturnValue_1) == 0x000124, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_GetPulse_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_Conv_IntToText_ReturnValue) == 0x000128, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000140, "Member 'W_Roster_EKG_C_ExecuteUbergraph_W_Roster_EKG::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");

// Function W_Roster_EKG.W_Roster_EKG_C.SetEkgStateByHealth
// 0x0001 (0x0001 - 0x0000)
struct W_Roster_EKG_C_SetEkgStateByHealth final 
{
public:
	EPlayerHealthStatus                           Param_HealthStatus;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Roster_EKG_C_SetEkgStateByHealth) == 0x000001, "Wrong alignment on W_Roster_EKG_C_SetEkgStateByHealth");
static_assert(sizeof(W_Roster_EKG_C_SetEkgStateByHealth) == 0x000001, "Wrong size on W_Roster_EKG_C_SetEkgStateByHealth");
static_assert(offsetof(W_Roster_EKG_C_SetEkgStateByHealth, Param_HealthStatus) == 0x000000, "Member 'W_Roster_EKG_C_SetEkgStateByHealth::Param_HealthStatus' has a wrong offset!");

// Function W_Roster_EKG.W_Roster_EKG_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_Roster_EKG_C_Tick final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Roster_EKG_C_Tick) == 0x000004, "Wrong alignment on W_Roster_EKG_C_Tick");
static_assert(sizeof(W_Roster_EKG_C_Tick) == 0x00003C, "Wrong size on W_Roster_EKG_C_Tick");
static_assert(offsetof(W_Roster_EKG_C_Tick, MyGeometry) == 0x000000, "Member 'W_Roster_EKG_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_Tick, InDeltaTime) == 0x000038, "Member 'W_Roster_EKG_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_Roster_EKG.W_Roster_EKG_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Roster_EKG_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Roster_EKG_C_PreConstruct) == 0x000001, "Wrong alignment on W_Roster_EKG_C_PreConstruct");
static_assert(sizeof(W_Roster_EKG_C_PreConstruct) == 0x000001, "Wrong size on W_Roster_EKG_C_PreConstruct");
static_assert(offsetof(W_Roster_EKG_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Roster_EKG_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Roster_EKG.W_Roster_EKG_C.GetColorByHealth
// 0x0088 (0x0088 - 0x0000)
struct W_Roster_EKG_C_GetColorByHealth final 
{
public:
	struct FLinearColor                           Linear;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Slate;                                             // 0x0010(0x0028)(Parm, OutParm)
	EPlayerHealthStatus                           Temp_byte_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3290[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3291[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0060(0x0028)()
};
static_assert(alignof(W_Roster_EKG_C_GetColorByHealth) == 0x000008, "Wrong alignment on W_Roster_EKG_C_GetColorByHealth");
static_assert(sizeof(W_Roster_EKG_C_GetColorByHealth) == 0x000088, "Wrong size on W_Roster_EKG_C_GetColorByHealth");
static_assert(offsetof(W_Roster_EKG_C_GetColorByHealth, Linear) == 0x000000, "Member 'W_Roster_EKG_C_GetColorByHealth::Linear' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_GetColorByHealth, Slate) == 0x000010, "Member 'W_Roster_EKG_C_GetColorByHealth::Slate' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_GetColorByHealth, Temp_byte_Variable) == 0x000038, "Member 'W_Roster_EKG_C_GetColorByHealth::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_GetColorByHealth, Temp_struct_Variable) == 0x00003C, "Member 'W_Roster_EKG_C_GetColorByHealth::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_GetColorByHealth, K2Node_Select_Default) == 0x00004C, "Member 'W_Roster_EKG_C_GetColorByHealth::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_GetColorByHealth, K2Node_MakeStruct_SlateColor) == 0x000060, "Member 'W_Roster_EKG_C_GetColorByHealth::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function W_Roster_EKG.W_Roster_EKG_C.GetPulse
// 0x0018 (0x0018 - 0x0000)
struct W_Roster_EKG_C_GetPulse final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Roster_EKG_C_GetPulse) == 0x000004, "Wrong alignment on W_Roster_EKG_C_GetPulse");
static_assert(sizeof(W_Roster_EKG_C_GetPulse) == 0x000018, "Wrong size on W_Roster_EKG_C_GetPulse");
static_assert(offsetof(W_Roster_EKG_C_GetPulse, ReturnValue) == 0x000000, "Member 'W_Roster_EKG_C_GetPulse::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_GetPulse, CallFunc_BreakVector2D_X) == 0x000004, "Member 'W_Roster_EKG_C_GetPulse::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_GetPulse, CallFunc_BreakVector2D_Y) == 0x000008, "Member 'W_Roster_EKG_C_GetPulse::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_GetPulse, CallFunc_FTrunc_ReturnValue) == 0x00000C, "Member 'W_Roster_EKG_C_GetPulse::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_GetPulse, CallFunc_FTrunc_ReturnValue_1) == 0x000010, "Member 'W_Roster_EKG_C_GetPulse::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Roster_EKG_C_GetPulse, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000014, "Member 'W_Roster_EKG_C_GetPulse::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");

}

