#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_UMP45

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ANIMBP_UMP45.ANIMBP_UMP45_C
// 0x0D20 (0x0FF0 - 0x02D0)
class UANIMBP_UMP45_C final  : public URoNWeaponAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02D8(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0308(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0350(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x03F0(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0470(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x04F0(0x0158)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0648(0x00C0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0708(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0750(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0778(0x0028)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4;             // 0x07A0(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_4;                        // 0x07C0(0x0108)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4;             // 0x08C8(0x0020)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x08E8(0x00C0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x09A8(0x0108)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_3;             // 0x0AB0(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_3;             // 0x0AD0(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x0AF0(0x0108)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2;             // 0x0BF8(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2;             // 0x0C18(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x0C38(0x0108)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x0D40(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x0D60(0x0020)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_3;                      // 0x0D80(0x0018)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_2;                      // 0x0D98(0x0018)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_1;                      // 0x0DB0(0x0018)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0DC8(0x0108)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0ED0(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0EF0(0x0020)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x0F10(0x0018)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x0F28(0x00B0)()
	float                                         Mag01Alpha;                                        // 0x0FD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CurrentFireMode;                                   // 0x0FDC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSemi;                                           // 0x0FDD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1C[0x2];                                     // 0x0FDE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FoldedStockAlpha;                                  // 0x0FE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireSwitchBlendTime;                               // 0x0FE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ANIMBP_UMP45(int32 EntryPoint, int32 CallFunc_Round_ReturnValue, float K2Node_Event_DeltaTimeX, bool CallFunc_Less_IntInt_ReturnValue, class AActor* CallFunc_GetOwningActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, class ABaseMagazineWeapon* K2Node_DynamicCast_AsBase_Magazine_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue_2, bool CallFunc_IsValid_ReturnValue_3, class USkeletalMeshComponent* CallFunc_GetItemMesh_ReturnValue, int32 CallFunc_FTrunc_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);
	void AnimNotify_ShowMag();
	void AnimNotify_DropSpeedReloadMagazine();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ANIMBP_UMP45_AnimGraphNode_BlendListByBool_5DF726DD49E321544F42A5A05D4AB5CA();
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANIMBP_UMP45_C">();
	}
	static class UANIMBP_UMP45_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANIMBP_UMP45_C>();
	}
};
static_assert(alignof(UANIMBP_UMP45_C) == 0x000010, "Wrong alignment on UANIMBP_UMP45_C");
static_assert(sizeof(UANIMBP_UMP45_C) == 0x000FF0, "Wrong size on UANIMBP_UMP45_C");
static_assert(offsetof(UANIMBP_UMP45_C, UberGraphFrame) == 0x0002D0, "Member 'UANIMBP_UMP45_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_Root) == 0x0002D8, "Member 'UANIMBP_UMP45_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_Slot_1) == 0x000308, "Member 'UANIMBP_UMP45_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_BlendListByBool) == 0x000350, "Member 'UANIMBP_UMP45_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_SequencePlayer_1) == 0x0003F0, "Member 'UANIMBP_UMP45_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_SequencePlayer) == 0x000470, "Member 'UANIMBP_UMP45_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_SaveCachedPose) == 0x0004F0, "Member 'UANIMBP_UMP45_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000648, "Member 'UANIMBP_UMP45_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_Slot) == 0x000708, "Member 'UANIMBP_UMP45_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_UseCachedPose_1) == 0x000750, "Member 'UANIMBP_UMP45_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_UseCachedPose) == 0x000778, "Member 'UANIMBP_UMP45_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_LocalToComponentSpace_4) == 0x0007A0, "Member 'UANIMBP_UMP45_C::AnimGraphNode_LocalToComponentSpace_4' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_ModifyBone_4) == 0x0007C0, "Member 'UANIMBP_UMP45_C::AnimGraphNode_ModifyBone_4' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_ComponentToLocalSpace_4) == 0x0008C8, "Member 'UANIMBP_UMP45_C::AnimGraphNode_ComponentToLocalSpace_4' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_LayeredBoneBlend) == 0x0008E8, "Member 'UANIMBP_UMP45_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_ModifyBone_3) == 0x0009A8, "Member 'UANIMBP_UMP45_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_ComponentToLocalSpace_3) == 0x000AB0, "Member 'UANIMBP_UMP45_C::AnimGraphNode_ComponentToLocalSpace_3' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_LocalToComponentSpace_3) == 0x000AD0, "Member 'UANIMBP_UMP45_C::AnimGraphNode_LocalToComponentSpace_3' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_ModifyBone_2) == 0x000AF0, "Member 'UANIMBP_UMP45_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_ComponentToLocalSpace_2) == 0x000BF8, "Member 'UANIMBP_UMP45_C::AnimGraphNode_ComponentToLocalSpace_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_LocalToComponentSpace_2) == 0x000C18, "Member 'UANIMBP_UMP45_C::AnimGraphNode_LocalToComponentSpace_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_ModifyBone_1) == 0x000C38, "Member 'UANIMBP_UMP45_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x000D40, "Member 'UANIMBP_UMP45_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_LocalToComponentSpace_1) == 0x000D60, "Member 'UANIMBP_UMP45_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_LocalRefPose_3) == 0x000D80, "Member 'UANIMBP_UMP45_C::AnimGraphNode_LocalRefPose_3' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_LocalRefPose_2) == 0x000D98, "Member 'UANIMBP_UMP45_C::AnimGraphNode_LocalRefPose_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_LocalRefPose_1) == 0x000DB0, "Member 'UANIMBP_UMP45_C::AnimGraphNode_LocalRefPose_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_ModifyBone) == 0x000DC8, "Member 'UANIMBP_UMP45_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_ComponentToLocalSpace) == 0x000ED0, "Member 'UANIMBP_UMP45_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_LocalToComponentSpace) == 0x000EF0, "Member 'UANIMBP_UMP45_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_LocalRefPose) == 0x000F10, "Member 'UANIMBP_UMP45_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, AnimGraphNode_BlendListByEnum) == 0x000F28, "Member 'UANIMBP_UMP45_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, Mag01Alpha) == 0x000FD8, "Member 'UANIMBP_UMP45_C::Mag01Alpha' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, CurrentFireMode) == 0x000FDC, "Member 'UANIMBP_UMP45_C::CurrentFireMode' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, bIsSemi) == 0x000FDD, "Member 'UANIMBP_UMP45_C::bIsSemi' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, FoldedStockAlpha) == 0x000FE0, "Member 'UANIMBP_UMP45_C::FoldedStockAlpha' has a wrong offset!");
static_assert(offsetof(UANIMBP_UMP45_C, FireSwitchBlendTime) == 0x000FE4, "Member 'UANIMBP_UMP45_C::FireSwitchBlendTime' has a wrong offset!");

}

