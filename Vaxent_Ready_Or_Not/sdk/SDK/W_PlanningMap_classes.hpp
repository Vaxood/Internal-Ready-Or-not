#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PlanningMap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_PlanningMap.W_PlanningMap_C
// 0x08A0 (0x0B00 - 0x0260)
class UW_PlanningMap_C final  : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                MapInteraction;                                    // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           RootCanvas;                                        // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PlanningMap_BreachPoint_Info_C*      SpawnDetailsPanel;                                 // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_FloorButtons;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_2DMap_C*                             W_2DMap;                                           // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  LevelData;                                         // 0x0290(0x0788)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FLevelFloorData>                MapFloors;                                         // 0x0A18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             PanMap;                                            // 0x0A28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdateMapMaterial;                                 // 0x0A38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Pressed;                                           // 0x0A48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3803[0x3];                                     // 0x0A49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MouseDelta;                                        // 0x0A4C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3804[0x4];                                     // 0x0A54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             NewEventDispatcher_0;                              // 0x0A58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UBP_UI_PlanningMap_SpawnPoint_C*> SpawnPointComponents;                              // 0x0A68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class ABP_UI_PlanningMap_C*                   PlanningMapActor;                                  // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UW_Button_C*>                    FloorButtons;                                      // 0x0A80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         CurrentFloor;                                      // 0x0A90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3805[0x4];                                     // 0x0A94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UBP_UI_PlanningMap_SpawnPoint_C*, class UW_PlanningMap_BreachPoint_C*> SpawnPoints;                                       // 0x0A98(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UW_PlanningMap_BreachPoint_C*           SelectedPoint;                                     // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DetailPanelOffset;                                 // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightCheck;                                       // 0x0AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WidthCheck;                                        // 0x0AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void PanMap__DelegateSignature(bool Param_Pressed, const struct FVector2D& CursorPos);
	void UpdateMapMaterial__DelegateSignature(class UTexture2D* LayoutTexture);
	void NewEventDispatcher_0__DelegateSignature();
	void ExecuteUbergraph_W_PlanningMap(int32 EntryPoint, int32 Temp_int_Loop_Counter_Variable, class UDataTable* CallFunc_GetLevelLookupDataTable_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, const struct FLevelDataLookupTable& CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int32 K2Node_CustomEvent_FloorIndex, int32 Temp_int_Loop_Counter_Variable_1, int32 CallFunc_Add_IntInt_ReturnValue_1, int32 CallFunc_Array_Length_ReturnValue, int32 Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, const struct FLevelFloorData& CallFunc_Array_Get_Item, struct FPointerEvent& K2Node_Event_PointerEvent, class UDragDropOperation* K2Node_Event_Operation, TArray<class UBP_UI_PlanningMap_SpawnPoint_C*>& K2Node_CustomEvent_SpawnPointComponents, class ABP_UI_PlanningMap_C* K2Node_CustomEvent_PlanningMapActor, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate, class UW_Button_C* K2Node_CustomEvent_Button, int32 CallFunc_Array_Find_ReturnValue, int32 Temp_int_Array_Index_Variable_1, class UW_Button_C* CallFunc_Array_Get_Item_1, int32 K2Node_CustomEvent_Floor, TDelegate<void(int32 Floor)> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void(float ZoomValue)> K2Node_CreateDelegate_OutputDelegate_2, TArray<class UW_PlanningMap_BreachPoint_C*>& CallFunc_Map_Values_Values, bool CallFunc_IsValid_ReturnValue, class UW_PlanningMap_BreachPoint_C* CallFunc_Array_Get_Item_2, int32 CallFunc_Array_Length_ReturnValue_1, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue_1, class UW_PlanningMap_BreachPoint_C* K2Node_CustomEvent_HoveredPoint, class UW_PlanningMap_BreachPoint_C* K2Node_CustomEvent_ClickedPoint, const struct FSpawnPoints& CallFunc_GetSpawnPointInfo_SpawnPointInfo, int32 CallFunc_GetSpawnPointInfo_Index, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue_1, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue_2, const struct FVector2D& CallFunc_GetPosition_ReturnValue, const struct FVector2D& CallFunc_GetDetailPanePosition_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue_3, const struct FSpawnPoints& CallFunc_GetSpawnPointInfo_SpawnPointInfo_1, int32 CallFunc_GetSpawnPointInfo_Index_1, class UW_Button_C* CallFunc_Array_Get_Item_3, class UW_Button_C* CallFunc_Create_ReturnValue, class UVerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);
	void ExitMap();
	void BndEvt__SpawnDetailsPanel_K2Node_ComponentBoundEvent_4_OnDetailPanelHide__DelegateSignature();
	void BndEvt__SpawnDetailsPanel_K2Node_ComponentBoundEvent_3_OnSetSpawnButtonClicked__DelegateSignature();
	void PointClicked(class UW_PlanningMap_BreachPoint_C* ClickedPoint);
	void PointHovered(class UW_PlanningMap_BreachPoint_C* HoveredPoint);
	void MapFloorUpdated(int32 Floor);
	void ChangeFloor(class UW_Button_C* Button);
	void InitPlanningMap(class ABP_UI_PlanningMap_C* Param_PlanningMapActor);
	void UpdateSpawns(TArray<class UBP_UI_PlanningMap_SpawnPoint_C*>& Param_SpawnPointComponents);
	void OnDragCancelled(struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void BndEvt__MapInteraction_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();
	void BndEvt__Button_115_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();
	void UpdateMap(int32 FloorIndex);
	void Construct();
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FVector2D& CallFunc_PointerEvent_GetCursorDelta_ReturnValue, bool CallFunc_EqualEqual_Vector2DVector2D_ReturnValue, const struct FEventReply& CallFunc_Handled_ReturnValue, const struct FEventReply& CallFunc_Handled_ReturnValue_1, bool CallFunc_EqualEqual_Vector2DVector2D_ReturnValue_1, const struct FEventReply& CallFunc_Handled_ReturnValue_2);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FKey& CallFunc_PointerEvent_GetEffectingButton_ReturnValue, const struct FEventReply& CallFunc_Handled_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue);
	void OnDragDetected(const struct FGeometry& MyGeometry, struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FEventReply& CallFunc_Handled_ReturnValue, const struct FKey& CallFunc_PointerEvent_GetEffectingButton_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue_1, const struct FEventReply& CallFunc_Handled_ReturnValue_1);
	void OpenPlanningMarker(TArray<class AActor*>& Temp_object_Variable, const struct FVector2D& CallFunc_GetMousePositionOnViewport_ReturnValue, class APlayerController* CallFunc_GetPlayerController_ReturnValue, const struct FVector& CallFunc_DeprojectScreenToWorld_WorldPosition, const struct FVector& CallFunc_DeprojectScreenToWorld_WorldDirection, bool CallFunc_DeprojectScreenToWorld_ReturnValue, const struct FVector& CallFunc_Multiply_VectorFloat_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, const struct FHitResult& CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue);
	void RefreshSpawns(float ZoomValue, const struct FVector2D& ScreenPosition, TDelegate<void(class UW_PlanningMap_BreachPoint_C* ClickedPoint)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void(class UW_PlanningMap_BreachPoint_C* HoveredPoint)> K2Node_CreateDelegate_OutputDelegate_1, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, class UW_PlanningMap_BreachPoint_C* CallFunc_Create_ReturnValue, class APlayerController* CallFunc_GetPlayerController_ReturnValue, int32 Temp_int_Array_Index_Variable, class UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, class UBP_UI_PlanningMap_SpawnPoint_C* CallFunc_Array_Get_Item, class UW_PlanningMap_BreachPoint_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, const struct FVector2D& CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
	void GetSpawnPointInfo(class UW_PlanningMap_BreachPoint_C*& BreachPointButton, struct FSpawnPoints* SpawnPointInfo, int32* Param_Index, TArray<class UW_PlanningMap_BreachPoint_C*>& CallFunc_Map_Values_Values, TArray<class UBP_UI_PlanningMap_SpawnPoint_C*>& CallFunc_Map_Keys_Keys, int32 CallFunc_Array_Find_ReturnValue, class UBP_UI_PlanningMap_SpawnPoint_C* CallFunc_Array_Get_Item);
	struct FVector2D GetDetailPanePosition(const struct FVector2D& PointScreenPosition, const struct FVector2D& CallFunc_GetViewportSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, const struct FVector2D& CallFunc_Add_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X_1, float CallFunc_BreakVector2D_Y_1, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue_1, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue_1, float CallFunc_Add_FloatFloat_ReturnValue_1, bool CallFunc_Greater_FloatFloat_ReturnValue_2, float CallFunc_SelectFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue_1, float CallFunc_SelectFloat_ReturnValue_2, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_PlanningMap_C">();
	}
	static class UW_PlanningMap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_PlanningMap_C>();
	}
};
static_assert(alignof(UW_PlanningMap_C) == 0x000008, "Wrong alignment on UW_PlanningMap_C");
static_assert(sizeof(UW_PlanningMap_C) == 0x000B00, "Wrong size on UW_PlanningMap_C");
static_assert(offsetof(UW_PlanningMap_C, UberGraphFrame) == 0x000260, "Member 'UW_PlanningMap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, MapInteraction) == 0x000268, "Member 'UW_PlanningMap_C::MapInteraction' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, RootCanvas) == 0x000270, "Member 'UW_PlanningMap_C::RootCanvas' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, SpawnDetailsPanel) == 0x000278, "Member 'UW_PlanningMap_C::SpawnDetailsPanel' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, VB_FloorButtons) == 0x000280, "Member 'UW_PlanningMap_C::VB_FloorButtons' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, W_2DMap) == 0x000288, "Member 'UW_PlanningMap_C::W_2DMap' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, LevelData) == 0x000290, "Member 'UW_PlanningMap_C::LevelData' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, MapFloors) == 0x000A18, "Member 'UW_PlanningMap_C::MapFloors' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, PanMap) == 0x000A28, "Member 'UW_PlanningMap_C::PanMap' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, UpdateMapMaterial) == 0x000A38, "Member 'UW_PlanningMap_C::UpdateMapMaterial' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, Pressed) == 0x000A48, "Member 'UW_PlanningMap_C::Pressed' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, MouseDelta) == 0x000A4C, "Member 'UW_PlanningMap_C::MouseDelta' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, NewEventDispatcher_0) == 0x000A58, "Member 'UW_PlanningMap_C::NewEventDispatcher_0' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, SpawnPointComponents) == 0x000A68, "Member 'UW_PlanningMap_C::SpawnPointComponents' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, PlanningMapActor) == 0x000A78, "Member 'UW_PlanningMap_C::PlanningMapActor' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, FloorButtons) == 0x000A80, "Member 'UW_PlanningMap_C::FloorButtons' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, CurrentFloor) == 0x000A90, "Member 'UW_PlanningMap_C::CurrentFloor' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, SpawnPoints) == 0x000A98, "Member 'UW_PlanningMap_C::SpawnPoints' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, SelectedPoint) == 0x000AE8, "Member 'UW_PlanningMap_C::SelectedPoint' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, DetailPanelOffset) == 0x000AF0, "Member 'UW_PlanningMap_C::DetailPanelOffset' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, HeightCheck) == 0x000AF8, "Member 'UW_PlanningMap_C::HeightCheck' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, WidthCheck) == 0x000AFC, "Member 'UW_PlanningMap_C::WidthCheck' has a wrong offset!");

}

