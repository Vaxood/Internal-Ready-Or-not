#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Text2LipSync

#include "Basic.hpp"

#include "Text2LipSync_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class Text2LipSync.PhrasesList
// 0x0050 (0x0078 - 0x0028)
class UPhrasesList final  : public UObject
{
public:
	TMap<class FName, struct FLipSync_Phrase>     Data;                                              // 0x0028(0x0050)(NativeAccessSpecifierPrivate)

public:
	bool LoadFromDataTable(class UDataTable* DataTable);

	void GetPhraseFromList(class FName& Key, struct FLipSync_Phrase* ReturnValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhrasesList">();
	}
	static class UPhrasesList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhrasesList>();
	}
};
static_assert(alignof(UPhrasesList) == 0x000008, "Wrong alignment on UPhrasesList");
static_assert(sizeof(UPhrasesList) == 0x000078, "Wrong size on UPhrasesList");
static_assert(offsetof(UPhrasesList, Data) == 0x000028, "Member 'UPhrasesList::Data' has a wrong offset!");

// Class Text2LipSync.SubtitlesCache
// 0x0050 (0x0078 - 0x0028)
class USubtitlesCache final  : public UObject
{
public:
	TMap<class FName, struct FLipSync_Pause>      Data;                                              // 0x0028(0x0050)(NativeAccessSpecifierPrivate)

public:
	bool AddAsset(class USoundBase* SoundAsset, TArray<struct FLipSync_TimedPhrase>& PhraseData, TArray<int32>& PauseIndexes, float PhraseDuration);
	int32 LoadFromBinaryFile(const class FString& FullFileName);
	int32 LoadFromDisk(const class FString& Filename);
	bool RemoveAsset(class USoundBase* SoundAsset);
	bool RenameAsset(const class FString& CurrentName, const class FString& NewName);

	void GetCachedKeys(TArray<class FString>* CachedKeys) const;
	bool GetPausesForVoiceAsset(class USoundBase* SoundAsset, TArray<struct FLipSync_Interval>* Pauses) const;
	int32 SaveToBinaryFile(const class FString& FullFileName) const;
	int32 SaveToDisk(const class FString& Filename) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubtitlesCache">();
	}
	static class USubtitlesCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubtitlesCache>();
	}
};
static_assert(alignof(USubtitlesCache) == 0x000008, "Wrong alignment on USubtitlesCache");
static_assert(sizeof(USubtitlesCache) == 0x000078, "Wrong size on USubtitlesCache");
static_assert(offsetof(USubtitlesCache, Data) == 0x000028, "Member 'USubtitlesCache::Data' has a wrong offset!");

// Class Text2LipSync.SubtitlesFileSave
// 0x0050 (0x0078 - 0x0028)
class USubtitlesFileSave final  : public USaveGame
{
public:
	TMap<class FName, struct FLipSync_Pause>      Data;                                              // 0x0028(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubtitlesFileSave">();
	}
	static class USubtitlesFileSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubtitlesFileSave>();
	}
};
static_assert(alignof(USubtitlesFileSave) == 0x000008, "Wrong alignment on USubtitlesFileSave");
static_assert(sizeof(USubtitlesFileSave) == 0x000078, "Wrong size on USubtitlesFileSave");
static_assert(offsetof(USubtitlesFileSave, Data) == 0x000028, "Member 'USubtitlesFileSave::Data' has a wrong offset!");

// Class Text2LipSync.TextLipSync
// 0x0758 (0x0808 - 0x00B0)
class UTextLipSync final  : public UActorComponent
{
public:
	TMap<EPhoneme, class FName>                   MorphTargetsMap;                                   // 0x00B0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLipSync_MorphPreset> CompositePhonemeTargetsMap;                        // 0x0100(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLipSync_MorphPreset> EmotionTags;                                       // 0x0150(0x0050)(Edit, NativeAccessSpecifierPublic)
	float                                         PauseFadeTime;                                     // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhonemeFadeTime;                                   // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MorphLowerLimit;                                   // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MorphUpperLimit;                                   // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioMinTreshold;                                  // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PauseMultiplier;                                   // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultOffsetFromDurationEnd;                      // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtSentenceEnd;                                // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAtComma;                                      // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnvelopeMultiplier;                                // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumPhonemesInterval;                           // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmotionBlendTime;                                  // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortEmotionHalfDuration;                          // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRealtimeTimingCorrection;                         // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSubtitlesCacheSystem;                          // 0x01D5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePhrasesTableSystem;                            // 0x01D6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCompositeMorphTargets;                         // 0x01D7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELipSyncAnimType                              AnimationType;                                     // 0x01D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1692[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnNotifyExecuted;                                  // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayingFinished;                                 // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSpeakingPause;                                   // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTimelineChanged;                                 // 0x0210(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAudioComponent*                        Speaker;                                           // 0x0220(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 ControlledMesh;                                    // 0x0228(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             CurrentSound;                                      // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   MorphTargets[0x11];                                // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, float>                      MorphTargetRuntimeValue;                           // 0x02C0(0x0050)(Protected, NativeAccessSpecifierProtected)
	TSet<class FName>                             MorphTargetsList;                                  // 0x0310(0x0050)(Protected, NativeAccessSpecifierProtected)
	class UPhrasesList*                           PhrasesList;                                       // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USubtitlesCache*                        SubtitlesCache;                                    // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInitialized;                                    // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSpeaking;                                       // 0x0371(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSpeakingPhonemeInAudio;                         // 0x0372(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSubtitleWasChanged;                               // 0x0373(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSubtitleWasLoadedFromCache;                       // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1693[0x3];                                     // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PauseTime;                                         // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentTime;                                       // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvelopeVolumeMultiplier;                          // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PhraseDuration;                                    // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NextPhonemeIndex;                                  // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PrevPhonemeIndex;                                  // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NextNotifyIndex;                                   // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1694[0x4];                                     // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLipSync_TimedPhrase>           PhraseData;                                        // 0x0398(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 PauseIndexes;                                      // 0x03A8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLipSync_TimedPhrase>           PhraseNotifies;                                    // 0x03B8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         CurrentIntervalDuration;                           // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrial;                                            // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1695[0x3];                                     // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrialMonth;                                        // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TrialYear;                                         // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, uint8>                      Emotion2Flag;                                      // 0x03D8(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<uint8, class FName>                      Flag2Emotion;                                      // 0x0428(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<uint8, float>                            ActiveEmotions;                                    // 0x0478(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1696[0x340];                                   // 0x04C8(0x0340)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BuildPhraseData(TArray<struct FLipSync_TimedData>& Subtitles);
	void GetListOfCachedAssets(TArray<class FString>* VoiceAssetNames);
	bool Initialize(class UAudioComponent* SpeakingAudioComp);
	void InitializEPhonemeConvertRules();
	void InitializePhonemesArray();
	int32 LoadCacheFromDisk(const class FString& Filename, bool bUseBinaryFormat);
	bool LoadPhrasesSetFromDataTable(class UDataTable* Table);
	void OnSpeaker_AudioPlaybackPercent(class USoundWave* PlayingSoundWave, float PlaybackPercent);
	void OnSpeaker_AudioSingleEnvelopeValue(class USoundWave* PlayingSoundWave, float EnvelopeValue);
	bool RemovePhraseFromCache(class USoundWave* VoiceAsset);
	void RestorePhraseDataFromPauses();
	int32 SaveCacheToDisk(const class FString& Filename, bool bUseBinaryFormat);
	bool SaveLastPhraseToCache();
	bool Speak(struct FLipSync_Phrase& Phrase, bool bStartPlayingSound);
	bool SpeakAgain();
	bool SpeakByKey(class FName& PhraseKey, bool bStartPlayingSound);
	bool StopSpeaking(bool bStopPlayingSound);
	void StretchDataInterval(int32 StartIndex, int32 EndIndex, float NewStartTime, float NewEndTime);
	void StretchPhraseData(float ErrorForPunctuation, float ErrorForWord);
	void TextToPhonemes(class FText& Line, TArray<struct FLipSync_PhonemeInPhrase>* OutputArray, int32* VowelsCount, int32* PunctuationMarksCount);

	class FString GetActiveMorphTargets() const;
	class FString GetCurrentPhonemesLine() const;
	void GetCurrentPhrase(TMap<float, EPhoneme>* ReturnValue) const;
	float GetCurveValue(class FName& CurveName) const;
	float GetLastPhraseDuration() const;
	float GetSpeakingTime() const;
	bool IsInitialized() const;
	bool IsSpeaking() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextLipSync">();
	}
	static class UTextLipSync* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextLipSync>();
	}
};
static_assert(alignof(UTextLipSync) == 0x000008, "Wrong alignment on UTextLipSync");
static_assert(sizeof(UTextLipSync) == 0x000808, "Wrong size on UTextLipSync");
static_assert(offsetof(UTextLipSync, MorphTargetsMap) == 0x0000B0, "Member 'UTextLipSync::MorphTargetsMap' has a wrong offset!");
static_assert(offsetof(UTextLipSync, CompositePhonemeTargetsMap) == 0x000100, "Member 'UTextLipSync::CompositePhonemeTargetsMap' has a wrong offset!");
static_assert(offsetof(UTextLipSync, EmotionTags) == 0x000150, "Member 'UTextLipSync::EmotionTags' has a wrong offset!");
static_assert(offsetof(UTextLipSync, PauseFadeTime) == 0x0001A0, "Member 'UTextLipSync::PauseFadeTime' has a wrong offset!");
static_assert(offsetof(UTextLipSync, PhonemeFadeTime) == 0x0001A4, "Member 'UTextLipSync::PhonemeFadeTime' has a wrong offset!");
static_assert(offsetof(UTextLipSync, MorphLowerLimit) == 0x0001A8, "Member 'UTextLipSync::MorphLowerLimit' has a wrong offset!");
static_assert(offsetof(UTextLipSync, MorphUpperLimit) == 0x0001AC, "Member 'UTextLipSync::MorphUpperLimit' has a wrong offset!");
static_assert(offsetof(UTextLipSync, AudioMinTreshold) == 0x0001B0, "Member 'UTextLipSync::AudioMinTreshold' has a wrong offset!");
static_assert(offsetof(UTextLipSync, PauseMultiplier) == 0x0001B4, "Member 'UTextLipSync::PauseMultiplier' has a wrong offset!");
static_assert(offsetof(UTextLipSync, DefaultOffsetFromDurationEnd) == 0x0001B8, "Member 'UTextLipSync::DefaultOffsetFromDurationEnd' has a wrong offset!");
static_assert(offsetof(UTextLipSync, DelayAtSentenceEnd) == 0x0001BC, "Member 'UTextLipSync::DelayAtSentenceEnd' has a wrong offset!");
static_assert(offsetof(UTextLipSync, DelayAtComma) == 0x0001C0, "Member 'UTextLipSync::DelayAtComma' has a wrong offset!");
static_assert(offsetof(UTextLipSync, EnvelopeMultiplier) == 0x0001C4, "Member 'UTextLipSync::EnvelopeMultiplier' has a wrong offset!");
static_assert(offsetof(UTextLipSync, MinimumPhonemesInterval) == 0x0001C8, "Member 'UTextLipSync::MinimumPhonemesInterval' has a wrong offset!");
static_assert(offsetof(UTextLipSync, EmotionBlendTime) == 0x0001CC, "Member 'UTextLipSync::EmotionBlendTime' has a wrong offset!");
static_assert(offsetof(UTextLipSync, ShortEmotionHalfDuration) == 0x0001D0, "Member 'UTextLipSync::ShortEmotionHalfDuration' has a wrong offset!");
static_assert(offsetof(UTextLipSync, bRealtimeTimingCorrection) == 0x0001D4, "Member 'UTextLipSync::bRealtimeTimingCorrection' has a wrong offset!");
static_assert(offsetof(UTextLipSync, bUseSubtitlesCacheSystem) == 0x0001D5, "Member 'UTextLipSync::bUseSubtitlesCacheSystem' has a wrong offset!");
static_assert(offsetof(UTextLipSync, bUsePhrasesTableSystem) == 0x0001D6, "Member 'UTextLipSync::bUsePhrasesTableSystem' has a wrong offset!");
static_assert(offsetof(UTextLipSync, bUseCompositeMorphTargets) == 0x0001D7, "Member 'UTextLipSync::bUseCompositeMorphTargets' has a wrong offset!");
static_assert(offsetof(UTextLipSync, AnimationType) == 0x0001D8, "Member 'UTextLipSync::AnimationType' has a wrong offset!");
static_assert(offsetof(UTextLipSync, OnNotifyExecuted) == 0x0001E0, "Member 'UTextLipSync::OnNotifyExecuted' has a wrong offset!");
static_assert(offsetof(UTextLipSync, OnPlayingFinished) == 0x0001F0, "Member 'UTextLipSync::OnPlayingFinished' has a wrong offset!");
static_assert(offsetof(UTextLipSync, OnSpeakingPause) == 0x000200, "Member 'UTextLipSync::OnSpeakingPause' has a wrong offset!");
static_assert(offsetof(UTextLipSync, OnTimelineChanged) == 0x000210, "Member 'UTextLipSync::OnTimelineChanged' has a wrong offset!");
static_assert(offsetof(UTextLipSync, Speaker) == 0x000220, "Member 'UTextLipSync::Speaker' has a wrong offset!");
static_assert(offsetof(UTextLipSync, ControlledMesh) == 0x000228, "Member 'UTextLipSync::ControlledMesh' has a wrong offset!");
static_assert(offsetof(UTextLipSync, CurrentSound) == 0x000230, "Member 'UTextLipSync::CurrentSound' has a wrong offset!");
static_assert(offsetof(UTextLipSync, MorphTargets) == 0x000238, "Member 'UTextLipSync::MorphTargets' has a wrong offset!");
static_assert(offsetof(UTextLipSync, MorphTargetRuntimeValue) == 0x0002C0, "Member 'UTextLipSync::MorphTargetRuntimeValue' has a wrong offset!");
static_assert(offsetof(UTextLipSync, MorphTargetsList) == 0x000310, "Member 'UTextLipSync::MorphTargetsList' has a wrong offset!");
static_assert(offsetof(UTextLipSync, PhrasesList) == 0x000360, "Member 'UTextLipSync::PhrasesList' has a wrong offset!");
static_assert(offsetof(UTextLipSync, SubtitlesCache) == 0x000368, "Member 'UTextLipSync::SubtitlesCache' has a wrong offset!");
static_assert(offsetof(UTextLipSync, bIsInitialized) == 0x000370, "Member 'UTextLipSync::bIsInitialized' has a wrong offset!");
static_assert(offsetof(UTextLipSync, bIsSpeaking) == 0x000371, "Member 'UTextLipSync::bIsSpeaking' has a wrong offset!");
static_assert(offsetof(UTextLipSync, bIsSpeakingPhonemeInAudio) == 0x000372, "Member 'UTextLipSync::bIsSpeakingPhonemeInAudio' has a wrong offset!");
static_assert(offsetof(UTextLipSync, bSubtitleWasChanged) == 0x000373, "Member 'UTextLipSync::bSubtitleWasChanged' has a wrong offset!");
static_assert(offsetof(UTextLipSync, bSubtitleWasLoadedFromCache) == 0x000374, "Member 'UTextLipSync::bSubtitleWasLoadedFromCache' has a wrong offset!");
static_assert(offsetof(UTextLipSync, PauseTime) == 0x000378, "Member 'UTextLipSync::PauseTime' has a wrong offset!");
static_assert(offsetof(UTextLipSync, CurrentTime) == 0x00037C, "Member 'UTextLipSync::CurrentTime' has a wrong offset!");
static_assert(offsetof(UTextLipSync, EnvelopeVolumeMultiplier) == 0x000380, "Member 'UTextLipSync::EnvelopeVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(UTextLipSync, PhraseDuration) == 0x000384, "Member 'UTextLipSync::PhraseDuration' has a wrong offset!");
static_assert(offsetof(UTextLipSync, NextPhonemeIndex) == 0x000388, "Member 'UTextLipSync::NextPhonemeIndex' has a wrong offset!");
static_assert(offsetof(UTextLipSync, PrevPhonemeIndex) == 0x00038C, "Member 'UTextLipSync::PrevPhonemeIndex' has a wrong offset!");
static_assert(offsetof(UTextLipSync, NextNotifyIndex) == 0x000390, "Member 'UTextLipSync::NextNotifyIndex' has a wrong offset!");
static_assert(offsetof(UTextLipSync, PhraseData) == 0x000398, "Member 'UTextLipSync::PhraseData' has a wrong offset!");
static_assert(offsetof(UTextLipSync, PauseIndexes) == 0x0003A8, "Member 'UTextLipSync::PauseIndexes' has a wrong offset!");
static_assert(offsetof(UTextLipSync, PhraseNotifies) == 0x0003B8, "Member 'UTextLipSync::PhraseNotifies' has a wrong offset!");
static_assert(offsetof(UTextLipSync, CurrentIntervalDuration) == 0x0003C8, "Member 'UTextLipSync::CurrentIntervalDuration' has a wrong offset!");
static_assert(offsetof(UTextLipSync, bTrial) == 0x0003CC, "Member 'UTextLipSync::bTrial' has a wrong offset!");
static_assert(offsetof(UTextLipSync, TrialMonth) == 0x0003D0, "Member 'UTextLipSync::TrialMonth' has a wrong offset!");
static_assert(offsetof(UTextLipSync, TrialYear) == 0x0003D4, "Member 'UTextLipSync::TrialYear' has a wrong offset!");
static_assert(offsetof(UTextLipSync, Emotion2Flag) == 0x0003D8, "Member 'UTextLipSync::Emotion2Flag' has a wrong offset!");
static_assert(offsetof(UTextLipSync, Flag2Emotion) == 0x000428, "Member 'UTextLipSync::Flag2Emotion' has a wrong offset!");
static_assert(offsetof(UTextLipSync, ActiveEmotions) == 0x000478, "Member 'UTextLipSync::ActiveEmotions' has a wrong offset!");

}

