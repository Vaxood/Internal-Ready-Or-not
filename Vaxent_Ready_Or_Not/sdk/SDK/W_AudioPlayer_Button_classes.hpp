#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_AudioPlayer_Button

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_Briefing_Audio_PlayStates_structs.hpp"
#include "SlateCore_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_AudioPlayer_Button.W_AudioPlayer_Button_C
// 0x00D8 (0x0CA8 - 0x0BD0)
class UW_AudioPlayer_Button_C final  : public UCommonButtonImplementation
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Hover;                                             // 0x0BD8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Img_icon;                                          // 0x0BE0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bActive;                                           // 0x0BE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHovered;                                          // 0x0BE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPressed;                                          // 0x0BEA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSelected;                                         // 0x0BEB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseDarkTheme;                                     // 0x0BEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34C1[0x3];                                     // 0x0BED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LabelText;                                         // 0x0BF0(0x0018)(Edit, BlueprintVisible)
	class FText                                   ActiveLabelText;                                   // 0x0C08(0x0018)(Edit, BlueprintVisible)
	E_Briefing_Audio_PlayStates                   Control;                                           // 0x0C20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlipIcon_Horiz_;                                  // 0x0C21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34C2[0x2];                                     // 0x0C22(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TextSize;                                          // 0x0C24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimCurrentTime;                                   // 0x0C28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimDuration;                                      // 0x0C2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTextSize;                                   // 0x0C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReverseHoverAnim;                                  // 0x0C34(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34C3[0x3];                                     // 0x0C35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           AnimationTimer;                                    // 0x0C38(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         AnimFPS;                                           // 0x0C40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimStartSize;                                     // 0x0C44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Briefing_Audio_PlayStates                   CurrentControl;                                    // 0x0C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C4[0x7];                                     // 0x0C49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_Briefing_Audio_PlayStates, struct FSlateBrush> ControlIcons;                                      // 0x0C50(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSubclassOf<class UCommonButtonStyle>         DarkThemeStyle;                                    // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_W_AudioPlayer_Button(int32 EntryPoint, bool K2Node_Event_IsDesignTime, float K2Node_CustomEvent_Duration, bool K2Node_CustomEvent_Reverse, float K2Node_CustomEvent_FPS, float CallFunc_SelectFloat_ReturnValue, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue);
	void BP_OnDeselected();
	void BP_OnSelected();
	void BP_OnUnhovered();
	void BP_OnHovered();
	void HoverAnim(float Duration, bool Reverse, float FPS);
	void PreConstruct(bool IsDesignTime);
	void AnimateHover();
	void SetHoveredState(bool Param_IsHovered);
	void SetPressedState();
	struct FLinearColor GetIconColor(bool CallFunc_IsPressed_ReturnValue, bool CallFunc_GetSelected_ReturnValue, const struct FLinearColor& CallFunc_GetColorByName_LinearColor, const struct FSlateColor& CallFunc_GetColorByName_SlateColor, const struct FLinearColor& CallFunc_GetColorByName_LinearColor_1, const struct FSlateColor& CallFunc_GetColorByName_SlateColor_1, const struct FLinearColor& CallFunc_SelectColor_ReturnValue, const struct FLinearColor& CallFunc_SelectColor_ReturnValue_1, const struct FLinearColor& CallFunc_SelectColor_ReturnValue_2, const struct FLinearColor& CallFunc_SelectColor_ReturnValue_3, const struct FLinearColor& CallFunc_SelectColor_ReturnValue_4);
	void UpdateIcon(const struct FLinearColor& CallFunc_GetIconColor_ReturnValue, const struct FSlateBrush& CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
	void UpdateControlSetting(E_Briefing_Audio_PlayStates Param_Control, bool Temp_bool_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, E_Briefing_Audio_PlayStates K2Node_Select_Default);
	void SetTheme(bool UseDarkTheme, bool Temp_bool_Variable, TSubclassOf<class UCommonButtonStyle> K2Node_Select_Default);
	void SequenceEvent__ENTRYPOINTW_AudioPlayer_Button_0();
	void SequenceEvent__ENTRYPOINTW_AudioPlayer_Button_1();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_AudioPlayer_Button_C">();
	}
	static class UW_AudioPlayer_Button_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_AudioPlayer_Button_C>();
	}
};
static_assert(alignof(UW_AudioPlayer_Button_C) == 0x000008, "Wrong alignment on UW_AudioPlayer_Button_C");
static_assert(sizeof(UW_AudioPlayer_Button_C) == 0x000CA8, "Wrong size on UW_AudioPlayer_Button_C");
static_assert(offsetof(UW_AudioPlayer_Button_C, UberGraphFrame) == 0x000BD0, "Member 'UW_AudioPlayer_Button_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, Hover) == 0x000BD8, "Member 'UW_AudioPlayer_Button_C::Hover' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, Img_icon) == 0x000BE0, "Member 'UW_AudioPlayer_Button_C::Img_icon' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, bActive) == 0x000BE8, "Member 'UW_AudioPlayer_Button_C::bActive' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, bHovered) == 0x000BE9, "Member 'UW_AudioPlayer_Button_C::bHovered' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, bPressed) == 0x000BEA, "Member 'UW_AudioPlayer_Button_C::bPressed' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, bSelected) == 0x000BEB, "Member 'UW_AudioPlayer_Button_C::bSelected' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, bUseDarkTheme) == 0x000BEC, "Member 'UW_AudioPlayer_Button_C::bUseDarkTheme' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, LabelText) == 0x000BF0, "Member 'UW_AudioPlayer_Button_C::LabelText' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, ActiveLabelText) == 0x000C08, "Member 'UW_AudioPlayer_Button_C::ActiveLabelText' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, Control) == 0x000C20, "Member 'UW_AudioPlayer_Button_C::Control' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, bFlipIcon_Horiz_) == 0x000C21, "Member 'UW_AudioPlayer_Button_C::bFlipIcon_Horiz_' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, TextSize) == 0x000C24, "Member 'UW_AudioPlayer_Button_C::TextSize' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, AnimCurrentTime) == 0x000C28, "Member 'UW_AudioPlayer_Button_C::AnimCurrentTime' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, AnimDuration) == 0x000C2C, "Member 'UW_AudioPlayer_Button_C::AnimDuration' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, CurrentTextSize) == 0x000C30, "Member 'UW_AudioPlayer_Button_C::CurrentTextSize' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, ReverseHoverAnim) == 0x000C34, "Member 'UW_AudioPlayer_Button_C::ReverseHoverAnim' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, AnimationTimer) == 0x000C38, "Member 'UW_AudioPlayer_Button_C::AnimationTimer' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, AnimFPS) == 0x000C40, "Member 'UW_AudioPlayer_Button_C::AnimFPS' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, AnimStartSize) == 0x000C44, "Member 'UW_AudioPlayer_Button_C::AnimStartSize' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, CurrentControl) == 0x000C48, "Member 'UW_AudioPlayer_Button_C::CurrentControl' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, ControlIcons) == 0x000C50, "Member 'UW_AudioPlayer_Button_C::ControlIcons' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_Button_C, DarkThemeStyle) == 0x000CA0, "Member 'UW_AudioPlayer_Button_C::DarkThemeStyle' has a wrong offset!");

}

