#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RadialSelectionBase

#include "Basic.hpp"

#include "W_RadialSelectionBase_classes.hpp"
#include "W_RadialSelectionBase_parameters.hpp"


namespace SDK
{

// Function W_RadialSelectionBase.W_RadialSelectionBase_C.ExecuteUbergraph_W_RadialSelectionBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            CallFunc_GetOwningPlayerPawn_ReturnValue               (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABasePlayer_C*                    K2Node_DynamicCast_AsBase_Player                       (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    K2Node_DynamicCast_bSuccess                            (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    K2Node_Event_IsDesignTime                              (ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RadialSelectionBase_C::ExecuteUbergraph_W_RadialSelectionBase(int32 EntryPoint, class APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, class ABasePlayer_C* K2Node_DynamicCast_AsBase_Player, bool K2Node_DynamicCast_bSuccess, bool K2Node_Event_IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialSelectionBase_C", "ExecuteUbergraph_W_RadialSelectionBase");

	Params::W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase Parms{};

	Parms.EntryPoint = EntryPoint;
	Parms.CallFunc_GetOwningPlayerPawn_ReturnValue = CallFunc_GetOwningPlayerPawn_ReturnValue;
	Parms.K2Node_DynamicCast_AsBase_Player = K2Node_DynamicCast_AsBase_Player;
	Parms.K2Node_DynamicCast_bSuccess = K2Node_DynamicCast_bSuccess;
	Parms.K2Node_Event_IsDesignTime = K2Node_Event_IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RadialSelectionBase.W_RadialSelectionBase_C.On Wheel Created
// (BlueprintCallable, BlueprintEvent)

void UW_RadialSelectionBase_C::On_Wheel_Created()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialSelectionBase_C", "On Wheel Created");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialSelectionBase.W_RadialSelectionBase_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RadialSelectionBase_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialSelectionBase_C", "PreConstruct");

	Params::W_RadialSelectionBase_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RadialSelectionBase.W_RadialSelectionBase_C.OnSelected
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Play_Animation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RadialSelectionBase_C::OnSelected(bool Play_Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialSelectionBase_C", "OnSelected");

	Params::W_RadialSelectionBase_C_OnSelected Parms{};

	Parms.Play_Animation = Play_Animation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RadialSelectionBase.W_RadialSelectionBase_C.OnDeselected
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Play_Animation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RadialSelectionBase_C::OnDeselected(bool Play_Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialSelectionBase_C", "OnDeselected");

	Params::W_RadialSelectionBase_C_OnDeselected Parms{};

	Parms.Play_Animation = Play_Animation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RadialSelectionBase.W_RadialSelectionBase_C.ExecuteRadial
// (Public, BlueprintCallable, BlueprintEvent)

void UW_RadialSelectionBase_C::ExecuteRadial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialSelectionBase_C", "ExecuteRadial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialSelectionBase.W_RadialSelectionBase_C.Next
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RadialSelectionBase_C::Next(bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialSelectionBase_C", "Next");

	Params::W_RadialSelectionBase_C_Next Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = std::move(Parms.bSuccess);
}


// Function W_RadialSelectionBase.W_RadialSelectionBase_C.Previous
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSucceeded                                             (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RadialSelectionBase_C::Previous(bool* bSuccess, bool bSucceeded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialSelectionBase_C", "Previous");

	Params::W_RadialSelectionBase_C_Previous Parms{};

	Parms.bSucceeded = bSucceeded;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = std::move(Parms.bSuccess);
}


// Function W_RadialSelectionBase.W_RadialSelectionBase_C.Select
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RadialSelectionBase_C::Select(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialSelectionBase_C", "Select");

	Params::W_RadialSelectionBase_C_Select Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RadialSelectionBase.W_RadialSelectionBase_C.UpdateIcon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SelectionIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateBrush                      InBrush                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_RadialSelectionBase_C::UpdateIcon(int32 SelectionIndex, const struct FSlateBrush& InBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialSelectionBase_C", "UpdateIcon");

	Params::W_RadialSelectionBase_C_UpdateIcon Parms{};

	Parms.SelectionIndex = SelectionIndex;
	Parms.InBrush = std::move(InBrush);

	UObject::ProcessEvent(Func, &Parms);
}

}

