#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_Tablet

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.ExecuteUbergraph_W_PreMission_Tablet
// 0x1130 (0x1130 - 0x0000)
struct W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3927[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PremissionTablet_Button_C*           K2Node_ComponentBoundEvent_TriggeringButton_3;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PremissionTablet_Button_C*           K2Node_ComponentBoundEvent_TriggeringButton_2;     // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PremissionTablet_Button_C*           K2Node_ComponentBoundEvent_TriggeringButton_1;     // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0028(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3928[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3929[0x2];                                     // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PageName;                             // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_392A[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_ComponentBoundEvent_MissionURL;             // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLevelFloor                            K2Node_ComponentBoundEvent_FloorData;              // 0x0098(0x0068)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_392B[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_Floors_C*          K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Floors;  // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsGamepad;                            // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_392C[0x1];                                     // 0x011B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Delay_1;                              // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_392D[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Delay;                                // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_AudioPlayer_C*                       K2Node_Event_PlayerWidget;                         // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayerVisible;                        // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_392E[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_URL;                                  // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  K2Node_Event_LevelData_1;                          // 0x0148(0x0788)(ConstParm)
	TArray<class UUserWidget*>                    CallFunc_GetAllWidgetsWithInterface_FoundWidgets;  // 0x08D0(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x08E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x08E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_Array_Get_Item;                           // 0x08E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_MissionPlanning_C> K2Node_DynamicCast_AsBPI_Mission_Planning;         // 0x08F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0900(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_UseDarkTheme;                         // 0x0901(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_392F[0x6];                                     // 0x0902(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_MissionURL;                           // 0x0908(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  K2Node_Event_LevelData;                            // 0x0918(0x0788)()
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x10A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3930[0x4];                                     // 0x10A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_1;       // 0x10A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x10B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x10B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3931[0x3];                                     // 0x10B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x10B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x10BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x10C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3932[0x4];                                     // 0x10C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PremissionTablet_Button_C*           K2Node_ComponentBoundEvent_TriggeringButton;       // 0x10C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate;              // 0x10D0(0x0010)(ZeroConstructor, NoDestructor)
	ECommonInputType                              K2Node_CustomEvent_bNewInputType;                  // 0x10E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAwake;                              // 0x10E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3933[0x6];                                     // 0x10E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x10E8(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget*                                CallFunc_Array_Get_Item_1;                         // 0x10F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x1100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3934[0x4];                                     // 0x1104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITabletUI_C>           K2Node_DynamicCast_AsTablet_UI;                    // 0x1108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x1118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x1119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3935[0x6];                                     // 0x111A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UReadyOrNotGameInstance*                CallFunc_GetReadyOrNotGameInstance_ReturnValue;    // 0x1120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSinglePlayer_ReturnValue;               // 0x1128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x1129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMultiplayer_ReturnValue;                // 0x112A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x112B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet");
static_assert(sizeof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet) == 0x001130, "Wrong size on W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, EntryPoint) == 0x000000, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_ComponentBoundEvent_TriggeringButton_3) == 0x000008, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_ComponentBoundEvent_TriggeringButton_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_ComponentBoundEvent_TriggeringButton_2) == 0x000010, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_ComponentBoundEvent_TriggeringButton_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_ComponentBoundEvent_TriggeringButton_1) == 0x000018, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_ComponentBoundEvent_TriggeringButton_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_PlayAnimationForward_ReturnValue) == 0x000020, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_MyGeometry) == 0x000028, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_InDeltaTime) == 0x000060, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000068, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, Temp_byte_Variable) == 0x000070, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_IsDesignTime) == 0x000071, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_PageName) == 0x000074, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000080, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_ComponentBoundEvent_MissionURL) == 0x000088, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_ComponentBoundEvent_MissionURL' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_ComponentBoundEvent_FloorData) == 0x000098, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_ComponentBoundEvent_FloorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000100, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, Temp_byte_Variable_1) == 0x000108, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Floors) == 0x000110, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Floors' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_DynamicCast_bSuccess) == 0x000118, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, Temp_bool_Variable) == 0x000119, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_IsGamepad) == 0x00011A, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_Delay_1) == 0x00011C, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_Collapse) == 0x000120, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_Delay) == 0x000124, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_PlayerWidget) == 0x000128, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_PlayerWidget' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_PlayerVisible) == 0x000130, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_PlayerVisible' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_URL) == 0x000138, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_URL' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_LevelData_1) == 0x000148, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_LevelData_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_GetAllWidgetsWithInterface_FoundWidgets) == 0x0008D0, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_GetAllWidgetsWithInterface_FoundWidgets' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_Array_Length_ReturnValue) == 0x0008E0, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, Temp_int_Array_Index_Variable) == 0x0008E4, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_Array_Get_Item) == 0x0008E8, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_DynamicCast_AsBPI_Mission_Planning) == 0x0008F0, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_DynamicCast_AsBPI_Mission_Planning' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_DynamicCast_bSuccess_1) == 0x000900, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_UseDarkTheme) == 0x000901, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_UseDarkTheme' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_MissionURL) == 0x000908, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_MissionURL' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_LevelData) == 0x000918, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_LevelData' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, Temp_int_Array_Index_Variable_1) == 0x0010A0, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_PlayAnimationReverse_ReturnValue_1) == 0x0010A8, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_PlayAnimationReverse_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, Temp_int_Loop_Counter_Variable) == 0x0010B0, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_Less_IntInt_ReturnValue) == 0x0010B4, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_Add_IntInt_ReturnValue) == 0x0010B8, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, Temp_int_Loop_Counter_Variable_1) == 0x0010BC, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_Add_IntInt_ReturnValue_1) == 0x0010C0, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_ComponentBoundEvent_TriggeringButton) == 0x0010C8, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_ComponentBoundEvent_TriggeringButton' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_CreateDelegate_OutputDelegate) == 0x0010D0, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_CustomEvent_bNewInputType) == 0x0010E0, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_CustomEvent_bNewInputType' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Event_IsAwake) == 0x0010E1, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Event_IsAwake' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_GetAllChildren_ReturnValue) == 0x0010E8, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_Array_Get_Item_1) == 0x0010F8, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_Array_Length_ReturnValue_1) == 0x001100, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_DynamicCast_AsTablet_UI) == 0x001108, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_DynamicCast_AsTablet_UI' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_DynamicCast_bSuccess_2) == 0x001118, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_Less_IntInt_ReturnValue_1) == 0x001119, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_GetReadyOrNotGameInstance_ReturnValue) == 0x001120, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_GetReadyOrNotGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_IsSinglePlayer_ReturnValue) == 0x001128, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_IsSinglePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_IsEmpty_ReturnValue) == 0x001129, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, CallFunc_IsMultiplayer_ReturnValue) == 0x00112A, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::CallFunc_IsMultiplayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet, K2Node_Select_Default) == 0x00112B, "Member 'W_PreMission_Tablet_C_ExecuteUbergraph_W_PreMission_Tablet::K2Node_Select_Default' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.SetTabletState
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_Tablet_C_SetTabletState final 
{
public:
	bool                                          IsAwake;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_SetTabletState) == 0x000001, "Wrong alignment on W_PreMission_Tablet_C_SetTabletState");
static_assert(sizeof(W_PreMission_Tablet_C_SetTabletState) == 0x000001, "Wrong size on W_PreMission_Tablet_C_SetTabletState");
static_assert(offsetof(W_PreMission_Tablet_C_SetTabletState, IsAwake) == 0x000000, "Member 'W_PreMission_Tablet_C_SetTabletState::IsAwake' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.OnInputChange
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_Tablet_C_OnInputChange final 
{
public:
	ECommonInputType                              bNewInputType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_C_OnInputChange) == 0x000001, "Wrong alignment on W_PreMission_Tablet_C_OnInputChange");
static_assert(sizeof(W_PreMission_Tablet_C_OnInputChange) == 0x000001, "Wrong size on W_PreMission_Tablet_C_OnInputChange");
static_assert(offsetof(W_PreMission_Tablet_C_OnInputChange, bNewInputType) == 0x000000, "Member 'W_PreMission_Tablet_C_OnInputChange::bNewInputType' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.BndEvt__W_PreMission_Tablet_btn_Camera_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Camera_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature final 
{
public:
	class UW_PremissionTablet_Button_C*           TriggeringButton;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Camera_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Camera_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature");
static_assert(sizeof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Camera_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature) == 0x000008, "Wrong size on W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Camera_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature");
static_assert(offsetof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Camera_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature, TriggeringButton) == 0x000000, "Member 'W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Camera_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature::TriggeringButton' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.MissionChanged
// 0x0798 (0x0798 - 0x0000)
struct W_PreMission_Tablet_C_MissionChanged final 
{
public:
	class FString                                 MissionURL;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  LevelData;                                         // 0x0010(0x0788)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_PreMission_Tablet_C_MissionChanged) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_MissionChanged");
static_assert(sizeof(W_PreMission_Tablet_C_MissionChanged) == 0x000798, "Wrong size on W_PreMission_Tablet_C_MissionChanged");
static_assert(offsetof(W_PreMission_Tablet_C_MissionChanged, MissionURL) == 0x000000, "Member 'W_PreMission_Tablet_C_MissionChanged::MissionURL' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_MissionChanged, LevelData) == 0x000010, "Member 'W_PreMission_Tablet_C_MissionChanged::LevelData' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.SetVisualTheme
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_Tablet_C_SetVisualTheme final 
{
public:
	bool                                          UseDarkTheme;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_SetVisualTheme) == 0x000001, "Wrong alignment on W_PreMission_Tablet_C_SetVisualTheme");
static_assert(sizeof(W_PreMission_Tablet_C_SetVisualTheme) == 0x000001, "Wrong size on W_PreMission_Tablet_C_SetVisualTheme");
static_assert(offsetof(W_PreMission_Tablet_C_SetVisualTheme, UseDarkTheme) == 0x000000, "Member 'W_PreMission_Tablet_C_SetVisualTheme::UseDarkTheme' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.OnMissionChanged
// 0x0798 (0x0798 - 0x0000)
struct W_PreMission_Tablet_C_OnMissionChanged final 
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  LevelData;                                         // 0x0010(0x0788)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_PreMission_Tablet_C_OnMissionChanged) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_OnMissionChanged");
static_assert(sizeof(W_PreMission_Tablet_C_OnMissionChanged) == 0x000798, "Wrong size on W_PreMission_Tablet_C_OnMissionChanged");
static_assert(offsetof(W_PreMission_Tablet_C_OnMissionChanged, URL) == 0x000000, "Member 'W_PreMission_Tablet_C_OnMissionChanged::URL' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnMissionChanged, LevelData) == 0x000010, "Member 'W_PreMission_Tablet_C_OnMissionChanged::LevelData' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.AudioPlayerVisible
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_Tablet_C_AudioPlayerVisible final 
{
public:
	class UW_AudioPlayer_C*                       PlayerWidget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerVisible;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_AudioPlayerVisible) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_AudioPlayerVisible");
static_assert(sizeof(W_PreMission_Tablet_C_AudioPlayerVisible) == 0x000010, "Wrong size on W_PreMission_Tablet_C_AudioPlayerVisible");
static_assert(offsetof(W_PreMission_Tablet_C_AudioPlayerVisible, PlayerWidget) == 0x000000, "Member 'W_PreMission_Tablet_C_AudioPlayerVisible::PlayerWidget' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_AudioPlayerVisible, PlayerVisible) == 0x000008, "Member 'W_PreMission_Tablet_C_AudioPlayerVisible::PlayerVisible' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.Reveal
// 0x0004 (0x0004 - 0x0000)
struct W_PreMission_Tablet_C_Reveal final 
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_C_Reveal) == 0x000004, "Wrong alignment on W_PreMission_Tablet_C_Reveal");
static_assert(sizeof(W_PreMission_Tablet_C_Reveal) == 0x000004, "Wrong size on W_PreMission_Tablet_C_Reveal");
static_assert(offsetof(W_PreMission_Tablet_C_Reveal, Delay) == 0x000000, "Member 'W_PreMission_Tablet_C_Reveal::Delay' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.Hide
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_Tablet_C_Hide final 
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_Hide) == 0x000004, "Wrong alignment on W_PreMission_Tablet_C_Hide");
static_assert(sizeof(W_PreMission_Tablet_C_Hide) == 0x000008, "Wrong size on W_PreMission_Tablet_C_Hide");
static_assert(offsetof(W_PreMission_Tablet_C_Hide, Delay) == 0x000000, "Member 'W_PreMission_Tablet_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Hide, Collapse) == 0x000004, "Member 'W_PreMission_Tablet_C_Hide::Collapse' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_Tablet_C_SetInputMode final 
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_SetInputMode) == 0x000001, "Wrong alignment on W_PreMission_Tablet_C_SetInputMode");
static_assert(sizeof(W_PreMission_Tablet_C_SetInputMode) == 0x000001, "Wrong size on W_PreMission_Tablet_C_SetInputMode");
static_assert(offsetof(W_PreMission_Tablet_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_PreMission_Tablet_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.BndEvt__W_PreMission_Tablet_W_PreMission_PlanningMap_K2Node_ComponentBoundEvent_6_OnMapLevelChanged__DelegateSignature
// 0x0078 (0x0078 - 0x0000)
struct W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_W_PreMission_PlanningMap_K2Node_ComponentBoundEvent_6_OnMapLevelChanged__DelegateSignature final 
{
public:
	class FString                                 MissionURL;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FLevelFloor                            FloorData;                                         // 0x0010(0x0068)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_W_PreMission_PlanningMap_K2Node_ComponentBoundEvent_6_OnMapLevelChanged__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_W_PreMission_PlanningMap_K2Node_ComponentBoundEvent_6_OnMapLevelChanged__DelegateSignature");
static_assert(sizeof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_W_PreMission_PlanningMap_K2Node_ComponentBoundEvent_6_OnMapLevelChanged__DelegateSignature) == 0x000078, "Wrong size on W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_W_PreMission_PlanningMap_K2Node_ComponentBoundEvent_6_OnMapLevelChanged__DelegateSignature");
static_assert(offsetof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_W_PreMission_PlanningMap_K2Node_ComponentBoundEvent_6_OnMapLevelChanged__DelegateSignature, MissionURL) == 0x000000, "Member 'W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_W_PreMission_PlanningMap_K2Node_ComponentBoundEvent_6_OnMapLevelChanged__DelegateSignature::MissionURL' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_W_PreMission_PlanningMap_K2Node_ComponentBoundEvent_6_OnMapLevelChanged__DelegateSignature, FloorData) == 0x000010, "Member 'W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_W_PreMission_PlanningMap_K2Node_ComponentBoundEvent_6_OnMapLevelChanged__DelegateSignature::FloorData' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_Tablet_C_ChangePage final 
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_C_ChangePage) == 0x000004, "Wrong alignment on W_PreMission_Tablet_C_ChangePage");
static_assert(sizeof(W_PreMission_Tablet_C_ChangePage) == 0x000008, "Wrong size on W_PreMission_Tablet_C_ChangePage");
static_assert(offsetof(W_PreMission_Tablet_C_ChangePage, PageName) == 0x000000, "Member 'W_PreMission_Tablet_C_ChangePage::PageName' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_Tablet_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_PreConstruct) == 0x000001, "Wrong alignment on W_PreMission_Tablet_C_PreConstruct");
static_assert(sizeof(W_PreMission_Tablet_C_PreConstruct) == 0x000001, "Wrong size on W_PreMission_Tablet_C_PreConstruct");
static_assert(offsetof(W_PreMission_Tablet_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_PreMission_Tablet_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_PreMission_Tablet_C_Tick final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_C_Tick) == 0x000004, "Wrong alignment on W_PreMission_Tablet_C_Tick");
static_assert(sizeof(W_PreMission_Tablet_C_Tick) == 0x00003C, "Wrong size on W_PreMission_Tablet_C_Tick");
static_assert(offsetof(W_PreMission_Tablet_C_Tick, MyGeometry) == 0x000000, "Member 'W_PreMission_Tablet_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Tick, InDeltaTime) == 0x000038, "Member 'W_PreMission_Tablet_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.BndEvt__W_PreMission_Tablet_btn_Brief_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Brief_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature final 
{
public:
	class UW_PremissionTablet_Button_C*           TriggeringButton;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Brief_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Brief_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature");
static_assert(sizeof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Brief_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature) == 0x000008, "Wrong size on W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Brief_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature");
static_assert(offsetof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Brief_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature, TriggeringButton) == 0x000000, "Member 'W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Brief_K2Node_ComponentBoundEvent_4_OnClicked__DelegateSignature::TriggeringButton' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.BndEvt__W_PreMission_Tablet_btn_Map_K2Node_ComponentBoundEvent_3_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Map_K2Node_ComponentBoundEvent_3_OnClicked__DelegateSignature final 
{
public:
	class UW_PremissionTablet_Button_C*           TriggeringButton;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Map_K2Node_ComponentBoundEvent_3_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Map_K2Node_ComponentBoundEvent_3_OnClicked__DelegateSignature");
static_assert(sizeof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Map_K2Node_ComponentBoundEvent_3_OnClicked__DelegateSignature) == 0x000008, "Wrong size on W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Map_K2Node_ComponentBoundEvent_3_OnClicked__DelegateSignature");
static_assert(offsetof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Map_K2Node_ComponentBoundEvent_3_OnClicked__DelegateSignature, TriggeringButton) == 0x000000, "Member 'W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Map_K2Node_ComponentBoundEvent_3_OnClicked__DelegateSignature::TriggeringButton' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.BndEvt__W_PreMission_Tablet_btn_Team_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Team_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature final 
{
public:
	class UW_PremissionTablet_Button_C*           TriggeringButton;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Team_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Team_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature");
static_assert(sizeof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Team_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature) == 0x000008, "Wrong size on W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Team_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature");
static_assert(offsetof(W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Team_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature, TriggeringButton) == 0x000000, "Member 'W_PreMission_Tablet_C_BndEvt__W_PreMission_Tablet_btn_Team_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature::TriggeringButton' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.UpdateNavigation
// 0x0050 (0x0050 - 0x0000)
struct W_PreMission_Tablet_C_UpdateNavigation final 
{
public:
	class UW_PremissionTablet_Button_C*           NewActiveButton;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3936[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_Floors_C*          K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Floors;  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3937[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Map_Find_Value;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3938[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IReadyOrNotUI_C>       CallFunc_Reveal_self_CastInput;                    // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IReadyOrNotUI_C>       CallFunc_Hide_self_CastInput;                      // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_UpdateNavigation) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_UpdateNavigation");
static_assert(sizeof(W_PreMission_Tablet_C_UpdateNavigation) == 0x000050, "Wrong size on W_PreMission_Tablet_C_UpdateNavigation");
static_assert(offsetof(W_PreMission_Tablet_C_UpdateNavigation, NewActiveButton) == 0x000000, "Member 'W_PreMission_Tablet_C_UpdateNavigation::NewActiveButton' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_UpdateNavigation, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'W_PreMission_Tablet_C_UpdateNavigation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_UpdateNavigation, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'W_PreMission_Tablet_C_UpdateNavigation::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_UpdateNavigation, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00000D, "Member 'W_PreMission_Tablet_C_UpdateNavigation::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_UpdateNavigation, K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Floors) == 0x000010, "Member 'W_PreMission_Tablet_C_UpdateNavigation::K2Node_DynamicCast_AsW_Pre_Mission_Tablet_Floors' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_UpdateNavigation, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'W_PreMission_Tablet_C_UpdateNavigation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_UpdateNavigation, CallFunc_Map_Find_Value) == 0x000020, "Member 'W_PreMission_Tablet_C_UpdateNavigation::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_UpdateNavigation, CallFunc_Map_Find_ReturnValue) == 0x000028, "Member 'W_PreMission_Tablet_C_UpdateNavigation::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_UpdateNavigation, CallFunc_Reveal_self_CastInput) == 0x000030, "Member 'W_PreMission_Tablet_C_UpdateNavigation::CallFunc_Reveal_self_CastInput' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_UpdateNavigation, CallFunc_Hide_self_CastInput) == 0x000040, "Member 'W_PreMission_Tablet_C_UpdateNavigation::CallFunc_Hide_self_CastInput' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.OnMouseButtonUp
// 0x0218 (0x0218 - 0x0000)
struct W_PreMission_Tablet_C_OnMouseButtonUp final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0160(0x00B8)()
};
static_assert(alignof(W_PreMission_Tablet_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_OnMouseButtonUp");
static_assert(sizeof(W_PreMission_Tablet_C_OnMouseButtonUp) == 0x000218, "Wrong size on W_PreMission_Tablet_C_OnMouseButtonUp");
static_assert(offsetof(W_PreMission_Tablet_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'W_PreMission_Tablet_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnMouseButtonUp, MouseEvent) == 0x000038, "Member 'W_PreMission_Tablet_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnMouseButtonUp, ReturnValue) == 0x0000A8, "Member 'W_PreMission_Tablet_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnMouseButtonUp, CallFunc_Unhandled_ReturnValue) == 0x000160, "Member 'W_PreMission_Tablet_C_OnMouseButtonUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.OpenRadial
// 0x0078 (0x0078 - 0x0000)
struct W_PreMission_Tablet_C_OpenRadial final 
{
public:
	struct FVector2D                              Coordinates;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0008(0x0010)(NoDestructor)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData;                      // 0x0018(0x0028)(NoDestructor)
	class UW_Radial_MapMarking_C*                 CallFunc_Create_ReturnValue;                       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3939[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName Category, class FName MarkerName)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x005C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_393A[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_C_OpenRadial) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_OpenRadial");
static_assert(sizeof(W_PreMission_Tablet_C_OpenRadial) == 0x000078, "Wrong size on W_PreMission_Tablet_C_OpenRadial");
static_assert(offsetof(W_PreMission_Tablet_C_OpenRadial, Coordinates) == 0x000000, "Member 'W_PreMission_Tablet_C_OpenRadial::Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OpenRadial, K2Node_MakeStruct_Anchors) == 0x000008, "Member 'W_PreMission_Tablet_C_OpenRadial::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OpenRadial, K2Node_MakeStruct_AnchorData) == 0x000018, "Member 'W_PreMission_Tablet_C_OpenRadial::K2Node_MakeStruct_AnchorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OpenRadial, CallFunc_Create_ReturnValue) == 0x000040, "Member 'W_PreMission_Tablet_C_OpenRadial::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OpenRadial, K2Node_CreateDelegate_OutputDelegate) == 0x000048, "Member 'W_PreMission_Tablet_C_OpenRadial::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OpenRadial, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'W_PreMission_Tablet_C_OpenRadial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OpenRadial, K2Node_CreateDelegate_OutputDelegate_1) == 0x00005C, "Member 'W_PreMission_Tablet_C_OpenRadial::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OpenRadial, CallFunc_AddChildToCanvas_ReturnValue) == 0x000070, "Member 'W_PreMission_Tablet_C_OpenRadial::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.RadialMarkerSelected
// 0x0038 (0x0038 - 0x0000)
struct W_PreMission_Tablet_C_RadialMarkerSelected final 
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MarkerName;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningMarker                        K2Node_MakeStruct_PlanningMarker;                  // 0x0010(0x0028)(NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_RadialMarkerSelected) == 0x000004, "Wrong alignment on W_PreMission_Tablet_C_RadialMarkerSelected");
static_assert(sizeof(W_PreMission_Tablet_C_RadialMarkerSelected) == 0x000038, "Wrong size on W_PreMission_Tablet_C_RadialMarkerSelected");
static_assert(offsetof(W_PreMission_Tablet_C_RadialMarkerSelected, CategoryName) == 0x000000, "Member 'W_PreMission_Tablet_C_RadialMarkerSelected::CategoryName' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_RadialMarkerSelected, MarkerName) == 0x000008, "Member 'W_PreMission_Tablet_C_RadialMarkerSelected::MarkerName' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_RadialMarkerSelected, K2Node_MakeStruct_PlanningMarker) == 0x000010, "Member 'W_PreMission_Tablet_C_RadialMarkerSelected::K2Node_MakeStruct_PlanningMarker' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.OnKeyUp
// 0x0370 (0x0370 - 0x0000)
struct W_PreMission_Tablet_C_OnKeyUp final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0070(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x0128(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393B[0x5];                                     // 0x0143(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0148(0x00B8)()
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0200(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x02B8(0x00B8)()
};
static_assert(alignof(W_PreMission_Tablet_C_OnKeyUp) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_OnKeyUp");
static_assert(sizeof(W_PreMission_Tablet_C_OnKeyUp) == 0x000370, "Wrong size on W_PreMission_Tablet_C_OnKeyUp");
static_assert(offsetof(W_PreMission_Tablet_C_OnKeyUp, MyGeometry) == 0x000000, "Member 'W_PreMission_Tablet_C_OnKeyUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnKeyUp, InKeyEvent) == 0x000038, "Member 'W_PreMission_Tablet_C_OnKeyUp::InKeyEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnKeyUp, ReturnValue) == 0x000070, "Member 'W_PreMission_Tablet_C_OnKeyUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnKeyUp, CallFunc_GetKey_ReturnValue) == 0x000128, "Member 'W_PreMission_Tablet_C_OnKeyUp::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000140, "Member 'W_PreMission_Tablet_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000141, "Member 'W_PreMission_Tablet_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x000142, "Member 'W_PreMission_Tablet_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnKeyUp, CallFunc_Handled_ReturnValue) == 0x000148, "Member 'W_PreMission_Tablet_C_OnKeyUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnKeyUp, CallFunc_Unhandled_ReturnValue) == 0x000200, "Member 'W_PreMission_Tablet_C_OnKeyUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OnKeyUp, CallFunc_Handled_ReturnValue_1) == 0x0002B8, "Member 'W_PreMission_Tablet_C_OnKeyUp::CallFunc_Handled_ReturnValue_1' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.DisplayNoDataScreen
// 0x0009 (0x0009 - 0x0000)
struct W_PreMission_Tablet_C_DisplayNoDataScreen final 
{
public:
	bool                                          NoData;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_C_DisplayNoDataScreen) == 0x000001, "Wrong alignment on W_PreMission_Tablet_C_DisplayNoDataScreen");
static_assert(sizeof(W_PreMission_Tablet_C_DisplayNoDataScreen) == 0x000009, "Wrong size on W_PreMission_Tablet_C_DisplayNoDataScreen");
static_assert(offsetof(W_PreMission_Tablet_C_DisplayNoDataScreen, NoData) == 0x000000, "Member 'W_PreMission_Tablet_C_DisplayNoDataScreen::NoData' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_DisplayNoDataScreen, Temp_byte_Variable) == 0x000001, "Member 'W_PreMission_Tablet_C_DisplayNoDataScreen::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_DisplayNoDataScreen, Temp_byte_Variable_1) == 0x000002, "Member 'W_PreMission_Tablet_C_DisplayNoDataScreen::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_DisplayNoDataScreen, Temp_bool_Variable) == 0x000003, "Member 'W_PreMission_Tablet_C_DisplayNoDataScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_DisplayNoDataScreen, Temp_byte_Variable_2) == 0x000004, "Member 'W_PreMission_Tablet_C_DisplayNoDataScreen::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_DisplayNoDataScreen, Temp_byte_Variable_3) == 0x000005, "Member 'W_PreMission_Tablet_C_DisplayNoDataScreen::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_DisplayNoDataScreen, K2Node_Select_Default) == 0x000006, "Member 'W_PreMission_Tablet_C_DisplayNoDataScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_DisplayNoDataScreen, Temp_bool_Variable_1) == 0x000007, "Member 'W_PreMission_Tablet_C_DisplayNoDataScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_DisplayNoDataScreen, K2Node_Select_Default_1) == 0x000008, "Member 'W_PreMission_Tablet_C_DisplayNoDataScreen::K2Node_Select_Default_1' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.LoadScreen
// 0x0028 (0x0028 - 0x0000)
struct W_PreMission_Tablet_C_LoadScreen final 
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetRosterEnabled_RosterEnabled;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetActiveWidget_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IReadyOrNotUI_C>       K2Node_DynamicCast_AsReady_or_Not_UI;              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_LoadScreen) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_LoadScreen");
static_assert(sizeof(W_PreMission_Tablet_C_LoadScreen) == 0x000028, "Wrong size on W_PreMission_Tablet_C_LoadScreen");
static_assert(offsetof(W_PreMission_Tablet_C_LoadScreen, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'W_PreMission_Tablet_C_LoadScreen::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_LoadScreen, CallFunc_GetRosterEnabled_RosterEnabled) == 0x000001, "Member 'W_PreMission_Tablet_C_LoadScreen::CallFunc_GetRosterEnabled_RosterEnabled' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_LoadScreen, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000002, "Member 'W_PreMission_Tablet_C_LoadScreen::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_LoadScreen, CallFunc_IsEmpty_ReturnValue) == 0x000003, "Member 'W_PreMission_Tablet_C_LoadScreen::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_LoadScreen, CallFunc_GetActiveWidget_ReturnValue) == 0x000008, "Member 'W_PreMission_Tablet_C_LoadScreen::CallFunc_GetActiveWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_LoadScreen, K2Node_DynamicCast_AsReady_or_Not_UI) == 0x000010, "Member 'W_PreMission_Tablet_C_LoadScreen::K2Node_DynamicCast_AsReady_or_Not_UI' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_LoadScreen, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'W_PreMission_Tablet_C_LoadScreen::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.OpenRoster
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_Tablet_C_OpenRoster final 
{
public:
	class UWidget*                                CallFunc_Map_Find_Value;                           // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_OpenRoster) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_OpenRoster");
static_assert(sizeof(W_PreMission_Tablet_C_OpenRoster) == 0x000010, "Wrong size on W_PreMission_Tablet_C_OpenRoster");
static_assert(offsetof(W_PreMission_Tablet_C_OpenRoster, CallFunc_Map_Find_Value) == 0x000000, "Member 'W_PreMission_Tablet_C_OpenRoster::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OpenRoster, CallFunc_Map_Find_ReturnValue) == 0x000008, "Member 'W_PreMission_Tablet_C_OpenRoster::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_OpenRoster, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000009, "Member 'W_PreMission_Tablet_C_OpenRoster::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.Update Dpad Navigation
// 0x0088 (0x0088 - 0x0000)
struct W_PreMission_Tablet_C_Update_Dpad_Navigation final 
{
public:
	int32                                         NewLocalVar_1;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_393D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraDataInterfaceArrayBool*         NewLocalVar_0;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  buttonVisibilities;                                // 0x0010(0x0010)(Edit, BlueprintVisible)
	TArray<class UNiagaraDataInterfaceArrayBool*> AvailableButtons;                                  // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActiveButton_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393E[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UW_PremissionTablet_Button_C*>   CallFunc_WidgetGetChildrenOfClass_ChildWidgets;    // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
	class AReadyOrNotPlayerController*            CallFunc_GetReadyOrNotPlayerController_ReturnValue; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressed_ReturnValue;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasInputKeyJustPressed_ReturnValue_1;     // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393F[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3940[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PremissionTablet_Button_C*           CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_Update_Dpad_Navigation) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_Update_Dpad_Navigation");
static_assert(sizeof(W_PreMission_Tablet_C_Update_Dpad_Navigation) == 0x000088, "Wrong size on W_PreMission_Tablet_C_Update_Dpad_Navigation");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, NewLocalVar_1) == 0x000000, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, NewLocalVar_0) == 0x000008, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, buttonVisibilities) == 0x000010, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::buttonVisibilities' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, AvailableButtons) == 0x000020, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::AvailableButtons' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, Temp_int_Array_Index_Variable) == 0x000030, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_GetActiveButton_ReturnValue) == 0x00003C, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_GetActiveButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000040, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_WidgetGetChildrenOfClass_ChildWidgets) == 0x000048, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_WidgetGetChildrenOfClass_ChildWidgets' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_GetReadyOrNotPlayerController_ReturnValue) == 0x000058, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_GetReadyOrNotPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_Array_Get_Item) == 0x000060, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_WasInputKeyJustPressed_ReturnValue) == 0x000068, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_WasInputKeyJustPressed_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000069, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_GetVisibility_ReturnValue) == 0x00006A, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_WasInputKeyJustPressed_ReturnValue_1) == 0x00006B, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_WasInputKeyJustPressed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00006C, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_Array_Add_ReturnValue) == 0x000070, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_Update_Dpad_Navigation, CallFunc_Less_IntInt_ReturnValue) == 0x000084, "Member 'W_PreMission_Tablet_C_Update_Dpad_Navigation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.SetActiveNavButton
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_Tablet_C_SetActiveNavButton final 
{
public:
	class UW_PremissionTablet_Button_C*           NewActiveButton;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_SetActiveNavButton) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_SetActiveNavButton");
static_assert(sizeof(W_PreMission_Tablet_C_SetActiveNavButton) == 0x000010, "Wrong size on W_PreMission_Tablet_C_SetActiveNavButton");
static_assert(offsetof(W_PreMission_Tablet_C_SetActiveNavButton, NewActiveButton) == 0x000000, "Member 'W_PreMission_Tablet_C_SetActiveNavButton::NewActiveButton' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_SetActiveNavButton, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'W_PreMission_Tablet_C_SetActiveNavButton::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_SetActiveNavButton, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000009, "Member 'W_PreMission_Tablet_C_SetActiveNavButton::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.SetActiveScreen
// 0x0038 (0x0038 - 0x0000)
struct W_PreMission_Tablet_C_SetActiveScreen final 
{
public:
	class UWidget*                                NewActiveScreen;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IReadyOrNotUI_C>       K2Node_DynamicCast_AsReady_or_Not_UI;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3941[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IReadyOrNotUI_C>       K2Node_DynamicCast_AsReady_or_Not_UI_1;            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_SetActiveScreen) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_SetActiveScreen");
static_assert(sizeof(W_PreMission_Tablet_C_SetActiveScreen) == 0x000038, "Wrong size on W_PreMission_Tablet_C_SetActiveScreen");
static_assert(offsetof(W_PreMission_Tablet_C_SetActiveScreen, NewActiveScreen) == 0x000000, "Member 'W_PreMission_Tablet_C_SetActiveScreen::NewActiveScreen' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_SetActiveScreen, K2Node_DynamicCast_AsReady_or_Not_UI) == 0x000008, "Member 'W_PreMission_Tablet_C_SetActiveScreen::K2Node_DynamicCast_AsReady_or_Not_UI' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_SetActiveScreen, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'W_PreMission_Tablet_C_SetActiveScreen::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_SetActiveScreen, K2Node_DynamicCast_AsReady_or_Not_UI_1) == 0x000020, "Member 'W_PreMission_Tablet_C_SetActiveScreen::K2Node_DynamicCast_AsReady_or_Not_UI_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_SetActiveScreen, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'W_PreMission_Tablet_C_SetActiveScreen::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_SetActiveScreen, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'W_PreMission_Tablet_C_SetActiveScreen::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_SetActiveScreen, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000032, "Member 'W_PreMission_Tablet_C_SetActiveScreen::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.InitNavigation
// 0x0050 (0x0050 - 0x0000)
struct W_PreMission_Tablet_C_InitNavigation final 
{
public:
	class FString                                 Temp_string_Variable;                              // 0x0000(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0010(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0020(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3942[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_3;                            // 0x0038(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInLobby_ReturnValue;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetRosterEnabled_RosterEnabled;           // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_InitNavigation) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_InitNavigation");
static_assert(sizeof(W_PreMission_Tablet_C_InitNavigation) == 0x000050, "Wrong size on W_PreMission_Tablet_C_InitNavigation");
static_assert(offsetof(W_PreMission_Tablet_C_InitNavigation, Temp_string_Variable) == 0x000000, "Member 'W_PreMission_Tablet_C_InitNavigation::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_InitNavigation, Temp_string_Variable_1) == 0x000010, "Member 'W_PreMission_Tablet_C_InitNavigation::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_InitNavigation, Temp_string_Variable_2) == 0x000020, "Member 'W_PreMission_Tablet_C_InitNavigation::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_InitNavigation, Temp_bool_Variable) == 0x000030, "Member 'W_PreMission_Tablet_C_InitNavigation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_InitNavigation, Temp_byte_Variable) == 0x000031, "Member 'W_PreMission_Tablet_C_InitNavigation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_InitNavigation, Temp_byte_Variable_1) == 0x000032, "Member 'W_PreMission_Tablet_C_InitNavigation::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_InitNavigation, CallFunc_IsValid_ReturnValue) == 0x000033, "Member 'W_PreMission_Tablet_C_InitNavigation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_InitNavigation, CallFunc_Not_PreBool_ReturnValue) == 0x000034, "Member 'W_PreMission_Tablet_C_InitNavigation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_InitNavigation, Temp_string_Variable_3) == 0x000038, "Member 'W_PreMission_Tablet_C_InitNavigation::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_InitNavigation, CallFunc_IsInLobby_ReturnValue) == 0x000048, "Member 'W_PreMission_Tablet_C_InitNavigation::CallFunc_IsInLobby_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_InitNavigation, K2Node_Select_Default) == 0x000049, "Member 'W_PreMission_Tablet_C_InitNavigation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_InitNavigation, CallFunc_GetRosterEnabled_RosterEnabled) == 0x00004A, "Member 'W_PreMission_Tablet_C_InitNavigation::CallFunc_GetRosterEnabled_RosterEnabled' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.GetRosterEnabled
// 0x0007 (0x0007 - 0x0000)
struct W_PreMission_Tablet_C_GetRosterEnabled final 
{
public:
	bool                                          RosterEnabled;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLobby_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMultiplayer_ReturnValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCommanderMode_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_GetRosterEnabled) == 0x000001, "Wrong alignment on W_PreMission_Tablet_C_GetRosterEnabled");
static_assert(sizeof(W_PreMission_Tablet_C_GetRosterEnabled) == 0x000007, "Wrong size on W_PreMission_Tablet_C_GetRosterEnabled");
static_assert(offsetof(W_PreMission_Tablet_C_GetRosterEnabled, RosterEnabled) == 0x000000, "Member 'W_PreMission_Tablet_C_GetRosterEnabled::RosterEnabled' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_GetRosterEnabled, CallFunc_IsLobby_ReturnValue) == 0x000001, "Member 'W_PreMission_Tablet_C_GetRosterEnabled::CallFunc_IsLobby_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_GetRosterEnabled, CallFunc_IsMultiplayer_ReturnValue) == 0x000002, "Member 'W_PreMission_Tablet_C_GetRosterEnabled::CallFunc_IsMultiplayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_GetRosterEnabled, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'W_PreMission_Tablet_C_GetRosterEnabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_GetRosterEnabled, CallFunc_IsCommanderMode_ReturnValue) == 0x000004, "Member 'W_PreMission_Tablet_C_GetRosterEnabled::CallFunc_IsCommanderMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_GetRosterEnabled, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'W_PreMission_Tablet_C_GetRosterEnabled::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_C_GetRosterEnabled, CallFunc_BooleanOR_ReturnValue_1) == 0x000006, "Member 'W_PreMission_Tablet_C_GetRosterEnabled::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_Tablet_C_BackPage final 
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_C_BackPage) == 0x000001, "Wrong alignment on W_PreMission_Tablet_C_BackPage");
static_assert(sizeof(W_PreMission_Tablet_C_BackPage) == 0x000001, "Wrong size on W_PreMission_Tablet_C_BackPage");
static_assert(offsetof(W_PreMission_Tablet_C_BackPage, Handled) == 0x000000, "Member 'W_PreMission_Tablet_C_BackPage::Handled' has a wrong offset!");

// Function W_PreMission_Tablet.W_PreMission_Tablet_C.GetFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_Tablet_C_GetFocusTarget final 
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_PreMission_Tablet_C_GetFocusTarget");
static_assert(sizeof(W_PreMission_Tablet_C_GetFocusTarget) == 0x000008, "Wrong size on W_PreMission_Tablet_C_GetFocusTarget");
static_assert(offsetof(W_PreMission_Tablet_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_PreMission_Tablet_C_GetFocusTarget::Focus' has a wrong offset!");

}

