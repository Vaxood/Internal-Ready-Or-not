#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Credit

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ST_Style_Text_structs.hpp"
#include "ST_Credit_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Credit.W_Credit_C
// 0x0300 (0x0568 - 0x0268)
class UW_Credit_C final  : public UBaseCredit
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0268(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimRevealCreditsTitle;                            // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimRevealLegal;                                   // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimRevealNameOnly;                                // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimRevealHeader;                                  // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimReveal;                                        // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Credit;                                         // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_CreditsTitle;                                   // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Header;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Legal;                                          // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_NameOnly;                                       // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_CreditsTitle;                                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_Header;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_Legal;                                         // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_Name;                                          // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_NameOnly;                                      // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWrapBox*                               WB_Roles;                                          // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   FullName;                                          // 0x02F0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<class FText>                           Roles;                                             // 0x0308(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FST_Style_Text                         NameTextStyle;                                     // 0x0318(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FST_Style_Text                         RolesTextStyle;                                    // 0x03B8(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   CreditHeader;                                      // 0x0458(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FST_Credit                             CreditFlow;                                        // 0x0470(0x0098)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class UDataTable*                             CreditsDataTable;                                  // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHeader;                                          // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_31F9[0x7];                                     // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CreditsTitle;                                      // 0x0518(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   NameOnly;                                          // 0x0530(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   Legal;                                             // 0x0548(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          IsCreditsTitle;                                    // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsLegal;                                           // 0x0561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsNameOnly;                                        // 0x0562(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_W_Credit(int32 EntryPoint, class UW_Text_C* CallFunc_Create_ReturnValue, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, class UW_Text_C* CallFunc_Create_ReturnValue_1, bool K2Node_Event_IsGamepad, class FName K2Node_Event_PageName, bool K2Node_Event_IsDesignTime, class FText CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, int32 CallFunc_Subtract_IntInt_ReturnValue, class FText Temp_text_Variable, bool CallFunc_Greater_IntInt_ReturnValue, class UWrapBoxSlot* CallFunc_AddChildToWrapBox_ReturnValue, class UWrapBoxSlot* CallFunc_AddChildToWrapBox_ReturnValue_1, float K2Node_Event_Delay_1, float K2Node_Event_Delay, bool K2Node_Event_Collapse, class UUMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue, class UUMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue_1, class UUMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue_2, class UUMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue_3, class UUMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue_4, bool CallFunc_Not_PreBool_ReturnValue, class UUMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, class UUMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue_1, class UUMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue_2, class UUMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue_3, class UUMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue_4);
	void Hide(float Delay, bool Collapse);
	void Reveal(float Delay);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void ChangePage(class FName PageName);
	void SetInputMode(bool IsGamepad);
	void IsAnimating(bool* Animating, bool CallFunc_IsAnyAnimationPlaying_ReturnValue);
	void WhichAnimation(class UWidgetAnimation** Animation, bool CallFunc_IsAnimationPlaying_ReturnValue, bool CallFunc_IsAnimationPlaying_ReturnValue_1, bool CallFunc_IsAnimationPlaying_ReturnValue_2, bool CallFunc_IsAnimationPlaying_ReturnValue_3, bool CallFunc_IsAnimationPlaying_ReturnValue_4);
	void BackPage(bool* Handled);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Credit_C">();
	}
	static class UW_Credit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Credit_C>();
	}
};
static_assert(alignof(UW_Credit_C) == 0x000008, "Wrong alignment on UW_Credit_C");
static_assert(sizeof(UW_Credit_C) == 0x000568, "Wrong size on UW_Credit_C");
static_assert(offsetof(UW_Credit_C, UberGraphFrame) == 0x000268, "Member 'UW_Credit_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, AnimRevealCreditsTitle) == 0x000270, "Member 'UW_Credit_C::AnimRevealCreditsTitle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, AnimRevealLegal) == 0x000278, "Member 'UW_Credit_C::AnimRevealLegal' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, AnimRevealNameOnly) == 0x000280, "Member 'UW_Credit_C::AnimRevealNameOnly' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, AnimRevealHeader) == 0x000288, "Member 'UW_Credit_C::AnimRevealHeader' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, AnimReveal) == 0x000290, "Member 'UW_Credit_C::AnimReveal' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, HB_Credit) == 0x000298, "Member 'UW_Credit_C::HB_Credit' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, HB_CreditsTitle) == 0x0002A0, "Member 'UW_Credit_C::HB_CreditsTitle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, HB_Header) == 0x0002A8, "Member 'UW_Credit_C::HB_Header' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, HB_Legal) == 0x0002B0, "Member 'UW_Credit_C::HB_Legal' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, HB_NameOnly) == 0x0002B8, "Member 'UW_Credit_C::HB_NameOnly' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, Txt_CreditsTitle) == 0x0002C0, "Member 'UW_Credit_C::Txt_CreditsTitle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, Txt_Header) == 0x0002C8, "Member 'UW_Credit_C::Txt_Header' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, Txt_Legal) == 0x0002D0, "Member 'UW_Credit_C::Txt_Legal' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, Txt_Name) == 0x0002D8, "Member 'UW_Credit_C::Txt_Name' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, Txt_NameOnly) == 0x0002E0, "Member 'UW_Credit_C::Txt_NameOnly' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, WB_Roles) == 0x0002E8, "Member 'UW_Credit_C::WB_Roles' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, FullName) == 0x0002F0, "Member 'UW_Credit_C::FullName' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, Roles) == 0x000308, "Member 'UW_Credit_C::Roles' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, NameTextStyle) == 0x000318, "Member 'UW_Credit_C::NameTextStyle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, RolesTextStyle) == 0x0003B8, "Member 'UW_Credit_C::RolesTextStyle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, CreditHeader) == 0x000458, "Member 'UW_Credit_C::CreditHeader' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, CreditFlow) == 0x000470, "Member 'UW_Credit_C::CreditFlow' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, CreditsDataTable) == 0x000508, "Member 'UW_Credit_C::CreditsDataTable' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, IsHeader) == 0x000510, "Member 'UW_Credit_C::IsHeader' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, CreditsTitle) == 0x000518, "Member 'UW_Credit_C::CreditsTitle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, NameOnly) == 0x000530, "Member 'UW_Credit_C::NameOnly' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, Legal) == 0x000548, "Member 'UW_Credit_C::Legal' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, IsCreditsTitle) == 0x000560, "Member 'UW_Credit_C::IsCreditsTitle' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, IsLegal) == 0x000561, "Member 'UW_Credit_C::IsLegal' has a wrong offset!");
static_assert(offsetof(UW_Credit_C, IsNameOnly) == 0x000562, "Member 'UW_Credit_C::IsNameOnly' has a wrong offset!");

}

