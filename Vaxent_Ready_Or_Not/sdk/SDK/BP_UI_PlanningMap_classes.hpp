#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UI_PlanningMap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UI_PlanningMap.BP_UI_PlanningMap_C
// 0x0108 (0x0328 - 0x0220)
class ABP_UI_PlanningMap_C final  : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCineCameraComponent*                   MapCamera;                                         // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Prep_Map_Default;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          MapCameraActive;                                   // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_388B[0x3];                                     // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentZoom;                                       // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomIncrement;                                     // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxZoomDistance;                                   // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinZoomDistance;                                   // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PanningSpeed;                                      // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartingPos;                                       // 0x0268(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Panning;                                           // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_388C[0x3];                                     // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PanningBoundaryY;                                  // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PanningBoundaryX;                                  // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MapDynMat;                                         // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSpawnPoints>                   SpawnPoints;                                       // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AbsolutePanning;                                   // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_388D[0x7];                                     // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UI_PlanningMap_SpawnPoint_C*        NewVar_0;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_UI_PlanningMap_SpawnPoint_C*> SpawnPointComponents;                              // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	FMulticastInlineDelegateProperty_             OnZoomUpdated;                                     // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnChangeFloors;                                    // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FLevelFloorData>                Floors;                                            // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Initialized;                                       // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_388E[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CurrentMaterialParent;                             // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnFloorMaterialUpdated;                            // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          FloorMaterialUpdated;                              // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_388F[0x7];                                     // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_UI_PlanningMap_Marker_C*>    MapMarkerComponents;                               // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void OnZoomUpdated__DelegateSignature(float ZoomValue);
	void OnChangeFloors__DelegateSignature(int32 Floor);
	void OnFloorMaterialUpdated__DelegateSignature();
	void ExecuteUbergraph_BP_UI_PlanningMap(int32 EntryPoint, class APlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsActive_ReturnValue, class APlayerController* CallFunc_GetPlayerController_ReturnValue_1, TDelegate<void(class UObject* Loaded)> K2Node_CreateDelegate_OutputDelegate, float CallFunc_Divide_FloatFloat_ReturnValue, class UMaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_NotEqual_VectorVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue_1, const struct FVector& CallFunc_MakeVector_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int32 K2Node_CustomEvent_Floor, bool CallFunc_IsValidSoftObjectReference_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, class UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue_1, bool K2Node_CustomEvent_Panning, const struct FVector2D& K2Node_CustomEvent_CursorPos, bool CallFunc_BooleanAND_ReturnValue_1, float K2Node_Event_DeltaSeconds, class UObject* Temp_object_Variable, const struct FVector& CallFunc_VEase_ReturnValue, class UMaterialInterface* K2Node_DynamicCast_AsMaterial_Interface, bool K2Node_DynamicCast_bSuccess, const struct FHitResult& CallFunc_K2_SetRelativeLocation_SweepHitResult, class UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue_1, bool CallFunc_Not_PreBool_ReturnValue_1, bool K2Node_CustomEvent_Silent, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue_1, class UObject* K2Node_CustomEvent_Loaded, const struct FKey& K2Node_InputKeyEvent_Key, const struct FKey& K2Node_InputKeyEvent_Key_1);
	void RollOutMap();
	void ActivateMapCamera();
	void AnimateHide(bool Silent);
	void AnimateShow();
	void InitializeFloor();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void DeactivateCamera();
	void PanCamera(bool Param_Panning, const struct FVector2D& CursorPos);
	void ChangeFloors(int32 Floor);
	void OnLoaded_6AC405FF4BFE790347C0B19681EDEBD5(class UObject* Loaded);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void UserConstructionScript();
	void UpdateZoom(float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue);
	void AdditivePan();
	void AbsolutePan(const struct FVector2D& Delta, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Divide_FloatFloat_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DFloat_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DFloat_ReturnValue_1, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X_1, float CallFunc_BreakVector2D_Y_1, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue_1, float CallFunc_FClamp_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DFloat_ReturnValue_2, float CallFunc_BreakVector2D_X_2, float CallFunc_BreakVector2D_Y_2, float CallFunc_FClamp_ReturnValue_1, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FHitResult& CallFunc_K2_SetRelativeLocation_SweepHitResult);
	void GetMapMaterial(bool ForceUpdate, class UMaterialInstanceDynamic** Param_MapDynMat, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, class UMaterialInterface* CallFunc_GetMaterial_ReturnValue, class UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);
	void GetCurrentMapMaterial(class UMaterialInterface** CurrentMaterial, class UMaterialInterface* CallFunc_GetMaterial_ReturnValue);
	void SetMapMaterial(class UMaterialInterface* Material);
	void SpawnMapMarker(const struct FVector& Location, class UBP_UI_PlanningMap_Marker_C** OutputPin);
	void FillLevelDataFromTable(int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, const class FString& CallFunc_GetCurrentLevelName_ReturnValue, class FName CallFunc_Conv_StringToName_ReturnValue, const struct FSpawnPoints& CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, const struct FVector& CallFunc_MakeVector_ReturnValue, class UDataTable* CallFunc_GetLevelLookupDataTable_ReturnValue, const struct FTransform& CallFunc_MakeTransform_ReturnValue, const struct FLevelDataLookupTable& CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, class UBP_UI_PlanningMap_SpawnPoint_C* CallFunc_AddComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue_1, int32 CallFunc_Array_Add_ReturnValue_2, int32 CallFunc_Array_Add_ReturnValue_3, int32 CallFunc_Array_Add_ReturnValue_4);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UI_PlanningMap_C">();
	}
	static class ABP_UI_PlanningMap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UI_PlanningMap_C>();
	}
};
static_assert(alignof(ABP_UI_PlanningMap_C) == 0x000008, "Wrong alignment on ABP_UI_PlanningMap_C");
static_assert(sizeof(ABP_UI_PlanningMap_C) == 0x000328, "Wrong size on ABP_UI_PlanningMap_C");
static_assert(offsetof(ABP_UI_PlanningMap_C, UberGraphFrame) == 0x000220, "Member 'ABP_UI_PlanningMap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, MapCamera) == 0x000228, "Member 'ABP_UI_PlanningMap_C::MapCamera' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, SpringArm) == 0x000230, "Member 'ABP_UI_PlanningMap_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, Scene) == 0x000238, "Member 'ABP_UI_PlanningMap_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, Prep_Map_Default) == 0x000240, "Member 'ABP_UI_PlanningMap_C::Prep_Map_Default' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_UI_PlanningMap_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, MapCameraActive) == 0x000250, "Member 'ABP_UI_PlanningMap_C::MapCameraActive' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, CurrentZoom) == 0x000254, "Member 'ABP_UI_PlanningMap_C::CurrentZoom' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, ZoomIncrement) == 0x000258, "Member 'ABP_UI_PlanningMap_C::ZoomIncrement' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, MaxZoomDistance) == 0x00025C, "Member 'ABP_UI_PlanningMap_C::MaxZoomDistance' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, MinZoomDistance) == 0x000260, "Member 'ABP_UI_PlanningMap_C::MinZoomDistance' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, PanningSpeed) == 0x000264, "Member 'ABP_UI_PlanningMap_C::PanningSpeed' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, StartingPos) == 0x000268, "Member 'ABP_UI_PlanningMap_C::StartingPos' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, Panning) == 0x000274, "Member 'ABP_UI_PlanningMap_C::Panning' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, PanningBoundaryY) == 0x000278, "Member 'ABP_UI_PlanningMap_C::PanningBoundaryY' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, PanningBoundaryX) == 0x000280, "Member 'ABP_UI_PlanningMap_C::PanningBoundaryX' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, MapDynMat) == 0x000288, "Member 'ABP_UI_PlanningMap_C::MapDynMat' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, SpawnPoints) == 0x000290, "Member 'ABP_UI_PlanningMap_C::SpawnPoints' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, AbsolutePanning) == 0x0002A0, "Member 'ABP_UI_PlanningMap_C::AbsolutePanning' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, NewVar_0) == 0x0002A8, "Member 'ABP_UI_PlanningMap_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, SpawnPointComponents) == 0x0002B0, "Member 'ABP_UI_PlanningMap_C::SpawnPointComponents' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, OnZoomUpdated) == 0x0002C0, "Member 'ABP_UI_PlanningMap_C::OnZoomUpdated' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, OnChangeFloors) == 0x0002D0, "Member 'ABP_UI_PlanningMap_C::OnChangeFloors' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, Floors) == 0x0002E0, "Member 'ABP_UI_PlanningMap_C::Floors' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, Initialized) == 0x0002F0, "Member 'ABP_UI_PlanningMap_C::Initialized' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, CurrentMaterialParent) == 0x0002F8, "Member 'ABP_UI_PlanningMap_C::CurrentMaterialParent' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, OnFloorMaterialUpdated) == 0x000300, "Member 'ABP_UI_PlanningMap_C::OnFloorMaterialUpdated' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, FloorMaterialUpdated) == 0x000310, "Member 'ABP_UI_PlanningMap_C::FloorMaterialUpdated' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, MapMarkerComponents) == 0x000318, "Member 'ABP_UI_PlanningMap_C::MapMarkerComponents' has a wrong offset!");

}

