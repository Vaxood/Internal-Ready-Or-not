#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_LoadoutSlot_v2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_LoadoutSlot_v2.W_LoadoutSlot_v2_C
// 0x0260 (0x05A0 - 0x0340)
class UW_LoadoutSlot_v2_C final  : public ULoadoutSlot_V2
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimRevealSubtext;                                 // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BottomLine;                                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_DecrementSlot;                                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_IncrementSlot;                                 // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            Button;                                            // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 EquippedGlow;                                      // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                EquippedTag;                                       // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Slots;                                          // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_AttachmentIcon;                                // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_DivDetails;                                    // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_ItemIcon;                                      // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_SidebarFade;                                   // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_SidebarSolid;                                  // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Size_AttachmentIcon;                               // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Size_ItemIcon;                                     // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopLine;                                           // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Txt_ItemName;                                      // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Txt_SlotCount;                                     // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Txt_SlotName;                                      // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Txt_Subtext;                                       // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_GamepadDeco;                                    // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnClick;                                           // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSlateColor                            EquippedGreen;                                     // 0x0400(0x0028)(Edit, BlueprintVisible)
	struct FSlateColor                            NormalGrey;                                        // 0x0428(0x0028)(Edit, BlueprintVisible)
	struct FSlateColor                            SelectedRed;                                       // 0x0450(0x0028)(Edit, BlueprintVisible)
	struct FSlateColor                            HoveredWhite;                                      // 0x0478(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            DefaultWhite;                                      // 0x04A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnHover;                                           // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnUnhover;                                         // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          PreviewHovered;                                    // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PreviewPressed;                                    // 0x04E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PreviewEquipped;                                   // 0x04EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30EA[0x5];                                     // 0x04EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonButtonStyle>         ButtonStyle;                                       // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCommonButtonStyle>         GamepadButtonStyle;                                // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         DetailsFontSize;                                   // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GamepadDetailsFontSize;                            // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NameFontSize;                                      // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GamepadNameFontSize;                               // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreviewGamepad;                                    // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30EB[0x7];                                     // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Button_C*                            ParentButton;                                      // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnDoubleClick;                                     // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bMinimalLayout;                                    // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_30EC[0x7];                                     // 0x0531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonTextStyle>           FontStyle;                                         // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCommonTextStyle>           FontStyleHovered;                                  // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCommonTextStyle>           GamepadFontStyle;                                  // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCommonTextStyle>           GamepadFontStyleHovered;                           // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FText                                   CategoryOverrideText;                              // 0x0558(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          PreviewAttachment;                                 // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bMunitionSlot;                                     // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_30ED[0x6];                                     // 0x0572(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUpdated;                                         // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FText                                   CurrentSubtext;                                    // 0x0588(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void OnClick__DelegateSignature(class UW_LoadoutSlot_v2_C* TriggeringSlot);
	void OnHover__DelegateSignature(class UW_LoadoutSlot_v2_C* TriggeringSlot);
	void OnUnhover__DelegateSignature();
	void OnDoubleClick__DelegateSignature(class UW_LoadoutSlot_v2_C* TriggeringSlot);
	void OnUpdated__DelegateSignature();
	void ExecuteUbergraph_W_LoadoutSlot_v2(int32 EntryPoint, class UCommonInputSubsystem* CallFunc_GetLocalPlayerSubsystem_ReturnValue, bool CallFunc_GetEquipped_ReturnValue, ECommonInputType CallFunc_GetCurrentInputType_ReturnValue, bool CallFunc_GetEquipped_ReturnValue_1, bool CallFunc_GetEquipped_ReturnValue_2, bool CallFunc_GetEquipped_ReturnValue_3, bool CallFunc_GetEquipped_ReturnValue_4, class UW_Button_C* K2Node_ComponentBoundEvent_Button_4, class UW_Button_C* K2Node_ComponentBoundEvent_Button_3, class APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_HasUserFocus_ReturnValue, class UW_LoadoutSlot_C* K2Node_Event_CurrentSlot, const struct FSavedLoadout& K2Node_Event_ActiveLoadout, class FName K2Node_Event_PageName, class UW_Button_C* K2Node_ComponentBoundEvent_Button_2, class UUMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, bool K2Node_Event_IsGamepad, const struct FFocusEvent& K2Node_Event_InFocusEvent, ECommonInputType K2Node_CustomEvent_bNewInputType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_GetEquipped_ReturnValue_5, class UArmourMaterial* K2Node_Event_Item, class FText K2Node_CustomEvent_ItemName, class FText K2Node_CustomEvent_SlotName, class FText K2Node_CustomEvent_Subtext, class UTexture2D* K2Node_CustomEvent_ItemImage, bool CallFunc_IsValid_ReturnValue, bool K2Node_Event_IsDesignTime, class FName K2Node_Event_OptionNameID, class UW_Loadout_C* K2Node_Event_LoadoutWidget, const TMap<EItemCategory, class UClass*>& K2Node_Event_ItemCategory, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue_1, const struct FSlateColor& K2Node_MakeStruct_SlateColor, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, const struct FSlateColor& K2Node_MakeStruct_SlateColor_1, float K2Node_Event_Delay_1, bool K2Node_Event_Collapse, const struct FSlateColor& K2Node_Select_Default, float K2Node_Event_Delay, class UW_Button_C* K2Node_ComponentBoundEvent_Button_1, class UW_Button_C* K2Node_ComponentBoundEvent_Button, class FText CallFunc_GetMunitionTypeText_MunitionText, class FText K2Node_Event_Text, bool K2Node_Event_Show, class FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_IsNewSubtext_ReturnValue, TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate);
	void ShowSubtext(class FText& Text, bool Show);
	void OnSlotsUpdated();
	void BndEvt__W_LoadoutSlot_v2_btn_IncrementSlot_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature(class UW_Button_C* Param_Button);
	void BndEvt__W_LoadoutSlot_v2_btn_DecrementSlot_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature(class UW_Button_C* Param_Button);
	void Reveal(float Delay);
	void Hide(float Delay, bool Collapse);
	void RefreshAttachmentImage();
	void RefreshItemImage();
	void SetManualDetails(class FText Param_ItemName, class FText SlotName, class FText Subtext, class UTexture2D* Param_ItemImage);
	void SetArmorMaterial(class UArmourMaterial* Item);
	void InputMethodChanged(ECommonInputType bNewInputType);
	void SetInputMode(bool IsGamepad);
	void BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_0_DoubleClicked__DelegateSignature(class UW_Button_C* Param_Button);
	void ChangePage(class FName PageName);
	void UpdateActiveLoadout(const struct FSavedLoadout& ActiveLoadout);
	void UpdateCurrentSlot(class UW_LoadoutSlot_C* CurrentSlot);
	void BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_9_Released__DelegateSignature();
	void BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_8_Pressed__DelegateSignature();
	void BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_7_Unhovered__DelegateSignature();
	void BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_6_Hovered__DelegateSignature(class UW_Button_C* Param_Button);
	void BndEvt__W_LoadoutSlot_v2_Button_K2Node_ComponentBoundEvent_5_Clicked__DelegateSignature(class UW_Button_C* Param_Button);
	void OnEquipped();
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void HeaderSubpageNavigation(class FName OptionNameID);
	void SetLoadoutWidget(class UW_Loadout_C* LoadoutWidget);
	void UpdateCurrentItemMap(const TMap<EItemCategory, class UClass*>& ItemCategory);
	struct FSlateColor GetNormalColorByState(bool Temp_bool_Variable, bool Temp_bool_Variable_1, const struct FSlateColor& K2Node_Select_Default, const struct FSlateColor& K2Node_Select_Default_1);
	void UpdateStyle(bool Param_bUseGamepad, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, bool Temp_bool_Variable_1, ESlateVisibility Temp_byte_Variable_2, bool Temp_bool_Variable_2, bool Temp_bool_Variable_3, ESlateVisibility Temp_byte_Variable_3, ESlateVisibility Temp_byte_Variable_4, bool CallFunc_BooleanOR_ReturnValue, ESlateVisibility K2Node_Select_Default, ESlateVisibility K2Node_Select_Default_1, ESlateVisibility K2Node_Select_Default_2, TSubclassOf<class UCommonButtonStyle> K2Node_Select_Default_3);
	void AdjustFontSize(class UTextBlock* TextWidget, int32 FontSize, struct FSlateFontInfo* Font, const struct FSlateFontInfo& K2Node_MakeStruct_SlateFontInfo);
	void UpdateNameFont(bool Temp_bool_Variable, TSubclassOf<class UCommonTextStyle> CallFunc_GetNormalFontSyles_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, TSubclassOf<class UCommonTextStyle> CallFunc_GetGamepadFontStyles_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, TSubclassOf<class UCommonTextStyle> K2Node_Select_Default);
	void UpdateDetailFontSize(int32 CallFunc_SelectInt_ReturnValue, const struct FSlateFontInfo& CallFunc_AdjustFontSize_Font, const struct FSlateFontInfo& CallFunc_AdjustFontSize_Font_1);
	struct FSlateColor GetEquippedColorByState(bool Temp_bool_Variable, bool Temp_bool_Variable_1, const struct FSlateColor& K2Node_Select_Default, const struct FSlateColor& K2Node_Select_Default_1);
	void BindToButton(class UW_Button_C* Param_ParentButton, bool BindClicks, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_2, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_3, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_4, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_5, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_6);
	void BindSelectedState(class UW_Button_C* Param_ParentButton, bool CallFunc_GetSelected_ReturnValue);
	void BindHovered(class UW_Button_C* Param_ParentButton, bool CallFunc_GetEquipped_ReturnValue);
	void BindPressedState(bool CallFunc_GetEquipped_ReturnValue, bool CallFunc_IsPressed_ReturnValue);
	void BindUnhovered(bool CallFunc_GetEquipped_ReturnValue);
	void BindClick(class UW_Button_C* Param_ParentButton);
	void BindDoubleClick(class UW_Button_C* Param_ParentButton);
	void UnbindFromButton(TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_2, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_3, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_4, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_5, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_6);
	TSubclassOf<class UCommonTextStyle> GetNormalFontSyles(bool Temp_bool_Variable, TSubclassOf<class UCommonTextStyle> K2Node_Select_Default);
	TSubclassOf<class UCommonTextStyle> GetGamepadFontStyles(bool Temp_bool_Variable, TSubclassOf<class UCommonTextStyle> K2Node_Select_Default);
	void SetVisualState(bool Hovered, bool Pressed, bool Equipped, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, bool Temp_bool_Variable_1, ESlateVisibility Temp_byte_Variable_2, ESlateVisibility Temp_byte_Variable_3, bool Temp_bool_Variable_2, const struct FVector2D& Temp_struct_Variable, const struct FVector2D& Temp_struct_Variable_1, bool Temp_bool_Variable_3, ESlateVisibility K2Node_Select_Default, const struct FVector2D& K2Node_Select_Default_1, const struct FSlateColor& CallFunc_GetEquippedColorByState_ReturnValue, ESlateVisibility K2Node_Select_Default_2, const struct FSlateColor& CallFunc_GetNormalColorByState_ReturnValue, const struct FSlateColor& K2Node_Select_Default_3);
	void RefreshInfo(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, class FText CallFunc_GetItemClassText_Category_Text, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, class FText CallFunc_GetAttachmentSlotText_SlotText);
	void SetIconVisibility(bool SmallIcon, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, bool Temp_bool_Variable_1, ESlateVisibility Temp_byte_Variable_2, ESlateVisibility Temp_byte_Variable_3, ESlateVisibility K2Node_Select_Default, ESlateVisibility K2Node_Select_Default_1);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent, EUINavigation CallFunc_Key_GetNavigationDirectionFromKey_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue_1, const struct FEventReply& CallFunc_Unhandled_ReturnValue, const struct FEventReply& CallFunc_Unhandled_ReturnValue_1, const struct FEventReply& CallFunc_Handled_ReturnValue);
	bool IsNewSubtext(class FText Text, bool CallFunc_TextIsEmpty_ReturnValue, bool CallFunc_NotEqual_TextText_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
	bool MunitionsMaxed(class AReadyOrNotGameState* CallFunc_GetReadyOrNotGameState_ReturnValue, int32 CallFunc_GetCurrentSlotCount_ReturnValue, int32 CallFunc_GetMaximumSlotCount_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);
	void RefreshMunitionButtons(class FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_MunitionsMaxed_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);
	void BackPage(bool* Handled);

	void GetFocusTarget(class UWidget** Focus, bool CallFunc_IsValid_ReturnValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_LoadoutSlot_v2_C">();
	}
	static class UW_LoadoutSlot_v2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_LoadoutSlot_v2_C>();
	}
};
static_assert(alignof(UW_LoadoutSlot_v2_C) == 0x000008, "Wrong alignment on UW_LoadoutSlot_v2_C");
static_assert(sizeof(UW_LoadoutSlot_v2_C) == 0x0005A0, "Wrong size on UW_LoadoutSlot_v2_C");
static_assert(offsetof(UW_LoadoutSlot_v2_C, UberGraphFrame) == 0x000340, "Member 'UW_LoadoutSlot_v2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, AnimRevealSubtext) == 0x000348, "Member 'UW_LoadoutSlot_v2_C::AnimRevealSubtext' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, BottomLine) == 0x000350, "Member 'UW_LoadoutSlot_v2_C::BottomLine' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, btn_DecrementSlot) == 0x000358, "Member 'UW_LoadoutSlot_v2_C::btn_DecrementSlot' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, btn_IncrementSlot) == 0x000360, "Member 'UW_LoadoutSlot_v2_C::btn_IncrementSlot' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, Button) == 0x000368, "Member 'UW_LoadoutSlot_v2_C::Button' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, EquippedGlow) == 0x000370, "Member 'UW_LoadoutSlot_v2_C::EquippedGlow' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, EquippedTag) == 0x000378, "Member 'UW_LoadoutSlot_v2_C::EquippedTag' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, HB_Slots) == 0x000380, "Member 'UW_LoadoutSlot_v2_C::HB_Slots' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, Img_AttachmentIcon) == 0x000388, "Member 'UW_LoadoutSlot_v2_C::Img_AttachmentIcon' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, Img_DivDetails) == 0x000390, "Member 'UW_LoadoutSlot_v2_C::Img_DivDetails' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, Img_ItemIcon) == 0x000398, "Member 'UW_LoadoutSlot_v2_C::Img_ItemIcon' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, Img_SidebarFade) == 0x0003A0, "Member 'UW_LoadoutSlot_v2_C::Img_SidebarFade' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, Img_SidebarSolid) == 0x0003A8, "Member 'UW_LoadoutSlot_v2_C::Img_SidebarSolid' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, Size_AttachmentIcon) == 0x0003B0, "Member 'UW_LoadoutSlot_v2_C::Size_AttachmentIcon' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, Size_ItemIcon) == 0x0003B8, "Member 'UW_LoadoutSlot_v2_C::Size_ItemIcon' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, TopLine) == 0x0003C0, "Member 'UW_LoadoutSlot_v2_C::TopLine' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, Txt_ItemName) == 0x0003C8, "Member 'UW_LoadoutSlot_v2_C::Txt_ItemName' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, Txt_SlotCount) == 0x0003D0, "Member 'UW_LoadoutSlot_v2_C::Txt_SlotCount' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, Txt_SlotName) == 0x0003D8, "Member 'UW_LoadoutSlot_v2_C::Txt_SlotName' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, Txt_Subtext) == 0x0003E0, "Member 'UW_LoadoutSlot_v2_C::Txt_Subtext' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, VB_GamepadDeco) == 0x0003E8, "Member 'UW_LoadoutSlot_v2_C::VB_GamepadDeco' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, OnClick) == 0x0003F0, "Member 'UW_LoadoutSlot_v2_C::OnClick' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, EquippedGreen) == 0x000400, "Member 'UW_LoadoutSlot_v2_C::EquippedGreen' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, NormalGrey) == 0x000428, "Member 'UW_LoadoutSlot_v2_C::NormalGrey' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, SelectedRed) == 0x000450, "Member 'UW_LoadoutSlot_v2_C::SelectedRed' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, HoveredWhite) == 0x000478, "Member 'UW_LoadoutSlot_v2_C::HoveredWhite' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, DefaultWhite) == 0x0004A0, "Member 'UW_LoadoutSlot_v2_C::DefaultWhite' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, OnHover) == 0x0004C8, "Member 'UW_LoadoutSlot_v2_C::OnHover' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, OnUnhover) == 0x0004D8, "Member 'UW_LoadoutSlot_v2_C::OnUnhover' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, PreviewHovered) == 0x0004E8, "Member 'UW_LoadoutSlot_v2_C::PreviewHovered' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, PreviewPressed) == 0x0004E9, "Member 'UW_LoadoutSlot_v2_C::PreviewPressed' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, PreviewEquipped) == 0x0004EA, "Member 'UW_LoadoutSlot_v2_C::PreviewEquipped' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, ButtonStyle) == 0x0004F0, "Member 'UW_LoadoutSlot_v2_C::ButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, GamepadButtonStyle) == 0x0004F8, "Member 'UW_LoadoutSlot_v2_C::GamepadButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, DetailsFontSize) == 0x000500, "Member 'UW_LoadoutSlot_v2_C::DetailsFontSize' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, GamepadDetailsFontSize) == 0x000504, "Member 'UW_LoadoutSlot_v2_C::GamepadDetailsFontSize' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, NameFontSize) == 0x000508, "Member 'UW_LoadoutSlot_v2_C::NameFontSize' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, GamepadNameFontSize) == 0x00050C, "Member 'UW_LoadoutSlot_v2_C::GamepadNameFontSize' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, PreviewGamepad) == 0x000510, "Member 'UW_LoadoutSlot_v2_C::PreviewGamepad' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, ParentButton) == 0x000518, "Member 'UW_LoadoutSlot_v2_C::ParentButton' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, OnDoubleClick) == 0x000520, "Member 'UW_LoadoutSlot_v2_C::OnDoubleClick' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, bMinimalLayout) == 0x000530, "Member 'UW_LoadoutSlot_v2_C::bMinimalLayout' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, FontStyle) == 0x000538, "Member 'UW_LoadoutSlot_v2_C::FontStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, FontStyleHovered) == 0x000540, "Member 'UW_LoadoutSlot_v2_C::FontStyleHovered' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, GamepadFontStyle) == 0x000548, "Member 'UW_LoadoutSlot_v2_C::GamepadFontStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, GamepadFontStyleHovered) == 0x000550, "Member 'UW_LoadoutSlot_v2_C::GamepadFontStyleHovered' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, CategoryOverrideText) == 0x000558, "Member 'UW_LoadoutSlot_v2_C::CategoryOverrideText' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, PreviewAttachment) == 0x000570, "Member 'UW_LoadoutSlot_v2_C::PreviewAttachment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, bMunitionSlot) == 0x000571, "Member 'UW_LoadoutSlot_v2_C::bMunitionSlot' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, OnUpdated) == 0x000578, "Member 'UW_LoadoutSlot_v2_C::OnUpdated' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_v2_C, CurrentSubtext) == 0x000588, "Member 'UW_LoadoutSlot_v2_C::CurrentSubtext' has a wrong offset!");

}

