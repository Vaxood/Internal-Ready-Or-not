#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_Ammo

#include "Basic.hpp"


namespace SDK::Params
{

// Function AC_Ammo.AC_Ammo_C.ReloadCurve
// 0x002C (0x002C - 0x0000)
struct AC_Ammo_C_ReloadCurve final 
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Return_Value;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         E;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NegateFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Ammo_C_ReloadCurve) == 0x000004, "Wrong alignment on AC_Ammo_C_ReloadCurve");
static_assert(sizeof(AC_Ammo_C_ReloadCurve) == 0x00002C, "Wrong size on AC_Ammo_C_ReloadCurve");
static_assert(offsetof(AC_Ammo_C_ReloadCurve, X) == 0x000000, "Member 'AC_Ammo_C_ReloadCurve::X' has a wrong offset!");
static_assert(offsetof(AC_Ammo_C_ReloadCurve, Return_Value) == 0x000004, "Member 'AC_Ammo_C_ReloadCurve::Return_Value' has a wrong offset!");
static_assert(offsetof(AC_Ammo_C_ReloadCurve, E) == 0x000008, "Member 'AC_Ammo_C_ReloadCurve::E' has a wrong offset!");
static_assert(offsetof(AC_Ammo_C_ReloadCurve, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'AC_Ammo_C_ReloadCurve::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Ammo_C_ReloadCurve, CallFunc_NegateFloat_ReturnValue) == 0x000010, "Member 'AC_Ammo_C_ReloadCurve::CallFunc_NegateFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Ammo_C_ReloadCurve, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000014, "Member 'AC_Ammo_C_ReloadCurve::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Ammo_C_ReloadCurve, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'AC_Ammo_C_ReloadCurve::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Ammo_C_ReloadCurve, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'AC_Ammo_C_ReloadCurve::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Ammo_C_ReloadCurve, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000020, "Member 'AC_Ammo_C_ReloadCurve::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Ammo_C_ReloadCurve, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'AC_Ammo_C_ReloadCurve::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Ammo_C_ReloadCurve, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000028, "Member 'AC_Ammo_C_ReloadCurve::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function AC_Ammo.AC_Ammo_C.CalculateCurve
// 0x000C (0x000C - 0x0000)
struct AC_Ammo_C_CalculateCurve final 
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LogisticCurve_Return_Value;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Ammo_C_CalculateCurve) == 0x000004, "Wrong alignment on AC_Ammo_C_CalculateCurve");
static_assert(sizeof(AC_Ammo_C_CalculateCurve) == 0x00000C, "Wrong size on AC_Ammo_C_CalculateCurve");
static_assert(offsetof(AC_Ammo_C_CalculateCurve, X) == 0x000000, "Member 'AC_Ammo_C_CalculateCurve::X' has a wrong offset!");
static_assert(offsetof(AC_Ammo_C_CalculateCurve, ReturnValue) == 0x000004, "Member 'AC_Ammo_C_CalculateCurve::ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Ammo_C_CalculateCurve, CallFunc_LogisticCurve_Return_Value) == 0x000008, "Member 'AC_Ammo_C_CalculateCurve::CallFunc_LogisticCurve_Return_Value' has a wrong offset!");

}

