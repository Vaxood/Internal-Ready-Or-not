#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_StandardSlider

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "StandardSliderTypes_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_StandardSlider.W_StandardSlider_C
// 0x0128 (0x0388 - 0x0260)
class UW_StandardSlider_C final  : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                HighlightButton;                                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_71;                                    // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBox_136;                                      // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SliderValueText;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                TheSlider;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DescriptionTextWidget;                             // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   Description;                                       // 0x0298(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	EStandardSliderTypes                          SliderType;                                        // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_1B83[0x3];                                     // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SliderFloatMin;                                    // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         SliderIntegerMin;                                  // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         SliderIntegerMax;                                  // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         SliderIntegerStep;                                 // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         SliderFloatMax;                                    // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         SliderFloatStep;                                   // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         PreviewFloatValue;                                 // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         FloatValue;                                        // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IntegerValue;                                      // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         QualityValue;                                      // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviewIntegerValue;                               // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         PreviewQualityValue;                               // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_1B84[0x4];                                     // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFloatValueChanged;                               // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnIntegralValueChanged;                            // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnQualityValueChanged;                             // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bDisplayAsPercent;                                 // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_1B85[0x7];                                     // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PercentageFormat;                                  // 0x0320(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         SupportedResolutions;                              // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 ResolutionValue;                                   // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnResolutionValueChanged;                          // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          SnapToGrid;                                        // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_1B86[0x7];                                     // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDlssValueChanged;                                // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         SliderTextSizeRatio;                               // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void OnFloatValueChanged__DelegateSignature(float NewFloatValue, float NewSliderValue);
	void OnIntegralValueChanged__DelegateSignature(int32 NewIntegerValue, float NewSliderValue);
	void OnQualityValueChanged__DelegateSignature(int32 NewQualityValue, float NewSliderValue);
	void OnResolutionValueChanged__DelegateSignature(const class FString& NewResolutionValue, float NewSliderValue);
	void OnDlssValueChanged__DelegateSignature(int32 NewIntegerValue, float NewSliderValue);
	void ExecuteUbergraph_W_StandardSlider(int32 EntryPoint, struct FPointerEvent& K2Node_Event_MouseEvent, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue_1, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue_2, float CallFunc_NormalizeToRange_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue_3, float CallFunc_Conv_IntToFloat_ReturnValue_4, float CallFunc_NormalizeToRange_ReturnValue_1, float CallFunc_Conv_IntToFloat_ReturnValue_5, float CallFunc_Conv_IntToFloat_ReturnValue_6, float CallFunc_Conv_IntToFloat_ReturnValue_7, float CallFunc_NormalizeToRange_ReturnValue_2, bool K2Node_Event_IsDesignTime, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_SetFloatValue_NewValue, int32 CallFunc_SetIntegralValue_NewValue, float CallFunc_NormalizeToRange_ReturnValue_3, float K2Node_ComponentBoundEvent_Value, float CallFunc_Conv_IntToFloat_ReturnValue_8, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_NormalizeToRange_ReturnValue_4, int32 CallFunc_Round_ReturnValue, int32 CallFunc_Clamp_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue_1, int32 CallFunc_Round_ReturnValue_1, float CallFunc_Multiply_FloatFloat_ReturnValue_2, int32 CallFunc_Clamp_ReturnValue_1, int32 CallFunc_Round_ReturnValue_2, int32 CallFunc_Clamp_ReturnValue_2, float CallFunc_Multiply_FloatFloat_ReturnValue_3, int32 CallFunc_Round_ReturnValue_3, float CallFunc_Multiply_FloatFloat_ReturnValue_4, int32 CallFunc_Clamp_ReturnValue_3, float CallFunc_Add_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess_1, int32 CallFunc_Array_Length_ReturnValue, const class FString& CallFunc_Array_Get_Item, float CallFunc_Multiply_IntFloat_ReturnValue, int32 CallFunc_Round_ReturnValue_4, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Clamp_ReturnValue_4, const class FString& CallFunc_Array_Get_Item_1, int32 CallFunc_Subtract_IntInt_ReturnValue_1, TArray<class FString>& CallFunc_GetSupportedScreenResolutions_Resolutions, bool CallFunc_GetSupportedScreenResolutions_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue_9, float CallFunc_Multiply_FloatFloat_ReturnValue_5, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, int32 CallFunc_Array_Length_ReturnValue_1, float CallFunc_GetNormalizedValue_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue_2, float CallFunc_Conv_IntToFloat_ReturnValue_10, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_GridSnap_Float_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue_1, float CallFunc_GridSnap_Float_ReturnValue_1, float CallFunc_Divide_FloatFloat_ReturnValue_2, float CallFunc_GridSnap_Float_ReturnValue_2, const struct FSlateChildSize& K2Node_MakeStruct_SlateChildSize, class UHorizontalBoxSlot* K2Node_DynamicCast_AsHorizontal_Box_Slot, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_Length_ReturnValue_2, float CallFunc_Conv_IntToFloat_ReturnValue_11, int32 CallFunc_Subtract_IntInt_ReturnValue_3, float CallFunc_Conv_IntToFloat_ReturnValue_12, float CallFunc_Conv_IntToFloat_ReturnValue_13, float CallFunc_NormalizeToRange_ReturnValue_5, float CallFunc_NormalizeToRange_ReturnValue_6, float CallFunc_Conv_IntToFloat_ReturnValue_14, float CallFunc_Add_FloatFloat_ReturnValue_1, int32 CallFunc_Round_ReturnValue_5, int32 CallFunc_Clamp_ReturnValue_5, float CallFunc_Divide_FloatFloat_ReturnValue_3, float CallFunc_GridSnap_Float_ReturnValue_3, float CallFunc_Divide_FloatFloat_ReturnValue_4, float CallFunc_GridSnap_Float_ReturnValue_4, float CallFunc_FClamp_ReturnValue, const struct FGeometry& K2Node_Event_MyGeometry, struct FPointerEvent& K2Node_Event_MouseEvent_1);
	void OnMouseLeave(struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent);
	void BndEvt__TheSlider_K2Node_ComponentBoundEvent_2_OnMouseCaptureEndEvent__DelegateSignature();
	void BndEvt__TheSlider_K2Node_ComponentBoundEvent_1_OnMouseCaptureBeginEvent__DelegateSignature();
	void BndEvt__TheSlider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void UpdateSliderText(int32 Temp_int_Variable, class FText Temp_text_Variable, class FText Temp_text_Variable_1, class FText Temp_text_Variable_2, class FText K2Node_Select_Default, float CallFunc_GetNormalizedValue_ReturnValue, class FText CallFunc_GenerateFSRQualityString_ReturnValue, class FText CallFunc_GenerateDlssQualityString_ReturnValue, class FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, class FText CallFunc_Conv_FloatToText_ReturnValue, int32 CallFunc_Round_ReturnValue, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, class FText CallFunc_Conv_IntToText_ReturnValue, class FText CallFunc_Format_ReturnValue, class FText CallFunc_GenerateQualityString_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
	void SetFloatValue(float NewFloat, float* NewValue, float CallFunc_FClamp_ReturnValue, float CallFunc_NormalizeToRange_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void SetIntegralValue(int32 NewInteger, int32* NewValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue_1, int32 CallFunc_Clamp_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue_2, float CallFunc_NormalizeToRange_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void SetQualityValue(int32 NewQuality, int32 CallFunc_Clamp_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_NormalizeToRange_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void SetResolutionValue(const class FString& Resolution, class FText CallFunc_Conv_StringToText_ReturnValue, int32 CallFunc_Array_Find_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue_1, float CallFunc_Divide_FloatFloat_ReturnValue);
	void AddFloatValue(float Value, float* NewValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_SetFloatValue_NewValue);
	void AddIntegralValue(int32 Value, int32* NewValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_SetIntegralValue_NewValue);
	void SetDLSSQualityValue(int32 NewQuality, int32 CallFunc_Clamp_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_NormalizeToRange_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void SetFSRQualityValue(int32 NewQuality, int32 CallFunc_Clamp_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_NormalizeToRange_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);
	void SetFrameGenerationValue(int32 NewQuality, int32 CallFunc_Clamp_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_NormalizeToRange_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_StandardSlider_C">();
	}
	static class UW_StandardSlider_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_StandardSlider_C>();
	}
};
static_assert(alignof(UW_StandardSlider_C) == 0x000008, "Wrong alignment on UW_StandardSlider_C");
static_assert(sizeof(UW_StandardSlider_C) == 0x000388, "Wrong size on UW_StandardSlider_C");
static_assert(offsetof(UW_StandardSlider_C, UberGraphFrame) == 0x000260, "Member 'UW_StandardSlider_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, HighlightButton) == 0x000268, "Member 'UW_StandardSlider_C::HighlightButton' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, ProgressBar_71) == 0x000270, "Member 'UW_StandardSlider_C::ProgressBar_71' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, ScaleBox_136) == 0x000278, "Member 'UW_StandardSlider_C::ScaleBox_136' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, SliderValueText) == 0x000280, "Member 'UW_StandardSlider_C::SliderValueText' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, TheSlider) == 0x000288, "Member 'UW_StandardSlider_C::TheSlider' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, DescriptionTextWidget) == 0x000290, "Member 'UW_StandardSlider_C::DescriptionTextWidget' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, Description) == 0x000298, "Member 'UW_StandardSlider_C::Description' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, SliderType) == 0x0002B0, "Member 'UW_StandardSlider_C::SliderType' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, SliderFloatMin) == 0x0002B4, "Member 'UW_StandardSlider_C::SliderFloatMin' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, SliderIntegerMin) == 0x0002B8, "Member 'UW_StandardSlider_C::SliderIntegerMin' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, SliderIntegerMax) == 0x0002BC, "Member 'UW_StandardSlider_C::SliderIntegerMax' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, SliderIntegerStep) == 0x0002C0, "Member 'UW_StandardSlider_C::SliderIntegerStep' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, SliderFloatMax) == 0x0002C4, "Member 'UW_StandardSlider_C::SliderFloatMax' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, SliderFloatStep) == 0x0002C8, "Member 'UW_StandardSlider_C::SliderFloatStep' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, PreviewFloatValue) == 0x0002CC, "Member 'UW_StandardSlider_C::PreviewFloatValue' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, FloatValue) == 0x0002D0, "Member 'UW_StandardSlider_C::FloatValue' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, IntegerValue) == 0x0002D4, "Member 'UW_StandardSlider_C::IntegerValue' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, QualityValue) == 0x0002D8, "Member 'UW_StandardSlider_C::QualityValue' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, PreviewIntegerValue) == 0x0002DC, "Member 'UW_StandardSlider_C::PreviewIntegerValue' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, PreviewQualityValue) == 0x0002E0, "Member 'UW_StandardSlider_C::PreviewQualityValue' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, OnFloatValueChanged) == 0x0002E8, "Member 'UW_StandardSlider_C::OnFloatValueChanged' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, OnIntegralValueChanged) == 0x0002F8, "Member 'UW_StandardSlider_C::OnIntegralValueChanged' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, OnQualityValueChanged) == 0x000308, "Member 'UW_StandardSlider_C::OnQualityValueChanged' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, bDisplayAsPercent) == 0x000318, "Member 'UW_StandardSlider_C::bDisplayAsPercent' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, PercentageFormat) == 0x000320, "Member 'UW_StandardSlider_C::PercentageFormat' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, SupportedResolutions) == 0x000338, "Member 'UW_StandardSlider_C::SupportedResolutions' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, ResolutionValue) == 0x000348, "Member 'UW_StandardSlider_C::ResolutionValue' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, OnResolutionValueChanged) == 0x000358, "Member 'UW_StandardSlider_C::OnResolutionValueChanged' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, SnapToGrid) == 0x000368, "Member 'UW_StandardSlider_C::SnapToGrid' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, OnDlssValueChanged) == 0x000370, "Member 'UW_StandardSlider_C::OnDlssValueChanged' has a wrong offset!");
static_assert(offsetof(UW_StandardSlider_C, SliderTextSizeRatio) == 0x000380, "Member 'UW_StandardSlider_C::SliderTextSizeRatio' has a wrong offset!");

}

