#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_AK103

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ANIMBP_AK103.ANIMBP_AK103_C
// 0x0250 (0x0520 - 0x02D0)
class UANIMBP_AK103_C final  : public URoNWeaponAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02D8(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0308(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0350(0x0080)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x03D0(0x0108)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x04D8(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x04F8(0x0020)()
	float                                         Mag01Alpha;                                        // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ANIMBP_AK103(int32 EntryPoint);
	void AnimNotify_SpawnPhysMag();
	void AnimNotify_ReplaceMags();
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANIMBP_AK103_C">();
	}
	static class UANIMBP_AK103_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANIMBP_AK103_C>();
	}
};
static_assert(alignof(UANIMBP_AK103_C) == 0x000010, "Wrong alignment on UANIMBP_AK103_C");
static_assert(sizeof(UANIMBP_AK103_C) == 0x000520, "Wrong size on UANIMBP_AK103_C");
static_assert(offsetof(UANIMBP_AK103_C, UberGraphFrame) == 0x0002D0, "Member 'UANIMBP_AK103_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UANIMBP_AK103_C, AnimGraphNode_Root) == 0x0002D8, "Member 'UANIMBP_AK103_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UANIMBP_AK103_C, AnimGraphNode_Slot) == 0x000308, "Member 'UANIMBP_AK103_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UANIMBP_AK103_C, AnimGraphNode_SequencePlayer) == 0x000350, "Member 'UANIMBP_AK103_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_AK103_C, AnimGraphNode_ModifyBone) == 0x0003D0, "Member 'UANIMBP_AK103_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UANIMBP_AK103_C, AnimGraphNode_LocalToComponentSpace) == 0x0004D8, "Member 'UANIMBP_AK103_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_AK103_C, AnimGraphNode_ComponentToLocalSpace) == 0x0004F8, "Member 'UANIMBP_AK103_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_AK103_C, Mag01Alpha) == 0x000518, "Member 'UANIMBP_AK103_C::Mag01Alpha' has a wrong offset!");

}

