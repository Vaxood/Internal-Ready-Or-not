#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VICODynamicsPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct VICODynamicsPlugin.VDSettings
// 0x0044 (0x0044 - 0x0000)
struct FVDSettings final 
{
public:
	uint8                                         bOverride_ReserveParticleBudget : 1;               // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_NumberOfThreadsToUse : 1;                // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EnableSelfCollision : 1;                 // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EnablePhysXSceneCollision : 1;           // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_PerformExtraCollisionResolutionLoop : 1; // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EnableExplicitRigidBodyCollision : 1;    // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SimulationFramerate : 1;                 // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RunSimulationOnWorkerThread : 1;         // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WorkerThreadCoreAffinity : 1;            // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SimulationIterations : 1;                // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ConstraintIterations : 1;                // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ConstrainSimulationTo2DPlane : 1;        // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_PlaneOrigin : 1;                         // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_PlaneNormal : 1;                         // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CachePerFrameResults : 1;                // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CacheOnlyCollisionsWithStaticRigidBodies : 1; // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CacheNonHitsAlso : 1;                    // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1740[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReserveParticleBudget;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfThreadsToUse;                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSelfCollision;                               // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnablePhysXSceneCollision;                         // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PerformExtraCollisionResolutionLoop;               // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableExplicitRigidBodyCollision;                  // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimulationFramerate;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RunSimulationOnWorkerThread;                       // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1741[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WorkerThreadCoreAffinity;                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimulationIterations;                              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConstraintIterations;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConstrainSimulationTo2DPlane;                      // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1742[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlaneOrigin;                                       // 0x0028(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneNormal;                                       // 0x0034(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCachePerFrameResults : 1;                         // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCacheOnlyCollisionsWithStaticRigidBodies : 1;     // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCacheNonHitsAlso : 1;                             // 0x0040(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DrawCollisionDebug : 1;                            // 0x0040(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowOnScreenStats : 1;                            // 0x0040(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1743[0x3];                                     // 0x0041(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVDSettings) == 0x000004, "Wrong alignment on FVDSettings");
static_assert(sizeof(FVDSettings) == 0x000044, "Wrong size on FVDSettings");
static_assert(offsetof(FVDSettings, ReserveParticleBudget) == 0x000004, "Member 'FVDSettings::ReserveParticleBudget' has a wrong offset!");
static_assert(offsetof(FVDSettings, NumberOfThreadsToUse) == 0x000008, "Member 'FVDSettings::NumberOfThreadsToUse' has a wrong offset!");
static_assert(offsetof(FVDSettings, EnableSelfCollision) == 0x00000C, "Member 'FVDSettings::EnableSelfCollision' has a wrong offset!");
static_assert(offsetof(FVDSettings, EnablePhysXSceneCollision) == 0x00000D, "Member 'FVDSettings::EnablePhysXSceneCollision' has a wrong offset!");
static_assert(offsetof(FVDSettings, PerformExtraCollisionResolutionLoop) == 0x00000E, "Member 'FVDSettings::PerformExtraCollisionResolutionLoop' has a wrong offset!");
static_assert(offsetof(FVDSettings, EnableExplicitRigidBodyCollision) == 0x00000F, "Member 'FVDSettings::EnableExplicitRigidBodyCollision' has a wrong offset!");
static_assert(offsetof(FVDSettings, SimulationFramerate) == 0x000010, "Member 'FVDSettings::SimulationFramerate' has a wrong offset!");
static_assert(offsetof(FVDSettings, RunSimulationOnWorkerThread) == 0x000014, "Member 'FVDSettings::RunSimulationOnWorkerThread' has a wrong offset!");
static_assert(offsetof(FVDSettings, WorkerThreadCoreAffinity) == 0x000018, "Member 'FVDSettings::WorkerThreadCoreAffinity' has a wrong offset!");
static_assert(offsetof(FVDSettings, SimulationIterations) == 0x00001C, "Member 'FVDSettings::SimulationIterations' has a wrong offset!");
static_assert(offsetof(FVDSettings, ConstraintIterations) == 0x000020, "Member 'FVDSettings::ConstraintIterations' has a wrong offset!");
static_assert(offsetof(FVDSettings, ConstrainSimulationTo2DPlane) == 0x000024, "Member 'FVDSettings::ConstrainSimulationTo2DPlane' has a wrong offset!");
static_assert(offsetof(FVDSettings, PlaneOrigin) == 0x000028, "Member 'FVDSettings::PlaneOrigin' has a wrong offset!");
static_assert(offsetof(FVDSettings, PlaneNormal) == 0x000034, "Member 'FVDSettings::PlaneNormal' has a wrong offset!");

// ScriptStruct VICODynamicsPlugin.VDCachedParticleStartLocation
// 0x0010 (0x0010 - 0x0000)
struct FVDCachedParticleStartLocation final 
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAttached;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1744[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVDCachedParticleStartLocation) == 0x000004, "Wrong alignment on FVDCachedParticleStartLocation");
static_assert(sizeof(FVDCachedParticleStartLocation) == 0x000010, "Wrong size on FVDCachedParticleStartLocation");
static_assert(offsetof(FVDCachedParticleStartLocation, Location) == 0x000000, "Member 'FVDCachedParticleStartLocation::Location' has a wrong offset!");
static_assert(offsetof(FVDCachedParticleStartLocation, bIsAttached) == 0x00000C, "Member 'FVDCachedParticleStartLocation::bIsAttached' has a wrong offset!");

// ScriptStruct VICODynamicsPlugin.VDCollision
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FVDCollision final 
{
public:
	uint8                                         Pad_1745[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVDCollision) == 0x000004, "Wrong alignment on FVDCollision");
static_assert(sizeof(FVDCollision) == 0x000020, "Wrong size on FVDCollision");

// ScriptStruct VICODynamicsPlugin.RopePiece
// 0x0008 (0x0008 - 0x0000)
struct FRopePiece final 
{
public:
	int32                                         StartParticleIndex;                                // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndParticleIndex;                                  // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRopePiece) == 0x000004, "Wrong alignment on FRopePiece");
static_assert(sizeof(FRopePiece) == 0x000008, "Wrong size on FRopePiece");
static_assert(offsetof(FRopePiece, StartParticleIndex) == 0x000000, "Member 'FRopePiece::StartParticleIndex' has a wrong offset!");
static_assert(offsetof(FRopePiece, EndParticleIndex) == 0x000004, "Member 'FRopePiece::EndParticleIndex' has a wrong offset!");

// ScriptStruct VICODynamicsPlugin.VDCollisionSettings
// 0x0040 (0x0040 - 0x0000)
struct FVDCollisionSettings final 
{
public:
	ECollisionChannel                             ObjectType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             CollisionEnabled;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1746[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCollisionResponse                     CollisionResponse;                                 // 0x0008(0x0030)(Edit, NativeAccessSpecifierPublic)
	class FName                                   CollisionProfileName;                              // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVDCollisionSettings) == 0x000008, "Wrong alignment on FVDCollisionSettings");
static_assert(sizeof(FVDCollisionSettings) == 0x000040, "Wrong size on FVDCollisionSettings");
static_assert(offsetof(FVDCollisionSettings, ObjectType) == 0x000000, "Member 'FVDCollisionSettings::ObjectType' has a wrong offset!");
static_assert(offsetof(FVDCollisionSettings, CollisionEnabled) == 0x000001, "Member 'FVDCollisionSettings::CollisionEnabled' has a wrong offset!");
static_assert(offsetof(FVDCollisionSettings, CollisionResponse) == 0x000008, "Member 'FVDCollisionSettings::CollisionResponse' has a wrong offset!");
static_assert(offsetof(FVDCollisionSettings, CollisionProfileName) == 0x000038, "Member 'FVDCollisionSettings::CollisionProfileName' has a wrong offset!");

// ScriptStruct VICODynamicsPlugin.VDParticleInfo
// 0x001C (0x001C - 0x0000)
struct FVDParticleInfo final 
{
public:
	uint8                                         IsFree : 1;                                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         IsRigidBodyCollisionEnabled : 1;                   // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         IsParticleCollisionEnabled : 1;                    // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1747[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficient;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVDParticleInfo) == 0x000004, "Wrong alignment on FVDParticleInfo");
static_assert(sizeof(FVDParticleInfo) == 0x00001C, "Wrong size on FVDParticleInfo");
static_assert(offsetof(FVDParticleInfo, Radius) == 0x000004, "Member 'FVDParticleInfo::Radius' has a wrong offset!");
static_assert(offsetof(FVDParticleInfo, Location) == 0x000008, "Member 'FVDParticleInfo::Location' has a wrong offset!");
static_assert(offsetof(FVDParticleInfo, Mass) == 0x000014, "Member 'FVDParticleInfo::Mass' has a wrong offset!");
static_assert(offsetof(FVDParticleInfo, DragCoefficient) == 0x000018, "Member 'FVDParticleInfo::DragCoefficient' has a wrong offset!");

// ScriptStruct VICODynamicsPlugin.VDParticleAttachment
// 0x0060 (0x0060 - 0x0000)
struct FVDParticleAttachment final 
{
public:
	int32                                         ParticleIndex;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachingToAnotherParticle;                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimulateTensionForces;                             // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1748[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRelative;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1749[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComponentReference                    ComponentRef;                                      // 0x0018(0x0028)(Edit, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174A[0x18];                                    // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVDParticleAttachment) == 0x000008, "Wrong alignment on FVDParticleAttachment");
static_assert(sizeof(FVDParticleAttachment) == 0x000060, "Wrong size on FVDParticleAttachment");
static_assert(offsetof(FVDParticleAttachment, ParticleIndex) == 0x000000, "Member 'FVDParticleAttachment::ParticleIndex' has a wrong offset!");
static_assert(offsetof(FVDParticleAttachment, AttachingToAnotherParticle) == 0x000004, "Member 'FVDParticleAttachment::AttachingToAnotherParticle' has a wrong offset!");
static_assert(offsetof(FVDParticleAttachment, SimulateTensionForces) == 0x000005, "Member 'FVDParticleAttachment::SimulateTensionForces' has a wrong offset!");
static_assert(offsetof(FVDParticleAttachment, Location) == 0x000008, "Member 'FVDParticleAttachment::Location' has a wrong offset!");
static_assert(offsetof(FVDParticleAttachment, IsRelative) == 0x000014, "Member 'FVDParticleAttachment::IsRelative' has a wrong offset!");
static_assert(offsetof(FVDParticleAttachment, ComponentRef) == 0x000018, "Member 'FVDParticleAttachment::ComponentRef' has a wrong offset!");
static_assert(offsetof(FVDParticleAttachment, Socket) == 0x000040, "Member 'FVDParticleAttachment::Socket' has a wrong offset!");

// ScriptStruct VICODynamicsPlugin.VDSimulationTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FVDSimulationTickFunction final  : public FTickFunction
{
public:
	uint8                                         Pad_174B[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVDSimulationTickFunction) == 0x000008, "Wrong alignment on FVDSimulationTickFunction");
static_assert(sizeof(FVDSimulationTickFunction) == 0x000030, "Wrong size on FVDSimulationTickFunction");

}

