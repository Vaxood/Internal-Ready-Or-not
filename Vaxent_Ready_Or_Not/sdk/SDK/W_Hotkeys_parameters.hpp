#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Hotkeys

#include "Basic.hpp"


namespace SDK::Params
{

// Function W_Hotkeys.W_Hotkeys_C.ExecuteUbergraph_W_Hotkeys
// 0x00B0 (0x00B0 - 0x0000)
struct W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AReadyOrNotCharacter* Character, class ABaseItem* LastItemBeforeQuickThrow, class ABaseItem* QuickThrowGrenade)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class ABaseItem* QuickThrowGrenade)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(bool bUsingSecondarySight, class ABaseMagazineWeapon* Weapon)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class AReadyOrNotCharacter* Character, bool bOn)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3CC2[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotCharacter*                   K2Node_CustomEvent_Character_1;                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseItem*                              K2Node_CustomEvent_LastItemBeforeQuickThrow;       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseItem*                              K2Node_CustomEvent_QuickThrowGrenade_1;            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseItem*                              K2Node_CustomEvent_QuickThrowGrenade;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bUsingSecondarySight;           // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CC3[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseMagazineWeapon*                    K2Node_CustomEvent_Weapon;                         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotCharacter*                   K2Node_CustomEvent_Character;                      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bOn;                            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EquippedWeaponHasLaserAttachment_ReturnValue; // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EquippedWeaponHasLightAttachment_ReturnValue; // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CC4[0x5];                                     // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCharacter*                       K2Node_DynamicCast_AsPlayer_Character;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys) == 0x000008, "Wrong alignment on W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys");
static_assert(sizeof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys) == 0x0000B0, "Wrong size on W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, EntryPoint) == 0x000000, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CreateDelegate_OutputDelegate_4) == 0x000044, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CustomEvent_Character_1) == 0x000058, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CustomEvent_Character_1' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CustomEvent_LastItemBeforeQuickThrow) == 0x000060, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CustomEvent_LastItemBeforeQuickThrow' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CustomEvent_QuickThrowGrenade_1) == 0x000068, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CustomEvent_QuickThrowGrenade_1' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CustomEvent_QuickThrowGrenade) == 0x000070, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CustomEvent_QuickThrowGrenade' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CustomEvent_bUsingSecondarySight) == 0x000078, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CustomEvent_bUsingSecondarySight' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CustomEvent_Weapon) == 0x000080, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CustomEvent_Weapon' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CustomEvent_Character) == 0x000088, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CustomEvent_Character' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_CustomEvent_bOn) == 0x000090, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_CustomEvent_bOn' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, CallFunc_EquippedWeaponHasLaserAttachment_ReturnValue) == 0x000091, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::CallFunc_EquippedWeaponHasLaserAttachment_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, CallFunc_EquippedWeaponHasLightAttachment_ReturnValue) == 0x000092, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::CallFunc_EquippedWeaponHasLightAttachment_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000098, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_DynamicCast_AsPlayer_Character) == 0x0000A0, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_DynamicCast_AsPlayer_Character' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'W_Hotkeys_C_ExecuteUbergraph_W_Hotkeys::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function W_Hotkeys.W_Hotkeys_C.OnNightVisionGogglesToggled_Event_0
// 0x0010 (0x0010 - 0x0000)
struct W_Hotkeys_C_OnNightVisionGogglesToggled_Event_0 final 
{
public:
	class AReadyOrNotCharacter*                   Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOn;                                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Hotkeys_C_OnNightVisionGogglesToggled_Event_0) == 0x000008, "Wrong alignment on W_Hotkeys_C_OnNightVisionGogglesToggled_Event_0");
static_assert(sizeof(W_Hotkeys_C_OnNightVisionGogglesToggled_Event_0) == 0x000010, "Wrong size on W_Hotkeys_C_OnNightVisionGogglesToggled_Event_0");
static_assert(offsetof(W_Hotkeys_C_OnNightVisionGogglesToggled_Event_0, Character) == 0x000000, "Member 'W_Hotkeys_C_OnNightVisionGogglesToggled_Event_0::Character' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_OnNightVisionGogglesToggled_Event_0, bOn) == 0x000008, "Member 'W_Hotkeys_C_OnNightVisionGogglesToggled_Event_0::bOn' has a wrong offset!");

// Function W_Hotkeys.W_Hotkeys_C.OnSecondarySightToggled_Event_0
// 0x0010 (0x0010 - 0x0000)
struct W_Hotkeys_C_OnSecondarySightToggled_Event_0 final 
{
public:
	bool                                          bUsingSecondarySight;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CC5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseMagazineWeapon*                    Weapon;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Hotkeys_C_OnSecondarySightToggled_Event_0) == 0x000008, "Wrong alignment on W_Hotkeys_C_OnSecondarySightToggled_Event_0");
static_assert(sizeof(W_Hotkeys_C_OnSecondarySightToggled_Event_0) == 0x000010, "Wrong size on W_Hotkeys_C_OnSecondarySightToggled_Event_0");
static_assert(offsetof(W_Hotkeys_C_OnSecondarySightToggled_Event_0, bUsingSecondarySight) == 0x000000, "Member 'W_Hotkeys_C_OnSecondarySightToggled_Event_0::bUsingSecondarySight' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_OnSecondarySightToggled_Event_0, Weapon) == 0x000008, "Member 'W_Hotkeys_C_OnSecondarySightToggled_Event_0::Weapon' has a wrong offset!");

// Function W_Hotkeys.W_Hotkeys_C.OnQuickThrowEnd_Event_0
// 0x0008 (0x0008 - 0x0000)
struct W_Hotkeys_C_OnQuickThrowEnd_Event_0 final 
{
public:
	class ABaseItem*                              QuickThrowGrenade;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Hotkeys_C_OnQuickThrowEnd_Event_0) == 0x000008, "Wrong alignment on W_Hotkeys_C_OnQuickThrowEnd_Event_0");
static_assert(sizeof(W_Hotkeys_C_OnQuickThrowEnd_Event_0) == 0x000008, "Wrong size on W_Hotkeys_C_OnQuickThrowEnd_Event_0");
static_assert(offsetof(W_Hotkeys_C_OnQuickThrowEnd_Event_0, QuickThrowGrenade) == 0x000000, "Member 'W_Hotkeys_C_OnQuickThrowEnd_Event_0::QuickThrowGrenade' has a wrong offset!");

// Function W_Hotkeys.W_Hotkeys_C.OnQuickThrowStart_Event_0
// 0x0018 (0x0018 - 0x0000)
struct W_Hotkeys_C_OnQuickThrowStart_Event_0 final 
{
public:
	class AReadyOrNotCharacter*                   Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseItem*                              LastItemBeforeQuickThrow;                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseItem*                              QuickThrowGrenade;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Hotkeys_C_OnQuickThrowStart_Event_0) == 0x000008, "Wrong alignment on W_Hotkeys_C_OnQuickThrowStart_Event_0");
static_assert(sizeof(W_Hotkeys_C_OnQuickThrowStart_Event_0) == 0x000018, "Wrong size on W_Hotkeys_C_OnQuickThrowStart_Event_0");
static_assert(offsetof(W_Hotkeys_C_OnQuickThrowStart_Event_0, Character) == 0x000000, "Member 'W_Hotkeys_C_OnQuickThrowStart_Event_0::Character' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_OnQuickThrowStart_Event_0, LastItemBeforeQuickThrow) == 0x000008, "Member 'W_Hotkeys_C_OnQuickThrowStart_Event_0::LastItemBeforeQuickThrow' has a wrong offset!");
static_assert(offsetof(W_Hotkeys_C_OnQuickThrowStart_Event_0, QuickThrowGrenade) == 0x000010, "Member 'W_Hotkeys_C_OnQuickThrowStart_Event_0::QuickThrowGrenade' has a wrong offset!");

}

