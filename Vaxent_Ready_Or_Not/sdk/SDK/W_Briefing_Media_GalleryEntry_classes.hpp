#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Briefing_Media_GalleryEntry

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Briefing_Media_GalleryEntry.W_Briefing_Media_GalleryEntry_C
// 0x00B8 (0x0340 - 0x0288)
class UW_Briefing_Media_GalleryEntry_C final  : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_Button_C*                            btn_Entry;                                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Highlight;                                     // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       Img_Image;                                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Size_Entry;                                        // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FMissionPhoto                          MissionPhotoData;                                  // 0x02B0(0x0058)(Edit, BlueprintVisible, ExposeOnSpawn)
	FMulticastInlineDelegateProperty_             OnClick;                                           // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UTexture2D*                             Image;                                             // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Title;                                             // 0x0320(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bHighlighted;                                      // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSelected;                                         // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnClick__DelegateSignature(class UW_Briefing_Media_GalleryEntry_C* GalleryEntry);
	void ExecuteUbergraph_W_Briefing_Media_GalleryEntry(int32 EntryPoint, class UW_Button_C* K2Node_ComponentBoundEvent_Button);
	void BndEvt__W_Briefing_Media_GalleryEntry_W_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature(class UW_Button_C* Button);
	void Construct();
	void SetSelected(bool Selected);
	void UpdateVisualStyle(bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, const struct FLinearColor& CallFunc_GetColorByName_LinearColor, const struct FSlateColor& CallFunc_GetColorByName_SlateColor, const struct FLinearColor& CallFunc_GetColorByName_LinearColor_1, const struct FSlateColor& CallFunc_GetColorByName_SlateColor_1, const struct FLinearColor& CallFunc_SelectColor_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, ESlateVisibility K2Node_Select_Default);
	void SetHighlight(bool Highlighted);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Briefing_Media_GalleryEntry_C">();
	}
	static class UW_Briefing_Media_GalleryEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Briefing_Media_GalleryEntry_C>();
	}
};
static_assert(alignof(UW_Briefing_Media_GalleryEntry_C) == 0x000008, "Wrong alignment on UW_Briefing_Media_GalleryEntry_C");
static_assert(sizeof(UW_Briefing_Media_GalleryEntry_C) == 0x000340, "Wrong size on UW_Briefing_Media_GalleryEntry_C");
static_assert(offsetof(UW_Briefing_Media_GalleryEntry_C, UberGraphFrame) == 0x000288, "Member 'UW_Briefing_Media_GalleryEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Media_GalleryEntry_C, btn_Entry) == 0x000290, "Member 'UW_Briefing_Media_GalleryEntry_C::btn_Entry' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Media_GalleryEntry_C, Img_Highlight) == 0x000298, "Member 'UW_Briefing_Media_GalleryEntry_C::Img_Highlight' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Media_GalleryEntry_C, Img_Image) == 0x0002A0, "Member 'UW_Briefing_Media_GalleryEntry_C::Img_Image' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Media_GalleryEntry_C, Size_Entry) == 0x0002A8, "Member 'UW_Briefing_Media_GalleryEntry_C::Size_Entry' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Media_GalleryEntry_C, MissionPhotoData) == 0x0002B0, "Member 'UW_Briefing_Media_GalleryEntry_C::MissionPhotoData' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Media_GalleryEntry_C, OnClick) == 0x000308, "Member 'UW_Briefing_Media_GalleryEntry_C::OnClick' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Media_GalleryEntry_C, Image) == 0x000318, "Member 'UW_Briefing_Media_GalleryEntry_C::Image' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Media_GalleryEntry_C, Title) == 0x000320, "Member 'UW_Briefing_Media_GalleryEntry_C::Title' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Media_GalleryEntry_C, bHighlighted) == 0x000338, "Member 'UW_Briefing_Media_GalleryEntry_C::bHighlighted' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Media_GalleryEntry_C, bSelected) == 0x000339, "Member 'UW_Briefing_Media_GalleryEntry_C::bSelected' has a wrong offset!");

}

