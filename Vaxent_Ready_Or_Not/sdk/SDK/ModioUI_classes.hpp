#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModioUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "Engine_classes.hpp"
#include "ModioUI_structs.hpp"
#include "Modio_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "SlateCore_classes.hpp"
#include "Slate_structs.hpp"


namespace SDK
{

// Class ModioUI.ModioProceduralBrushParams
// 0x0000 (0x0028 - 0x0028)
class UModioProceduralBrushParams : public UObject
{
public:
	class UMaterialInterface* GetMaterialInstance();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioProceduralBrushParams">();
	}
	static class UModioProceduralBrushParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioProceduralBrushParams>();
	}
};
static_assert(alignof(UModioProceduralBrushParams) == 0x000008, "Wrong alignment on UModioProceduralBrushParams");
static_assert(sizeof(UModioProceduralBrushParams) == 0x000028, "Wrong size on UModioProceduralBrushParams");

// Class ModioUI.ModioSpecifiedMaterialParams
// 0x0008 (0x0030 - 0x0028)
class UModioSpecifiedMaterialParams final  : public UModioProceduralBrushParams
{
public:
	class UMaterialInterface*                     SpecifiedMaterial;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioSpecifiedMaterialParams">();
	}
	static class UModioSpecifiedMaterialParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioSpecifiedMaterialParams>();
	}
};
static_assert(alignof(UModioSpecifiedMaterialParams) == 0x000008, "Wrong alignment on UModioSpecifiedMaterialParams");
static_assert(sizeof(UModioSpecifiedMaterialParams) == 0x000030, "Wrong size on UModioSpecifiedMaterialParams");
static_assert(offsetof(UModioSpecifiedMaterialParams, SpecifiedMaterial) == 0x000028, "Member 'UModioSpecifiedMaterialParams::SpecifiedMaterial' has a wrong offset!");

// Class ModioUI.ModioWidgetBase
// 0x0000 (0x0108 - 0x0108)
class UModioWidgetBase : public UWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioWidgetBase">();
	}
	static class UModioWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioWidgetBase>();
	}
};
static_assert(alignof(UModioWidgetBase) == 0x000008, "Wrong alignment on UModioWidgetBase");
static_assert(sizeof(UModioWidgetBase) == 0x000108, "Wrong size on UModioWidgetBase");

// Class ModioUI.ModioMaterialData
// 0x0110 (0x0140 - 0x0030)
class UModioMaterialData final  : public UDataAsset
{
public:
	TMap<class FName, class UModioProceduralBrushParams*> NamedBrushMaterialsNew;                            // 0x0030(0x0050)(Edit, BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, class UModioRoundedRectangleMaterialParams*> RoundedRectangleParams;                            // 0x0080(0x0050)(Edit, BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, class UModioCheckBoxMaterialParams*> CheckBoxMaterialParams;                            // 0x00D0(0x0050)(Edit, BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DefaultRoundedRectangleMaterial;                   // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DefaultCheckboxMaterial;                           // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PngGlyphMaterial;                                  // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DefaultGlyphMaterial;                              // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioMaterialData">();
	}
	static class UModioMaterialData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioMaterialData>();
	}
};
static_assert(alignof(UModioMaterialData) == 0x000008, "Wrong alignment on UModioMaterialData");
static_assert(sizeof(UModioMaterialData) == 0x000140, "Wrong size on UModioMaterialData");
static_assert(offsetof(UModioMaterialData, NamedBrushMaterialsNew) == 0x000030, "Member 'UModioMaterialData::NamedBrushMaterialsNew' has a wrong offset!");
static_assert(offsetof(UModioMaterialData, RoundedRectangleParams) == 0x000080, "Member 'UModioMaterialData::RoundedRectangleParams' has a wrong offset!");
static_assert(offsetof(UModioMaterialData, CheckBoxMaterialParams) == 0x0000D0, "Member 'UModioMaterialData::CheckBoxMaterialParams' has a wrong offset!");
static_assert(offsetof(UModioMaterialData, DefaultRoundedRectangleMaterial) == 0x000120, "Member 'UModioMaterialData::DefaultRoundedRectangleMaterial' has a wrong offset!");
static_assert(offsetof(UModioMaterialData, DefaultCheckboxMaterial) == 0x000128, "Member 'UModioMaterialData::DefaultCheckboxMaterial' has a wrong offset!");
static_assert(offsetof(UModioMaterialData, PngGlyphMaterial) == 0x000130, "Member 'UModioMaterialData::PngGlyphMaterial' has a wrong offset!");
static_assert(offsetof(UModioMaterialData, DefaultGlyphMaterial) == 0x000138, "Member 'UModioMaterialData::DefaultGlyphMaterial' has a wrong offset!");

// Class ModioUI.FxWidget
// 0x0058 (0x0160 - 0x0108)
class UFxWidget final  : public UWidget
{
public:
	uint8                                         Pad_1822[0x20];                                    // 0x0108(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderScale;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RenderScaleOrigin;                                 // 0x012C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayoutScale;                                       // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              VisualOffset;                                      // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreClipping;                                   // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1823[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                ContentClass;                                      // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnGetContent;                                      // 0x0150(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FxWidget">();
	}
	static class UFxWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFxWidget>();
	}
};
static_assert(alignof(UFxWidget) == 0x000008, "Wrong alignment on UFxWidget");
static_assert(sizeof(UFxWidget) == 0x000160, "Wrong size on UFxWidget");
static_assert(offsetof(UFxWidget, RenderScale) == 0x000128, "Member 'UFxWidget::RenderScale' has a wrong offset!");
static_assert(offsetof(UFxWidget, RenderScaleOrigin) == 0x00012C, "Member 'UFxWidget::RenderScaleOrigin' has a wrong offset!");
static_assert(offsetof(UFxWidget, LayoutScale) == 0x000134, "Member 'UFxWidget::LayoutScale' has a wrong offset!");
static_assert(offsetof(UFxWidget, VisualOffset) == 0x000138, "Member 'UFxWidget::VisualOffset' has a wrong offset!");
static_assert(offsetof(UFxWidget, bIgnoreClipping) == 0x000140, "Member 'UFxWidget::bIgnoreClipping' has a wrong offset!");
static_assert(offsetof(UFxWidget, ContentClass) == 0x000148, "Member 'UFxWidget::ContentClass' has a wrong offset!");
static_assert(offsetof(UFxWidget, OnGetContent) == 0x000150, "Member 'UFxWidget::OnGetContent' has a wrong offset!");

// Class ModioUI.ModioDialogController
// 0x0238 (0x0340 - 0x0108)
class UModioDialogController final  : public UModioWidgetBase
{
public:
	class UModioDialogBaseInternal*               ActualDialog;                                      // 0x0108(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1824[0x44];                                    // 0x0110(0x0044)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       InvisibleButtonStyleRef;                           // 0x0154(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bCurrentlyDisplayingDialog;                        // 0x015C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1825[0x3];                                     // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         DialogInputValues;                                 // 0x0160(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct FInterpCurveFloat                      BlurCurve;                                         // 0x0170(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UModioDialogInfo>        AuthenticationChoiceDialog;                        // 0x0188(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UModioDialogInfo>        UnsubscribeConfirmationDialog;                     // 0x01B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UModioDialogInfo>        EmailAuthenticationDialog;                         // 0x01D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UModioDialogInfo>        ReportContentDialog;                               // 0x0200(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UModioDialogInfo>        ReportEmailDialog;                                 // 0x0228(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UModioDialogInfo>        UninstallConfirmationDialog;                       // 0x0250(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UModioDialogInfo>        TermsOfUseDialog;                                  // 0x0278(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UModioDialogInfo>        TermsOfUseFailDialog;                              // 0x02A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UModioDialogInfo>        ErrorDisplayDialog;                                // 0x02C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UModioDialogInfo>        LogoutConfirmationDialog;                          // 0x02F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UWidget>                    LoadingOverlay;                                    // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1826[0x10];                                    // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UModioDialogInfo*>               DialogStack;                                       // 0x0330(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	struct FEventReply HandleBackgroundClick(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent);
	void ShowErrorDialog(const struct FModioErrorCode& Ec, bool bCloseDialogsOnOK);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDialogController">();
	}
	static class UModioDialogController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDialogController>();
	}
};
static_assert(alignof(UModioDialogController) == 0x000008, "Wrong alignment on UModioDialogController");
static_assert(sizeof(UModioDialogController) == 0x000340, "Wrong size on UModioDialogController");
static_assert(offsetof(UModioDialogController, ActualDialog) == 0x000108, "Member 'UModioDialogController::ActualDialog' has a wrong offset!");
static_assert(offsetof(UModioDialogController, InvisibleButtonStyleRef) == 0x000154, "Member 'UModioDialogController::InvisibleButtonStyleRef' has a wrong offset!");
static_assert(offsetof(UModioDialogController, bCurrentlyDisplayingDialog) == 0x00015C, "Member 'UModioDialogController::bCurrentlyDisplayingDialog' has a wrong offset!");
static_assert(offsetof(UModioDialogController, DialogInputValues) == 0x000160, "Member 'UModioDialogController::DialogInputValues' has a wrong offset!");
static_assert(offsetof(UModioDialogController, BlurCurve) == 0x000170, "Member 'UModioDialogController::BlurCurve' has a wrong offset!");
static_assert(offsetof(UModioDialogController, AuthenticationChoiceDialog) == 0x000188, "Member 'UModioDialogController::AuthenticationChoiceDialog' has a wrong offset!");
static_assert(offsetof(UModioDialogController, UnsubscribeConfirmationDialog) == 0x0001B0, "Member 'UModioDialogController::UnsubscribeConfirmationDialog' has a wrong offset!");
static_assert(offsetof(UModioDialogController, EmailAuthenticationDialog) == 0x0001D8, "Member 'UModioDialogController::EmailAuthenticationDialog' has a wrong offset!");
static_assert(offsetof(UModioDialogController, ReportContentDialog) == 0x000200, "Member 'UModioDialogController::ReportContentDialog' has a wrong offset!");
static_assert(offsetof(UModioDialogController, ReportEmailDialog) == 0x000228, "Member 'UModioDialogController::ReportEmailDialog' has a wrong offset!");
static_assert(offsetof(UModioDialogController, UninstallConfirmationDialog) == 0x000250, "Member 'UModioDialogController::UninstallConfirmationDialog' has a wrong offset!");
static_assert(offsetof(UModioDialogController, TermsOfUseDialog) == 0x000278, "Member 'UModioDialogController::TermsOfUseDialog' has a wrong offset!");
static_assert(offsetof(UModioDialogController, TermsOfUseFailDialog) == 0x0002A0, "Member 'UModioDialogController::TermsOfUseFailDialog' has a wrong offset!");
static_assert(offsetof(UModioDialogController, ErrorDisplayDialog) == 0x0002C8, "Member 'UModioDialogController::ErrorDisplayDialog' has a wrong offset!");
static_assert(offsetof(UModioDialogController, LogoutConfirmationDialog) == 0x0002F0, "Member 'UModioDialogController::LogoutConfirmationDialog' has a wrong offset!");
static_assert(offsetof(UModioDialogController, LoadingOverlay) == 0x000318, "Member 'UModioDialogController::LoadingOverlay' has a wrong offset!");
static_assert(offsetof(UModioDialogController, DialogStack) == 0x000330, "Member 'UModioDialogController::DialogStack' has a wrong offset!");

// Class ModioUI.ModioAuthenticationContextUIDetails
// 0x0000 (0x0028 - 0x0028)
class IModioAuthenticationContextUIDetails final  : public IInterface
{
public:
	struct FModioUIAuthenticationProviderInfo GetProviderInfo();
	struct FModioTerms GetTerms();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioAuthenticationContextUIDetails">();
	}
	static class IModioAuthenticationContextUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioAuthenticationContextUIDetails>();
	}
};
static_assert(alignof(IModioAuthenticationContextUIDetails) == 0x000008, "Wrong alignment on IModioAuthenticationContextUIDetails");
static_assert(sizeof(IModioAuthenticationContextUIDetails) == 0x000028, "Wrong size on IModioAuthenticationContextUIDetails");

// Class ModioUI.ModioDialogInfo
// 0x0088 (0x00B0 - 0x0028)
class UModioDialogInfo final  : public UObject
{
public:
	class FText                                   TitleText;                                         // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UWidget>                    SubHeaderWidget;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          SubHeaderWidgetHAlign;                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            SubHeaderWidgetVAlign;                             // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1828[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DialogText;                                        // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UWidget>                    InputWidget;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          InputWidgetHAlign;                                 // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            InputWidgetVAlign;                                 // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStretchDirection                             InputWidgetScalingType;                            // 0x0072(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1829[0x1];                                     // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputWidgetHeightOverride;                         // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InputWidgetHintText;                               // 0x0078(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UWidget>                    ButtonAreaWidget;                                  // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          ButtonAreaWidgetHAlign;                            // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            ButtonAreaWidgetVAlign;                            // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182A[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModioDialogButtonInfo>         Buttons;                                           // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDialogInfo">();
	}
	static class UModioDialogInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDialogInfo>();
	}
};
static_assert(alignof(UModioDialogInfo) == 0x000008, "Wrong alignment on UModioDialogInfo");
static_assert(sizeof(UModioDialogInfo) == 0x0000B0, "Wrong size on UModioDialogInfo");
static_assert(offsetof(UModioDialogInfo, TitleText) == 0x000028, "Member 'UModioDialogInfo::TitleText' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, SubHeaderWidget) == 0x000040, "Member 'UModioDialogInfo::SubHeaderWidget' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, SubHeaderWidgetHAlign) == 0x000048, "Member 'UModioDialogInfo::SubHeaderWidgetHAlign' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, SubHeaderWidgetVAlign) == 0x000049, "Member 'UModioDialogInfo::SubHeaderWidgetVAlign' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, DialogText) == 0x000050, "Member 'UModioDialogInfo::DialogText' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, InputWidget) == 0x000068, "Member 'UModioDialogInfo::InputWidget' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, InputWidgetHAlign) == 0x000070, "Member 'UModioDialogInfo::InputWidgetHAlign' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, InputWidgetVAlign) == 0x000071, "Member 'UModioDialogInfo::InputWidgetVAlign' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, InputWidgetScalingType) == 0x000072, "Member 'UModioDialogInfo::InputWidgetScalingType' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, InputWidgetHeightOverride) == 0x000074, "Member 'UModioDialogInfo::InputWidgetHeightOverride' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, InputWidgetHintText) == 0x000078, "Member 'UModioDialogInfo::InputWidgetHintText' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, ButtonAreaWidget) == 0x000090, "Member 'UModioDialogInfo::ButtonAreaWidget' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, ButtonAreaWidgetHAlign) == 0x000098, "Member 'UModioDialogInfo::ButtonAreaWidgetHAlign' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, ButtonAreaWidgetVAlign) == 0x000099, "Member 'UModioDialogInfo::ButtonAreaWidgetVAlign' has a wrong offset!");
static_assert(offsetof(UModioDialogInfo, Buttons) == 0x0000A0, "Member 'UModioDialogInfo::Buttons' has a wrong offset!");

// Class ModioUI.ModioMenuBackgroundProvider
// 0x0000 (0x0028 - 0x0028)
class IModioMenuBackgroundProvider final  : public IInterface
{
public:
	class UMaterialInterface* GetBackgroundMaterial();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioMenuBackgroundProvider">();
	}
	static class IModioMenuBackgroundProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioMenuBackgroundProvider>();
	}
};
static_assert(alignof(IModioMenuBackgroundProvider) == 0x000008, "Wrong alignment on IModioMenuBackgroundProvider");
static_assert(sizeof(IModioMenuBackgroundProvider) == 0x000028, "Wrong size on IModioMenuBackgroundProvider");

// Class ModioUI.ModioUIWidgetStyleContainer
// 0x00A0 (0x00D0 - 0x0030)
class UModioUIWidgetStyleContainer : public USlateWidgetStyleContainerBase
{
public:
	TMap<class FName, struct FModioUIColorRef>    SerializedColors;                                  // 0x0030(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FModioUIMaterialRef> SerializedMaterials;                               // 0x0080(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIWidgetStyleContainer">();
	}
	static class UModioUIWidgetStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIWidgetStyleContainer>();
	}
};
static_assert(alignof(UModioUIWidgetStyleContainer) == 0x000008, "Wrong alignment on UModioUIWidgetStyleContainer");
static_assert(sizeof(UModioUIWidgetStyleContainer) == 0x0000D0, "Wrong size on UModioUIWidgetStyleContainer");
static_assert(offsetof(UModioUIWidgetStyleContainer, SerializedColors) == 0x000030, "Member 'UModioUIWidgetStyleContainer::SerializedColors' has a wrong offset!");
static_assert(offsetof(UModioUIWidgetStyleContainer, SerializedMaterials) == 0x000080, "Member 'UModioUIWidgetStyleContainer::SerializedMaterials' has a wrong offset!");

// Class ModioUI.ModioDialogStyleContainer
// 0x00B8 (0x0188 - 0x00D0)
class UModioDialogStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioDialogStyle                      Style;                                             // 0x00D0(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDialogStyleContainer">();
	}
	static class UModioDialogStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDialogStyleContainer>();
	}
};
static_assert(alignof(UModioDialogStyleContainer) == 0x000008, "Wrong alignment on UModioDialogStyleContainer");
static_assert(sizeof(UModioDialogStyleContainer) == 0x000188, "Wrong size on UModioDialogStyleContainer");
static_assert(offsetof(UModioDialogStyleContainer, Style) == 0x0000D0, "Member 'UModioDialogStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioUIAsyncHandlerWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIAsyncHandlerWidget final  : public IInterface
{
public:
	void LinkAsyncOperationWidget(TScriptInterface<class IModioUIAsyncOperationWidget>& Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIAsyncHandlerWidget">();
	}
	static class IModioUIAsyncHandlerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIAsyncHandlerWidget>();
	}
};
static_assert(alignof(IModioUIAsyncHandlerWidget) == 0x000008, "Wrong alignment on IModioUIAsyncHandlerWidget");
static_assert(sizeof(IModioUIAsyncHandlerWidget) == 0x000028, "Wrong size on IModioUIAsyncHandlerWidget");

// Class ModioUI.ModioUserWidgetBase
// 0x0018 (0x0278 - 0x0260)
class UModioUserWidgetBase : public UUserWidget
{
public:
	uint8                                         Pad_182B[0x8];                                     // 0x0260(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bRoutedSetDataSource;                              // 0x0268(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRoutedLoadExternalData;                           // 0x0269(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRoutedFinishLoadExternalData;                     // 0x026A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_182C[0x5];                                     // 0x026B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void FinishLoadExternalData(const struct FModioErrorCode& Ec);
	void LoadExternalData();
	void OnBeginLoadExternalData();
	void OnDataSourceUpdated();
	void OnFinishLoadExternalData(const struct FModioErrorCode& Ec);
	void SetDataSource(class UObject* NewDataSource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUserWidgetBase">();
	}
	static class UModioUserWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUserWidgetBase>();
	}
};
static_assert(alignof(UModioUserWidgetBase) == 0x000008, "Wrong alignment on UModioUserWidgetBase");
static_assert(sizeof(UModioUserWidgetBase) == 0x000278, "Wrong size on UModioUserWidgetBase");
static_assert(offsetof(UModioUserWidgetBase, bRoutedSetDataSource) == 0x000268, "Member 'UModioUserWidgetBase::bRoutedSetDataSource' has a wrong offset!");
static_assert(offsetof(UModioUserWidgetBase, bRoutedLoadExternalData) == 0x000269, "Member 'UModioUserWidgetBase::bRoutedLoadExternalData' has a wrong offset!");
static_assert(offsetof(UModioUserWidgetBase, bRoutedFinishLoadExternalData) == 0x00026A, "Member 'UModioUserWidgetBase::bRoutedFinishLoadExternalData' has a wrong offset!");
static_assert(offsetof(UModioUserWidgetBase, DataSource) == 0x000270, "Member 'UModioUserWidgetBase::DataSource' has a wrong offset!");

// Class ModioUI.ModioModManagementWidgetBase
// 0x0028 (0x02A0 - 0x0278)
class UModioModManagementWidgetBase : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_182D[0x28];                                    // 0x0278(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModManagementWidgetBase">();
	}
	static class UModioModManagementWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModManagementWidgetBase>();
	}
};
static_assert(alignof(UModioModManagementWidgetBase) == 0x000008, "Wrong alignment on UModioModManagementWidgetBase");
static_assert(sizeof(UModioModManagementWidgetBase) == 0x0002A0, "Wrong size on UModioModManagementWidgetBase");

// Class ModioUI.ModioModDetailsOpProgress
// 0x0060 (0x0300 - 0x02A0)
class UModioModDetailsOpProgress : public UModioModManagementWidgetBase
{
public:
	uint8                                         Pad_182E[0x10];                                    // 0x02A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioProgressBar*                      ProgressBar;                                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    TimeRemainingText;                                 // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   TimeRemainingTextFormat;                           // 0x02C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   SpeedTextFormat;                                   // 0x02D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    OperationSpeedText;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    OperationProgressText;                             // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModDetailsOpProgress">();
	}
	static class UModioModDetailsOpProgress* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModDetailsOpProgress>();
	}
};
static_assert(alignof(UModioModDetailsOpProgress) == 0x000008, "Wrong alignment on UModioModDetailsOpProgress");
static_assert(sizeof(UModioModDetailsOpProgress) == 0x000300, "Wrong size on UModioModDetailsOpProgress");
static_assert(offsetof(UModioModDetailsOpProgress, ProgressBar) == 0x0002B0, "Member 'UModioModDetailsOpProgress::ProgressBar' has a wrong offset!");
static_assert(offsetof(UModioModDetailsOpProgress, TimeRemainingText) == 0x0002B8, "Member 'UModioModDetailsOpProgress::TimeRemainingText' has a wrong offset!");
static_assert(offsetof(UModioModDetailsOpProgress, TimeRemainingTextFormat) == 0x0002C0, "Member 'UModioModDetailsOpProgress::TimeRemainingTextFormat' has a wrong offset!");
static_assert(offsetof(UModioModDetailsOpProgress, SpeedTextFormat) == 0x0002D8, "Member 'UModioModDetailsOpProgress::SpeedTextFormat' has a wrong offset!");
static_assert(offsetof(UModioModDetailsOpProgress, OperationSpeedText) == 0x0002F0, "Member 'UModioModDetailsOpProgress::OperationSpeedText' has a wrong offset!");
static_assert(offsetof(UModioModDetailsOpProgress, OperationProgressText) == 0x0002F8, "Member 'UModioModDetailsOpProgress::OperationProgressText' has a wrong offset!");

// Class ModioUI.ModioDownloadListWidgetBase
// 0x0030 (0x02A8 - 0x0278)
class UModioDownloadListWidgetBase : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_182F[0x8];                                     // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioListView*                         QueueList;                                         // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModioRichTextBlock*                    QueueTypeLabel;                                    // 0x0288(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    StatusString;                                      // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1830[0x10];                                    // 0x0298(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDownloadListWidgetBase">();
	}
	static class UModioDownloadListWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDownloadListWidgetBase>();
	}
};
static_assert(alignof(UModioDownloadListWidgetBase) == 0x000008, "Wrong alignment on UModioDownloadListWidgetBase");
static_assert(sizeof(UModioDownloadListWidgetBase) == 0x0002A8, "Wrong size on UModioDownloadListWidgetBase");
static_assert(offsetof(UModioDownloadListWidgetBase, QueueList) == 0x000280, "Member 'UModioDownloadListWidgetBase::QueueList' has a wrong offset!");
static_assert(offsetof(UModioDownloadListWidgetBase, QueueTypeLabel) == 0x000288, "Member 'UModioDownloadListWidgetBase::QueueTypeLabel' has a wrong offset!");
static_assert(offsetof(UModioDownloadListWidgetBase, StatusString) == 0x000290, "Member 'UModioDownloadListWidgetBase::StatusString' has a wrong offset!");

// Class ModioUI.ModioUIAsyncOperationWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIAsyncOperationWidget final  : public IInterface
{
public:
	void NotifyOperationState(EModioUIAsyncOperationWidgetState NewState);
	void RequestOperationRetry();
	void SetOperationStateDelegate(TDelegate<void(EModioUIAsyncOperationWidgetState NewState)>& Delegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIAsyncOperationWidget">();
	}
	static class IModioUIAsyncOperationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIAsyncOperationWidget>();
	}
};
static_assert(alignof(IModioUIAsyncOperationWidget) == 0x000008, "Wrong alignment on IModioUIAsyncOperationWidget");
static_assert(sizeof(IModioUIAsyncOperationWidget) == 0x000028, "Wrong size on IModioUIAsyncOperationWidget");

// Class ModioUI.ModioDownloadQueueDrawer
// 0x00F0 (0x0368 - 0x0278)
class UModioDownloadQueueDrawer : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_1831[0x38];                                    // 0x0278(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioUserProfileButton*                ProfileIcon;                                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    UserLabel;                                         // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    ActivityText;                                      // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    StatusText;                                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   LogOutButton;                                      // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioDownloadQueueOpProgress*          CurrentOpProgress;                                 // 0x02D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioDownloadListWidgetBase*           OperationQueue;                                    // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioDownloadListWidgetBase*           CompletedQueue;                                    // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   DownloadingActionText;                             // 0x02F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ExtractingActionText;                              // 0x0308(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   InitializingActionText;                            // 0x0320(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   NoDownloadText;                                    // 0x0338(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1832[0x18];                                    // 0x0350(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOperationCompleted();
	void OnLogoutClicked();
	void OnSubsricptionChanged(const struct FModioModID& ID, bool Subscribed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDownloadQueueDrawer">();
	}
	static class UModioDownloadQueueDrawer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDownloadQueueDrawer>();
	}
};
static_assert(alignof(UModioDownloadQueueDrawer) == 0x000008, "Wrong alignment on UModioDownloadQueueDrawer");
static_assert(sizeof(UModioDownloadQueueDrawer) == 0x000368, "Wrong size on UModioDownloadQueueDrawer");
static_assert(offsetof(UModioDownloadQueueDrawer, ProfileIcon) == 0x0002B0, "Member 'UModioDownloadQueueDrawer::ProfileIcon' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueDrawer, UserLabel) == 0x0002B8, "Member 'UModioDownloadQueueDrawer::UserLabel' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueDrawer, ActivityText) == 0x0002C0, "Member 'UModioDownloadQueueDrawer::ActivityText' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueDrawer, StatusText) == 0x0002C8, "Member 'UModioDownloadQueueDrawer::StatusText' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueDrawer, LogOutButton) == 0x0002D0, "Member 'UModioDownloadQueueDrawer::LogOutButton' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueDrawer, CurrentOpProgress) == 0x0002D8, "Member 'UModioDownloadQueueDrawer::CurrentOpProgress' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueDrawer, OperationQueue) == 0x0002E0, "Member 'UModioDownloadQueueDrawer::OperationQueue' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueDrawer, CompletedQueue) == 0x0002E8, "Member 'UModioDownloadQueueDrawer::CompletedQueue' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueDrawer, DownloadingActionText) == 0x0002F0, "Member 'UModioDownloadQueueDrawer::DownloadingActionText' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueDrawer, ExtractingActionText) == 0x000308, "Member 'UModioDownloadQueueDrawer::ExtractingActionText' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueDrawer, InitializingActionText) == 0x000320, "Member 'UModioDownloadQueueDrawer::InitializingActionText' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueDrawer, NoDownloadText) == 0x000338, "Member 'UModioDownloadQueueDrawer::NoDownloadText' has a wrong offset!");

// Class ModioUI.ModioUIAsyncRetryWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIAsyncRetryWidget final  : public IInterface
{
public:
	void SetRetryRequestedDelegate(TDelegate<void()>& Delegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIAsyncRetryWidget">();
	}
	static class IModioUIAsyncRetryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIAsyncRetryWidget>();
	}
};
static_assert(alignof(IModioUIAsyncRetryWidget) == 0x000008, "Wrong alignment on IModioUIAsyncRetryWidget");
static_assert(sizeof(IModioUIAsyncRetryWidget) == 0x000028, "Wrong size on IModioUIAsyncRetryWidget");

// Class ModioUI.ModioMenuBar
// 0x0018 (0x0290 - 0x0278)
class UModioMenuBar : public UModioUserWidgetBase
{
public:
	class UModioRichTextButton*                   SearchButton;                                      // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   BackButton;                                        // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioUserProfileButton*                UserProfileButton;                                 // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBackClicked();
	void OnSearchClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioMenuBar">();
	}
	static class UModioMenuBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioMenuBar>();
	}
};
static_assert(alignof(UModioMenuBar) == 0x000008, "Wrong alignment on UModioMenuBar");
static_assert(sizeof(UModioMenuBar) == 0x000290, "Wrong size on UModioMenuBar");
static_assert(offsetof(UModioMenuBar, SearchButton) == 0x000278, "Member 'UModioMenuBar::SearchButton' has a wrong offset!");
static_assert(offsetof(UModioMenuBar, BackButton) == 0x000280, "Member 'UModioMenuBar::BackButton' has a wrong offset!");
static_assert(offsetof(UModioMenuBar, UserProfileButton) == 0x000288, "Member 'UModioMenuBar::UserProfileButton' has a wrong offset!");

// Class ModioUI.ModioDownloadQueueEntry
// 0x0088 (0x0300 - 0x0278)
class UModioDownloadQueueEntry : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_1834[0x18];                                    // 0x0278(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioImage*                            ModThumbnail;                                      // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    ModNameLabel;                                      // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    ModSizeLabel;                                      // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   UnsubscribeButton;                                 // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    ModStatusLabel;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       EntryStyle;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1835[0x38];                                    // 0x02C0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UBorder*                                EntryBorder;                                       // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FEventReply OnEntryPressed(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent);
	void OnUnsubClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDownloadQueueEntry">();
	}
	static class UModioDownloadQueueEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDownloadQueueEntry>();
	}
};
static_assert(alignof(UModioDownloadQueueEntry) == 0x000008, "Wrong alignment on UModioDownloadQueueEntry");
static_assert(sizeof(UModioDownloadQueueEntry) == 0x000300, "Wrong size on UModioDownloadQueueEntry");
static_assert(offsetof(UModioDownloadQueueEntry, ModThumbnail) == 0x000290, "Member 'UModioDownloadQueueEntry::ModThumbnail' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueEntry, ModNameLabel) == 0x000298, "Member 'UModioDownloadQueueEntry::ModNameLabel' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueEntry, ModSizeLabel) == 0x0002A0, "Member 'UModioDownloadQueueEntry::ModSizeLabel' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueEntry, UnsubscribeButton) == 0x0002A8, "Member 'UModioDownloadQueueEntry::UnsubscribeButton' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueEntry, ModStatusLabel) == 0x0002B0, "Member 'UModioDownloadQueueEntry::ModStatusLabel' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueEntry, EntryStyle) == 0x0002B8, "Member 'UModioDownloadQueueEntry::EntryStyle' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueEntry, EntryBorder) == 0x0002F8, "Member 'UModioDownloadQueueEntry::EntryBorder' has a wrong offset!");

// Class ModioUI.ModioUIAuthenticationDataProvider
// 0x0000 (0x0028 - 0x0028)
class IModioUIAuthenticationDataProvider final  : public IInterface
{
public:
	struct FModioAuthenticationParams GetAuthenticationParams(EModioAuthenticationProvider Provider);
	TArray<struct FModioUIAuthenticationProviderInfo> GetAuthenticationTypes();
	bool ShouldOfferEmailAuthentication();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIAuthenticationDataProvider">();
	}
	static class IModioUIAuthenticationDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIAuthenticationDataProvider>();
	}
};
static_assert(alignof(IModioUIAuthenticationDataProvider) == 0x000008, "Wrong alignment on IModioUIAuthenticationDataProvider");
static_assert(sizeof(IModioUIAuthenticationDataProvider) == 0x000028, "Wrong size on IModioUIAuthenticationDataProvider");

// Class ModioUI.ModioDownloadQueueEntryStyleContainer
// 0x00D0 (0x01A0 - 0x00D0)
class UModioDownloadQueueEntryStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioDownloadQueueEntryStyle          Style;                                             // 0x00D0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDownloadQueueEntryStyleContainer">();
	}
	static class UModioDownloadQueueEntryStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDownloadQueueEntryStyleContainer>();
	}
};
static_assert(alignof(UModioDownloadQueueEntryStyleContainer) == 0x000008, "Wrong alignment on UModioDownloadQueueEntryStyleContainer");
static_assert(sizeof(UModioDownloadQueueEntryStyleContainer) == 0x0001A0, "Wrong size on UModioDownloadQueueEntryStyleContainer");
static_assert(offsetof(UModioDownloadQueueEntryStyleContainer, Style) == 0x0000D0, "Member 'UModioDownloadQueueEntryStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioUIBusyStateWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIBusyStateWidget final  : public IInterface
{
public:
	void DisplayBusyState();
	void EndBusyState(bool bErrorOccurred);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIBusyStateWidget">();
	}
	static class IModioUIBusyStateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIBusyStateWidget>();
	}
};
static_assert(alignof(IModioUIBusyStateWidget) == 0x000008, "Wrong alignment on IModioUIBusyStateWidget");
static_assert(sizeof(IModioUIBusyStateWidget) == 0x000028, "Wrong size on IModioUIBusyStateWidget");

// Class ModioUI.ModioWrapBox
// 0x0000 (0x0148 - 0x0148)
class UModioWrapBox : public UWrapBox
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioWrapBox">();
	}
	static class UModioWrapBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioWrapBox>();
	}
};
static_assert(alignof(UModioWrapBox) == 0x000008, "Wrong alignment on UModioWrapBox");
static_assert(sizeof(UModioWrapBox) == 0x000148, "Wrong size on UModioWrapBox");

// Class ModioUI.ModioDownloadQueueOpProgress
// 0x0080 (0x0320 - 0x02A0)
class UModioDownloadQueueOpProgress : public UModioModManagementWidgetBase
{
public:
	class UModioRichTextButton*                   UnsubscribeButton;                                 // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1837[0x18];                                    // 0x02A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioProgressBar*                      ProgressBar;                                       // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    ModNameLabel;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    OperationSpeedText;                                // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    OperationProgressText;                             // 0x02D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   SpeedFormatText;                                   // 0x02E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ProgressFormatText;                                // 0x02F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1838[0x10];                                    // 0x0310(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnUnsubscribeClicked();
	TDelegate<void()> OperationCompletedDelegate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDownloadQueueOpProgress">();
	}
	static class UModioDownloadQueueOpProgress* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDownloadQueueOpProgress>();
	}
};
static_assert(alignof(UModioDownloadQueueOpProgress) == 0x000008, "Wrong alignment on UModioDownloadQueueOpProgress");
static_assert(sizeof(UModioDownloadQueueOpProgress) == 0x000320, "Wrong size on UModioDownloadQueueOpProgress");
static_assert(offsetof(UModioDownloadQueueOpProgress, UnsubscribeButton) == 0x0002A0, "Member 'UModioDownloadQueueOpProgress::UnsubscribeButton' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueOpProgress, ProgressBar) == 0x0002C0, "Member 'UModioDownloadQueueOpProgress::ProgressBar' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueOpProgress, ModNameLabel) == 0x0002C8, "Member 'UModioDownloadQueueOpProgress::ModNameLabel' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueOpProgress, OperationSpeedText) == 0x0002D0, "Member 'UModioDownloadQueueOpProgress::OperationSpeedText' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueOpProgress, OperationProgressText) == 0x0002D8, "Member 'UModioDownloadQueueOpProgress::OperationProgressText' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueOpProgress, SpeedFormatText) == 0x0002E0, "Member 'UModioDownloadQueueOpProgress::SpeedFormatText' has a wrong offset!");
static_assert(offsetof(UModioDownloadQueueOpProgress, ProgressFormatText) == 0x0002F8, "Member 'UModioDownloadQueueOpProgress::ProgressFormatText' has a wrong offset!");

// Class ModioUI.ModioModTileBase
// 0x0138 (0x03B0 - 0x0278)
class UModioModTileBase : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_1839[0x54];                                    // 0x0278(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCurrentExpandedState;                             // 0x02CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_183A[0x3];                                     // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIMaterialRef                    LoadingMaterial;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FModioUIMaterialRef                    ErrorMaterial;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UModioImage*                            Thumbnail;                                         // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioUserWidgetBase*                   SubscriptionIndicator;                             // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    ModName;                                           // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FocusTransition;                                   // 0x02F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRoundedBorder*                    TileBorder;                                        // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioImage*                            TileFrame;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   SubscribeButton;                                   // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       Style;                                             // 0x0318(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UModioUI4Subsystem*                     UISubsystem;                                       // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_183B[0x48];                                    // 0x0328(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SubscribeLabel;                                    // 0x0370(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   UnsubscribeLabel;                                  // 0x0388(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnSubscribeClicked;                                // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void EnableSubscribeButton();
	void HandleModLogoOperationStateChanged(EModioUIAsyncOperationWidgetState NewState);
	void NativeSubscribeClicked();
	void OnModSubscriptionStatusChanged(const struct FModioModID& ID, bool Subscribed);
	void OnSetExpandedState(bool bExpanded);
	void SetExpandedState(bool bExpanded);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTileBase">();
	}
	static class UModioModTileBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModTileBase>();
	}
};
static_assert(alignof(UModioModTileBase) == 0x000008, "Wrong alignment on UModioModTileBase");
static_assert(sizeof(UModioModTileBase) == 0x0003B0, "Wrong size on UModioModTileBase");
static_assert(offsetof(UModioModTileBase, bCurrentExpandedState) == 0x0002CC, "Member 'UModioModTileBase::bCurrentExpandedState' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, LoadingMaterial) == 0x0002D0, "Member 'UModioModTileBase::LoadingMaterial' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, ErrorMaterial) == 0x0002D8, "Member 'UModioModTileBase::ErrorMaterial' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, Thumbnail) == 0x0002E0, "Member 'UModioModTileBase::Thumbnail' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, SubscriptionIndicator) == 0x0002E8, "Member 'UModioModTileBase::SubscriptionIndicator' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, ModName) == 0x0002F0, "Member 'UModioModTileBase::ModName' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, FocusTransition) == 0x0002F8, "Member 'UModioModTileBase::FocusTransition' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, TileBorder) == 0x000300, "Member 'UModioModTileBase::TileBorder' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, TileFrame) == 0x000308, "Member 'UModioModTileBase::TileFrame' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, SubscribeButton) == 0x000310, "Member 'UModioModTileBase::SubscribeButton' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, Style) == 0x000318, "Member 'UModioModTileBase::Style' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, UISubsystem) == 0x000320, "Member 'UModioModTileBase::UISubsystem' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, SubscribeLabel) == 0x000370, "Member 'UModioModTileBase::SubscribeLabel' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, UnsubscribeLabel) == 0x000388, "Member 'UModioModTileBase::UnsubscribeLabel' has a wrong offset!");
static_assert(offsetof(UModioModTileBase, OnSubscribeClicked) == 0x0003A0, "Member 'UModioModTileBase::OnSubscribeClicked' has a wrong offset!");

// Class ModioUI.ModioModCollectionTile
// 0x0080 (0x0430 - 0x03B0)
class UModioModCollectionTile : public UModioModTileBase
{
public:
	uint8                                         Pad_183D[0x20];                                    // 0x03B0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioRichTextBlock*                    SizeOnDiskLabel;                                   // 0x03D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioCollectionTileStatus*             StatusWidget;                                      // 0x03D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    StatusLine;                                        // 0x03E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UButton*                                TileButton;                                        // 0x03E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   SubscribedStatusText;                              // 0x03F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   InstalledStatusText;                               // 0x0408(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UModioPopupMenu*                        MoreOptionsMenu;                                   // 0x0420(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183E[0x8];                                     // 0x0428(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceUninstall();
	void NativeCollectionTileClicked();
	void NativeMoreOptionsClicked();
	void OnRatingSubmissionComplete(const struct FModioErrorCode& Ec, EModioRating Rating);
	void ShowModDetails();
	void SubmitModReport();
	void SubmitNegativeRating();
	void SubmitPositiveRating();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModCollectionTile">();
	}
	static class UModioModCollectionTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModCollectionTile>();
	}
};
static_assert(alignof(UModioModCollectionTile) == 0x000008, "Wrong alignment on UModioModCollectionTile");
static_assert(sizeof(UModioModCollectionTile) == 0x000430, "Wrong size on UModioModCollectionTile");
static_assert(offsetof(UModioModCollectionTile, SizeOnDiskLabel) == 0x0003D0, "Member 'UModioModCollectionTile::SizeOnDiskLabel' has a wrong offset!");
static_assert(offsetof(UModioModCollectionTile, StatusWidget) == 0x0003D8, "Member 'UModioModCollectionTile::StatusWidget' has a wrong offset!");
static_assert(offsetof(UModioModCollectionTile, StatusLine) == 0x0003E0, "Member 'UModioModCollectionTile::StatusLine' has a wrong offset!");
static_assert(offsetof(UModioModCollectionTile, TileButton) == 0x0003E8, "Member 'UModioModCollectionTile::TileButton' has a wrong offset!");
static_assert(offsetof(UModioModCollectionTile, SubscribedStatusText) == 0x0003F0, "Member 'UModioModCollectionTile::SubscribedStatusText' has a wrong offset!");
static_assert(offsetof(UModioModCollectionTile, InstalledStatusText) == 0x000408, "Member 'UModioModCollectionTile::InstalledStatusText' has a wrong offset!");
static_assert(offsetof(UModioModCollectionTile, MoreOptionsMenu) == 0x000420, "Member 'UModioModCollectionTile::MoreOptionsMenu' has a wrong offset!");

// Class ModioUI.ModioUIClickableWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIClickableWidget final  : public IInterface
{
public:
	void AddClickHandler(class UObject* UserObject, class FName FunctionName);
	void RemoveClickHandler(class UObject* UserObject, class FName FunctionName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIClickableWidget">();
	}
	static class IModioUIClickableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIClickableWidget>();
	}
};
static_assert(alignof(IModioUIClickableWidget) == 0x000008, "Wrong alignment on IModioUIClickableWidget");
static_assert(sizeof(IModioUIClickableWidget) == 0x000028, "Wrong size on IModioUIClickableWidget");

// Class ModioUI.ModioDrawer
// 0x00F8 (0x0200 - 0x0108)
class UModioDrawer final  : public UWidget
{
public:
	uint8                                         Pad_1840[0x38];                                    // 0x0108(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UWidget*>             NamedWidgets;                                      // 0x0140(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       DrawerStyle;                                       // 0x0190(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UBorder*                                HeaderBorder;                                      // 0x0198(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                ContentBorder;                                     // 0x01A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                FooterBorder;                                      // 0x01A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeaderFillOverride;                                // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ContentFillOverride;                               // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FooterFillOverride;                                // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                HeaderPadding;                                     // 0x01BC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          HeaderHorizontalAlignment;                         // 0x01CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            HeaderVerticalAlignment;                           // 0x01CD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1841[0x2];                                     // 0x01CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                ContentPadding;                                    // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          ContentHorizontalAlignment;                        // 0x01E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            ContentVerticalAlignment;                          // 0x01E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1842[0x2];                                     // 0x01E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                FooterPadding;                                     // 0x01E4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          FooterHorizontalAlignment;                         // 0x01F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            FooterVerticalAlignment;                           // 0x01F5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1843[0x2];                                     // 0x01F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinWidth;                                          // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1844[0x4];                                     // 0x01FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDrawer">();
	}
	static class UModioDrawer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDrawer>();
	}
};
static_assert(alignof(UModioDrawer) == 0x000008, "Wrong alignment on UModioDrawer");
static_assert(sizeof(UModioDrawer) == 0x000200, "Wrong size on UModioDrawer");
static_assert(offsetof(UModioDrawer, NamedWidgets) == 0x000140, "Member 'UModioDrawer::NamedWidgets' has a wrong offset!");
static_assert(offsetof(UModioDrawer, DrawerStyle) == 0x000190, "Member 'UModioDrawer::DrawerStyle' has a wrong offset!");
static_assert(offsetof(UModioDrawer, HeaderBorder) == 0x000198, "Member 'UModioDrawer::HeaderBorder' has a wrong offset!");
static_assert(offsetof(UModioDrawer, ContentBorder) == 0x0001A0, "Member 'UModioDrawer::ContentBorder' has a wrong offset!");
static_assert(offsetof(UModioDrawer, FooterBorder) == 0x0001A8, "Member 'UModioDrawer::FooterBorder' has a wrong offset!");
static_assert(offsetof(UModioDrawer, HeaderFillOverride) == 0x0001B0, "Member 'UModioDrawer::HeaderFillOverride' has a wrong offset!");
static_assert(offsetof(UModioDrawer, ContentFillOverride) == 0x0001B4, "Member 'UModioDrawer::ContentFillOverride' has a wrong offset!");
static_assert(offsetof(UModioDrawer, FooterFillOverride) == 0x0001B8, "Member 'UModioDrawer::FooterFillOverride' has a wrong offset!");
static_assert(offsetof(UModioDrawer, HeaderPadding) == 0x0001BC, "Member 'UModioDrawer::HeaderPadding' has a wrong offset!");
static_assert(offsetof(UModioDrawer, HeaderHorizontalAlignment) == 0x0001CC, "Member 'UModioDrawer::HeaderHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UModioDrawer, HeaderVerticalAlignment) == 0x0001CD, "Member 'UModioDrawer::HeaderVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UModioDrawer, ContentPadding) == 0x0001D0, "Member 'UModioDrawer::ContentPadding' has a wrong offset!");
static_assert(offsetof(UModioDrawer, ContentHorizontalAlignment) == 0x0001E0, "Member 'UModioDrawer::ContentHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UModioDrawer, ContentVerticalAlignment) == 0x0001E1, "Member 'UModioDrawer::ContentVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UModioDrawer, FooterPadding) == 0x0001E4, "Member 'UModioDrawer::FooterPadding' has a wrong offset!");
static_assert(offsetof(UModioDrawer, FooterHorizontalAlignment) == 0x0001F4, "Member 'UModioDrawer::FooterHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UModioDrawer, FooterVerticalAlignment) == 0x0001F5, "Member 'UModioDrawer::FooterVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UModioDrawer, MinWidth) == 0x0001F8, "Member 'UModioDrawer::MinWidth' has a wrong offset!");

// Class ModioUI.ModioUICommand
// 0x0000 (0x0028 - 0x0028)
class IModioUICommand final  : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUICommand">();
	}
	static class IModioUICommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUICommand>();
	}
};
static_assert(alignof(IModioUICommand) == 0x000008, "Wrong alignment on IModioUICommand");
static_assert(sizeof(IModioUICommand) == 0x000028, "Wrong size on IModioUICommand");

// Class ModioUI.ModioUIDataSourceWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIDataSourceWidget final  : public IInterface
{
public:
	void SetDataSource(class UObject* InDataSource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIDataSourceWidget">();
	}
	static class IModioUIDataSourceWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIDataSourceWidget>();
	}
};
static_assert(alignof(IModioUIDataSourceWidget) == 0x000008, "Wrong alignment on IModioUIDataSourceWidget");
static_assert(sizeof(IModioUIDataSourceWidget) == 0x000028, "Wrong size on IModioUIDataSourceWidget");

// Class ModioUI.ModioUIDialogButtonWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIDialogButtonWidget final  : public IInterface
{
public:
	void SetDialogController(class UModioDialogController* Controller);
	void SetStyle(struct FModioDialogStyle& Style);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIDialogButtonWidget">();
	}
	static class IModioUIDialogButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIDialogButtonWidget>();
	}
};
static_assert(alignof(IModioUIDialogButtonWidget) == 0x000008, "Wrong alignment on IModioUIDialogButtonWidget");
static_assert(sizeof(IModioUIDialogButtonWidget) == 0x000028, "Wrong size on IModioUIDialogButtonWidget");

// Class ModioUI.ModioDialogBase
// 0x0008 (0x0280 - 0x0278)
class UModioDialogBase : public UModioUserWidgetBase
{
public:
	struct FModioUIStyleRef                       DialogStyle;                                       // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDialogBase">();
	}
	static class UModioDialogBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDialogBase>();
	}
};
static_assert(alignof(UModioDialogBase) == 0x000008, "Wrong alignment on UModioDialogBase");
static_assert(sizeof(UModioDialogBase) == 0x000280, "Wrong size on UModioDialogBase");
static_assert(offsetof(UModioDialogBase, DialogStyle) == 0x000278, "Member 'UModioDialogBase::DialogStyle' has a wrong offset!");

// Class ModioUI.ModioMoreOptionsDialog
// 0x0008 (0x0288 - 0x0280)
class UModioMoreOptionsDialog final  : public UModioDialogBase
{
public:
	class UModioTileView*                         OptionsList;                                       // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioMoreOptionsDialog">();
	}
	static class UModioMoreOptionsDialog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioMoreOptionsDialog>();
	}
};
static_assert(alignof(UModioMoreOptionsDialog) == 0x000008, "Wrong alignment on UModioMoreOptionsDialog");
static_assert(sizeof(UModioMoreOptionsDialog) == 0x000288, "Wrong size on UModioMoreOptionsDialog");
static_assert(offsetof(UModioMoreOptionsDialog, OptionsList) == 0x000280, "Member 'UModioMoreOptionsDialog::OptionsList' has a wrong offset!");

// Class ModioUI.ModioUIDownloadQueueWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIDownloadQueueWidget final  : public IInterface
{
public:
	void DisplayUserInfo(const struct FModioOptionalUser& NewUser);
	void RefreshDownloadQueue();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIDownloadQueueWidget">();
	}
	static class IModioUIDownloadQueueWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIDownloadQueueWidget>();
	}
};
static_assert(alignof(IModioUIDownloadQueueWidget) == 0x000008, "Wrong alignment on IModioUIDownloadQueueWidget");
static_assert(sizeof(IModioUIDownloadQueueWidget) == 0x000028, "Wrong size on IModioUIDownloadQueueWidget");

// Class ModioUI.ModioUIErrorDisplayWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIErrorDisplayWidget final  : public IInterface
{
public:
	void DisplayError(struct FModioErrorCode& Ec);
	void SetErrorString(const class FString& InErrorString);
	void SetErrorText(class FText& InErrorText);

	bool IsErrorSet() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIErrorDisplayWidget">();
	}
	static class IModioUIErrorDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIErrorDisplayWidget>();
	}
};
static_assert(alignof(IModioUIErrorDisplayWidget) == 0x000008, "Wrong alignment on IModioUIErrorDisplayWidget");
static_assert(sizeof(IModioUIErrorDisplayWidget) == 0x000028, "Wrong size on IModioUIErrorDisplayWidget");

// Class ModioUI.ModioUIImageDisplay
// 0x0000 (0x0028 - 0x0028)
class IModioUIImageDisplay final  : public IInterface
{
public:
	void DisplayImage(struct FSlateBrush& Image);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIImageDisplay">();
	}
	static class IModioUIImageDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIImageDisplay>();
	}
};
static_assert(alignof(IModioUIImageDisplay) == 0x000008, "Wrong alignment on IModioUIImageDisplay");
static_assert(sizeof(IModioUIImageDisplay) == 0x000028, "Wrong size on IModioUIImageDisplay");

// Class ModioUI.ModioUIInputDeviceChangedReceiver
// 0x0000 (0x0028 - 0x0028)
class IModioUIInputDeviceChangedReceiver final  : public IInterface
{
public:
	void OnInputDeviceChanged(EModioUIInputMode InputDevice);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIInputDeviceChangedReceiver">();
	}
	static class IModioUIInputDeviceChangedReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIInputDeviceChangedReceiver>();
	}
};
static_assert(alignof(IModioUIInputDeviceChangedReceiver) == 0x000008, "Wrong alignment on IModioUIInputDeviceChangedReceiver");
static_assert(sizeof(IModioUIInputDeviceChangedReceiver) == 0x000028, "Wrong size on IModioUIInputDeviceChangedReceiver");

// Class ModioUI.ModioModNameWidget
// 0x0028 (0x0130 - 0x0108)
class UModioModNameWidget final  : public UWidget
{
public:
	uint8                                         Pad_1845[0x8];                                     // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1846[0x10];                                    // 0x0118(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       Style;                                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModNameWidget">();
	}
	static class UModioModNameWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModNameWidget>();
	}
};
static_assert(alignof(UModioModNameWidget) == 0x000008, "Wrong alignment on UModioModNameWidget");
static_assert(sizeof(UModioModNameWidget) == 0x000130, "Wrong size on UModioModNameWidget");
static_assert(offsetof(UModioModNameWidget, DataSource) == 0x000110, "Member 'UModioModNameWidget::DataSource' has a wrong offset!");
static_assert(offsetof(UModioModNameWidget, Style) == 0x000128, "Member 'UModioModNameWidget::Style' has a wrong offset!");

// Class ModioUI.ModioUIInputHintDisplayWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIInputHintDisplayWidget final  : public IInterface
{
public:
	void OnDisplayHintForInput(const struct FKey& VirtualKey);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIInputHintDisplayWidget">();
	}
	static class IModioUIInputHintDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIInputHintDisplayWidget>();
	}
};
static_assert(alignof(IModioUIInputHintDisplayWidget) == 0x000008, "Wrong alignment on IModioUIInputHintDisplayWidget");
static_assert(sizeof(IModioUIInputHintDisplayWidget) == 0x000028, "Wrong size on IModioUIInputHintDisplayWidget");

// Class ModioUI.ModioUIInputHintGlyphProvider
// 0x0000 (0x0028 - 0x0028)
class IModioUIInputHintGlyphProvider final  : public IInterface
{
public:
	class UMaterialInterface* GetInputGlyphMaterialForInputType(const struct FKey& VirtualInput, EModioUIInputMode InputType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIInputHintGlyphProvider">();
	}
	static class IModioUIInputHintGlyphProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIInputHintGlyphProvider>();
	}
};
static_assert(alignof(IModioUIInputHintGlyphProvider) == 0x000008, "Wrong alignment on IModioUIInputHintGlyphProvider");
static_assert(sizeof(IModioUIInputHintGlyphProvider) == 0x000028, "Wrong size on IModioUIInputHintGlyphProvider");

// Class ModioUI.ModioImage
// 0x0008 (0x0218 - 0x0210)
class UModioImage : public UImage
{
public:
	class UMaterialInstanceDynamic*               CachedMaterial;                                    // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisplayImageWithMaterial(class UTexture2DDynamic* Texture, class UMaterialInterface* Material, class FName ImageParameterName);
	void ImageLoadHandler(class UTexture2DDynamic* Texture, class UMaterialInterface* Material, class FName ImageParameterName);
	void LoadImageFromFileAsync(const struct FModioImageWrapper& ImageLoader);
	void LoadImageFromFileWithMaterialAsync(const struct FModioImageWrapper& ImageLoader, class UMaterialInterface* Material, class FName ImageParameterName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioImage">();
	}
	static class UModioImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioImage>();
	}
};
static_assert(alignof(UModioImage) == 0x000008, "Wrong alignment on UModioImage");
static_assert(sizeof(UModioImage) == 0x000218, "Wrong size on UModioImage");
static_assert(offsetof(UModioImage, CachedMaterial) == 0x000210, "Member 'UModioImage::CachedMaterial' has a wrong offset!");

// Class ModioUI.ModioInputBindingImage
// 0x0040 (0x0258 - 0x0218)
class UModioInputBindingImage final  : public UModioImage
{
public:
	uint8                                         Pad_1848[0x10];                                    // 0x0218(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   KeyToShow;                                         // 0x0228(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1849[0x18];                                    // 0x0240(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TDelegate<void(EModioUIInputMode InputMode)> GetInputModeVisibilityDelegate();
	void SetKeyToShow(const struct FKey& NewKey);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioInputBindingImage">();
	}
	static class UModioInputBindingImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioInputBindingImage>();
	}
};
static_assert(alignof(UModioInputBindingImage) == 0x000008, "Wrong alignment on UModioInputBindingImage");
static_assert(sizeof(UModioInputBindingImage) == 0x000258, "Wrong size on UModioInputBindingImage");
static_assert(offsetof(UModioInputBindingImage, KeyToShow) == 0x000228, "Member 'UModioInputBindingImage::KeyToShow' has a wrong offset!");

// Class ModioUI.ModioUIModDetailsDisplay
// 0x0000 (0x0028 - 0x0028)
class IModioUIModDetailsDisplay final  : public IInterface
{
public:
	void DisplayModDetails(TScriptInterface<class IModioModInfoUIDetails>& Details);
	void DisplayModDetailsForID(struct FModioModID& ModId);
	void HandleDisplayModDetails(TScriptInterface<class IModioModInfoUIDetails>* Details);
	void HandleDisplayModDetailsForID(struct FModioModID& ModId);
	void RegisterUserWidget(TScriptInterface<class IModioUIModDetailsDisplay>& DisplayWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIModDetailsDisplay">();
	}
	static class IModioUIModDetailsDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIModDetailsDisplay>();
	}
};
static_assert(alignof(IModioUIModDetailsDisplay) == 0x000008, "Wrong alignment on IModioUIModDetailsDisplay");
static_assert(sizeof(IModioUIModDetailsDisplay) == 0x000028, "Wrong size on IModioUIModDetailsDisplay");

// Class ModioUI.ModioUIPopupMenuContentWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIPopupMenuContentWidget final  : public IInterface
{
public:
	void SetDesiredSize(struct FVector2D& DesiredSize);
	void SetMenuEntries(struct FModioUIMenuCommandList& Entries);
	void SetStyle(struct FModioUIStyleRef& StyleRef);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIPopupMenuContentWidget">();
	}
	static class IModioUIPopupMenuContentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIPopupMenuContentWidget>();
	}
};
static_assert(alignof(IModioUIPopupMenuContentWidget) == 0x000008, "Wrong alignment on IModioUIPopupMenuContentWidget");
static_assert(sizeof(IModioUIPopupMenuContentWidget) == 0x000028, "Wrong size on IModioUIPopupMenuContentWidget");

// Class ModioUI.ModioNavigationConfigFactoryBase
// 0x0000 (0x0030 - 0x0030)
class UModioNavigationConfigFactoryBase : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioNavigationConfigFactoryBase">();
	}
	static class UModioNavigationConfigFactoryBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioNavigationConfigFactoryBase>();
	}
};
static_assert(alignof(UModioNavigationConfigFactoryBase) == 0x000008, "Wrong alignment on UModioNavigationConfigFactoryBase");
static_assert(sizeof(UModioNavigationConfigFactoryBase) == 0x000030, "Wrong size on UModioNavigationConfigFactoryBase");

// Class ModioUI.ModioNavigationConfigFactory
// 0x0010 (0x0040 - 0x0030)
class UModioNavigationConfigFactory final  : public UModioNavigationConfigFactoryBase
{
public:
	bool                                          bTabNavigation;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bKeyNavigation;                                    // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAnalogNavigation;                                 // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_184A[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnalogNavigationHorizontalThreshold;               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnalogNavigationVerticalThreshold;                 // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_184B[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioNavigationConfigFactory">();
	}
	static class UModioNavigationConfigFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioNavigationConfigFactory>();
	}
};
static_assert(alignof(UModioNavigationConfigFactory) == 0x000008, "Wrong alignment on UModioNavigationConfigFactory");
static_assert(sizeof(UModioNavigationConfigFactory) == 0x000040, "Wrong size on UModioNavigationConfigFactory");
static_assert(offsetof(UModioNavigationConfigFactory, bTabNavigation) == 0x000030, "Member 'UModioNavigationConfigFactory::bTabNavigation' has a wrong offset!");
static_assert(offsetof(UModioNavigationConfigFactory, bKeyNavigation) == 0x000031, "Member 'UModioNavigationConfigFactory::bKeyNavigation' has a wrong offset!");
static_assert(offsetof(UModioNavigationConfigFactory, bAnalogNavigation) == 0x000032, "Member 'UModioNavigationConfigFactory::bAnalogNavigation' has a wrong offset!");
static_assert(offsetof(UModioNavigationConfigFactory, AnalogNavigationHorizontalThreshold) == 0x000034, "Member 'UModioNavigationConfigFactory::AnalogNavigationHorizontalThreshold' has a wrong offset!");
static_assert(offsetof(UModioNavigationConfigFactory, AnalogNavigationVerticalThreshold) == 0x000038, "Member 'UModioNavigationConfigFactory::AnalogNavigationVerticalThreshold' has a wrong offset!");

// Class ModioUI.ModioUIRefineSearchWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIRefineSearchWidget final  : public IInterface
{
public:
	class FString GetSearchString();
	TArray<class FString> GetSelectedTagValues();
	void NotifySettingsChanged(struct FModioFilterParams& SearchSettings);
	void RefreshTags();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIRefineSearchWidget">();
	}
	static class IModioUIRefineSearchWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIRefineSearchWidget>();
	}
};
static_assert(alignof(IModioUIRefineSearchWidget) == 0x000008, "Wrong alignment on IModioUIRefineSearchWidget");
static_assert(sizeof(IModioUIRefineSearchWidget) == 0x000028, "Wrong size on IModioUIRefineSearchWidget");

// Class ModioUI.ModioUIStringInputWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIStringInputWidget final  : public IInterface
{
public:
	class FString GatherInput();
	void SetHint(class FText& HintText);
	void SetInput(const class FString& Input);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIStringInputWidget">();
	}
	static class IModioUIStringInputWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIStringInputWidget>();
	}
};
static_assert(alignof(IModioUIStringInputWidget) == 0x000008, "Wrong alignment on IModioUIStringInputWidget");
static_assert(sizeof(IModioUIStringInputWidget) == 0x000028, "Wrong size on IModioUIStringInputWidget");

// Class ModioUI.ModioUIStyleRefSerializer
// 0x0000 (0x0028 - 0x0028)
class IModioUIStyleRefSerializer final  : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIStyleRefSerializer">();
	}
	static class IModioUIStyleRefSerializer* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIStyleRefSerializer>();
	}
};
static_assert(alignof(IModioUIStyleRefSerializer) == 0x000008, "Wrong alignment on IModioUIStyleRefSerializer");
static_assert(sizeof(IModioUIStyleRefSerializer) == 0x000028, "Wrong size on IModioUIStyleRefSerializer");

// Class ModioUI.ModioUIInputValidationLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUIInputValidationLibrary final  : public UBlueprintFunctionLibrary
{
public:
	static bool ValidateAllLetters(class FText& TextToValidate);
	static bool ValidateAllNumeric(class FText& TextToValidate);
	static bool ValidateAlphanumeric(class FText& TextToValidate);
	static bool ValidateEmailAddress(class FText& TextToValidate);
	static bool ValidateLength(class FText& TextToValidate, int32 DesiredMaximumLength, int32 DesiredMinimumLength);
	static bool ValidateNotEmpty(class FText& TextToValidate);
	static bool ValidateNoWhitespace(class FText& TextToValidate);
	static bool ValidateUsingRule(struct FModioTextValidationRule& Rule, class FText& TextToValidate, class FText* ValidationMessageText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIInputValidationLibrary">();
	}
	static class UModioUIInputValidationLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIInputValidationLibrary>();
	}
};
static_assert(alignof(UModioUIInputValidationLibrary) == 0x000008, "Wrong alignment on UModioUIInputValidationLibrary");
static_assert(sizeof(UModioUIInputValidationLibrary) == 0x000028, "Wrong size on UModioUIInputValidationLibrary");

// Class ModioUI.ModioUIDefaultAuthProvider
// 0x0008 (0x0030 - 0x0028)
class UModioUIDefaultAuthProvider final  : public UObject
{
public:
	uint8                                         Pad_1854[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIDefaultAuthProvider">();
	}
	static class UModioUIDefaultAuthProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIDefaultAuthProvider>();
	}
};
static_assert(alignof(UModioUIDefaultAuthProvider) == 0x000008, "Wrong alignment on UModioUIDefaultAuthProvider");
static_assert(sizeof(UModioUIDefaultAuthProvider) == 0x000030, "Wrong size on UModioUIDefaultAuthProvider");

// Class ModioUI.ModioUITextValidator
// 0x0000 (0x0028 - 0x0028)
class IModioUITextValidator final  : public IInterface
{
public:
	void GetTextValidationRules(TArray<struct FModioTextValidationRule>* Rules);
	void SetValidationError(class FText* ErrorText);
	bool ValidateText(class FText& InputText, class FText* ValidationMessageText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUITextValidator">();
	}
	static class IModioUITextValidator* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUITextValidator>();
	}
};
static_assert(alignof(IModioUITextValidator) == 0x000008, "Wrong alignment on IModioUITextValidator");
static_assert(sizeof(IModioUITextValidator) == 0x000028, "Wrong size on IModioUITextValidator");

// Class ModioUI.ModioUIUserStringListEntry
// 0x0000 (0x0028 - 0x0028)
class IModioUIUserStringListEntry final  : public IInterface
{
public:
	void SetListItemString(const class FString& InString);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIUserStringListEntry">();
	}
	static class IModioUIUserStringListEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIUserStringListEntry>();
	}
};
static_assert(alignof(IModioUIUserStringListEntry) == 0x000008, "Wrong alignment on IModioUIUserStringListEntry");
static_assert(sizeof(IModioUIUserStringListEntry) == 0x000028, "Wrong size on IModioUIUserStringListEntry");

// Class ModioUI.ModioAsyncOpWrapperWidget
// 0x0030 (0x02A0 - 0x0270)
class UModioAsyncOpWrapperWidget final  : public UBorder
{
public:
	uint8                                         Pad_1856[0x20];                                    // 0x0270(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IModioUIAsyncOperationWidget> ActualWidget;                                      // 0x0290(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void SetActualAsyncOperationWidget(TScriptInterface<class IModioUIAsyncOperationWidget>& Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioAsyncOpWrapperWidget">();
	}
	static class UModioAsyncOpWrapperWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioAsyncOpWrapperWidget>();
	}
};
static_assert(alignof(UModioAsyncOpWrapperWidget) == 0x000008, "Wrong alignment on UModioAsyncOpWrapperWidget");
static_assert(sizeof(UModioAsyncOpWrapperWidget) == 0x0002A0, "Wrong size on UModioAsyncOpWrapperWidget");
static_assert(offsetof(UModioAsyncOpWrapperWidget, ActualWidget) == 0x000290, "Member 'UModioAsyncOpWrapperWidget::ActualWidget' has a wrong offset!");

// Class ModioUI.ModioNamedGlyphsDataAsset
// 0x00A0 (0x00D0 - 0x0030)
class UModioNamedGlyphsDataAsset final  : public UDataAsset
{
public:
	TMap<class FName, class UTexture2D*>          NamedGlyphs;                                       // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, class UTexture2D*>          PngGlyphs;                                         // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioNamedGlyphsDataAsset">();
	}
	static class UModioNamedGlyphsDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioNamedGlyphsDataAsset>();
	}
};
static_assert(alignof(UModioNamedGlyphsDataAsset) == 0x000008, "Wrong alignment on UModioNamedGlyphsDataAsset");
static_assert(sizeof(UModioNamedGlyphsDataAsset) == 0x0000D0, "Wrong size on UModioNamedGlyphsDataAsset");
static_assert(offsetof(UModioNamedGlyphsDataAsset, NamedGlyphs) == 0x000030, "Member 'UModioNamedGlyphsDataAsset::NamedGlyphs' has a wrong offset!");
static_assert(offsetof(UModioNamedGlyphsDataAsset, PngGlyphs) == 0x000080, "Member 'UModioNamedGlyphsDataAsset::PngGlyphs' has a wrong offset!");

// Class ModioUI.ModioAuthenticationContextUI
// 0x00F8 (0x0120 - 0x0028)
class UModioAuthenticationContextUI final  : public UObject
{
public:
	uint8                                         Pad_1857[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioTerms                            Terms;                                             // 0x0030(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioUIAuthenticationProviderInfo     ProviderInfo;                                      // 0x0100(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioAuthenticationContextUI">();
	}
	static class UModioAuthenticationContextUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioAuthenticationContextUI>();
	}
};
static_assert(alignof(UModioAuthenticationContextUI) == 0x000008, "Wrong alignment on UModioAuthenticationContextUI");
static_assert(sizeof(UModioAuthenticationContextUI) == 0x000120, "Wrong size on UModioAuthenticationContextUI");
static_assert(offsetof(UModioAuthenticationContextUI, Terms) == 0x000030, "Member 'UModioAuthenticationContextUI::Terms' has a wrong offset!");
static_assert(offsetof(UModioAuthenticationContextUI, ProviderInfo) == 0x000100, "Member 'UModioAuthenticationContextUI::ProviderInfo' has a wrong offset!");

// Class ModioUI.ModioAuthenticationMethodSelector
// 0x0060 (0x0168 - 0x0108)
class UModioAuthenticationMethodSelector final  : public UWidget
{
public:
	uint8                                         Pad_1858[0x58];                                    // 0x0108(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioRichTextButton*                   CancelButton;                                      // 0x0160(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CancelClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioAuthenticationMethodSelector">();
	}
	static class UModioAuthenticationMethodSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioAuthenticationMethodSelector>();
	}
};
static_assert(alignof(UModioAuthenticationMethodSelector) == 0x000008, "Wrong alignment on UModioAuthenticationMethodSelector");
static_assert(sizeof(UModioAuthenticationMethodSelector) == 0x000168, "Wrong size on UModioAuthenticationMethodSelector");
static_assert(offsetof(UModioAuthenticationMethodSelector, CancelButton) == 0x000160, "Member 'UModioAuthenticationMethodSelector::CancelButton' has a wrong offset!");

// Class ModioUI.ModioButton
// 0x00B8 (0x04E0 - 0x0428)
class UModioButton : public UButton
{
public:
	uint8                                         Pad_1859[0x8];                                     // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSetLabel;                                        // 0x0430(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       ButtonStyle;                                       // 0x0440(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FModioWidgetBorderStyle                BorderStyle;                                       // 0x0448(0x0080)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_185A[0x10];                                    // 0x04C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bOverrideGlobalStyle;                              // 0x04D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185B[0x7];                                     // 0x04D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetButtonStyle(const struct FModioUIStyleRef& ButtonStyleRef, bool bApplyStyle);
	void SetLabel(class FText NewLabel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioButton">();
	}
	static class UModioButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioButton>();
	}
};
static_assert(alignof(UModioButton) == 0x000008, "Wrong alignment on UModioButton");
static_assert(sizeof(UModioButton) == 0x0004E0, "Wrong size on UModioButton");
static_assert(offsetof(UModioButton, OnSetLabel) == 0x000430, "Member 'UModioButton::OnSetLabel' has a wrong offset!");
static_assert(offsetof(UModioButton, ButtonStyle) == 0x000440, "Member 'UModioButton::ButtonStyle' has a wrong offset!");
static_assert(offsetof(UModioButton, BorderStyle) == 0x000448, "Member 'UModioButton::BorderStyle' has a wrong offset!");
static_assert(offsetof(UModioButton, bOverrideGlobalStyle) == 0x0004D8, "Member 'UModioButton::bOverrideGlobalStyle' has a wrong offset!");

// Class ModioUI.ModioButtonStyleContainer
// 0x02A0 (0x0370 - 0x00D0)
class UModioButtonStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioButtonStyle                      Style;                                             // 0x00D0(0x02A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioButtonStyleContainer">();
	}
	static class UModioButtonStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioButtonStyleContainer>();
	}
};
static_assert(alignof(UModioButtonStyleContainer) == 0x000008, "Wrong alignment on UModioButtonStyleContainer");
static_assert(sizeof(UModioButtonStyleContainer) == 0x000370, "Wrong size on UModioButtonStyleContainer");
static_assert(offsetof(UModioButtonStyleContainer, Style) == 0x0000D0, "Member 'UModioButtonStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioCheckBox
// 0x0030 (0x07A0 - 0x0770)
class UModioCheckBox final  : public UCheckBox
{
public:
	uint8                                         Pad_185D[0x10];                                    // 0x0770(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LabelText;                                         // 0x0780(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       CheckBoxStyle;                                     // 0x0798(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCheckBox">();
	}
	static class UModioCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCheckBox>();
	}
};
static_assert(alignof(UModioCheckBox) == 0x000008, "Wrong alignment on UModioCheckBox");
static_assert(sizeof(UModioCheckBox) == 0x0007A0, "Wrong size on UModioCheckBox");
static_assert(offsetof(UModioCheckBox, LabelText) == 0x000780, "Member 'UModioCheckBox::LabelText' has a wrong offset!");
static_assert(offsetof(UModioCheckBox, CheckBoxStyle) == 0x000798, "Member 'UModioCheckBox::CheckBoxStyle' has a wrong offset!");

// Class ModioUI.ModioCheckBoxMaterialParams
// 0x0020 (0x0048 - 0x0028)
class UModioCheckBoxMaterialParams final  : public UModioProceduralBrushParams
{
public:
	struct FModioUIColorRef                       InnerColor;                                        // 0x0028(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       TickColor;                                         // 0x0030(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       BorderColor;                                       // 0x0038(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsTicked;                                         // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBorder;                                     // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185E[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BorderRadius;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCheckBoxMaterialParams">();
	}
	static class UModioCheckBoxMaterialParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCheckBoxMaterialParams>();
	}
};
static_assert(alignof(UModioCheckBoxMaterialParams) == 0x000008, "Wrong alignment on UModioCheckBoxMaterialParams");
static_assert(sizeof(UModioCheckBoxMaterialParams) == 0x000048, "Wrong size on UModioCheckBoxMaterialParams");
static_assert(offsetof(UModioCheckBoxMaterialParams, InnerColor) == 0x000028, "Member 'UModioCheckBoxMaterialParams::InnerColor' has a wrong offset!");
static_assert(offsetof(UModioCheckBoxMaterialParams, TickColor) == 0x000030, "Member 'UModioCheckBoxMaterialParams::TickColor' has a wrong offset!");
static_assert(offsetof(UModioCheckBoxMaterialParams, BorderColor) == 0x000038, "Member 'UModioCheckBoxMaterialParams::BorderColor' has a wrong offset!");
static_assert(offsetof(UModioCheckBoxMaterialParams, bIsTicked) == 0x000040, "Member 'UModioCheckBoxMaterialParams::bIsTicked' has a wrong offset!");
static_assert(offsetof(UModioCheckBoxMaterialParams, bEnableBorder) == 0x000041, "Member 'UModioCheckBoxMaterialParams::bEnableBorder' has a wrong offset!");
static_assert(offsetof(UModioCheckBoxMaterialParams, BorderRadius) == 0x000044, "Member 'UModioCheckBoxMaterialParams::BorderRadius' has a wrong offset!");

// Class ModioUI.ModioCheckBoxStyleContainer
// 0x08C0 (0x0990 - 0x00D0)
class UModioCheckBoxStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioCheckBoxStyle                    Style;                                             // 0x00D0(0x08C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCheckBoxStyleContainer">();
	}
	static class UModioCheckBoxStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCheckBoxStyleContainer>();
	}
};
static_assert(alignof(UModioCheckBoxStyleContainer) == 0x000008, "Wrong alignment on UModioCheckBoxStyleContainer");
static_assert(sizeof(UModioCheckBoxStyleContainer) == 0x000990, "Wrong size on UModioCheckBoxStyleContainer");
static_assert(offsetof(UModioCheckBoxStyleContainer, Style) == 0x0000D0, "Member 'UModioCheckBoxStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioCircle
// 0x0050 (0x0158 - 0x0108)
class UModioCircle final  : public UWidget
{
public:
	uint8                                         Pad_185F[0x10];                                    // 0x0108(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Resolution;                                        // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartAngleInDegrees;                               // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ArcInDegrees;                                      // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Radius;                                            // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Thickness;                                         // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1860[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0130(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCircle">();
	}
	static class UModioCircle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCircle>();
	}
};
static_assert(alignof(UModioCircle) == 0x000008, "Wrong alignment on UModioCircle");
static_assert(sizeof(UModioCircle) == 0x000158, "Wrong size on UModioCircle");
static_assert(offsetof(UModioCircle, Resolution) == 0x000118, "Member 'UModioCircle::Resolution' has a wrong offset!");
static_assert(offsetof(UModioCircle, StartAngleInDegrees) == 0x00011C, "Member 'UModioCircle::StartAngleInDegrees' has a wrong offset!");
static_assert(offsetof(UModioCircle, ArcInDegrees) == 0x000120, "Member 'UModioCircle::ArcInDegrees' has a wrong offset!");
static_assert(offsetof(UModioCircle, Radius) == 0x000124, "Member 'UModioCircle::Radius' has a wrong offset!");
static_assert(offsetof(UModioCircle, Thickness) == 0x000128, "Member 'UModioCircle::Thickness' has a wrong offset!");
static_assert(offsetof(UModioCircle, ColorAndOpacity) == 0x000130, "Member 'UModioCircle::ColorAndOpacity' has a wrong offset!");

// Class ModioUI.ModioRichTextButton
// 0x0078 (0x0558 - 0x04E0)
class UModioRichTextButton final  : public UModioButton
{
public:
	uint8                                         Pad_1861[0x28];                                    // 0x04E0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioRichTextBlock*                    ButtonContent;                                     // 0x0508(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioInputBindingImage*                InputHintImage;                                    // 0x0510(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   ButtonLabel;                                       // 0x0518(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FName                                   DefaultStyleName;                                  // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextJustify                                  Justification;                                     // 0x0538(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1862[0x7];                                     // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   KeyForInputHint;                                   // 0x0540(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	ESlateVisibility GetInputHintVisibility(EModioUIInputMode InputMode);

	const struct FModioRichTextStyle GetRichTextStyle() const;
	TArray<class FString> GetStyleNames() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioRichTextButton">();
	}
	static class UModioRichTextButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioRichTextButton>();
	}
};
static_assert(alignof(UModioRichTextButton) == 0x000008, "Wrong alignment on UModioRichTextButton");
static_assert(sizeof(UModioRichTextButton) == 0x000558, "Wrong size on UModioRichTextButton");
static_assert(offsetof(UModioRichTextButton, ButtonContent) == 0x000508, "Member 'UModioRichTextButton::ButtonContent' has a wrong offset!");
static_assert(offsetof(UModioRichTextButton, InputHintImage) == 0x000510, "Member 'UModioRichTextButton::InputHintImage' has a wrong offset!");
static_assert(offsetof(UModioRichTextButton, ButtonLabel) == 0x000518, "Member 'UModioRichTextButton::ButtonLabel' has a wrong offset!");
static_assert(offsetof(UModioRichTextButton, DefaultStyleName) == 0x000530, "Member 'UModioRichTextButton::DefaultStyleName' has a wrong offset!");
static_assert(offsetof(UModioRichTextButton, Justification) == 0x000538, "Member 'UModioRichTextButton::Justification' has a wrong offset!");
static_assert(offsetof(UModioRichTextButton, KeyForInputHint) == 0x000540, "Member 'UModioRichTextButton::KeyForInputHint' has a wrong offset!");

// Class ModioUI.ModioCircularProgressBar
// 0x0058 (0x0160 - 0x0108)
class UModioCircularProgressBar final  : public UWidget
{
public:
	uint8                                         Pad_1863[0x10];                                    // 0x0108(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BackgroundThickness;                               // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ForegroundThickness;                               // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Radius;                                            // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         StartAngleInDegrees;                               // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Progress;                                          // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BackgroundColor;                                   // 0x012C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           ForegroundColor;                                   // 0x013C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void()>                             OnGetProgress;                                     // 0x014C(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1864[0x4];                                     // 0x015C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetProgress() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCircularProgressBar">();
	}
	static class UModioCircularProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCircularProgressBar>();
	}
};
static_assert(alignof(UModioCircularProgressBar) == 0x000008, "Wrong alignment on UModioCircularProgressBar");
static_assert(sizeof(UModioCircularProgressBar) == 0x000160, "Wrong size on UModioCircularProgressBar");
static_assert(offsetof(UModioCircularProgressBar, BackgroundThickness) == 0x000118, "Member 'UModioCircularProgressBar::BackgroundThickness' has a wrong offset!");
static_assert(offsetof(UModioCircularProgressBar, ForegroundThickness) == 0x00011C, "Member 'UModioCircularProgressBar::ForegroundThickness' has a wrong offset!");
static_assert(offsetof(UModioCircularProgressBar, Radius) == 0x000120, "Member 'UModioCircularProgressBar::Radius' has a wrong offset!");
static_assert(offsetof(UModioCircularProgressBar, StartAngleInDegrees) == 0x000124, "Member 'UModioCircularProgressBar::StartAngleInDegrees' has a wrong offset!");
static_assert(offsetof(UModioCircularProgressBar, Progress) == 0x000128, "Member 'UModioCircularProgressBar::Progress' has a wrong offset!");
static_assert(offsetof(UModioCircularProgressBar, BackgroundColor) == 0x00012C, "Member 'UModioCircularProgressBar::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UModioCircularProgressBar, ForegroundColor) == 0x00013C, "Member 'UModioCircularProgressBar::ForegroundColor' has a wrong offset!");
static_assert(offsetof(UModioCircularProgressBar, OnGetProgress) == 0x00014C, "Member 'UModioCircularProgressBar::OnGetProgress' has a wrong offset!");

// Class ModioUI.ModioCodeInputStyleContainer
// 0x0320 (0x03F0 - 0x00D0)
class UModioCodeInputStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioCodeInputStyle                   Style;                                             // 0x00D0(0x0320)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCodeInputStyleContainer">();
	}
	static class UModioCodeInputStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCodeInputStyleContainer>();
	}
};
static_assert(alignof(UModioCodeInputStyleContainer) == 0x000008, "Wrong alignment on UModioCodeInputStyleContainer");
static_assert(sizeof(UModioCodeInputStyleContainer) == 0x0003F0, "Wrong size on UModioCodeInputStyleContainer");
static_assert(offsetof(UModioCodeInputStyleContainer, Style) == 0x0000D0, "Member 'UModioCodeInputStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioCodeInputWidget
// 0x0070 (0x0178 - 0x0108)
class UModioCodeInputWidget final  : public UWidget
{
public:
	uint8                                         Pad_1865[0x20];                                    // 0x0108(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfCharacters;                                // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       Style;                                             // 0x012C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bValidateInput;                                    // 0x0134(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1866[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModioTextValidationRule>       ValidationRules;                                   // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bDisplayValidationErrors;                          // 0x0148(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1867[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       TextStyle;                                         // 0x014C(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1868[0x24];                                    // 0x0154(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FEventReply ValidateCodeInputCharacter(const class FString& Character);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCodeInputWidget">();
	}
	static class UModioCodeInputWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCodeInputWidget>();
	}
};
static_assert(alignof(UModioCodeInputWidget) == 0x000008, "Wrong alignment on UModioCodeInputWidget");
static_assert(sizeof(UModioCodeInputWidget) == 0x000178, "Wrong size on UModioCodeInputWidget");
static_assert(offsetof(UModioCodeInputWidget, NumberOfCharacters) == 0x000128, "Member 'UModioCodeInputWidget::NumberOfCharacters' has a wrong offset!");
static_assert(offsetof(UModioCodeInputWidget, Style) == 0x00012C, "Member 'UModioCodeInputWidget::Style' has a wrong offset!");
static_assert(offsetof(UModioCodeInputWidget, bValidateInput) == 0x000134, "Member 'UModioCodeInputWidget::bValidateInput' has a wrong offset!");
static_assert(offsetof(UModioCodeInputWidget, ValidationRules) == 0x000138, "Member 'UModioCodeInputWidget::ValidationRules' has a wrong offset!");
static_assert(offsetof(UModioCodeInputWidget, bDisplayValidationErrors) == 0x000148, "Member 'UModioCodeInputWidget::bDisplayValidationErrors' has a wrong offset!");
static_assert(offsetof(UModioCodeInputWidget, TextStyle) == 0x00014C, "Member 'UModioCodeInputWidget::TextStyle' has a wrong offset!");

// Class ModioUI.ModioCollectionTileStatus
// 0x00D8 (0x0378 - 0x02A0)
class UModioCollectionTileStatus : public UModioModManagementWidgetBase
{
public:
	uint8                                         Pad_1869[0x10];                                    // 0x02A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PendingLabelText;                                  // 0x02B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   UpdatePendingLabelText;                            // 0x02C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   UninstallPendingLabelText;                         // 0x02E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   DownloadingLabelText;                              // 0x02F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ExtractingLabelText;                               // 0x0310(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   SubscribedLabelText;                               // 0x0328(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   InstalledLabelText;                                // 0x0340(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    StatusText;                                        // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    StatusPercent;                                     // 0x0360(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioProgressBar*                      ProgressBar;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioSizeBox*                          ProgressBarSizeBox;                                // 0x0370(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCollectionTileStatus">();
	}
	static class UModioCollectionTileStatus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCollectionTileStatus>();
	}
};
static_assert(alignof(UModioCollectionTileStatus) == 0x000008, "Wrong alignment on UModioCollectionTileStatus");
static_assert(sizeof(UModioCollectionTileStatus) == 0x000378, "Wrong size on UModioCollectionTileStatus");
static_assert(offsetof(UModioCollectionTileStatus, PendingLabelText) == 0x0002B0, "Member 'UModioCollectionTileStatus::PendingLabelText' has a wrong offset!");
static_assert(offsetof(UModioCollectionTileStatus, UpdatePendingLabelText) == 0x0002C8, "Member 'UModioCollectionTileStatus::UpdatePendingLabelText' has a wrong offset!");
static_assert(offsetof(UModioCollectionTileStatus, UninstallPendingLabelText) == 0x0002E0, "Member 'UModioCollectionTileStatus::UninstallPendingLabelText' has a wrong offset!");
static_assert(offsetof(UModioCollectionTileStatus, DownloadingLabelText) == 0x0002F8, "Member 'UModioCollectionTileStatus::DownloadingLabelText' has a wrong offset!");
static_assert(offsetof(UModioCollectionTileStatus, ExtractingLabelText) == 0x000310, "Member 'UModioCollectionTileStatus::ExtractingLabelText' has a wrong offset!");
static_assert(offsetof(UModioCollectionTileStatus, SubscribedLabelText) == 0x000328, "Member 'UModioCollectionTileStatus::SubscribedLabelText' has a wrong offset!");
static_assert(offsetof(UModioCollectionTileStatus, InstalledLabelText) == 0x000340, "Member 'UModioCollectionTileStatus::InstalledLabelText' has a wrong offset!");
static_assert(offsetof(UModioCollectionTileStatus, StatusText) == 0x000358, "Member 'UModioCollectionTileStatus::StatusText' has a wrong offset!");
static_assert(offsetof(UModioCollectionTileStatus, StatusPercent) == 0x000360, "Member 'UModioCollectionTileStatus::StatusPercent' has a wrong offset!");
static_assert(offsetof(UModioCollectionTileStatus, ProgressBar) == 0x000368, "Member 'UModioCollectionTileStatus::ProgressBar' has a wrong offset!");
static_assert(offsetof(UModioCollectionTileStatus, ProgressBarSizeBox) == 0x000370, "Member 'UModioCollectionTileStatus::ProgressBarSizeBox' has a wrong offset!");

// Class ModioUI.ModioMenuView
// 0x0030 (0x02A8 - 0x0278)
class UModioMenuView : public UModioUserWidgetBase
{
public:
	class UUserWidget*                            CachedMenuTitleContentWidget;                      // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   MenuName;                                          // 0x0280(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>                TitleContentClass;                                 // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldShowTopNavBar;                              // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldShowBackButton;                             // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_186A[0x6];                                     // 0x02A2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioMenuView">();
	}
	static class UModioMenuView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioMenuView>();
	}
};
static_assert(alignof(UModioMenuView) == 0x000008, "Wrong alignment on UModioMenuView");
static_assert(sizeof(UModioMenuView) == 0x0002A8, "Wrong size on UModioMenuView");
static_assert(offsetof(UModioMenuView, CachedMenuTitleContentWidget) == 0x000278, "Member 'UModioMenuView::CachedMenuTitleContentWidget' has a wrong offset!");
static_assert(offsetof(UModioMenuView, MenuName) == 0x000280, "Member 'UModioMenuView::MenuName' has a wrong offset!");
static_assert(offsetof(UModioMenuView, TitleContentClass) == 0x000298, "Member 'UModioMenuView::TitleContentClass' has a wrong offset!");
static_assert(offsetof(UModioMenuView, bShouldShowTopNavBar) == 0x0002A0, "Member 'UModioMenuView::bShouldShowTopNavBar' has a wrong offset!");
static_assert(offsetof(UModioMenuView, bShouldShowBackButton) == 0x0002A1, "Member 'UModioMenuView::bShouldShowBackButton' has a wrong offset!");

// Class ModioUI.ModioCollectionView
// 0x0170 (0x0418 - 0x02A8)
class UModioCollectionView : public UModioMenuView
{
public:
	uint8                                         Pad_186B[0x20];                                    // 0x02A8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioRichTextBlock*                    CollectionTitle;                                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioEditableTextBox*                  SearchInput;                                       // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   ShowUserSubscriptionsText;                         // 0x02D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ShowSystemCollectionText;                          // 0x02F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   FetchButton;                                       // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioPopupComboBox*                    ModGroupSelection;                                 // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioPopupComboBox*                    SortBy;                                            // 0x0318(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioListView*                         CollectionList;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    CollectionCount;                                   // 0x0328(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    InfoRichTextBlock;                                 // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UModioModCollectionEntryUI*>     CachedCollection;                                  // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UModioModCollectionEntryUI*>     FilteredCollection;                                // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_186C[0x40];                                    // 0x0358(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioModCollectionTile*                CurrentTile;                                       // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   DefaultButtonLabel;                                // 0x03A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   SearchingButtonLabel;                              // 0x03B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   NoSubscribedModsText;                              // 0x03D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   NoModsFoundText;                                   // 0x03E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_186D[0x18];                                    // 0x0400(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFetchUpdatesClicked();
	void OnModGroupChanged(class FText SelectedItem, ESelectInfo SelectionType);
	void SortAToZ();
	void SortRecentlyUpdatedDelegate();
	void SortSizeOnDisk();
	void SortZToA();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCollectionView">();
	}
	static class UModioCollectionView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCollectionView>();
	}
};
static_assert(alignof(UModioCollectionView) == 0x000008, "Wrong alignment on UModioCollectionView");
static_assert(sizeof(UModioCollectionView) == 0x000418, "Wrong size on UModioCollectionView");
static_assert(offsetof(UModioCollectionView, CollectionTitle) == 0x0002C8, "Member 'UModioCollectionView::CollectionTitle' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, SearchInput) == 0x0002D0, "Member 'UModioCollectionView::SearchInput' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, ShowUserSubscriptionsText) == 0x0002D8, "Member 'UModioCollectionView::ShowUserSubscriptionsText' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, ShowSystemCollectionText) == 0x0002F0, "Member 'UModioCollectionView::ShowSystemCollectionText' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, FetchButton) == 0x000308, "Member 'UModioCollectionView::FetchButton' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, ModGroupSelection) == 0x000310, "Member 'UModioCollectionView::ModGroupSelection' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, SortBy) == 0x000318, "Member 'UModioCollectionView::SortBy' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, CollectionList) == 0x000320, "Member 'UModioCollectionView::CollectionList' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, CollectionCount) == 0x000328, "Member 'UModioCollectionView::CollectionCount' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, InfoRichTextBlock) == 0x000330, "Member 'UModioCollectionView::InfoRichTextBlock' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, CachedCollection) == 0x000338, "Member 'UModioCollectionView::CachedCollection' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, FilteredCollection) == 0x000348, "Member 'UModioCollectionView::FilteredCollection' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, CurrentTile) == 0x000398, "Member 'UModioCollectionView::CurrentTile' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, DefaultButtonLabel) == 0x0003A0, "Member 'UModioCollectionView::DefaultButtonLabel' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, SearchingButtonLabel) == 0x0003B8, "Member 'UModioCollectionView::SearchingButtonLabel' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, NoSubscribedModsText) == 0x0003D0, "Member 'UModioCollectionView::NoSubscribedModsText' has a wrong offset!");
static_assert(offsetof(UModioCollectionView, NoModsFoundText) == 0x0003E8, "Member 'UModioCollectionView::NoModsFoundText' has a wrong offset!");

// Class ModioUI.ModioColorPresets
// 0x0050 (0x0080 - 0x0030)
class UModioColorPresets final  : public UDataAsset
{
public:
	TMap<class FName, struct FModioUIColor>       ColorPresets;                                      // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioColorPresets">();
	}
	static class UModioColorPresets* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioColorPresets>();
	}
};
static_assert(alignof(UModioColorPresets) == 0x000008, "Wrong alignment on UModioColorPresets");
static_assert(sizeof(UModioColorPresets) == 0x000080, "Wrong size on UModioColorPresets");
static_assert(offsetof(UModioColorPresets, ColorPresets) == 0x000030, "Member 'UModioColorPresets::ColorPresets' has a wrong offset!");

// Class ModioUI.ModioComboBox
// 0x0008 (0x0148 - 0x0140)
class UModioComboBox final  : public UComboBox
{
public:
	EMenuPlacement                                MenuPlacement;                                     // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_186F[0x7];                                     // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioComboBox">();
	}
	static class UModioComboBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioComboBox>();
	}
};
static_assert(alignof(UModioComboBox) == 0x000008, "Wrong alignment on UModioComboBox");
static_assert(sizeof(UModioComboBox) == 0x000148, "Wrong size on UModioComboBox");
static_assert(offsetof(UModioComboBox, MenuPlacement) == 0x000140, "Member 'UModioComboBox::MenuPlacement' has a wrong offset!");

// Class ModioUI.ModioComboBoxString
// 0x0078 (0x0E78 - 0x0E00)
class UModioComboBoxString final  : public UComboBoxString
{
public:
	uint8                                         Pad_1870[0x10];                                    // 0x0E00(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EMenuPlacement                                Placement;                                         // 0x0E10(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCreateNewWindow;                                  // 0x0E11(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWrapMenuContent;                                  // 0x0E12(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1871[0x5];                                     // 0x0E13(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      ContentWrapMaterial;                               // 0x0E18(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableBorder;                                     // 0x0E40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1872[0x3];                                     // 0x0E41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 BorderColor;                                       // 0x0E44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BorderRadius;                                      // 0x0E48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BorderThickness;                                   // 0x0E4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BorderOpacity;                                     // 0x0E50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1873[0x24];                                    // 0x0E54(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioComboBoxString">();
	}
	static class UModioComboBoxString* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioComboBoxString>();
	}
};
static_assert(alignof(UModioComboBoxString) == 0x000008, "Wrong alignment on UModioComboBoxString");
static_assert(sizeof(UModioComboBoxString) == 0x000E78, "Wrong size on UModioComboBoxString");
static_assert(offsetof(UModioComboBoxString, Placement) == 0x000E10, "Member 'UModioComboBoxString::Placement' has a wrong offset!");
static_assert(offsetof(UModioComboBoxString, bCreateNewWindow) == 0x000E11, "Member 'UModioComboBoxString::bCreateNewWindow' has a wrong offset!");
static_assert(offsetof(UModioComboBoxString, bWrapMenuContent) == 0x000E12, "Member 'UModioComboBoxString::bWrapMenuContent' has a wrong offset!");
static_assert(offsetof(UModioComboBoxString, ContentWrapMaterial) == 0x000E18, "Member 'UModioComboBoxString::ContentWrapMaterial' has a wrong offset!");
static_assert(offsetof(UModioComboBoxString, bEnableBorder) == 0x000E40, "Member 'UModioComboBoxString::bEnableBorder' has a wrong offset!");
static_assert(offsetof(UModioComboBoxString, BorderColor) == 0x000E44, "Member 'UModioComboBoxString::BorderColor' has a wrong offset!");
static_assert(offsetof(UModioComboBoxString, BorderRadius) == 0x000E48, "Member 'UModioComboBoxString::BorderRadius' has a wrong offset!");
static_assert(offsetof(UModioComboBoxString, BorderThickness) == 0x000E4C, "Member 'UModioComboBoxString::BorderThickness' has a wrong offset!");
static_assert(offsetof(UModioComboBoxString, BorderOpacity) == 0x000E50, "Member 'UModioComboBoxString::BorderOpacity' has a wrong offset!");

// Class ModioUI.ModioUICommandInfoLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioUICommandInfoLibrary final  : public UBlueprintFunctionLibrary
{
public:
	static struct FModioUIMenuEntry BackCommand();
	static struct FModioUIMenuEntry CollapseCommand();
	static struct FModioUIMenuEntry ConfirmCommand();
	static struct FModioUIMenuEntry DownloadQueueCommand();
	static struct FModioUIMenuEntry MoreOptionsCommand();
	static struct FModioUIMenuEntry NextPageCommand();
	static struct FModioUIMenuEntry PreviousPageCommand();
	static struct FModioUIMenuEntry RefineSearchCommand();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUICommandInfoLibrary">();
	}
	static class UModioUICommandInfoLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUICommandInfoLibrary>();
	}
};
static_assert(alignof(UModioUICommandInfoLibrary) == 0x000008, "Wrong alignment on UModioUICommandInfoLibrary");
static_assert(sizeof(UModioUICommandInfoLibrary) == 0x000028, "Wrong size on UModioUICommandInfoLibrary");

// Class ModioUI.ModioCustomComboBoxStyleContainer
// 0x0058 (0x0128 - 0x00D0)
class UModioCustomComboBoxStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioCustomComboBoxStyle              Style;                                             // 0x00D0(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCustomComboBoxStyleContainer">();
	}
	static class UModioCustomComboBoxStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCustomComboBoxStyleContainer>();
	}
};
static_assert(alignof(UModioCustomComboBoxStyleContainer) == 0x000008, "Wrong alignment on UModioCustomComboBoxStyleContainer");
static_assert(sizeof(UModioCustomComboBoxStyleContainer) == 0x000128, "Wrong size on UModioCustomComboBoxStyleContainer");
static_assert(offsetof(UModioCustomComboBoxStyleContainer, Style) == 0x0000D0, "Member 'UModioCustomComboBoxStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioTabButton
// 0x0010 (0x0288 - 0x0278)
class UModioTabButton final  : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_1874[0x8];                                     // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioButton*                           ClickableRegion;                                   // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTabButton">();
	}
	static class UModioTabButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTabButton>();
	}
};
static_assert(alignof(UModioTabButton) == 0x000008, "Wrong alignment on UModioTabButton");
static_assert(sizeof(UModioTabButton) == 0x000288, "Wrong size on UModioTabButton");
static_assert(offsetof(UModioTabButton, ClickableRegion) == 0x000280, "Member 'UModioTabButton::ClickableRegion' has a wrong offset!");

// Class ModioUI.ModioDefaultInputGlyphProvider
// 0x00F0 (0x0118 - 0x0028)
class UModioDefaultInputGlyphProvider final  : public UObject
{
public:
	uint8                                         Pad_1875[0xF0];                                    // 0x0028(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultInputGlyphProvider">();
	}
	static class UModioDefaultInputGlyphProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultInputGlyphProvider>();
	}
};
static_assert(alignof(UModioDefaultInputGlyphProvider) == 0x000008, "Wrong alignment on UModioDefaultInputGlyphProvider");
static_assert(sizeof(UModioDefaultInputGlyphProvider) == 0x000118, "Wrong size on UModioDefaultInputGlyphProvider");

// Class ModioUI.ModioDefaultPopupMenuContent
// 0x00F0 (0x0350 - 0x0260)
class UModioDefaultPopupMenuContent final  : public UUserWidget
{
public:
	uint8                                         Pad_1876[0xA0];                                    // 0x0260(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       TextStyle;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       BorderStyle;                                       // 0x0308(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FModioUIMaterialRef                    RetainerMaterial;                                  // 0x0310(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1877[0x38];                                    // 0x0318(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDefaultPopupMenuContent">();
	}
	static class UModioDefaultPopupMenuContent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDefaultPopupMenuContent>();
	}
};
static_assert(alignof(UModioDefaultPopupMenuContent) == 0x000008, "Wrong alignment on UModioDefaultPopupMenuContent");
static_assert(sizeof(UModioDefaultPopupMenuContent) == 0x000350, "Wrong size on UModioDefaultPopupMenuContent");
static_assert(offsetof(UModioDefaultPopupMenuContent, TextStyle) == 0x000300, "Member 'UModioDefaultPopupMenuContent::TextStyle' has a wrong offset!");
static_assert(offsetof(UModioDefaultPopupMenuContent, BorderStyle) == 0x000308, "Member 'UModioDefaultPopupMenuContent::BorderStyle' has a wrong offset!");
static_assert(offsetof(UModioDefaultPopupMenuContent, RetainerMaterial) == 0x000310, "Member 'UModioDefaultPopupMenuContent::RetainerMaterial' has a wrong offset!");

// Class ModioUI.ModioScrollBox
// 0x0030 (0x08B0 - 0x0880)
class UModioScrollBox final  : public UScrollBox
{
public:
	uint8                                         Pad_1878[0x28];                                    // 0x0880(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	EModioScrollBoxBarAlignment                   ScrollBarAlignment;                                // 0x08A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1879[0x3];                                     // 0x08A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditionalPadding;                                 // 0x08AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioScrollBox">();
	}
	static class UModioScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioScrollBox>();
	}
};
static_assert(alignof(UModioScrollBox) == 0x000008, "Wrong alignment on UModioScrollBox");
static_assert(sizeof(UModioScrollBox) == 0x0008B0, "Wrong size on UModioScrollBox");
static_assert(offsetof(UModioScrollBox, ScrollBarAlignment) == 0x0008A8, "Member 'UModioScrollBox::ScrollBarAlignment' has a wrong offset!");
static_assert(offsetof(UModioScrollBox, AdditionalPadding) == 0x0008AC, "Member 'UModioScrollBox::AdditionalPadding' has a wrong offset!");

// Class ModioUI.ModioDialogBaseInternal
// 0x0128 (0x0230 - 0x0108)
class UModioDialogBaseInternal final  : public UWidget
{
public:
	uint8                                         Pad_187A[0xB0];                                    // 0x0108(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                LoadingSpinner;                                    // 0x01B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                DataSource;                                        // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       DialogStyle;                                       // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                ButtonSpacing;                                     // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UWidget*                                SubHeaderWidget;                                   // 0x01E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UModioDialogController>  Controller;                                        // 0x01E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_187B[0x10];                                    // 0x01F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                InputWidget;                                       // 0x0200(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ButtonWidget;                                      // 0x0208(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_187C[0x20];                                    // 0x0210(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnNavigateDownFromCodeInputWidget();
	void OnSubmitKeyPressed();
	void SetDialogFocus();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDialogBaseInternal">();
	}
	static class UModioDialogBaseInternal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDialogBaseInternal>();
	}
};
static_assert(alignof(UModioDialogBaseInternal) == 0x000008, "Wrong alignment on UModioDialogBaseInternal");
static_assert(sizeof(UModioDialogBaseInternal) == 0x000230, "Wrong size on UModioDialogBaseInternal");
static_assert(offsetof(UModioDialogBaseInternal, LoadingSpinner) == 0x0001B8, "Member 'UModioDialogBaseInternal::LoadingSpinner' has a wrong offset!");
static_assert(offsetof(UModioDialogBaseInternal, DataSource) == 0x0001C0, "Member 'UModioDialogBaseInternal::DataSource' has a wrong offset!");
static_assert(offsetof(UModioDialogBaseInternal, DialogStyle) == 0x0001C8, "Member 'UModioDialogBaseInternal::DialogStyle' has a wrong offset!");
static_assert(offsetof(UModioDialogBaseInternal, ButtonSpacing) == 0x0001D0, "Member 'UModioDialogBaseInternal::ButtonSpacing' has a wrong offset!");
static_assert(offsetof(UModioDialogBaseInternal, SubHeaderWidget) == 0x0001E0, "Member 'UModioDialogBaseInternal::SubHeaderWidget' has a wrong offset!");
static_assert(offsetof(UModioDialogBaseInternal, Controller) == 0x0001E8, "Member 'UModioDialogBaseInternal::Controller' has a wrong offset!");
static_assert(offsetof(UModioDialogBaseInternal, InputWidget) == 0x000200, "Member 'UModioDialogBaseInternal::InputWidget' has a wrong offset!");
static_assert(offsetof(UModioDialogBaseInternal, ButtonWidget) == 0x000208, "Member 'UModioDialogBaseInternal::ButtonWidget' has a wrong offset!");

// Class ModioUI.ModioDrawerContentBase
// 0x0060 (0x02D8 - 0x0278)
class UModioDrawerContentBase final  : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_187D[0x48];                                    // 0x0278(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UNamedSlot*                             HeaderSlot;                                        // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNamedSlot*                             ContentSlot;                                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNamedSlot*                             OptionalContentSlot;                               // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UWidget* GetContentWidget();
	class UWidget* GetHeaderWidget();
	class UWidget* GetOptionalContentWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDrawerContentBase">();
	}
	static class UModioDrawerContentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDrawerContentBase>();
	}
};
static_assert(alignof(UModioDrawerContentBase) == 0x000008, "Wrong alignment on UModioDrawerContentBase");
static_assert(sizeof(UModioDrawerContentBase) == 0x0002D8, "Wrong size on UModioDrawerContentBase");
static_assert(offsetof(UModioDrawerContentBase, HeaderSlot) == 0x0002C0, "Member 'UModioDrawerContentBase::HeaderSlot' has a wrong offset!");
static_assert(offsetof(UModioDrawerContentBase, ContentSlot) == 0x0002C8, "Member 'UModioDrawerContentBase::ContentSlot' has a wrong offset!");
static_assert(offsetof(UModioDrawerContentBase, OptionalContentSlot) == 0x0002D0, "Member 'UModioDrawerContentBase::OptionalContentSlot' has a wrong offset!");

// Class ModioUI.ModioTreeView
// 0x0000 (0x03C0 - 0x03C0)
class UModioTreeView final  : public UTreeView
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTreeView">();
	}
	static class UModioTreeView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTreeView>();
	}
};
static_assert(alignof(UModioTreeView) == 0x000008, "Wrong alignment on UModioTreeView");
static_assert(sizeof(UModioTreeView) == 0x0003C0, "Wrong size on UModioTreeView");

// Class ModioUI.ModioOverlay
// 0x0000 (0x0130 - 0x0130)
class UModioOverlay : public UOverlay
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioOverlay">();
	}
	static class UModioOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioOverlay>();
	}
};
static_assert(alignof(UModioOverlay) == 0x000008, "Wrong alignment on UModioOverlay");
static_assert(sizeof(UModioOverlay) == 0x000130, "Wrong size on UModioOverlay");

// Class ModioUI.ModioDrawerController
// 0x0028 (0x0158 - 0x0130)
class UModioDrawerController final  : public UModioOverlay
{
public:
	uint8                                         Pad_187E[0x28];                                    // 0x0130(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CollapseAllDrawers();
	void DrawerAnimatedOut();
	void SetDrawerExpanded(int32 SlotIndex, bool bExpandedState, bool bCloseOtherDrawers);
	bool ToggleDrawerExpanded(int32 SlotIndex, bool bCloseOtherDrawers);

	bool IsAnyDrawerExpanded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDrawerController">();
	}
	static class UModioDrawerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDrawerController>();
	}
};
static_assert(alignof(UModioDrawerController) == 0x000008, "Wrong alignment on UModioDrawerController");
static_assert(sizeof(UModioDrawerController) == 0x000158, "Wrong size on UModioDrawerController");

// Class ModioUI.ModioTextWidgetStyleContainer
// 0x0270 (0x0340 - 0x00D0)
class UModioTextWidgetStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FTextBlockStyle                        Style;                                             // 0x00D0(0x0270)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTextWidgetStyleContainer">();
	}
	static class UModioTextWidgetStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTextWidgetStyleContainer>();
	}
};
static_assert(alignof(UModioTextWidgetStyleContainer) == 0x000008, "Wrong alignment on UModioTextWidgetStyleContainer");
static_assert(sizeof(UModioTextWidgetStyleContainer) == 0x000340, "Wrong size on UModioTextWidgetStyleContainer");
static_assert(offsetof(UModioTextWidgetStyleContainer, Style) == 0x0000D0, "Member 'UModioTextWidgetStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioDrawerControllerSlot
// 0x0038 (0x0090 - 0x0058)
class UModioDrawerControllerSlot final  : public UOverlaySlot
{
public:
	uint8                                         Pad_1881[0x18];                                    // 0x0058(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	EModioDrawerControllerSlotEdge                Edge;                                              // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          DrawerHorizontalAlignment;                         // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            DrawerVerticalAlignment;                           // 0x0072(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExpanded;                                         // 0x0073(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnimationTime;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentAnimationProgress;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1882[0x14];                                    // 0x007C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDrawerControllerSlot">();
	}
	static class UModioDrawerControllerSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDrawerControllerSlot>();
	}
};
static_assert(alignof(UModioDrawerControllerSlot) == 0x000008, "Wrong alignment on UModioDrawerControllerSlot");
static_assert(sizeof(UModioDrawerControllerSlot) == 0x000090, "Wrong size on UModioDrawerControllerSlot");
static_assert(offsetof(UModioDrawerControllerSlot, Edge) == 0x000070, "Member 'UModioDrawerControllerSlot::Edge' has a wrong offset!");
static_assert(offsetof(UModioDrawerControllerSlot, DrawerHorizontalAlignment) == 0x000071, "Member 'UModioDrawerControllerSlot::DrawerHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UModioDrawerControllerSlot, DrawerVerticalAlignment) == 0x000072, "Member 'UModioDrawerControllerSlot::DrawerVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UModioDrawerControllerSlot, bExpanded) == 0x000073, "Member 'UModioDrawerControllerSlot::bExpanded' has a wrong offset!");
static_assert(offsetof(UModioDrawerControllerSlot, AnimationTime) == 0x000074, "Member 'UModioDrawerControllerSlot::AnimationTime' has a wrong offset!");
static_assert(offsetof(UModioDrawerControllerSlot, CurrentAnimationProgress) == 0x000078, "Member 'UModioDrawerControllerSlot::CurrentAnimationProgress' has a wrong offset!");

// Class ModioUI.ModioDrawerWidgetStyleContainer
// 0x01A0 (0x0270 - 0x00D0)
class UModioDrawerWidgetStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioDrawerWidgetStyle                Style;                                             // 0x00D0(0x01A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDrawerWidgetStyleContainer">();
	}
	static class UModioDrawerWidgetStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDrawerWidgetStyleContainer>();
	}
};
static_assert(alignof(UModioDrawerWidgetStyleContainer) == 0x000008, "Wrong alignment on UModioDrawerWidgetStyleContainer");
static_assert(sizeof(UModioDrawerWidgetStyleContainer) == 0x000270, "Wrong size on UModioDrawerWidgetStyleContainer");
static_assert(offsetof(UModioDrawerWidgetStyleContainer, Style) == 0x0000D0, "Member 'UModioDrawerWidgetStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioRetainerBox
// 0x0000 (0x0150 - 0x0150)
class UModioRetainerBox : public URetainerBox
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioRetainerBox">();
	}
	static class UModioRetainerBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioRetainerBox>();
	}
};
static_assert(alignof(UModioRetainerBox) == 0x000008, "Wrong alignment on UModioRetainerBox");
static_assert(sizeof(UModioRetainerBox) == 0x000150, "Wrong size on UModioRetainerBox");

// Class ModioUI.ModioRoundedBorder
// 0x0030 (0x0180 - 0x0150)
class UModioRoundedBorder final  : public UModioRetainerBox
{
public:
	TSoftObjectPtr<class UMaterialInterface>      RetainerMaterial;                                  // 0x0150(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       BorderStyle;                                       // 0x0178(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioRoundedBorder">();
	}
	static class UModioRoundedBorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioRoundedBorder>();
	}
};
static_assert(alignof(UModioRoundedBorder) == 0x000008, "Wrong alignment on UModioRoundedBorder");
static_assert(sizeof(UModioRoundedBorder) == 0x000180, "Wrong size on UModioRoundedBorder");
static_assert(offsetof(UModioRoundedBorder, RetainerMaterial) == 0x000150, "Member 'UModioRoundedBorder::RetainerMaterial' has a wrong offset!");
static_assert(offsetof(UModioRoundedBorder, BorderStyle) == 0x000178, "Member 'UModioRoundedBorder::BorderStyle' has a wrong offset!");

// Class ModioUI.ModioDynamicImageStyleContainer
// 0x0130 (0x0200 - 0x00D0)
class UModioDynamicImageStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioDynamicImageStyle                Style;                                             // 0x00D0(0x0130)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioDynamicImageStyleContainer">();
	}
	static class UModioDynamicImageStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioDynamicImageStyleContainer>();
	}
};
static_assert(alignof(UModioDynamicImageStyleContainer) == 0x000008, "Wrong alignment on UModioDynamicImageStyleContainer");
static_assert(sizeof(UModioDynamicImageStyleContainer) == 0x000200, "Wrong size on UModioDynamicImageStyleContainer");
static_assert(offsetof(UModioDynamicImageStyleContainer, Style) == 0x0000D0, "Member 'UModioDynamicImageStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioUniformGridPanel
// 0x0000 (0x0148 - 0x0148)
class UModioUniformGridPanel final  : public UUniformGridPanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUniformGridPanel">();
	}
	static class UModioUniformGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUniformGridPanel>();
	}
};
static_assert(alignof(UModioUniformGridPanel) == 0x000008, "Wrong alignment on UModioUniformGridPanel");
static_assert(sizeof(UModioUniformGridPanel) == 0x000148, "Wrong size on UModioUniformGridPanel");

// Class ModioUI.ModioEditableText
// 0x0020 (0x0480 - 0x0460)
class UModioEditableText final  : public UEditableText
{
public:
	uint8                                         Pad_1883[0x10];                                    // 0x0460(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       TextStyle;                                         // 0x0470(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   DefaultStyleName;                                  // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	TArray<class FString> GetStyleNames() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioEditableText">();
	}
	static class UModioEditableText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioEditableText>();
	}
};
static_assert(alignof(UModioEditableText) == 0x000008, "Wrong alignment on UModioEditableText");
static_assert(sizeof(UModioEditableText) == 0x000480, "Wrong size on UModioEditableText");
static_assert(offsetof(UModioEditableText, TextStyle) == 0x000470, "Member 'UModioEditableText::TextStyle' has a wrong offset!");
static_assert(offsetof(UModioEditableText, DefaultStyleName) == 0x000478, "Member 'UModioEditableText::DefaultStyleName' has a wrong offset!");

// Class ModioUI.ModioModTileStyleContainer
// 0x0038 (0x0108 - 0x00D0)
class UModioModTileStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioModTileStyle                     Style;                                             // 0x00D0(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTileStyleContainer">();
	}
	static class UModioModTileStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModTileStyleContainer>();
	}
};
static_assert(alignof(UModioModTileStyleContainer) == 0x000008, "Wrong alignment on UModioModTileStyleContainer");
static_assert(sizeof(UModioModTileStyleContainer) == 0x000108, "Wrong size on UModioModTileStyleContainer");
static_assert(offsetof(UModioModTileStyleContainer, Style) == 0x0000D0, "Member 'UModioModTileStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioEditableTextBox
// 0x00A8 (0x0AE0 - 0x0A38)
class UModioEditableTextBox final  : public UEditableTextBox
{
public:
	uint8                                         Pad_1884[0x40];                                    // 0x0A38(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxCharacters;                                     // 0x0A78(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1885[0x14];                                    // 0x0A7C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bValidateInput;                                    // 0x0A90(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1886[0x7];                                     // 0x0A91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModioTextValidationRule>       ValidationRules;                                   // 0x0A98(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bDisplayValidationErrors;                          // 0x0AA8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1887[0x3];                                     // 0x0AA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       TextBoxStyle;                                      // 0x0AAC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       TextStyle;                                         // 0x0AB4(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1888[0x24];                                    // 0x0ABC(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartInput();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioEditableTextBox">();
	}
	static class UModioEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioEditableTextBox>();
	}
};
static_assert(alignof(UModioEditableTextBox) == 0x000008, "Wrong alignment on UModioEditableTextBox");
static_assert(sizeof(UModioEditableTextBox) == 0x000AE0, "Wrong size on UModioEditableTextBox");
static_assert(offsetof(UModioEditableTextBox, MaxCharacters) == 0x000A78, "Member 'UModioEditableTextBox::MaxCharacters' has a wrong offset!");
static_assert(offsetof(UModioEditableTextBox, bValidateInput) == 0x000A90, "Member 'UModioEditableTextBox::bValidateInput' has a wrong offset!");
static_assert(offsetof(UModioEditableTextBox, ValidationRules) == 0x000A98, "Member 'UModioEditableTextBox::ValidationRules' has a wrong offset!");
static_assert(offsetof(UModioEditableTextBox, bDisplayValidationErrors) == 0x000AA8, "Member 'UModioEditableTextBox::bDisplayValidationErrors' has a wrong offset!");
static_assert(offsetof(UModioEditableTextBox, TextBoxStyle) == 0x000AAC, "Member 'UModioEditableTextBox::TextBoxStyle' has a wrong offset!");
static_assert(offsetof(UModioEditableTextBox, TextStyle) == 0x000AB4, "Member 'UModioEditableTextBox::TextStyle' has a wrong offset!");

// Class ModioUI.ModioEditableTextBoxStyleContainer
// 0x0A20 (0x0AF0 - 0x00D0)
class UModioEditableTextBoxStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioEditableTextBoxStyle             Style;                                             // 0x00D0(0x0A20)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioEditableTextBoxStyleContainer">();
	}
	static class UModioEditableTextBoxStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioEditableTextBoxStyleContainer>();
	}
};
static_assert(alignof(UModioEditableTextBoxStyleContainer) == 0x000008, "Wrong alignment on UModioEditableTextBoxStyleContainer");
static_assert(sizeof(UModioEditableTextBoxStyleContainer) == 0x000AF0, "Wrong size on UModioEditableTextBoxStyleContainer");
static_assert(offsetof(UModioEditableTextBoxStyleContainer, Style) == 0x0000D0, "Member 'UModioEditableTextBoxStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioErrorRetryWidget
// 0x0038 (0x02B0 - 0x0278)
class UModioErrorRetryWidget : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_1889[0x18];                                    // 0x0278(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioRichTextBlock*                    ErrorText;                                         // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ErrorTextValue;                                    // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   RetryButton;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnRetryClicked();
	void SetErrorText(const class FString& Error);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioErrorRetryWidget">();
	}
	static class UModioErrorRetryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioErrorRetryWidget>();
	}
};
static_assert(alignof(UModioErrorRetryWidget) == 0x000008, "Wrong alignment on UModioErrorRetryWidget");
static_assert(sizeof(UModioErrorRetryWidget) == 0x0002B0, "Wrong size on UModioErrorRetryWidget");
static_assert(offsetof(UModioErrorRetryWidget, ErrorText) == 0x000290, "Member 'UModioErrorRetryWidget::ErrorText' has a wrong offset!");
static_assert(offsetof(UModioErrorRetryWidget, ErrorTextValue) == 0x000298, "Member 'UModioErrorRetryWidget::ErrorTextValue' has a wrong offset!");
static_assert(offsetof(UModioErrorRetryWidget, RetryButton) == 0x0002A8, "Member 'UModioErrorRetryWidget::RetryButton' has a wrong offset!");

// Class ModioUI.ModioFeaturedCategory
// 0x0160 (0x03D8 - 0x0278)
class UModioFeaturedCategory : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_188A[0x50];                                    // 0x0278(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       NavLeftHoverAnim;                                  // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       NavRightHoverAnim;                                 // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    Title;                                             // 0x02D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioTileView*                         ItemList;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                TileLoader;                                        // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioErrorRetryWidget*                 ModioErrorWithRetryWidget;                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioButton*                           SeeAllButton;                                      // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioButton*                           NavLeftButton;                                     // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioButton*                           NavRightButton;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioAsyncOpWrapperWidget*             CategoryViewContent;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioFilterParams                     Filter;                                            // 0x0318(0x00A8)(Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             SelectionChangedDelegate;                          // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	int32                                         ArrowButtonScrollAmount;                           // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188B[0x4];                                     // 0x03D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleItemListEntryDetailsClicked(class UModioModInfoUI* ModInfo);
	void HandleItemListEntryReportClicked(class UModioModInfoUI* ModInfo);
	void HandleItemListEntrySubscribeClicked(class UModioModInfoUI* ModInfo);
	void HandleNavLeftClicked();
	void HandleNavRightClicked();
	void HandleSeeAllClicked();
	void OnCategorySelectionChanged__DelegateSignature(int32 Param_Index, class UModioFeaturedCategory* RealCategory);
	void PlayNavLeftHoverAnim();
	void PlayNavLeftUnhoverAnim();
	void PlayNavRightHoverAnim();
	void PlayNavRightUnhoverAnim();
	void SetSelectionIndexDelegate(TDelegate<void()> Delegate);

	const class UModioTileView* GetItemList() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioFeaturedCategory">();
	}
	static class UModioFeaturedCategory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioFeaturedCategory>();
	}
};
static_assert(alignof(UModioFeaturedCategory) == 0x000008, "Wrong alignment on UModioFeaturedCategory");
static_assert(sizeof(UModioFeaturedCategory) == 0x0003D8, "Wrong size on UModioFeaturedCategory");
static_assert(offsetof(UModioFeaturedCategory, NavLeftHoverAnim) == 0x0002C8, "Member 'UModioFeaturedCategory::NavLeftHoverAnim' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategory, NavRightHoverAnim) == 0x0002D0, "Member 'UModioFeaturedCategory::NavRightHoverAnim' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategory, Title) == 0x0002D8, "Member 'UModioFeaturedCategory::Title' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategory, ItemList) == 0x0002E0, "Member 'UModioFeaturedCategory::ItemList' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategory, TileLoader) == 0x0002E8, "Member 'UModioFeaturedCategory::TileLoader' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategory, ModioErrorWithRetryWidget) == 0x0002F0, "Member 'UModioFeaturedCategory::ModioErrorWithRetryWidget' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategory, SeeAllButton) == 0x0002F8, "Member 'UModioFeaturedCategory::SeeAllButton' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategory, NavLeftButton) == 0x000300, "Member 'UModioFeaturedCategory::NavLeftButton' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategory, NavRightButton) == 0x000308, "Member 'UModioFeaturedCategory::NavRightButton' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategory, CategoryViewContent) == 0x000310, "Member 'UModioFeaturedCategory::CategoryViewContent' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategory, Filter) == 0x000318, "Member 'UModioFeaturedCategory::Filter' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategory, SelectionChangedDelegate) == 0x0003C0, "Member 'UModioFeaturedCategory::SelectionChangedDelegate' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategory, ArrowButtonScrollAmount) == 0x0003D0, "Member 'UModioFeaturedCategory::ArrowButtonScrollAmount' has a wrong offset!");

// Class ModioUI.ModioFeaturedMod
// 0x0028 (0x03D8 - 0x03B0)
class UModioFeaturedMod : public UModioModTileBase
{
public:
	uint8                                         Pad_188D[0x18];                                    // 0x03B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioPopupMenu*                        MoreOptionsMenu;                                   // 0x03C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioImage*                            TileActiveFrame;                                   // 0x03D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void NativeMoreOptionsClicked();
	void SubmitModReport();
	void SubmitNegativeRating();
	void SubmitPositiveRating();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioFeaturedMod">();
	}
	static class UModioFeaturedMod* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioFeaturedMod>();
	}
};
static_assert(alignof(UModioFeaturedMod) == 0x000008, "Wrong alignment on UModioFeaturedMod");
static_assert(sizeof(UModioFeaturedMod) == 0x0003D8, "Wrong size on UModioFeaturedMod");
static_assert(offsetof(UModioFeaturedMod, MoreOptionsMenu) == 0x0003C8, "Member 'UModioFeaturedMod::MoreOptionsMenu' has a wrong offset!");
static_assert(offsetof(UModioFeaturedMod, TileActiveFrame) == 0x0003D0, "Member 'UModioFeaturedMod::TileActiveFrame' has a wrong offset!");

// Class ModioUI.ModioFeaturedModCarousel
// 0x0078 (0x02F0 - 0x0278)
class UModioFeaturedModCarousel : public UModioUserWidgetBase
{
public:
	class UCanvasPanel*                           CarouselCanvasPanel;                               // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UModioFeaturedMod>          ModTileTemplate;                                   // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WidgetMargin;                                      // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollTime;                                        // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollInputDelay;                                  // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GeneratedWidgetSize;                               // 0x0294(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188E[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AnimationCurve;                                    // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188F[0x38];                                    // 0x02A8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        CachedWidgetData;                                  // 0x02E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void NavigateToWidget(class UWidget* InWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioFeaturedModCarousel">();
	}
	static class UModioFeaturedModCarousel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioFeaturedModCarousel>();
	}
};
static_assert(alignof(UModioFeaturedModCarousel) == 0x000008, "Wrong alignment on UModioFeaturedModCarousel");
static_assert(sizeof(UModioFeaturedModCarousel) == 0x0002F0, "Wrong size on UModioFeaturedModCarousel");
static_assert(offsetof(UModioFeaturedModCarousel, CarouselCanvasPanel) == 0x000278, "Member 'UModioFeaturedModCarousel::CarouselCanvasPanel' has a wrong offset!");
static_assert(offsetof(UModioFeaturedModCarousel, ModTileTemplate) == 0x000280, "Member 'UModioFeaturedModCarousel::ModTileTemplate' has a wrong offset!");
static_assert(offsetof(UModioFeaturedModCarousel, WidgetMargin) == 0x000288, "Member 'UModioFeaturedModCarousel::WidgetMargin' has a wrong offset!");
static_assert(offsetof(UModioFeaturedModCarousel, ScrollTime) == 0x00028C, "Member 'UModioFeaturedModCarousel::ScrollTime' has a wrong offset!");
static_assert(offsetof(UModioFeaturedModCarousel, ScrollInputDelay) == 0x000290, "Member 'UModioFeaturedModCarousel::ScrollInputDelay' has a wrong offset!");
static_assert(offsetof(UModioFeaturedModCarousel, GeneratedWidgetSize) == 0x000294, "Member 'UModioFeaturedModCarousel::GeneratedWidgetSize' has a wrong offset!");
static_assert(offsetof(UModioFeaturedModCarousel, AnimationCurve) == 0x0002A0, "Member 'UModioFeaturedModCarousel::AnimationCurve' has a wrong offset!");
static_assert(offsetof(UModioFeaturedModCarousel, CachedWidgetData) == 0x0002E0, "Member 'UModioFeaturedModCarousel::CachedWidgetData' has a wrong offset!");

// Class ModioUI.ModioFeaturedView
// 0x0088 (0x0330 - 0x02A8)
class UModioFeaturedView : public UModioMenuView
{
public:
	uint8                                         Pad_1890[0x48];                                    // 0x02A8(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioErrorRetryWidget*                 ModioErrorWithRetryWidget;                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                PrimaryFeaturedCategoryLoader;                     // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioListView*                         AdditionalCategories;                              // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioAsyncOpWrapperWidget*             FeaturedViewContent;                               // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioGridPanel*                        PrimaryCategoryGridPanel;                          // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioFeaturedModCarousel*              FeaturedModCarousel;                               // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UObject*>                        CachedFeaturedItems;                               // 0x0320(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void CategorySelectionChanged(int32 Param_Index, class UModioFeaturedCategory* RealCategory);
	int32 GetSelectionIndex();
	void SetFocusToAdditionalCategory();
	void SetFocusToPrimaryCategory();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioFeaturedView">();
	}
	static class UModioFeaturedView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioFeaturedView>();
	}
};
static_assert(alignof(UModioFeaturedView) == 0x000008, "Wrong alignment on UModioFeaturedView");
static_assert(sizeof(UModioFeaturedView) == 0x000330, "Wrong size on UModioFeaturedView");
static_assert(offsetof(UModioFeaturedView, ModioErrorWithRetryWidget) == 0x0002F0, "Member 'UModioFeaturedView::ModioErrorWithRetryWidget' has a wrong offset!");
static_assert(offsetof(UModioFeaturedView, PrimaryFeaturedCategoryLoader) == 0x0002F8, "Member 'UModioFeaturedView::PrimaryFeaturedCategoryLoader' has a wrong offset!");
static_assert(offsetof(UModioFeaturedView, AdditionalCategories) == 0x000300, "Member 'UModioFeaturedView::AdditionalCategories' has a wrong offset!");
static_assert(offsetof(UModioFeaturedView, FeaturedViewContent) == 0x000308, "Member 'UModioFeaturedView::FeaturedViewContent' has a wrong offset!");
static_assert(offsetof(UModioFeaturedView, PrimaryCategoryGridPanel) == 0x000310, "Member 'UModioFeaturedView::PrimaryCategoryGridPanel' has a wrong offset!");
static_assert(offsetof(UModioFeaturedView, FeaturedModCarousel) == 0x000318, "Member 'UModioFeaturedView::FeaturedModCarousel' has a wrong offset!");
static_assert(offsetof(UModioFeaturedView, CachedFeaturedItems) == 0x000320, "Member 'UModioFeaturedView::CachedFeaturedItems' has a wrong offset!");

// Class ModioUI.ModioGridPanel
// 0x0000 (0x0150 - 0x0150)
class UModioGridPanel final  : public UGridPanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioGridPanel">();
	}
	static class UModioGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioGridPanel>();
	}
};
static_assert(alignof(UModioGridPanel) == 0x000008, "Wrong alignment on UModioGridPanel");
static_assert(sizeof(UModioGridPanel) == 0x000150, "Wrong size on UModioGridPanel");

// Class ModioUI.ModioImageGalleryBase
// 0x0080 (0x0188 - 0x0108)
class UModioImageGalleryBase final  : public UWidget
{
public:
	uint8                                         Pad_1892[0x30];                                    // 0x0108(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ForegroundContent;                                 // 0x0138(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                BackgroundContent;                                 // 0x0140(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(class UWidget* ImageWidget, int32 ImageIndex)> OnDisplayImage;                                    // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void()>                             OnConstructWidget;                                 // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void()>                             OnGetItemCount;                                    // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>                ImageWidgetClass;                                  // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1893[0x8];                                     // 0x0180(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayGalleryImageAtIndex(EModioUIDirection Direction, int32 DirectIndex);
	void OnDisplayImage__DelegateSignature(class UWidget* ImageWidget, int32 ImageIndex);
	void RefreshCurrentImage();
	void ResetGallery();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioImageGalleryBase">();
	}
	static class UModioImageGalleryBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioImageGalleryBase>();
	}
};
static_assert(alignof(UModioImageGalleryBase) == 0x000008, "Wrong alignment on UModioImageGalleryBase");
static_assert(sizeof(UModioImageGalleryBase) == 0x000188, "Wrong size on UModioImageGalleryBase");
static_assert(offsetof(UModioImageGalleryBase, ForegroundContent) == 0x000138, "Member 'UModioImageGalleryBase::ForegroundContent' has a wrong offset!");
static_assert(offsetof(UModioImageGalleryBase, BackgroundContent) == 0x000140, "Member 'UModioImageGalleryBase::BackgroundContent' has a wrong offset!");
static_assert(offsetof(UModioImageGalleryBase, OnDisplayImage) == 0x000148, "Member 'UModioImageGalleryBase::OnDisplayImage' has a wrong offset!");
static_assert(offsetof(UModioImageGalleryBase, OnConstructWidget) == 0x000158, "Member 'UModioImageGalleryBase::OnConstructWidget' has a wrong offset!");
static_assert(offsetof(UModioImageGalleryBase, OnGetItemCount) == 0x000168, "Member 'UModioImageGalleryBase::OnGetItemCount' has a wrong offset!");
static_assert(offsetof(UModioImageGalleryBase, ImageWidgetClass) == 0x000178, "Member 'UModioImageGalleryBase::ImageWidgetClass' has a wrong offset!");

// Class ModioUI.ModioInputGlyphSet
// 0x00A0 (0x00D0 - 0x0030)
class UModioInputGlyphSet final  : public UDataAsset
{
public:
	TMap<struct FKey, class UTexture2D*>          Glyphs;                                            // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FKey, class UTexture2D*>          PngGlyphs;                                         // 0x0080(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioInputGlyphSet">();
	}
	static class UModioInputGlyphSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioInputGlyphSet>();
	}
};
static_assert(alignof(UModioInputGlyphSet) == 0x000008, "Wrong alignment on UModioInputGlyphSet");
static_assert(sizeof(UModioInputGlyphSet) == 0x0000D0, "Wrong size on UModioInputGlyphSet");
static_assert(offsetof(UModioInputGlyphSet, Glyphs) == 0x000030, "Member 'UModioInputGlyphSet::Glyphs' has a wrong offset!");
static_assert(offsetof(UModioInputGlyphSet, PngGlyphs) == 0x000080, "Member 'UModioInputGlyphSet::PngGlyphs' has a wrong offset!");

// Class ModioUI.ModioInputMappingGlyphLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioInputMappingGlyphLibrary final  : public UBlueprintFunctionLibrary
{
public:
	static class UTexture2D* GetInputGlyph(struct FModioInputMappingGlyph* MappingGlyph, EModioUIInputMode InputMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioInputMappingGlyphLibrary">();
	}
	static class UModioInputMappingGlyphLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioInputMappingGlyphLibrary>();
	}
};
static_assert(alignof(UModioInputMappingGlyphLibrary) == 0x000008, "Wrong alignment on UModioInputMappingGlyphLibrary");
static_assert(sizeof(UModioInputMappingGlyphLibrary) == 0x000028, "Wrong size on UModioInputMappingGlyphLibrary");

// Class ModioUI.ModioListView
// 0x0000 (0x0368 - 0x0368)
class UModioListView final  : public UListView
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioListView">();
	}
	static class UModioListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioListView>();
	}
};
static_assert(alignof(UModioListView) == 0x000008, "Wrong alignment on UModioListView");
static_assert(sizeof(UModioListView) == 0x000368, "Wrong size on UModioListView");

// Class ModioUI.ModioListViewInteger
// 0x00F8 (0x0310 - 0x0218)
class UModioListViewInteger final  : public UListViewBase
{
public:
	uint8                                         Pad_1897[0xD0];                                    // 0x0218(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	EOrientation                                  Orientation;                                       // 0x02E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              ScrollbarVisibility;                               // 0x02E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1898[0x2];                                     // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EntrySpacing;                                      // 0x02EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideItemSize;                                 // 0x02F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1899[0x3];                                     // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ItemSize;                                          // 0x02F4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_189A[0x14];                                    // 0x02FC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioListViewInteger">();
	}
	static class UModioListViewInteger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioListViewInteger>();
	}
};
static_assert(alignof(UModioListViewInteger) == 0x000008, "Wrong alignment on UModioListViewInteger");
static_assert(sizeof(UModioListViewInteger) == 0x000310, "Wrong size on UModioListViewInteger");
static_assert(offsetof(UModioListViewInteger, Orientation) == 0x0002E8, "Member 'UModioListViewInteger::Orientation' has a wrong offset!");
static_assert(offsetof(UModioListViewInteger, ScrollbarVisibility) == 0x0002E9, "Member 'UModioListViewInteger::ScrollbarVisibility' has a wrong offset!");
static_assert(offsetof(UModioListViewInteger, EntrySpacing) == 0x0002EC, "Member 'UModioListViewInteger::EntrySpacing' has a wrong offset!");
static_assert(offsetof(UModioListViewInteger, bOverrideItemSize) == 0x0002F0, "Member 'UModioListViewInteger::bOverrideItemSize' has a wrong offset!");
static_assert(offsetof(UModioListViewInteger, ItemSize) == 0x0002F4, "Member 'UModioListViewInteger::ItemSize' has a wrong offset!");

// Class ModioUI.ModioListViewString
// 0x00F8 (0x0310 - 0x0218)
class UModioListViewString final  : public UListViewBase
{
public:
	uint8                                         Pad_189B[0xD0];                                    // 0x0218(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	EOrientation                                  Orientation;                                       // 0x02E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              ScrollbarVisibility;                               // 0x02E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_189C[0x2];                                     // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EntrySpacing;                                      // 0x02EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideItemSize;                                 // 0x02F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_189D[0x3];                                     // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ItemSize;                                          // 0x02F4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_189E[0x14];                                    // 0x02FC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioListViewString">();
	}
	static class UModioListViewString* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioListViewString>();
	}
};
static_assert(alignof(UModioListViewString) == 0x000008, "Wrong alignment on UModioListViewString");
static_assert(sizeof(UModioListViewString) == 0x000310, "Wrong size on UModioListViewString");
static_assert(offsetof(UModioListViewString, Orientation) == 0x0002E8, "Member 'UModioListViewString::Orientation' has a wrong offset!");
static_assert(offsetof(UModioListViewString, ScrollbarVisibility) == 0x0002E9, "Member 'UModioListViewString::ScrollbarVisibility' has a wrong offset!");
static_assert(offsetof(UModioListViewString, EntrySpacing) == 0x0002EC, "Member 'UModioListViewString::EntrySpacing' has a wrong offset!");
static_assert(offsetof(UModioListViewString, bOverrideItemSize) == 0x0002F0, "Member 'UModioListViewString::bOverrideItemSize' has a wrong offset!");
static_assert(offsetof(UModioListViewString, ItemSize) == 0x0002F4, "Member 'UModioListViewString::ItemSize' has a wrong offset!");

// Class ModioUI.ModioLoadingSpinner
// 0x0060 (0x0168 - 0x0108)
class UModioLoadingSpinner final  : public UWidget
{
public:
	uint8                                         Pad_189F[0x30];                                    // 0x0108(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIMaterialRef                    LoadingImage;                                      // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              ImageBrushSize;                                    // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStretch                                      Stretch;                                           // 0x0148(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStretchDirection                             StretchDirection;                                  // 0x0149(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18A0[0x16];                                    // 0x014A(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CachedReferencedMaterial;                          // 0x0160(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioLoadingSpinner">();
	}
	static class UModioLoadingSpinner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioLoadingSpinner>();
	}
};
static_assert(alignof(UModioLoadingSpinner) == 0x000008, "Wrong alignment on UModioLoadingSpinner");
static_assert(sizeof(UModioLoadingSpinner) == 0x000168, "Wrong size on UModioLoadingSpinner");
static_assert(offsetof(UModioLoadingSpinner, LoadingImage) == 0x000138, "Member 'UModioLoadingSpinner::LoadingImage' has a wrong offset!");
static_assert(offsetof(UModioLoadingSpinner, ImageBrushSize) == 0x000140, "Member 'UModioLoadingSpinner::ImageBrushSize' has a wrong offset!");
static_assert(offsetof(UModioLoadingSpinner, Stretch) == 0x000148, "Member 'UModioLoadingSpinner::Stretch' has a wrong offset!");
static_assert(offsetof(UModioLoadingSpinner, StretchDirection) == 0x000149, "Member 'UModioLoadingSpinner::StretchDirection' has a wrong offset!");
static_assert(offsetof(UModioLoadingSpinner, CachedReferencedMaterial) == 0x000160, "Member 'UModioLoadingSpinner::CachedReferencedMaterial' has a wrong offset!");

// Class ModioUI.ModioLogoWidget
// 0x0020 (0x0128 - 0x0108)
class UModioLogoWidget final  : public UWidget
{
public:
	class UObject*                                DataSource;                                        // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18A1[0x10];                                    // 0x0110(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       StyleRef;                                          // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioLogoWidget">();
	}
	static class UModioLogoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioLogoWidget>();
	}
};
static_assert(alignof(UModioLogoWidget) == 0x000008, "Wrong alignment on UModioLogoWidget");
static_assert(sizeof(UModioLogoWidget) == 0x000128, "Wrong size on UModioLogoWidget");
static_assert(offsetof(UModioLogoWidget, DataSource) == 0x000108, "Member 'UModioLogoWidget::DataSource' has a wrong offset!");
static_assert(offsetof(UModioLogoWidget, StyleRef) == 0x000120, "Member 'UModioLogoWidget::StyleRef' has a wrong offset!");

// Class ModioUI.ModioMenu
// 0x00D8 (0x0350 - 0x0278)
class UModioMenu : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18A2[0x30];                                    // 0x0278(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       ViewChangedAnim;                                   // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       DialogAnim;                                        // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioWidgetSwitcher*                   ViewController;                                    // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioMenuBar*                          MenuBar;                                           // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioImage*                            Background;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioDrawerController*                 DrawerController;                                  // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioDialogController*                 DialogController;                                  // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            HideCursorWidget;                                  // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                NotificationController;                            // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            ModioMenuBarWidget;                                // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               MenuSizeBox;                                       // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                LeftBlurBorder;                                    // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                RightBlurBorder;                                   // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UModioMenuView>             FeaturedView;                                      // 0x0310(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UModioMenuView>             CollectionView;                                    // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UModioMenuView>             SearchResultsView;                                 // 0x0320(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UModioMenuView>             ModDetailsView;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UModioDrawer>               DownloadProgressDrawer;                            // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UModioDrawer>               RefineSearchDrawer;                                // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18A3[0x10];                                    // 0x0340(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleViewChanged(int32 ViewIndex);
	void OnDrawerAnimatedOut(int32 SlotIndex);
	void OnSearchSettingsChanged(const struct FModioFilterParams& Settings);
	void OnViewChanged(int64 ViewIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioMenu">();
	}
	static class UModioMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioMenu>();
	}
};
static_assert(alignof(UModioMenu) == 0x000008, "Wrong alignment on UModioMenu");
static_assert(sizeof(UModioMenu) == 0x000350, "Wrong size on UModioMenu");
static_assert(offsetof(UModioMenu, ViewChangedAnim) == 0x0002A8, "Member 'UModioMenu::ViewChangedAnim' has a wrong offset!");
static_assert(offsetof(UModioMenu, DialogAnim) == 0x0002B0, "Member 'UModioMenu::DialogAnim' has a wrong offset!");
static_assert(offsetof(UModioMenu, ViewController) == 0x0002B8, "Member 'UModioMenu::ViewController' has a wrong offset!");
static_assert(offsetof(UModioMenu, MenuBar) == 0x0002C0, "Member 'UModioMenu::MenuBar' has a wrong offset!");
static_assert(offsetof(UModioMenu, Background) == 0x0002C8, "Member 'UModioMenu::Background' has a wrong offset!");
static_assert(offsetof(UModioMenu, DrawerController) == 0x0002D0, "Member 'UModioMenu::DrawerController' has a wrong offset!");
static_assert(offsetof(UModioMenu, DialogController) == 0x0002D8, "Member 'UModioMenu::DialogController' has a wrong offset!");
static_assert(offsetof(UModioMenu, HideCursorWidget) == 0x0002E0, "Member 'UModioMenu::HideCursorWidget' has a wrong offset!");
static_assert(offsetof(UModioMenu, NotificationController) == 0x0002E8, "Member 'UModioMenu::NotificationController' has a wrong offset!");
static_assert(offsetof(UModioMenu, ModioMenuBarWidget) == 0x0002F0, "Member 'UModioMenu::ModioMenuBarWidget' has a wrong offset!");
static_assert(offsetof(UModioMenu, MenuSizeBox) == 0x0002F8, "Member 'UModioMenu::MenuSizeBox' has a wrong offset!");
static_assert(offsetof(UModioMenu, LeftBlurBorder) == 0x000300, "Member 'UModioMenu::LeftBlurBorder' has a wrong offset!");
static_assert(offsetof(UModioMenu, RightBlurBorder) == 0x000308, "Member 'UModioMenu::RightBlurBorder' has a wrong offset!");
static_assert(offsetof(UModioMenu, FeaturedView) == 0x000310, "Member 'UModioMenu::FeaturedView' has a wrong offset!");
static_assert(offsetof(UModioMenu, CollectionView) == 0x000318, "Member 'UModioMenu::CollectionView' has a wrong offset!");
static_assert(offsetof(UModioMenu, SearchResultsView) == 0x000320, "Member 'UModioMenu::SearchResultsView' has a wrong offset!");
static_assert(offsetof(UModioMenu, ModDetailsView) == 0x000328, "Member 'UModioMenu::ModDetailsView' has a wrong offset!");
static_assert(offsetof(UModioMenu, DownloadProgressDrawer) == 0x000330, "Member 'UModioMenu::DownloadProgressDrawer' has a wrong offset!");
static_assert(offsetof(UModioMenu, RefineSearchDrawer) == 0x000338, "Member 'UModioMenu::RefineSearchDrawer' has a wrong offset!");

// Class ModioUI.ModioMenuDefaultBackgroundProvider
// 0x0010 (0x0038 - 0x0028)
class UModioMenuDefaultBackgroundProvider final  : public UObject
{
public:
	uint8                                         Pad_18A4[0x10];                                    // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioMenuDefaultBackgroundProvider">();
	}
	static class UModioMenuDefaultBackgroundProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioMenuDefaultBackgroundProvider>();
	}
};
static_assert(alignof(UModioMenuDefaultBackgroundProvider) == 0x000008, "Wrong alignment on UModioMenuDefaultBackgroundProvider");
static_assert(sizeof(UModioMenuDefaultBackgroundProvider) == 0x000038, "Wrong size on UModioMenuDefaultBackgroundProvider");

// Class ModioUI.ModioModBrowser
// 0x0000 (0x0278 - 0x0278)
class UModioModBrowser final  : public UModioUserWidgetBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModBrowser">();
	}
	static class UModioModBrowser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModBrowser>();
	}
};
static_assert(alignof(UModioModBrowser) == 0x000008, "Wrong alignment on UModioModBrowser");
static_assert(sizeof(UModioModBrowser) == 0x000278, "Wrong size on UModioModBrowser");

// Class ModioUI.ModioModBrowserParams
// 0x0018 (0x0048 - 0x0030)
class UModioModBrowserParams final  : public UDataAsset
{
public:
	class UModioFeaturedCategoryParams*           PrimaryCategoryParams;                             // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UModioFeaturedCategoryParams*>   AdditionalCategoryParams;                          // 0x0038(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModBrowserParams">();
	}
	static class UModioModBrowserParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModBrowserParams>();
	}
};
static_assert(alignof(UModioModBrowserParams) == 0x000008, "Wrong alignment on UModioModBrowserParams");
static_assert(sizeof(UModioModBrowserParams) == 0x000048, "Wrong size on UModioModBrowserParams");
static_assert(offsetof(UModioModBrowserParams, PrimaryCategoryParams) == 0x000030, "Member 'UModioModBrowserParams::PrimaryCategoryParams' has a wrong offset!");
static_assert(offsetof(UModioModBrowserParams, AdditionalCategoryParams) == 0x000038, "Member 'UModioModBrowserParams::AdditionalCategoryParams' has a wrong offset!");

// Class ModioUI.ModioCarousel
// 0x0038 (0x0140 - 0x0108)
class UModioCarousel final  : public UWidget
{
public:
	uint8                                         Pad_18A5[0x10];                                    // 0x0108(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUserWidget*>                    EntryWidgets;                                      // 0x0118(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UModioModInfoUI*>                ModsToDisplay;                                     // 0x0128(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>                EntryWidgetClass;                                  // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioCarousel">();
	}
	static class UModioCarousel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioCarousel>();
	}
};
static_assert(alignof(UModioCarousel) == 0x000008, "Wrong alignment on UModioCarousel");
static_assert(sizeof(UModioCarousel) == 0x000140, "Wrong size on UModioCarousel");
static_assert(offsetof(UModioCarousel, EntryWidgets) == 0x000118, "Member 'UModioCarousel::EntryWidgets' has a wrong offset!");
static_assert(offsetof(UModioCarousel, ModsToDisplay) == 0x000128, "Member 'UModioCarousel::ModsToDisplay' has a wrong offset!");
static_assert(offsetof(UModioCarousel, EntryWidgetClass) == 0x000138, "Member 'UModioCarousel::EntryWidgetClass' has a wrong offset!");

// Class ModioUI.ModioModCarouselTile
// 0x0000 (0x03B0 - 0x03B0)
class UModioModCarouselTile final  : public UModioModTileBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModCarouselTile">();
	}
	static class UModioModCarouselTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModCarouselTile>();
	}
};
static_assert(alignof(UModioModCarouselTile) == 0x000008, "Wrong alignment on UModioModCarouselTile");
static_assert(sizeof(UModioModCarouselTile) == 0x0003B0, "Wrong size on UModioModCarouselTile");

// Class ModioUI.ModioModDetailsImage
// 0x0020 (0x0298 - 0x0278)
class UModioModDetailsImage : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18A6[0x8];                                     // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioRoundedImage*                     Image;                                             // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioUIMaterialRef                    FrameMaterial;                                     // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   TextureParameterName;                              // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModDetailsImage">();
	}
	static class UModioModDetailsImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModDetailsImage>();
	}
};
static_assert(alignof(UModioModDetailsImage) == 0x000008, "Wrong alignment on UModioModDetailsImage");
static_assert(sizeof(UModioModDetailsImage) == 0x000298, "Wrong size on UModioModDetailsImage");
static_assert(offsetof(UModioModDetailsImage, Image) == 0x000280, "Member 'UModioModDetailsImage::Image' has a wrong offset!");
static_assert(offsetof(UModioModDetailsImage, FrameMaterial) == 0x000288, "Member 'UModioModDetailsImage::FrameMaterial' has a wrong offset!");
static_assert(offsetof(UModioModDetailsImage, TextureParameterName) == 0x000290, "Member 'UModioModDetailsImage::TextureParameterName' has a wrong offset!");

// Class ModioUI.ModioModDetailsImageGallery
// 0x0058 (0x02D0 - 0x0278)
class UModioModDetailsImageGallery : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18A7[0x18];                                    // 0x0278(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModioModDetailsGalleryImageInfo> ImageInfo;                                         // 0x0290(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UModioImageGalleryBase*                 ImageGallery;                                      // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioListViewInteger*                  NavButtons;                                        // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       Style;                                             // 0x02B0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UModioRoundedImage*                     ActiveBackground;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioGridPanel*                        NavButtonGridPanel;                                // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFocused;                                        // 0x02C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A8[0x7];                                     // 0x02C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyImageToWidget(class UWidget* Widget, int32 ImageIndex);
	int32 GetImageCount();
	void NextImage();
	void OnGalleryImageLoad(class UTexture2DDynamic* LoadedImage, const struct FModioModID& ModId, int32 Param_Index);
	void PrevImage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModDetailsImageGallery">();
	}
	static class UModioModDetailsImageGallery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModDetailsImageGallery>();
	}
};
static_assert(alignof(UModioModDetailsImageGallery) == 0x000008, "Wrong alignment on UModioModDetailsImageGallery");
static_assert(sizeof(UModioModDetailsImageGallery) == 0x0002D0, "Wrong size on UModioModDetailsImageGallery");
static_assert(offsetof(UModioModDetailsImageGallery, ImageInfo) == 0x000290, "Member 'UModioModDetailsImageGallery::ImageInfo' has a wrong offset!");
static_assert(offsetof(UModioModDetailsImageGallery, ImageGallery) == 0x0002A0, "Member 'UModioModDetailsImageGallery::ImageGallery' has a wrong offset!");
static_assert(offsetof(UModioModDetailsImageGallery, NavButtons) == 0x0002A8, "Member 'UModioModDetailsImageGallery::NavButtons' has a wrong offset!");
static_assert(offsetof(UModioModDetailsImageGallery, Style) == 0x0002B0, "Member 'UModioModDetailsImageGallery::Style' has a wrong offset!");
static_assert(offsetof(UModioModDetailsImageGallery, ActiveBackground) == 0x0002B8, "Member 'UModioModDetailsImageGallery::ActiveBackground' has a wrong offset!");
static_assert(offsetof(UModioModDetailsImageGallery, NavButtonGridPanel) == 0x0002C0, "Member 'UModioModDetailsImageGallery::NavButtonGridPanel' has a wrong offset!");
static_assert(offsetof(UModioModDetailsImageGallery, bIsFocused) == 0x0002C8, "Member 'UModioModDetailsImageGallery::bIsFocused' has a wrong offset!");

// Class ModioUI.ModioModDetailsImageGalleryNavButtonBase
// 0x0088 (0x0300 - 0x0278)
class UModioModDetailsImageGalleryNavButtonBase : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18AB[0x8];                                     // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioImage*                            Image;                                             // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      SpecifiedMaterial;                                 // 0x0288(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateColor                            UnselectedColor;                                   // 0x02B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                            SelectedColor;                                     // 0x02D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModDetailsImageGalleryNavButtonBase">();
	}
	static class UModioModDetailsImageGalleryNavButtonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModDetailsImageGalleryNavButtonBase>();
	}
};
static_assert(alignof(UModioModDetailsImageGalleryNavButtonBase) == 0x000008, "Wrong alignment on UModioModDetailsImageGalleryNavButtonBase");
static_assert(sizeof(UModioModDetailsImageGalleryNavButtonBase) == 0x000300, "Wrong size on UModioModDetailsImageGalleryNavButtonBase");
static_assert(offsetof(UModioModDetailsImageGalleryNavButtonBase, Image) == 0x000280, "Member 'UModioModDetailsImageGalleryNavButtonBase::Image' has a wrong offset!");
static_assert(offsetof(UModioModDetailsImageGalleryNavButtonBase, SpecifiedMaterial) == 0x000288, "Member 'UModioModDetailsImageGalleryNavButtonBase::SpecifiedMaterial' has a wrong offset!");
static_assert(offsetof(UModioModDetailsImageGalleryNavButtonBase, UnselectedColor) == 0x0002B0, "Member 'UModioModDetailsImageGalleryNavButtonBase::UnselectedColor' has a wrong offset!");
static_assert(offsetof(UModioModDetailsImageGalleryNavButtonBase, SelectedColor) == 0x0002D8, "Member 'UModioModDetailsImageGalleryNavButtonBase::SelectedColor' has a wrong offset!");

// Class ModioUI.ModioModPropertyInspectorBase
// 0x0018 (0x0290 - 0x0278)
class UModioModPropertyInspectorBase : public UModioUserWidgetBase
{
public:
	TArray<struct FModioModInfoPropertyDescriptor> PropertiesToDisplay;                               // 0x0278(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18AC[0x8];                                     // 0x0288(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnUpdatePropertyDisplay();
	void UpdatePropertyDisplay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModPropertyInspectorBase">();
	}
	static class UModioModPropertyInspectorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModPropertyInspectorBase>();
	}
};
static_assert(alignof(UModioModPropertyInspectorBase) == 0x000008, "Wrong alignment on UModioModPropertyInspectorBase");
static_assert(sizeof(UModioModPropertyInspectorBase) == 0x000290, "Wrong size on UModioModPropertyInspectorBase");
static_assert(offsetof(UModioModPropertyInspectorBase, PropertiesToDisplay) == 0x000278, "Member 'UModioModPropertyInspectorBase::PropertiesToDisplay' has a wrong offset!");

// Class ModioUI.ModioModDetailsPropertyInspector
// 0x0068 (0x02F8 - 0x0290)
class UModioModDetailsPropertyInspector : public UModioModPropertyInspectorBase
{
public:
	class UModioGridPanel*                        PropertyGrid;                                      // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   LastUpdatedFormat;                                 // 0x0298(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       PropertyNameTextStyle;                             // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   DefaultPropertyNameStyleName;                      // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       PropertyValueTextStyle;                            // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   DefaultPropertyValueStyleName;                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       FillerTextStyle;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   FillerStyleName;                                   // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18AD[0x18];                                    // 0x02E0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const struct FModioRichTextStyle GetTextStyle(const struct FModioUIStyleRef& TextStyle);

	TArray<class FString> GetFillerStyleNames() const;
	TArray<class FString> GetPropertyNameStyleNames() const;
	TArray<class FString> GetPropertyValueStyleNames() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModDetailsPropertyInspector">();
	}
	static class UModioModDetailsPropertyInspector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModDetailsPropertyInspector>();
	}
};
static_assert(alignof(UModioModDetailsPropertyInspector) == 0x000008, "Wrong alignment on UModioModDetailsPropertyInspector");
static_assert(sizeof(UModioModDetailsPropertyInspector) == 0x0002F8, "Wrong size on UModioModDetailsPropertyInspector");
static_assert(offsetof(UModioModDetailsPropertyInspector, PropertyGrid) == 0x000290, "Member 'UModioModDetailsPropertyInspector::PropertyGrid' has a wrong offset!");
static_assert(offsetof(UModioModDetailsPropertyInspector, LastUpdatedFormat) == 0x000298, "Member 'UModioModDetailsPropertyInspector::LastUpdatedFormat' has a wrong offset!");
static_assert(offsetof(UModioModDetailsPropertyInspector, PropertyNameTextStyle) == 0x0002B0, "Member 'UModioModDetailsPropertyInspector::PropertyNameTextStyle' has a wrong offset!");
static_assert(offsetof(UModioModDetailsPropertyInspector, DefaultPropertyNameStyleName) == 0x0002B8, "Member 'UModioModDetailsPropertyInspector::DefaultPropertyNameStyleName' has a wrong offset!");
static_assert(offsetof(UModioModDetailsPropertyInspector, PropertyValueTextStyle) == 0x0002C0, "Member 'UModioModDetailsPropertyInspector::PropertyValueTextStyle' has a wrong offset!");
static_assert(offsetof(UModioModDetailsPropertyInspector, DefaultPropertyValueStyleName) == 0x0002C8, "Member 'UModioModDetailsPropertyInspector::DefaultPropertyValueStyleName' has a wrong offset!");
static_assert(offsetof(UModioModDetailsPropertyInspector, FillerTextStyle) == 0x0002D0, "Member 'UModioModDetailsPropertyInspector::FillerTextStyle' has a wrong offset!");
static_assert(offsetof(UModioModDetailsPropertyInspector, FillerStyleName) == 0x0002D8, "Member 'UModioModDetailsPropertyInspector::FillerStyleName' has a wrong offset!");

// Class ModioUI.ModioModDetailsView
// 0x0180 (0x0428 - 0x02A8)
class UModioModDetailsView : public UModioMenuView
{
public:
	uint8                                         Pad_18AE[0x48];                                    // 0x02A8(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                DetailsLoader;                                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioAsyncOpWrapperWidget*             DetailsViewContent;                                // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   SubscribeButton;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   RateUpButton;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   RateDownButton;                                    // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   ReportButton;                                      // 0x0318(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioUserWidgetBase*                   ModPropertiesInspector;                            // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioModManagementWidgetBase*          ProgressWidget;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   SubscribeButtonFormat;                             // 0x0330(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   RateUpTextFormat;                                  // 0x0348(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   RateDownTextFormat;                                // 0x0360(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ReportTextFormat;                                  // 0x0378(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    ModTitleTextBlock;                                 // 0x0390(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    ModSummaryTextBlock;                               // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    ModFullDescriptionTextBlock;                       // 0x03A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioErrorRetryWidget*                 ModioErrorWithRetryWidget;                         // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioTagList*                          ModTags;                                           // 0x03B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    ModChangelog;                                      // 0x03B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   SubscribeLabel;                                    // 0x03C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   UnsubscribeLabel;                                  // 0x03D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UModioModDetailsImageGallery*           ImageGallery;                                      // 0x03F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioSubscriptionBadge*                SubscriptionBadge;                                 // 0x03F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioScrollBox*                        ScrollBox;                                         // 0x0400(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18AF[0x14];                                    // 0x0408(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ControllerScrollingMultiplier;                     // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollingSpeed;                                    // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18B0[0x4];                                     // 0x0424(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableSubscribeButton();
	void NativeSubscribeClicked();
	void OnDialogClosed();
	void OnDownloadQueueClosed();
	void OnModSubscriptionStatusChanged(const struct FModioModID& ID, bool Subscribed);
	void OnRatingSubmissionComplete(const struct FModioErrorCode& Ec, EModioRating SubmittedRating);
	void RateDownClicked();
	void RateUpClicked();
	void ReportClicked();
	void SetInitialFocus();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModDetailsView">();
	}
	static class UModioModDetailsView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModDetailsView>();
	}
};
static_assert(alignof(UModioModDetailsView) == 0x000008, "Wrong alignment on UModioModDetailsView");
static_assert(sizeof(UModioModDetailsView) == 0x000428, "Wrong size on UModioModDetailsView");
static_assert(offsetof(UModioModDetailsView, DetailsLoader) == 0x0002F0, "Member 'UModioModDetailsView::DetailsLoader' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, DetailsViewContent) == 0x0002F8, "Member 'UModioModDetailsView::DetailsViewContent' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, SubscribeButton) == 0x000300, "Member 'UModioModDetailsView::SubscribeButton' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, RateUpButton) == 0x000308, "Member 'UModioModDetailsView::RateUpButton' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, RateDownButton) == 0x000310, "Member 'UModioModDetailsView::RateDownButton' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ReportButton) == 0x000318, "Member 'UModioModDetailsView::ReportButton' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ModPropertiesInspector) == 0x000320, "Member 'UModioModDetailsView::ModPropertiesInspector' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ProgressWidget) == 0x000328, "Member 'UModioModDetailsView::ProgressWidget' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, SubscribeButtonFormat) == 0x000330, "Member 'UModioModDetailsView::SubscribeButtonFormat' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, RateUpTextFormat) == 0x000348, "Member 'UModioModDetailsView::RateUpTextFormat' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, RateDownTextFormat) == 0x000360, "Member 'UModioModDetailsView::RateDownTextFormat' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ReportTextFormat) == 0x000378, "Member 'UModioModDetailsView::ReportTextFormat' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ModTitleTextBlock) == 0x000390, "Member 'UModioModDetailsView::ModTitleTextBlock' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ModSummaryTextBlock) == 0x000398, "Member 'UModioModDetailsView::ModSummaryTextBlock' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ModFullDescriptionTextBlock) == 0x0003A0, "Member 'UModioModDetailsView::ModFullDescriptionTextBlock' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ModioErrorWithRetryWidget) == 0x0003A8, "Member 'UModioModDetailsView::ModioErrorWithRetryWidget' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ModTags) == 0x0003B0, "Member 'UModioModDetailsView::ModTags' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ModChangelog) == 0x0003B8, "Member 'UModioModDetailsView::ModChangelog' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, SubscribeLabel) == 0x0003C0, "Member 'UModioModDetailsView::SubscribeLabel' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, UnsubscribeLabel) == 0x0003D8, "Member 'UModioModDetailsView::UnsubscribeLabel' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ImageGallery) == 0x0003F0, "Member 'UModioModDetailsView::ImageGallery' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, SubscriptionBadge) == 0x0003F8, "Member 'UModioModDetailsView::SubscriptionBadge' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ScrollBox) == 0x000400, "Member 'UModioModDetailsView::ScrollBox' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ControllerScrollingMultiplier) == 0x00041C, "Member 'UModioModDetailsView::ControllerScrollingMultiplier' has a wrong offset!");
static_assert(offsetof(UModioModDetailsView, ScrollingSpeed) == 0x000420, "Member 'UModioModDetailsView::ScrollingSpeed' has a wrong offset!");

// Class ModioUI.ModioModTile
// 0x0050 (0x0400 - 0x03B0)
class UModioModTile : public UModioModTileBase
{
public:
	class UModioPopupMenu*                        MoreOptionsMenu;                                   // 0x03B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   MoreOptionsLabel;                                  // 0x03B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UModioImage*                            TileActiveFrame;                                   // 0x03D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnDetailsClicked;                                  // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReportClicked;                                   // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         TruncateDivider;                                   // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18B3[0x4];                                     // 0x03FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NativeMoreOptionsClicked();
	void NativeReportClicked();
	struct FEventReply OnThumbnailMouseDown(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent);
	void SetSizeOverride(const struct FVector2D& NewSize);
	void SubmitModReport();
	void SubmitNegativeRating();
	void SubmitPositiveRating();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModTile">();
	}
	static class UModioModTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModTile>();
	}
};
static_assert(alignof(UModioModTile) == 0x000008, "Wrong alignment on UModioModTile");
static_assert(sizeof(UModioModTile) == 0x000400, "Wrong size on UModioModTile");
static_assert(offsetof(UModioModTile, MoreOptionsMenu) == 0x0003B0, "Member 'UModioModTile::MoreOptionsMenu' has a wrong offset!");
static_assert(offsetof(UModioModTile, MoreOptionsLabel) == 0x0003B8, "Member 'UModioModTile::MoreOptionsLabel' has a wrong offset!");
static_assert(offsetof(UModioModTile, TileActiveFrame) == 0x0003D0, "Member 'UModioModTile::TileActiveFrame' has a wrong offset!");
static_assert(offsetof(UModioModTile, OnDetailsClicked) == 0x0003D8, "Member 'UModioModTile::OnDetailsClicked' has a wrong offset!");
static_assert(offsetof(UModioModTile, OnReportClicked) == 0x0003E8, "Member 'UModioModTile::OnReportClicked' has a wrong offset!");
static_assert(offsetof(UModioModTile, TruncateDivider) == 0x0003F8, "Member 'UModioModTile::TruncateDivider' has a wrong offset!");

// Class ModioUI.ModioModUninstallHeaderWidget
// 0x0048 (0x0150 - 0x0108)
class UModioModUninstallHeaderWidget final  : public UWidget
{
public:
	uint8                                         Pad_18B4[0x8];                                     // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18B5[0x30];                                    // 0x0118(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       Style;                                             // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModUninstallHeaderWidget">();
	}
	static class UModioModUninstallHeaderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModUninstallHeaderWidget>();
	}
};
static_assert(alignof(UModioModUninstallHeaderWidget) == 0x000008, "Wrong alignment on UModioModUninstallHeaderWidget");
static_assert(sizeof(UModioModUninstallHeaderWidget) == 0x000150, "Wrong size on UModioModUninstallHeaderWidget");
static_assert(offsetof(UModioModUninstallHeaderWidget, DataSource) == 0x000110, "Member 'UModioModUninstallHeaderWidget::DataSource' has a wrong offset!");
static_assert(offsetof(UModioModUninstallHeaderWidget, Style) == 0x000148, "Member 'UModioModUninstallHeaderWidget::Style' has a wrong offset!");

// Class ModioUI.ModioMultiLineEditableTextBox
// 0x0070 (0x0D08 - 0x0C98)
class UModioMultiLineEditableTextBox : public UMultiLineEditableTextBox
{
public:
	uint8                                         Pad_18B6[0x20];                                    // 0x0C98(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bValidateInput;                                    // 0x0CB8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18B7[0x7];                                     // 0x0CB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModioTextValidationRule>       ValidationRules;                                   // 0x0CC0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bDisplayValidationErrors;                          // 0x0CD0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18B8[0x3];                                     // 0x0CD1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       ErrorTextStyle;                                    // 0x0CD4(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18B9[0x24];                                    // 0x0CDC(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       TextBoxStyle;                                      // 0x0D00(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioMultiLineEditableTextBox">();
	}
	static class UModioMultiLineEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioMultiLineEditableTextBox>();
	}
};
static_assert(alignof(UModioMultiLineEditableTextBox) == 0x000008, "Wrong alignment on UModioMultiLineEditableTextBox");
static_assert(sizeof(UModioMultiLineEditableTextBox) == 0x000D08, "Wrong size on UModioMultiLineEditableTextBox");
static_assert(offsetof(UModioMultiLineEditableTextBox, bValidateInput) == 0x000CB8, "Member 'UModioMultiLineEditableTextBox::bValidateInput' has a wrong offset!");
static_assert(offsetof(UModioMultiLineEditableTextBox, ValidationRules) == 0x000CC0, "Member 'UModioMultiLineEditableTextBox::ValidationRules' has a wrong offset!");
static_assert(offsetof(UModioMultiLineEditableTextBox, bDisplayValidationErrors) == 0x000CD0, "Member 'UModioMultiLineEditableTextBox::bDisplayValidationErrors' has a wrong offset!");
static_assert(offsetof(UModioMultiLineEditableTextBox, ErrorTextStyle) == 0x000CD4, "Member 'UModioMultiLineEditableTextBox::ErrorTextStyle' has a wrong offset!");
static_assert(offsetof(UModioMultiLineEditableTextBox, TextBoxStyle) == 0x000D00, "Member 'UModioMultiLineEditableTextBox::TextBoxStyle' has a wrong offset!");

// Class ModioUI.ModioMultiLineEditableTextBoxStyleContainer
// 0x0800 (0x08D0 - 0x00D0)
class UModioMultiLineEditableTextBoxStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioMultiLineEditableTextBoxStyle    Style;                                             // 0x00D0(0x0800)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioMultiLineEditableTextBoxStyleContainer">();
	}
	static class UModioMultiLineEditableTextBoxStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioMultiLineEditableTextBoxStyleContainer>();
	}
};
static_assert(alignof(UModioMultiLineEditableTextBoxStyleContainer) == 0x000008, "Wrong alignment on UModioMultiLineEditableTextBoxStyleContainer");
static_assert(sizeof(UModioMultiLineEditableTextBoxStyleContainer) == 0x0008D0, "Wrong size on UModioMultiLineEditableTextBoxStyleContainer");
static_assert(offsetof(UModioMultiLineEditableTextBoxStyleContainer, Style) == 0x0000D0, "Member 'UModioMultiLineEditableTextBoxStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioNamedGlyphMaterialParams
// 0x0008 (0x0030 - 0x0028)
class UModioNamedGlyphMaterialParams final  : public UModioProceduralBrushParams
{
public:
	class FName                                   GlyphName;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TArray<class FString> GetValidGlyphNames();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioNamedGlyphMaterialParams">();
	}
	static class UModioNamedGlyphMaterialParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioNamedGlyphMaterialParams>();
	}
};
static_assert(alignof(UModioNamedGlyphMaterialParams) == 0x000008, "Wrong alignment on UModioNamedGlyphMaterialParams");
static_assert(sizeof(UModioNamedGlyphMaterialParams) == 0x000030, "Wrong size on UModioNamedGlyphMaterialParams");
static_assert(offsetof(UModioNamedGlyphMaterialParams, GlyphName) == 0x000028, "Member 'UModioNamedGlyphMaterialParams::GlyphName' has a wrong offset!");

// Class ModioUI.ModioNotificationControllerBase
// 0x0020 (0x0298 - 0x0278)
class UModioNotificationControllerBase : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18BA[0x8];                                     // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNotificationsOnScreen;                          // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18BB[0x4];                                     // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                ErrorNotificationClass;                            // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           NotificationList;                                  // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnNotificationExpired(class UWidget* Notification);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioNotificationControllerBase">();
	}
	static class UModioNotificationControllerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioNotificationControllerBase>();
	}
};
static_assert(alignof(UModioNotificationControllerBase) == 0x000008, "Wrong alignment on UModioNotificationControllerBase");
static_assert(sizeof(UModioNotificationControllerBase) == 0x000298, "Wrong size on UModioNotificationControllerBase");
static_assert(offsetof(UModioNotificationControllerBase, MaxNotificationsOnScreen) == 0x000280, "Member 'UModioNotificationControllerBase::MaxNotificationsOnScreen' has a wrong offset!");
static_assert(offsetof(UModioNotificationControllerBase, ErrorNotificationClass) == 0x000288, "Member 'UModioNotificationControllerBase::ErrorNotificationClass' has a wrong offset!");
static_assert(offsetof(UModioNotificationControllerBase, NotificationList) == 0x000290, "Member 'UModioNotificationControllerBase::NotificationList' has a wrong offset!");

// Class ModioUI.ModioNotificationControllerSlot
// 0x0028 (0x0080 - 0x0058)
class UModioNotificationControllerSlot final  : public UOverlaySlot
{
public:
	uint8                                         Pad_18BC[0x10];                                    // 0x0058(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EModioNotificationControllerSlotEdge          Edge;                                              // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          NotificationHorizontalAlignment;                   // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            NotificationVerticalAlignment;                     // 0x006A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18BD[0x1];                                     // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VisibleDuration;                                   // 0x006C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExpanded;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18BE[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationTime;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentAnimationProgress;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18BF[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioNotificationControllerSlot">();
	}
	static class UModioNotificationControllerSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioNotificationControllerSlot>();
	}
};
static_assert(alignof(UModioNotificationControllerSlot) == 0x000008, "Wrong alignment on UModioNotificationControllerSlot");
static_assert(sizeof(UModioNotificationControllerSlot) == 0x000080, "Wrong size on UModioNotificationControllerSlot");
static_assert(offsetof(UModioNotificationControllerSlot, Edge) == 0x000068, "Member 'UModioNotificationControllerSlot::Edge' has a wrong offset!");
static_assert(offsetof(UModioNotificationControllerSlot, NotificationHorizontalAlignment) == 0x000069, "Member 'UModioNotificationControllerSlot::NotificationHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UModioNotificationControllerSlot, NotificationVerticalAlignment) == 0x00006A, "Member 'UModioNotificationControllerSlot::NotificationVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UModioNotificationControllerSlot, VisibleDuration) == 0x00006C, "Member 'UModioNotificationControllerSlot::VisibleDuration' has a wrong offset!");
static_assert(offsetof(UModioNotificationControllerSlot, bExpanded) == 0x000070, "Member 'UModioNotificationControllerSlot::bExpanded' has a wrong offset!");
static_assert(offsetof(UModioNotificationControllerSlot, AnimationTime) == 0x000074, "Member 'UModioNotificationControllerSlot::AnimationTime' has a wrong offset!");
static_assert(offsetof(UModioNotificationControllerSlot, CurrentAnimationProgress) == 0x000078, "Member 'UModioNotificationControllerSlot::CurrentAnimationProgress' has a wrong offset!");

// Class ModioUI.ModioNotificationStyleContainer
// 0x0058 (0x0128 - 0x00D0)
class UModioNotificationStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioNotificationStyle                Style;                                             // 0x00D0(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioNotificationStyleContainer">();
	}
	static class UModioNotificationStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioNotificationStyleContainer>();
	}
};
static_assert(alignof(UModioNotificationStyleContainer) == 0x000008, "Wrong alignment on UModioNotificationStyleContainer");
static_assert(sizeof(UModioNotificationStyleContainer) == 0x000128, "Wrong size on UModioNotificationStyleContainer");
static_assert(offsetof(UModioNotificationStyleContainer, Style) == 0x0000D0, "Member 'UModioNotificationStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioNotificationWidgetBase
// 0x0030 (0x02A8 - 0x0278)
class UModioNotificationWidgetBase : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18C0[0x10];                                    // 0x0278(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       NotificationStyle;                                 // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C1[0x18];                                    // 0x0290(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UWidget* CreateFromParams(TSubclassOf<class UWidget> NotificationClass, struct FModioNotificationParams& Params_0, class UWidget* Param_Outer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioNotificationWidgetBase">();
	}
	static class UModioNotificationWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioNotificationWidgetBase>();
	}
};
static_assert(alignof(UModioNotificationWidgetBase) == 0x000008, "Wrong alignment on UModioNotificationWidgetBase");
static_assert(sizeof(UModioNotificationWidgetBase) == 0x0002A8, "Wrong size on UModioNotificationWidgetBase");
static_assert(offsetof(UModioNotificationWidgetBase, NotificationStyle) == 0x000288, "Member 'UModioNotificationWidgetBase::NotificationStyle' has a wrong offset!");

// Class ModioUI.ModioNotificationErrorWidgetBase
// 0x0030 (0x02D8 - 0x02A8)
class UModioNotificationErrorWidgetBase : public UModioNotificationWidgetBase
{
public:
	class UModioImage*                            StatusColorBackground;                             // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioImage*                            StatusIndicator;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    NotificationTitle;                                 // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    NotificationMessage;                               // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C2[0x10];                                    // 0x02C8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioNotificationErrorWidgetBase">();
	}
	static class UModioNotificationErrorWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioNotificationErrorWidgetBase>();
	}
};
static_assert(alignof(UModioNotificationErrorWidgetBase) == 0x000008, "Wrong alignment on UModioNotificationErrorWidgetBase");
static_assert(sizeof(UModioNotificationErrorWidgetBase) == 0x0002D8, "Wrong size on UModioNotificationErrorWidgetBase");
static_assert(offsetof(UModioNotificationErrorWidgetBase, StatusColorBackground) == 0x0002A8, "Member 'UModioNotificationErrorWidgetBase::StatusColorBackground' has a wrong offset!");
static_assert(offsetof(UModioNotificationErrorWidgetBase, StatusIndicator) == 0x0002B0, "Member 'UModioNotificationErrorWidgetBase::StatusIndicator' has a wrong offset!");
static_assert(offsetof(UModioNotificationErrorWidgetBase, NotificationTitle) == 0x0002B8, "Member 'UModioNotificationErrorWidgetBase::NotificationTitle' has a wrong offset!");
static_assert(offsetof(UModioNotificationErrorWidgetBase, NotificationMessage) == 0x0002C0, "Member 'UModioNotificationErrorWidgetBase::NotificationMessage' has a wrong offset!");

// Class ModioUI.ModioPopupComboBox
// 0x0120 (0x0228 - 0x0108)
class UModioPopupComboBox final  : public UWidget
{
public:
	struct FModioUIMenuCommandList                CurrentEntries;                                    // 0x0108(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C3[0x10];                                    // 0x0158(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0168(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   LabelFormatText;                                   // 0x0180(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ValueFormatText;                                   // 0x0198(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseRoundedCorners;                                // 0x01B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C4[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       RoundedCornerStyle;                                // 0x01B4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       ComboBoxStyle;                                     // 0x01BC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       TextStyle;                                         // 0x01C4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                ContentPadding;                                    // 0x01CC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bPreviewOpen;                                      // 0x01DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C5[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           OptionValues;                                      // 0x01E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C6[0x30];                                    // 0x01F0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	EModioPopupPlacement                          PopupPlacement;                                    // 0x0220(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C7[0x7];                                     // 0x0221(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioPopupComboBox">();
	}
	static class UModioPopupComboBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioPopupComboBox>();
	}
};
static_assert(alignof(UModioPopupComboBox) == 0x000008, "Wrong alignment on UModioPopupComboBox");
static_assert(sizeof(UModioPopupComboBox) == 0x000228, "Wrong size on UModioPopupComboBox");
static_assert(offsetof(UModioPopupComboBox, CurrentEntries) == 0x000108, "Member 'UModioPopupComboBox::CurrentEntries' has a wrong offset!");
static_assert(offsetof(UModioPopupComboBox, Description) == 0x000168, "Member 'UModioPopupComboBox::Description' has a wrong offset!");
static_assert(offsetof(UModioPopupComboBox, LabelFormatText) == 0x000180, "Member 'UModioPopupComboBox::LabelFormatText' has a wrong offset!");
static_assert(offsetof(UModioPopupComboBox, ValueFormatText) == 0x000198, "Member 'UModioPopupComboBox::ValueFormatText' has a wrong offset!");
static_assert(offsetof(UModioPopupComboBox, bUseRoundedCorners) == 0x0001B0, "Member 'UModioPopupComboBox::bUseRoundedCorners' has a wrong offset!");
static_assert(offsetof(UModioPopupComboBox, RoundedCornerStyle) == 0x0001B4, "Member 'UModioPopupComboBox::RoundedCornerStyle' has a wrong offset!");
static_assert(offsetof(UModioPopupComboBox, ComboBoxStyle) == 0x0001BC, "Member 'UModioPopupComboBox::ComboBoxStyle' has a wrong offset!");
static_assert(offsetof(UModioPopupComboBox, TextStyle) == 0x0001C4, "Member 'UModioPopupComboBox::TextStyle' has a wrong offset!");
static_assert(offsetof(UModioPopupComboBox, ContentPadding) == 0x0001CC, "Member 'UModioPopupComboBox::ContentPadding' has a wrong offset!");
static_assert(offsetof(UModioPopupComboBox, bPreviewOpen) == 0x0001DC, "Member 'UModioPopupComboBox::bPreviewOpen' has a wrong offset!");
static_assert(offsetof(UModioPopupComboBox, OptionValues) == 0x0001E0, "Member 'UModioPopupComboBox::OptionValues' has a wrong offset!");
static_assert(offsetof(UModioPopupComboBox, PopupPlacement) == 0x000220, "Member 'UModioPopupComboBox::PopupPlacement' has a wrong offset!");

// Class ModioUI.ModioPopupMenu
// 0x00B0 (0x0220 - 0x0170)
class UModioPopupMenu final  : public UMenuAnchor
{
public:
	uint8                                         Pad_18C8[0x50];                                    // 0x0170(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ButtonLabel;                                       // 0x01C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	ETextJustify                                  ButtonLabelJustification;                          // 0x01D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C9[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CurrentContent;                                    // 0x01E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   MenuButton;                                        // 0x01E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       ButtonStyle;                                       // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       PopupMenuStyle;                                    // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                MenuContentWidgetClass;                            // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   KeyForInputHint;                                   // 0x0208(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UUserWidget* GeneratePopupMenuContent();
	void HandleButtonClicked();
	void SetMenuEntries(const struct FModioUIMenuCommandList& Entries);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioPopupMenu">();
	}
	static class UModioPopupMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioPopupMenu>();
	}
};
static_assert(alignof(UModioPopupMenu) == 0x000008, "Wrong alignment on UModioPopupMenu");
static_assert(sizeof(UModioPopupMenu) == 0x000220, "Wrong size on UModioPopupMenu");
static_assert(offsetof(UModioPopupMenu, ButtonLabel) == 0x0001C0, "Member 'UModioPopupMenu::ButtonLabel' has a wrong offset!");
static_assert(offsetof(UModioPopupMenu, ButtonLabelJustification) == 0x0001D8, "Member 'UModioPopupMenu::ButtonLabelJustification' has a wrong offset!");
static_assert(offsetof(UModioPopupMenu, CurrentContent) == 0x0001E0, "Member 'UModioPopupMenu::CurrentContent' has a wrong offset!");
static_assert(offsetof(UModioPopupMenu, MenuButton) == 0x0001E8, "Member 'UModioPopupMenu::MenuButton' has a wrong offset!");
static_assert(offsetof(UModioPopupMenu, ButtonStyle) == 0x0001F0, "Member 'UModioPopupMenu::ButtonStyle' has a wrong offset!");
static_assert(offsetof(UModioPopupMenu, PopupMenuStyle) == 0x0001F8, "Member 'UModioPopupMenu::PopupMenuStyle' has a wrong offset!");
static_assert(offsetof(UModioPopupMenu, MenuContentWidgetClass) == 0x000200, "Member 'UModioPopupMenu::MenuContentWidgetClass' has a wrong offset!");
static_assert(offsetof(UModioPopupMenu, KeyForInputHint) == 0x000208, "Member 'UModioPopupMenu::KeyForInputHint' has a wrong offset!");

// Class ModioUI.ModioPopupMenuStyleContainer
// 0x0038 (0x0108 - 0x00D0)
class UModioPopupMenuStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioPopupMenuStyle                   Style;                                             // 0x00D0(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioPopupMenuStyleContainer">();
	}
	static class UModioPopupMenuStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioPopupMenuStyleContainer>();
	}
};
static_assert(alignof(UModioPopupMenuStyleContainer) == 0x000008, "Wrong alignment on UModioPopupMenuStyleContainer");
static_assert(sizeof(UModioPopupMenuStyleContainer) == 0x000108, "Wrong size on UModioPopupMenuStyleContainer");
static_assert(offsetof(UModioPopupMenuStyleContainer, Style) == 0x0000D0, "Member 'UModioPopupMenuStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioProgressBar
// 0x0008 (0x0320 - 0x0318)
class UModioProgressBar final  : public UProgressBar
{
public:
	struct FModioUIStyleRef                       StyleRef;                                          // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void SetStyleRef(const struct FModioUIStyleRef& NewStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioProgressBar">();
	}
	static class UModioProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioProgressBar>();
	}
};
static_assert(alignof(UModioProgressBar) == 0x000008, "Wrong alignment on UModioProgressBar");
static_assert(sizeof(UModioProgressBar) == 0x000320, "Wrong size on UModioProgressBar");
static_assert(offsetof(UModioProgressBar, StyleRef) == 0x000318, "Member 'UModioProgressBar::StyleRef' has a wrong offset!");

// Class ModioUI.ModioProgressBarStyleContainer
// 0x01A0 (0x0270 - 0x00D0)
class UModioProgressBarStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioProgressBarStyle                 Style;                                             // 0x00D0(0x01A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioProgressBarStyleContainer">();
	}
	static class UModioProgressBarStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioProgressBarStyleContainer>();
	}
};
static_assert(alignof(UModioProgressBarStyleContainer) == 0x000008, "Wrong alignment on UModioProgressBarStyleContainer");
static_assert(sizeof(UModioProgressBarStyleContainer) == 0x000270, "Wrong size on UModioProgressBarStyleContainer");
static_assert(offsetof(UModioProgressBarStyleContainer, Style) == 0x0000D0, "Member 'UModioProgressBarStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioRefineSearchDrawer
// 0x0080 (0x02F8 - 0x0278)
class UModioRefineSearchDrawer : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18CA[0x18];                                    // 0x0278(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioEditableTextBox*                  SearchInput;                                       // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioTagListWidgetBase*                TagSelector;                                       // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   ApplyButton;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   ClearButton;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   CancelButton;                                      // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnSettingsChanged;                                 // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UModioTagOptionsUI*                     TagOptions;                                        // 0x02C8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                        NavigationPath;                                    // 0x02D0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UModioUI4Subsystem*                     UISubsystem;                                       // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioTagSelectorWidgetBase*            CurrentActiveTagSelector;                          // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18CB[0x8];                                     // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConstructNavigationPath();
	void OnApplyClicked();
	void OnCancelClicked();
	void OnClearClicked();
	void OnCollapse();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioRefineSearchDrawer">();
	}
	static class UModioRefineSearchDrawer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioRefineSearchDrawer>();
	}
};
static_assert(alignof(UModioRefineSearchDrawer) == 0x000008, "Wrong alignment on UModioRefineSearchDrawer");
static_assert(sizeof(UModioRefineSearchDrawer) == 0x0002F8, "Wrong size on UModioRefineSearchDrawer");
static_assert(offsetof(UModioRefineSearchDrawer, SearchInput) == 0x000290, "Member 'UModioRefineSearchDrawer::SearchInput' has a wrong offset!");
static_assert(offsetof(UModioRefineSearchDrawer, TagSelector) == 0x000298, "Member 'UModioRefineSearchDrawer::TagSelector' has a wrong offset!");
static_assert(offsetof(UModioRefineSearchDrawer, ApplyButton) == 0x0002A0, "Member 'UModioRefineSearchDrawer::ApplyButton' has a wrong offset!");
static_assert(offsetof(UModioRefineSearchDrawer, ClearButton) == 0x0002A8, "Member 'UModioRefineSearchDrawer::ClearButton' has a wrong offset!");
static_assert(offsetof(UModioRefineSearchDrawer, CancelButton) == 0x0002B0, "Member 'UModioRefineSearchDrawer::CancelButton' has a wrong offset!");
static_assert(offsetof(UModioRefineSearchDrawer, OnSettingsChanged) == 0x0002B8, "Member 'UModioRefineSearchDrawer::OnSettingsChanged' has a wrong offset!");
static_assert(offsetof(UModioRefineSearchDrawer, TagOptions) == 0x0002C8, "Member 'UModioRefineSearchDrawer::TagOptions' has a wrong offset!");
static_assert(offsetof(UModioRefineSearchDrawer, NavigationPath) == 0x0002D0, "Member 'UModioRefineSearchDrawer::NavigationPath' has a wrong offset!");
static_assert(offsetof(UModioRefineSearchDrawer, UISubsystem) == 0x0002E0, "Member 'UModioRefineSearchDrawer::UISubsystem' has a wrong offset!");
static_assert(offsetof(UModioRefineSearchDrawer, CurrentActiveTagSelector) == 0x0002E8, "Member 'UModioRefineSearchDrawer::CurrentActiveTagSelector' has a wrong offset!");

// Class ModioUI.ModioRemoveModDialog
// 0x0020 (0x02A0 - 0x0280)
class UModioRemoveModDialog final  : public UModioDialogBase
{
public:
	class UModioTextBlock*                        ModName;                                           // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioTextBlock*                        PromptMessage;                                     // 0x0288(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioButton*                           BackButton;                                        // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioButton*                           ConfirmButton;                                     // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioRemoveModDialog">();
	}
	static class UModioRemoveModDialog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioRemoveModDialog>();
	}
};
static_assert(alignof(UModioRemoveModDialog) == 0x000008, "Wrong alignment on UModioRemoveModDialog");
static_assert(sizeof(UModioRemoveModDialog) == 0x0002A0, "Wrong size on UModioRemoveModDialog");
static_assert(offsetof(UModioRemoveModDialog, ModName) == 0x000280, "Member 'UModioRemoveModDialog::ModName' has a wrong offset!");
static_assert(offsetof(UModioRemoveModDialog, PromptMessage) == 0x000288, "Member 'UModioRemoveModDialog::PromptMessage' has a wrong offset!");
static_assert(offsetof(UModioRemoveModDialog, BackButton) == 0x000290, "Member 'UModioRemoveModDialog::BackButton' has a wrong offset!");
static_assert(offsetof(UModioRemoveModDialog, ConfirmButton) == 0x000298, "Member 'UModioRemoveModDialog::ConfirmButton' has a wrong offset!");

// Class ModioUI.ModioReportButtonGroupWidget
// 0x0048 (0x0150 - 0x0108)
class UModioReportButtonGroupWidget final  : public UWidget
{
public:
	uint8                                         Pad_18CC[0x20];                                    // 0x0108(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18CD[0x8];                                     // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       ButtonStyle;                                       // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18CE[0x10];                                    // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioReportButtonGroupWidget">();
	}
	static class UModioReportButtonGroupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioReportButtonGroupWidget>();
	}
};
static_assert(alignof(UModioReportButtonGroupWidget) == 0x000008, "Wrong alignment on UModioReportButtonGroupWidget");
static_assert(sizeof(UModioReportButtonGroupWidget) == 0x000150, "Wrong size on UModioReportButtonGroupWidget");
static_assert(offsetof(UModioReportButtonGroupWidget, DataSource) == 0x000128, "Member 'UModioReportButtonGroupWidget::DataSource' has a wrong offset!");
static_assert(offsetof(UModioReportButtonGroupWidget, ButtonStyle) == 0x000138, "Member 'UModioReportButtonGroupWidget::ButtonStyle' has a wrong offset!");

// Class ModioUI.ModioReportModDialog
// 0x0000 (0x0280 - 0x0280)
class UModioReportModDialog final  : public UModioDialogBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioReportModDialog">();
	}
	static class UModioReportModDialog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioReportModDialog>();
	}
};
static_assert(alignof(UModioReportModDialog) == 0x000008, "Wrong alignment on UModioReportModDialog");
static_assert(sizeof(UModioReportModDialog) == 0x000280, "Wrong size on UModioReportModDialog");

// Class ModioUI.ModioReportSummaryWidget
// 0x0010 (0x0D18 - 0x0D08)
class UModioReportSummaryWidget final  : public UModioMultiLineEditableTextBox
{
public:
	uint8                                         Pad_18CF[0x8];                                     // 0x0D08(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DataSource;                                        // 0x0D10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioReportSummaryWidget">();
	}
	static class UModioReportSummaryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioReportSummaryWidget>();
	}
};
static_assert(alignof(UModioReportSummaryWidget) == 0x000008, "Wrong alignment on UModioReportSummaryWidget");
static_assert(sizeof(UModioReportSummaryWidget) == 0x000D18, "Wrong size on UModioReportSummaryWidget");
static_assert(offsetof(UModioReportSummaryWidget, DataSource) == 0x000D10, "Member 'UModioReportSummaryWidget::DataSource' has a wrong offset!");

// Class ModioUI.ModioRichTextBlock
// 0x0020 (0x0698 - 0x0678)
class UModioRichTextBlock final  : public URichTextBlock
{
public:
	uint8                                         Pad_18D0[0x10];                                    // 0x0678(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       TextStyle;                                         // 0x0688(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   DefaultStyleName;                                  // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	TArray<class FString> GetStyleNames() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioRichTextBlock">();
	}
	static class UModioRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioRichTextBlock>();
	}
};
static_assert(alignof(UModioRichTextBlock) == 0x000008, "Wrong alignment on UModioRichTextBlock");
static_assert(sizeof(UModioRichTextBlock) == 0x000698, "Wrong size on UModioRichTextBlock");
static_assert(offsetof(UModioRichTextBlock, TextStyle) == 0x000688, "Member 'UModioRichTextBlock::TextStyle' has a wrong offset!");
static_assert(offsetof(UModioRichTextBlock, DefaultStyleName) == 0x000690, "Member 'UModioRichTextBlock::DefaultStyleName' has a wrong offset!");

// Class ModioUI.ModioRichTextBlockDecorator
// 0x0000 (0x0028 - 0x0028)
class UModioRichTextBlockDecorator final  : public URichTextBlockDecorator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioRichTextBlockDecorator">();
	}
	static class UModioRichTextBlockDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioRichTextBlockDecorator>();
	}
};
static_assert(alignof(UModioRichTextBlockDecorator) == 0x000008, "Wrong alignment on UModioRichTextBlockDecorator");
static_assert(sizeof(UModioRichTextBlockDecorator) == 0x000028, "Wrong size on UModioRichTextBlockDecorator");

// Class ModioUI.ModioRichTextStyleContainer
// 0x00A8 (0x0178 - 0x00D0)
class UModioRichTextStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioRichTextStyle                    Style;                                             // 0x00D0(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioRichTextStyleContainer">();
	}
	static class UModioRichTextStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioRichTextStyleContainer>();
	}
};
static_assert(alignof(UModioRichTextStyleContainer) == 0x000008, "Wrong alignment on UModioRichTextStyleContainer");
static_assert(sizeof(UModioRichTextStyleContainer) == 0x000178, "Wrong size on UModioRichTextStyleContainer");
static_assert(offsetof(UModioRichTextStyleContainer, Style) == 0x0000D0, "Member 'UModioRichTextStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioRoundedImage
// 0x0020 (0x0238 - 0x0218)
class UModioRoundedImage final  : public UModioImage
{
public:
	struct FModioUIMaterialRef                    MaterialToUse;                                     // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     CachedReferencedMaterial;                          // 0x0220(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               ImageMaterial;                                     // 0x0228(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TextureParameterName;                              // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioRoundedImage">();
	}
	static class UModioRoundedImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioRoundedImage>();
	}
};
static_assert(alignof(UModioRoundedImage) == 0x000008, "Wrong alignment on UModioRoundedImage");
static_assert(sizeof(UModioRoundedImage) == 0x000238, "Wrong size on UModioRoundedImage");
static_assert(offsetof(UModioRoundedImage, MaterialToUse) == 0x000218, "Member 'UModioRoundedImage::MaterialToUse' has a wrong offset!");
static_assert(offsetof(UModioRoundedImage, CachedReferencedMaterial) == 0x000220, "Member 'UModioRoundedImage::CachedReferencedMaterial' has a wrong offset!");
static_assert(offsetof(UModioRoundedImage, ImageMaterial) == 0x000228, "Member 'UModioRoundedImage::ImageMaterial' has a wrong offset!");
static_assert(offsetof(UModioRoundedImage, TextureParameterName) == 0x000230, "Member 'UModioRoundedImage::TextureParameterName' has a wrong offset!");

// Class ModioUI.ModioRoundedRectangleMaterialParams
// 0x0040 (0x0068 - 0x0028)
class UModioRoundedRectangleMaterialParams final  : public UModioProceduralBrushParams
{
public:
	struct FModioUIColorRef                       NormalBorderColor;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       FocusedBorderColor;                                // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       InnerColor;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRelativeRadius;                                   // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D1[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CornerRadius;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BorderThickness;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBorder;                                     // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableButtonGradients;                            // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D2[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIColorRef                       BorderGradientColor;                               // 0x0050(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       InnerGradientColor;                                // 0x0058(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BorderGradientOpacity;                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerGradientOpacity;                              // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioRoundedRectangleMaterialParams">();
	}
	static class UModioRoundedRectangleMaterialParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioRoundedRectangleMaterialParams>();
	}
};
static_assert(alignof(UModioRoundedRectangleMaterialParams) == 0x000008, "Wrong alignment on UModioRoundedRectangleMaterialParams");
static_assert(sizeof(UModioRoundedRectangleMaterialParams) == 0x000068, "Wrong size on UModioRoundedRectangleMaterialParams");
static_assert(offsetof(UModioRoundedRectangleMaterialParams, NormalBorderColor) == 0x000028, "Member 'UModioRoundedRectangleMaterialParams::NormalBorderColor' has a wrong offset!");
static_assert(offsetof(UModioRoundedRectangleMaterialParams, FocusedBorderColor) == 0x000030, "Member 'UModioRoundedRectangleMaterialParams::FocusedBorderColor' has a wrong offset!");
static_assert(offsetof(UModioRoundedRectangleMaterialParams, InnerColor) == 0x000038, "Member 'UModioRoundedRectangleMaterialParams::InnerColor' has a wrong offset!");
static_assert(offsetof(UModioRoundedRectangleMaterialParams, bRelativeRadius) == 0x000040, "Member 'UModioRoundedRectangleMaterialParams::bRelativeRadius' has a wrong offset!");
static_assert(offsetof(UModioRoundedRectangleMaterialParams, CornerRadius) == 0x000044, "Member 'UModioRoundedRectangleMaterialParams::CornerRadius' has a wrong offset!");
static_assert(offsetof(UModioRoundedRectangleMaterialParams, BorderThickness) == 0x000048, "Member 'UModioRoundedRectangleMaterialParams::BorderThickness' has a wrong offset!");
static_assert(offsetof(UModioRoundedRectangleMaterialParams, bEnableBorder) == 0x00004C, "Member 'UModioRoundedRectangleMaterialParams::bEnableBorder' has a wrong offset!");
static_assert(offsetof(UModioRoundedRectangleMaterialParams, bEnableButtonGradients) == 0x00004D, "Member 'UModioRoundedRectangleMaterialParams::bEnableButtonGradients' has a wrong offset!");
static_assert(offsetof(UModioRoundedRectangleMaterialParams, BorderGradientColor) == 0x000050, "Member 'UModioRoundedRectangleMaterialParams::BorderGradientColor' has a wrong offset!");
static_assert(offsetof(UModioRoundedRectangleMaterialParams, InnerGradientColor) == 0x000058, "Member 'UModioRoundedRectangleMaterialParams::InnerGradientColor' has a wrong offset!");
static_assert(offsetof(UModioRoundedRectangleMaterialParams, BorderGradientOpacity) == 0x000060, "Member 'UModioRoundedRectangleMaterialParams::BorderGradientOpacity' has a wrong offset!");
static_assert(offsetof(UModioRoundedRectangleMaterialParams, InnerGradientOpacity) == 0x000064, "Member 'UModioRoundedRectangleMaterialParams::InnerGradientOpacity' has a wrong offset!");

// Class ModioUI.ModioSearchOptionsDialog
// 0x0020 (0x02A0 - 0x0280)
class UModioSearchOptionsDialog final  : public UModioDialogBase
{
public:
	class UModioTabController*                    TagCategorySelector;                               // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioListView*                         TagList;                                           // 0x0288(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioButton*                           ApplyButton;                                       // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioButton*                           MoreOptionsButton;                                 // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioSearchOptionsDialog">();
	}
	static class UModioSearchOptionsDialog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioSearchOptionsDialog>();
	}
};
static_assert(alignof(UModioSearchOptionsDialog) == 0x000008, "Wrong alignment on UModioSearchOptionsDialog");
static_assert(sizeof(UModioSearchOptionsDialog) == 0x0002A0, "Wrong size on UModioSearchOptionsDialog");
static_assert(offsetof(UModioSearchOptionsDialog, TagCategorySelector) == 0x000280, "Member 'UModioSearchOptionsDialog::TagCategorySelector' has a wrong offset!");
static_assert(offsetof(UModioSearchOptionsDialog, TagList) == 0x000288, "Member 'UModioSearchOptionsDialog::TagList' has a wrong offset!");
static_assert(offsetof(UModioSearchOptionsDialog, ApplyButton) == 0x000290, "Member 'UModioSearchOptionsDialog::ApplyButton' has a wrong offset!");
static_assert(offsetof(UModioSearchOptionsDialog, MoreOptionsButton) == 0x000298, "Member 'UModioSearchOptionsDialog::MoreOptionsButton' has a wrong offset!");

// Class ModioUI.ModioSearchResultsView
// 0x0198 (0x0440 - 0x02A8)
class UModioSearchResultsView : public UModioMenuView
{
public:
	uint8                                         Pad_18D3[0x48];                                    // 0x02A8(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UModioModInfoUI*>                SearchResults;                                     // 0x02F0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UModioTileView*                         ResultsTileView;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            FirstTile;                                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                ResultLoader;                                      // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioGridPanel*                        NoResultsDialog;                                   // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioTagList*                          SearchTags;                                        // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioButton*                           RefineSearchButton;                                // 0x0328(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioButton*                           NoResultsRefineSearchButton;                       // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioPopupComboBox*                    SortBy;                                            // 0x0338(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioErrorRetryWidget*                 ModioErrorWithRetryWidget;                         // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    SearchResultsCount;                                // 0x0348(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       TitleTextStyle;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FText                                   PageTitle;                                         // 0x0358(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ModQueryFormatText;                                // 0x0370(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FString                                 DefaultTagText;                                    // 0x0388(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   SearchInputTagFormatText;                          // 0x0398(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18D4[0x90];                                    // 0x03B0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDrawerClosed();
	void OnRefineSearchButtonClicked();
	void OnRetryPressed();
	void SortByHighestRated();
	void SortByLastUpdated();
	void SortByMostPopular();
	void SortByMostSubscribers();
	void SortByRecentlyAdded();
	void SortByTrending();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioSearchResultsView">();
	}
	static class UModioSearchResultsView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioSearchResultsView>();
	}
};
static_assert(alignof(UModioSearchResultsView) == 0x000008, "Wrong alignment on UModioSearchResultsView");
static_assert(sizeof(UModioSearchResultsView) == 0x000440, "Wrong size on UModioSearchResultsView");
static_assert(offsetof(UModioSearchResultsView, SearchResults) == 0x0002F0, "Member 'UModioSearchResultsView::SearchResults' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, ResultsTileView) == 0x000300, "Member 'UModioSearchResultsView::ResultsTileView' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, FirstTile) == 0x000308, "Member 'UModioSearchResultsView::FirstTile' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, ResultLoader) == 0x000310, "Member 'UModioSearchResultsView::ResultLoader' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, NoResultsDialog) == 0x000318, "Member 'UModioSearchResultsView::NoResultsDialog' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, SearchTags) == 0x000320, "Member 'UModioSearchResultsView::SearchTags' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, RefineSearchButton) == 0x000328, "Member 'UModioSearchResultsView::RefineSearchButton' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, NoResultsRefineSearchButton) == 0x000330, "Member 'UModioSearchResultsView::NoResultsRefineSearchButton' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, SortBy) == 0x000338, "Member 'UModioSearchResultsView::SortBy' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, ModioErrorWithRetryWidget) == 0x000340, "Member 'UModioSearchResultsView::ModioErrorWithRetryWidget' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, SearchResultsCount) == 0x000348, "Member 'UModioSearchResultsView::SearchResultsCount' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, TitleTextStyle) == 0x000350, "Member 'UModioSearchResultsView::TitleTextStyle' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, PageTitle) == 0x000358, "Member 'UModioSearchResultsView::PageTitle' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, ModQueryFormatText) == 0x000370, "Member 'UModioSearchResultsView::ModQueryFormatText' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, DefaultTagText) == 0x000388, "Member 'UModioSearchResultsView::DefaultTagText' has a wrong offset!");
static_assert(offsetof(UModioSearchResultsView, SearchInputTagFormatText) == 0x000398, "Member 'UModioSearchResultsView::SearchInputTagFormatText' has a wrong offset!");

// Class ModioUI.ModioSelectableTag
// 0x0060 (0x02D8 - 0x0278)
class UModioSelectableTag : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18D5[0x10];                                    // 0x0278(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       RadioCheckboxStyle;                                // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       RadioCheckboxFocusedStyle;                         // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class UModioCheckBox*                         TagSelectedCheckbox;                               // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       NormalStyle;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       FocusedStyle;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 SearchString;                                      // 0x02B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D6[0x18];                                    // 0x02C0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCheckboxCheckStateChanged(bool bIsChecked);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioSelectableTag">();
	}
	static class UModioSelectableTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioSelectableTag>();
	}
};
static_assert(alignof(UModioSelectableTag) == 0x000008, "Wrong alignment on UModioSelectableTag");
static_assert(sizeof(UModioSelectableTag) == 0x0002D8, "Wrong size on UModioSelectableTag");
static_assert(offsetof(UModioSelectableTag, RadioCheckboxStyle) == 0x000288, "Member 'UModioSelectableTag::RadioCheckboxStyle' has a wrong offset!");
static_assert(offsetof(UModioSelectableTag, RadioCheckboxFocusedStyle) == 0x000290, "Member 'UModioSelectableTag::RadioCheckboxFocusedStyle' has a wrong offset!");
static_assert(offsetof(UModioSelectableTag, TagSelectedCheckbox) == 0x000298, "Member 'UModioSelectableTag::TagSelectedCheckbox' has a wrong offset!");
static_assert(offsetof(UModioSelectableTag, NormalStyle) == 0x0002A0, "Member 'UModioSelectableTag::NormalStyle' has a wrong offset!");
static_assert(offsetof(UModioSelectableTag, FocusedStyle) == 0x0002A8, "Member 'UModioSelectableTag::FocusedStyle' has a wrong offset!");
static_assert(offsetof(UModioSelectableTag, SearchString) == 0x0002B0, "Member 'UModioSelectableTag::SearchString' has a wrong offset!");

// Class ModioUI.ModioSizeBox
// 0x0008 (0x0160 - 0x0158)
class UModioSizeBox final  : public USizeBox
{
public:
	EHorizontalAlignment                          HAlign;                                            // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            VAlign;                                            // 0x0159(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18D7[0x6];                                     // 0x015A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioSizeBox">();
	}
	static class UModioSizeBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioSizeBox>();
	}
};
static_assert(alignof(UModioSizeBox) == 0x000008, "Wrong alignment on UModioSizeBox");
static_assert(sizeof(UModioSizeBox) == 0x000160, "Wrong size on UModioSizeBox");
static_assert(offsetof(UModioSizeBox, HAlign) == 0x000158, "Member 'UModioSizeBox::HAlign' has a wrong offset!");
static_assert(offsetof(UModioSizeBox, VAlign) == 0x000159, "Member 'UModioSizeBox::VAlign' has a wrong offset!");

// Class ModioUI.ModioSubscriptionBadge
// 0x0088 (0x0328 - 0x02A0)
class UModioSubscriptionBadge : public UModioModManagementWidgetBase
{
public:
	uint8                                         Pad_18D8[0x10];                                    // 0x02A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioProgressBar*                      ProgressBar;                                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    Label;                                             // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       BadgeStyle;                                        // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FText                                   PendingLabelText;                                  // 0x02C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   DownloadingLabelText;                              // 0x02E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ExtractingLabelText;                               // 0x02F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   SubscribedLabelText;                               // 0x0310(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioSubscriptionBadge">();
	}
	static class UModioSubscriptionBadge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioSubscriptionBadge>();
	}
};
static_assert(alignof(UModioSubscriptionBadge) == 0x000008, "Wrong alignment on UModioSubscriptionBadge");
static_assert(sizeof(UModioSubscriptionBadge) == 0x000328, "Wrong size on UModioSubscriptionBadge");
static_assert(offsetof(UModioSubscriptionBadge, ProgressBar) == 0x0002B0, "Member 'UModioSubscriptionBadge::ProgressBar' has a wrong offset!");
static_assert(offsetof(UModioSubscriptionBadge, Label) == 0x0002B8, "Member 'UModioSubscriptionBadge::Label' has a wrong offset!");
static_assert(offsetof(UModioSubscriptionBadge, BadgeStyle) == 0x0002C0, "Member 'UModioSubscriptionBadge::BadgeStyle' has a wrong offset!");
static_assert(offsetof(UModioSubscriptionBadge, PendingLabelText) == 0x0002C8, "Member 'UModioSubscriptionBadge::PendingLabelText' has a wrong offset!");
static_assert(offsetof(UModioSubscriptionBadge, DownloadingLabelText) == 0x0002E0, "Member 'UModioSubscriptionBadge::DownloadingLabelText' has a wrong offset!");
static_assert(offsetof(UModioSubscriptionBadge, ExtractingLabelText) == 0x0002F8, "Member 'UModioSubscriptionBadge::ExtractingLabelText' has a wrong offset!");
static_assert(offsetof(UModioSubscriptionBadge, SubscribedLabelText) == 0x000310, "Member 'UModioSubscriptionBadge::SubscribedLabelText' has a wrong offset!");

// Class ModioUI.ModioSubscriptionBadgeStyleContainer
// 0x0308 (0x03D8 - 0x00D0)
class UModioSubscriptionBadgeStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioSubscriptionBadgeStyle           Style;                                             // 0x00D0(0x0308)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioSubscriptionBadgeStyleContainer">();
	}
	static class UModioSubscriptionBadgeStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioSubscriptionBadgeStyleContainer>();
	}
};
static_assert(alignof(UModioSubscriptionBadgeStyleContainer) == 0x000008, "Wrong alignment on UModioSubscriptionBadgeStyleContainer");
static_assert(sizeof(UModioSubscriptionBadgeStyleContainer) == 0x0003D8, "Wrong size on UModioSubscriptionBadgeStyleContainer");
static_assert(offsetof(UModioSubscriptionBadgeStyleContainer, Style) == 0x0000D0, "Member 'UModioSubscriptionBadgeStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioTabBar
// 0x0908 (0x0A10 - 0x0108)
class UModioTabBar final  : public UWidget
{
public:
	uint8                                         Pad_18D9[0x30];                                    // 0x0108(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           TabNames;                                          // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18DA[0x10];                                    // 0x0148(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTableRowStyle                         TEMP_TableRowStyle;                                // 0x0158(0x07C8)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       TabButtonStyle;                                    // 0x0920(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       InactiveTabButtonStyle;                            // 0x0928(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            SelectedButtonBrush;                               // 0x0930(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FModioUIColorRef>    SerializedColors;                                  // 0x09B8(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              ItemSize;                                          // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnTabIndexChanged(int32 TabIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTabBar">();
	}
	static class UModioTabBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTabBar>();
	}
};
static_assert(alignof(UModioTabBar) == 0x000008, "Wrong alignment on UModioTabBar");
static_assert(sizeof(UModioTabBar) == 0x000A10, "Wrong size on UModioTabBar");
static_assert(offsetof(UModioTabBar, TabNames) == 0x000138, "Member 'UModioTabBar::TabNames' has a wrong offset!");
static_assert(offsetof(UModioTabBar, TEMP_TableRowStyle) == 0x000158, "Member 'UModioTabBar::TEMP_TableRowStyle' has a wrong offset!");
static_assert(offsetof(UModioTabBar, TabButtonStyle) == 0x000920, "Member 'UModioTabBar::TabButtonStyle' has a wrong offset!");
static_assert(offsetof(UModioTabBar, InactiveTabButtonStyle) == 0x000928, "Member 'UModioTabBar::InactiveTabButtonStyle' has a wrong offset!");
static_assert(offsetof(UModioTabBar, SelectedButtonBrush) == 0x000930, "Member 'UModioTabBar::SelectedButtonBrush' has a wrong offset!");
static_assert(offsetof(UModioTabBar, SerializedColors) == 0x0009B8, "Member 'UModioTabBar::SerializedColors' has a wrong offset!");
static_assert(offsetof(UModioTabBar, ItemSize) == 0x000A08, "Member 'UModioTabBar::ItemSize' has a wrong offset!");

// Class ModioUI.ModioTabController
// 0x0030 (0x02A8 - 0x0278)
class UModioTabController final  : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18DB[0x8];                                     // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioInputBindingImage*                NavigatePreviousHint;                              // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioTileView*                         TabButtons;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioInputBindingImage*                NavigateNextHint;                                  // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnCurrentTabChanged;                               // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	ESlateVisibility GetInputHintVisibility(EModioUIInputMode InputMode);
	void NextTab();
	void PrevTab();
	void SetCurrentTab(int64 TabIndex);
	void SetTabItems(const TArray<class UObject*>& NewItems);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTabController">();
	}
	static class UModioTabController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTabController>();
	}
};
static_assert(alignof(UModioTabController) == 0x000008, "Wrong alignment on UModioTabController");
static_assert(sizeof(UModioTabController) == 0x0002A8, "Wrong size on UModioTabController");
static_assert(offsetof(UModioTabController, NavigatePreviousHint) == 0x000280, "Member 'UModioTabController::NavigatePreviousHint' has a wrong offset!");
static_assert(offsetof(UModioTabController, TabButtons) == 0x000288, "Member 'UModioTabController::TabButtons' has a wrong offset!");
static_assert(offsetof(UModioTabController, NavigateNextHint) == 0x000290, "Member 'UModioTabController::NavigateNextHint' has a wrong offset!");
static_assert(offsetof(UModioTabController, OnCurrentTabChanged) == 0x000298, "Member 'UModioTabController::OnCurrentTabChanged' has a wrong offset!");

// Class ModioUI.ModioTableRowStyleContainer
// 0x0038 (0x0108 - 0x00D0)
class UModioTableRowStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioTableRowStyle                    Style;                                             // 0x00D0(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTableRowStyleContainer">();
	}
	static class UModioTableRowStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTableRowStyleContainer>();
	}
};
static_assert(alignof(UModioTableRowStyleContainer) == 0x000008, "Wrong alignment on UModioTableRowStyleContainer");
static_assert(sizeof(UModioTableRowStyleContainer) == 0x000108, "Wrong size on UModioTableRowStyleContainer");
static_assert(offsetof(UModioTableRowStyleContainer, Style) == 0x0000D0, "Member 'UModioTableRowStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioTagList
// 0x0068 (0x01B0 - 0x0148)
class UModioTagList final  : public UModioWrapBox
{
public:
	int32                                         NumberOfTagsToShow;                                // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18DC[0x4];                                     // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModioModTag>                   Tags;                                              // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FText                                   ExcessTagCountText;                                // 0x0160(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UModioTagWidgetBase>        TagWidgetClass;                                    // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18DD[0x30];                                    // 0x0180(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTags(const TArray<struct FModioModTag>& NewTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTagList">();
	}
	static class UModioTagList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTagList>();
	}
};
static_assert(alignof(UModioTagList) == 0x000008, "Wrong alignment on UModioTagList");
static_assert(sizeof(UModioTagList) == 0x0001B0, "Wrong size on UModioTagList");
static_assert(offsetof(UModioTagList, NumberOfTagsToShow) == 0x000148, "Member 'UModioTagList::NumberOfTagsToShow' has a wrong offset!");
static_assert(offsetof(UModioTagList, Tags) == 0x000150, "Member 'UModioTagList::Tags' has a wrong offset!");
static_assert(offsetof(UModioTagList, ExcessTagCountText) == 0x000160, "Member 'UModioTagList::ExcessTagCountText' has a wrong offset!");
static_assert(offsetof(UModioTagList, TagWidgetClass) == 0x000178, "Member 'UModioTagList::TagWidgetClass' has a wrong offset!");

// Class ModioUI.ModioTagListWidgetBase
// 0x0020 (0x0298 - 0x0278)
class UModioTagListWidgetBase : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18DE[0x8];                                     // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioRichTextBlock*                    CategoryTextBlock;                                 // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollBox*                             SelectorListScrollBox;                             // 0x0288(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UModioTagSelectorWidgetBase> TagSelectorListTemplate;                           // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ClearSelectedTags();
	TArray<class FString> GetSelectedTags();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTagListWidgetBase">();
	}
	static class UModioTagListWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTagListWidgetBase>();
	}
};
static_assert(alignof(UModioTagListWidgetBase) == 0x000008, "Wrong alignment on UModioTagListWidgetBase");
static_assert(sizeof(UModioTagListWidgetBase) == 0x000298, "Wrong size on UModioTagListWidgetBase");
static_assert(offsetof(UModioTagListWidgetBase, CategoryTextBlock) == 0x000280, "Member 'UModioTagListWidgetBase::CategoryTextBlock' has a wrong offset!");
static_assert(offsetof(UModioTagListWidgetBase, SelectorListScrollBox) == 0x000288, "Member 'UModioTagListWidgetBase::SelectorListScrollBox' has a wrong offset!");
static_assert(offsetof(UModioTagListWidgetBase, TagSelectorListTemplate) == 0x000290, "Member 'UModioTagListWidgetBase::TagSelectorListTemplate' has a wrong offset!");

// Class ModioUI.ModioTagSelectorWidgetBase
// 0x0048 (0x02C0 - 0x0278)
class UModioTagSelectorWidgetBase : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18DF[0x10];                                    // 0x0278(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioTagInfoUI*                        CachedTagInfo;                                     // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    TagCategoryLabel;                                  // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModioButton*                           TagCategoryCollapseButton;                         // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModioImage*                            TagCategoryCollapseImage;                          // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModioInputBindingImage*                TagCategoryInputHint;                              // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           CategoryVerticalBox;                               // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UModioSelectableTag>        TagWidgetTemplate;                                 // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnCategoryCollapseToggled();
	void OnCheckboxChecked(class UModioSelectableTag* SourceTag, bool bIsChecked);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTagSelectorWidgetBase">();
	}
	static class UModioTagSelectorWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTagSelectorWidgetBase>();
	}
};
static_assert(alignof(UModioTagSelectorWidgetBase) == 0x000008, "Wrong alignment on UModioTagSelectorWidgetBase");
static_assert(sizeof(UModioTagSelectorWidgetBase) == 0x0002C0, "Wrong size on UModioTagSelectorWidgetBase");
static_assert(offsetof(UModioTagSelectorWidgetBase, CachedTagInfo) == 0x000288, "Member 'UModioTagSelectorWidgetBase::CachedTagInfo' has a wrong offset!");
static_assert(offsetof(UModioTagSelectorWidgetBase, TagCategoryLabel) == 0x000290, "Member 'UModioTagSelectorWidgetBase::TagCategoryLabel' has a wrong offset!");
static_assert(offsetof(UModioTagSelectorWidgetBase, TagCategoryCollapseButton) == 0x000298, "Member 'UModioTagSelectorWidgetBase::TagCategoryCollapseButton' has a wrong offset!");
static_assert(offsetof(UModioTagSelectorWidgetBase, TagCategoryCollapseImage) == 0x0002A0, "Member 'UModioTagSelectorWidgetBase::TagCategoryCollapseImage' has a wrong offset!");
static_assert(offsetof(UModioTagSelectorWidgetBase, TagCategoryInputHint) == 0x0002A8, "Member 'UModioTagSelectorWidgetBase::TagCategoryInputHint' has a wrong offset!");
static_assert(offsetof(UModioTagSelectorWidgetBase, CategoryVerticalBox) == 0x0002B0, "Member 'UModioTagSelectorWidgetBase::CategoryVerticalBox' has a wrong offset!");
static_assert(offsetof(UModioTagSelectorWidgetBase, TagWidgetTemplate) == 0x0002B8, "Member 'UModioTagSelectorWidgetBase::TagWidgetTemplate' has a wrong offset!");

// Class ModioUI.ModioTagWidgetBase
// 0x0040 (0x02B8 - 0x0278)
class UModioTagWidgetBase : public UModioUserWidgetBase
{
public:
	class FText                                   TagTextFormat;                                     // 0x0278(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FString                                 TagValue;                                          // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    TagText;                                           // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioImage*                            TagBackground;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FModioUIStyleRef                       TagStyle;                                          // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	const struct FModioRichTextStyle GetTagTextStyle();
	void SetTagTextFormat(class FText NewFormat);
	void SetTagValue(const class FString& Category, const class FString& NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTagWidgetBase">();
	}
	static class UModioTagWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTagWidgetBase>();
	}
};
static_assert(alignof(UModioTagWidgetBase) == 0x000008, "Wrong alignment on UModioTagWidgetBase");
static_assert(sizeof(UModioTagWidgetBase) == 0x0002B8, "Wrong size on UModioTagWidgetBase");
static_assert(offsetof(UModioTagWidgetBase, TagTextFormat) == 0x000278, "Member 'UModioTagWidgetBase::TagTextFormat' has a wrong offset!");
static_assert(offsetof(UModioTagWidgetBase, TagValue) == 0x000290, "Member 'UModioTagWidgetBase::TagValue' has a wrong offset!");
static_assert(offsetof(UModioTagWidgetBase, TagText) == 0x0002A0, "Member 'UModioTagWidgetBase::TagText' has a wrong offset!");
static_assert(offsetof(UModioTagWidgetBase, TagBackground) == 0x0002A8, "Member 'UModioTagWidgetBase::TagBackground' has a wrong offset!");
static_assert(offsetof(UModioTagWidgetBase, TagStyle) == 0x0002B0, "Member 'UModioTagWidgetBase::TagStyle' has a wrong offset!");

// Class ModioUI.ModioTagWidgetStyleContainer
// 0x01D0 (0x02A0 - 0x00D0)
class UModioTagWidgetStyleContainer final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioTagWidgetStyle                   Style;                                             // 0x00D0(0x01D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTagWidgetStyleContainer">();
	}
	static class UModioTagWidgetStyleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTagWidgetStyleContainer>();
	}
};
static_assert(alignof(UModioTagWidgetStyleContainer) == 0x000008, "Wrong alignment on UModioTagWidgetStyleContainer");
static_assert(sizeof(UModioTagWidgetStyleContainer) == 0x0002A0, "Wrong size on UModioTagWidgetStyleContainer");
static_assert(offsetof(UModioTagWidgetStyleContainer, Style) == 0x0000D0, "Member 'UModioTagWidgetStyleContainer::Style' has a wrong offset!");

// Class ModioUI.ModioTextBlock
// 0x0010 (0x02D0 - 0x02C0)
class UModioTextBlock final  : public UTextBlock
{
public:
	struct FModioUIStyleRef                       StyleRef;                                          // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bOverrideGlobalStyle;                              // 0x02C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18E1[0x7];                                     // 0x02C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTextBlock">();
	}
	static class UModioTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTextBlock>();
	}
};
static_assert(alignof(UModioTextBlock) == 0x000008, "Wrong alignment on UModioTextBlock");
static_assert(sizeof(UModioTextBlock) == 0x0002D0, "Wrong size on UModioTextBlock");
static_assert(offsetof(UModioTextBlock, StyleRef) == 0x0002C0, "Member 'UModioTextBlock::StyleRef' has a wrong offset!");
static_assert(offsetof(UModioTextBlock, bOverrideGlobalStyle) == 0x0002C8, "Member 'UModioTextBlock::bOverrideGlobalStyle' has a wrong offset!");

// Class ModioUI.ModioTileView
// 0x0018 (0x03A0 - 0x0388)
class UModioTileView final  : public UTileView
{
public:
	uint8                                         Pad_18E2[0x10];                                    // 0x0388(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          AllowPartialItems;                                 // 0x0398(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CenterPanelItems;                                  // 0x0399(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bZoomSelectedEntryWidget;                          // 0x039A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              ScrollbarVisibility;                               // 0x039B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18E3[0x4];                                     // 0x039C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAllowPartialItems(bool bAllowPartialItems);
	void SetCenterPanelItems(bool bCenterPanelItems);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTileView">();
	}
	static class UModioTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTileView>();
	}
};
static_assert(alignof(UModioTileView) == 0x000008, "Wrong alignment on UModioTileView");
static_assert(sizeof(UModioTileView) == 0x0003A0, "Wrong size on UModioTileView");
static_assert(offsetof(UModioTileView, AllowPartialItems) == 0x000398, "Member 'UModioTileView::AllowPartialItems' has a wrong offset!");
static_assert(offsetof(UModioTileView, CenterPanelItems) == 0x000399, "Member 'UModioTileView::CenterPanelItems' has a wrong offset!");
static_assert(offsetof(UModioTileView, bZoomSelectedEntryWidget) == 0x00039A, "Member 'UModioTileView::bZoomSelectedEntryWidget' has a wrong offset!");
static_assert(offsetof(UModioTileView, ScrollbarVisibility) == 0x00039B, "Member 'UModioTileView::ScrollbarVisibility' has a wrong offset!");

// Class ModioUI.ModioUI4Subsystem
// 0x0060 (0x0090 - 0x0030)
class UModioUI4Subsystem final  : public UEngineSubsystem
{
public:
	uint8                                         Pad_18E4[0x20];                                    // 0x0030(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioUIStyleSet*                       LoadedDefaultStyleSet;                             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18E5[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CurrentFocusTarget;                                // 0x0060(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18E6[0x28];                                    // 0x0068(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class FName> GetAllNamedStyleNames();
	class UWidget* GetCurrentFocusTarget();
	class UModioUIStyleSet* GetDefaultStyleSet();
	class UMaterialInterface* GetInputGlyphMaterialForInputType(const struct FKey& VirtualInput, EModioUIInputMode InputType);
	class FText GetLocalizedTag(const class FString& InTag);
	void HandleInputModeChanged(EModioUIInputMode NewDevice);
	void SetCurrentFocusTarget(class UWidget* CurrentTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUI4Subsystem">();
	}
	static class UModioUI4Subsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUI4Subsystem>();
	}
};
static_assert(alignof(UModioUI4Subsystem) == 0x000008, "Wrong alignment on UModioUI4Subsystem");
static_assert(sizeof(UModioUI4Subsystem) == 0x000090, "Wrong size on UModioUI4Subsystem");
static_assert(offsetof(UModioUI4Subsystem, LoadedDefaultStyleSet) == 0x000050, "Member 'UModioUI4Subsystem::LoadedDefaultStyleSet' has a wrong offset!");
static_assert(offsetof(UModioUI4Subsystem, CurrentFocusTarget) == 0x000060, "Member 'UModioUI4Subsystem::CurrentFocusTarget' has a wrong offset!");

// Class ModioUI.ModioUIAsyncLoader
// 0x0078 (0x0180 - 0x0108)
class UModioUIAsyncLoader final  : public UWidget
{
public:
	uint8                                         Pad_18E8[0x10];                                    // 0x0108(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EModioUIAsyncOperationWidgetState             CurrentState;                                      // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18E9[0x17];                                    // 0x0119(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UWidget*>             NamedWidgets;                                      // 0x0130(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void NativeHandleAsyncOperationStateChange(EModioUIAsyncOperationWidgetState NewState);
	void OnRetryRequested();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIAsyncLoader">();
	}
	static class UModioUIAsyncLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIAsyncLoader>();
	}
};
static_assert(alignof(UModioUIAsyncLoader) == 0x000008, "Wrong alignment on UModioUIAsyncLoader");
static_assert(sizeof(UModioUIAsyncLoader) == 0x000180, "Wrong size on UModioUIAsyncLoader");
static_assert(offsetof(UModioUIAsyncLoader, CurrentState) == 0x000118, "Member 'UModioUIAsyncLoader::CurrentState' has a wrong offset!");
static_assert(offsetof(UModioUIAsyncLoader, NamedWidgets) == 0x000130, "Member 'UModioUIAsyncLoader::NamedWidgets' has a wrong offset!");

// Class ModioUI.ModioUIAsyncLoadingOverlay
// 0x0028 (0x02A0 - 0x0278)
class UModioUIAsyncLoadingOverlay : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18EA[0x8];                                     // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIStyleRef                       DialogStyle;                                       // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UModioRichTextButton*                   CancelButton;                                      // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioRichTextBlock*                    LoadingText;                                       // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BackgroundImage;                                   // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Close();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIAsyncLoadingOverlay">();
	}
	static class UModioUIAsyncLoadingOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIAsyncLoadingOverlay>();
	}
};
static_assert(alignof(UModioUIAsyncLoadingOverlay) == 0x000008, "Wrong alignment on UModioUIAsyncLoadingOverlay");
static_assert(sizeof(UModioUIAsyncLoadingOverlay) == 0x0002A0, "Wrong size on UModioUIAsyncLoadingOverlay");
static_assert(offsetof(UModioUIAsyncLoadingOverlay, DialogStyle) == 0x000280, "Member 'UModioUIAsyncLoadingOverlay::DialogStyle' has a wrong offset!");
static_assert(offsetof(UModioUIAsyncLoadingOverlay, CancelButton) == 0x000288, "Member 'UModioUIAsyncLoadingOverlay::CancelButton' has a wrong offset!");
static_assert(offsetof(UModioUIAsyncLoadingOverlay, LoadingText) == 0x000290, "Member 'UModioUIAsyncLoadingOverlay::LoadingText' has a wrong offset!");
static_assert(offsetof(UModioUIAsyncLoadingOverlay, BackgroundImage) == 0x000298, "Member 'UModioUIAsyncLoadingOverlay::BackgroundImage' has a wrong offset!");

// Class ModioUI.ModioUISettings
// 0x00F8 (0x0120 - 0x0028)
class UModioUISettings final  : public UObject
{
public:
	TArray<struct FModioInputMapping>             ModioToProjectInputMappings;                       // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UModioUIStyleSet>        DefaultStyleSet;                                   // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UModioNavigationConfigFactoryBase> NavigationConfigOverride;                          // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    AuthenticationDataProvider;                        // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    InputHintGlyphProvider;                            // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UModioModBrowserParams>  BrowserCategoryConfiguration;                      // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioUIInputMode                             InputDevicesForTesting;                            // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridePlatformMaterials;                        // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCenteredUI;                                 // 0x00C2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18EB[0x1];                                     // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxMenuWidth;                                      // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableInputGlyphsCompletely;                     // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18EC[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FText>              LocalizedTags;                                     // 0x00D0(0x0050)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUISettings">();
	}
	static class UModioUISettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUISettings>();
	}
};
static_assert(alignof(UModioUISettings) == 0x000008, "Wrong alignment on UModioUISettings");
static_assert(sizeof(UModioUISettings) == 0x000120, "Wrong size on UModioUISettings");
static_assert(offsetof(UModioUISettings, ModioToProjectInputMappings) == 0x000028, "Member 'UModioUISettings::ModioToProjectInputMappings' has a wrong offset!");
static_assert(offsetof(UModioUISettings, DefaultStyleSet) == 0x000038, "Member 'UModioUISettings::DefaultStyleSet' has a wrong offset!");
static_assert(offsetof(UModioUISettings, NavigationConfigOverride) == 0x000060, "Member 'UModioUISettings::NavigationConfigOverride' has a wrong offset!");
static_assert(offsetof(UModioUISettings, AuthenticationDataProvider) == 0x000088, "Member 'UModioUISettings::AuthenticationDataProvider' has a wrong offset!");
static_assert(offsetof(UModioUISettings, InputHintGlyphProvider) == 0x000090, "Member 'UModioUISettings::InputHintGlyphProvider' has a wrong offset!");
static_assert(offsetof(UModioUISettings, BrowserCategoryConfiguration) == 0x000098, "Member 'UModioUISettings::BrowserCategoryConfiguration' has a wrong offset!");
static_assert(offsetof(UModioUISettings, InputDevicesForTesting) == 0x0000C0, "Member 'UModioUISettings::InputDevicesForTesting' has a wrong offset!");
static_assert(offsetof(UModioUISettings, bOverridePlatformMaterials) == 0x0000C1, "Member 'UModioUISettings::bOverridePlatformMaterials' has a wrong offset!");
static_assert(offsetof(UModioUISettings, bEnableCenteredUI) == 0x0000C2, "Member 'UModioUISettings::bEnableCenteredUI' has a wrong offset!");
static_assert(offsetof(UModioUISettings, MaxMenuWidth) == 0x0000C4, "Member 'UModioUISettings::MaxMenuWidth' has a wrong offset!");
static_assert(offsetof(UModioUISettings, bDisableInputGlyphsCompletely) == 0x0000C8, "Member 'UModioUISettings::bDisableInputGlyphsCompletely' has a wrong offset!");
static_assert(offsetof(UModioUISettings, LocalizedTags) == 0x0000D0, "Member 'UModioUISettings::LocalizedTags' has a wrong offset!");

// Class ModioUI.ModioUIStyleSet
// 0x0F48 (0x0F78 - 0x0030)
class UModioUIStyleSet final  : public UDataAsset
{
public:
	uint8                                         Pad_18ED[0x18];                                    // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DefaultBackgroundMaterial;                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>                HideCursorWidgetClass;                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioColorPresets*                     ColorPresetsData;                                  // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18EE[0x50];                                    // 0x0060(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FModioUIColorRef>    SerializedColors;                                  // 0x00B0(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FModioUIMaterialRef> SerializedMaterials;                               // 0x0100(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, class FName>              PropertyPathToColorPresetMap;                      // 0x0150(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<class UModioWidgetStyleData*>          WidgetStyleAssets;                                 // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FSlateBrush>         NamedBrushes;                                      // 0x01B0(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UModioNamedGlyphsDataAsset*             NamedGlyphsAsset;                                  // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18EF[0x50];                                    // 0x0208(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UMaterialInterface*>  MaterialInstanceCache;                             // 0x0258(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FModioComboBoxStyle                    DefaultComboBoxStyle;                              // 0x02A8(0x0CC0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UModioMaterialData*                     MaterialData;                                      // 0x0F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18F0[0x8];                                     // 0x0F70(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIStyleSet">();
	}
	static class UModioUIStyleSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIStyleSet>();
	}
};
static_assert(alignof(UModioUIStyleSet) == 0x000008, "Wrong alignment on UModioUIStyleSet");
static_assert(sizeof(UModioUIStyleSet) == 0x000F78, "Wrong size on UModioUIStyleSet");
static_assert(offsetof(UModioUIStyleSet, DefaultBackgroundMaterial) == 0x000048, "Member 'UModioUIStyleSet::DefaultBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(UModioUIStyleSet, HideCursorWidgetClass) == 0x000050, "Member 'UModioUIStyleSet::HideCursorWidgetClass' has a wrong offset!");
static_assert(offsetof(UModioUIStyleSet, ColorPresetsData) == 0x000058, "Member 'UModioUIStyleSet::ColorPresetsData' has a wrong offset!");
static_assert(offsetof(UModioUIStyleSet, SerializedColors) == 0x0000B0, "Member 'UModioUIStyleSet::SerializedColors' has a wrong offset!");
static_assert(offsetof(UModioUIStyleSet, SerializedMaterials) == 0x000100, "Member 'UModioUIStyleSet::SerializedMaterials' has a wrong offset!");
static_assert(offsetof(UModioUIStyleSet, PropertyPathToColorPresetMap) == 0x000150, "Member 'UModioUIStyleSet::PropertyPathToColorPresetMap' has a wrong offset!");
static_assert(offsetof(UModioUIStyleSet, WidgetStyleAssets) == 0x0001A0, "Member 'UModioUIStyleSet::WidgetStyleAssets' has a wrong offset!");
static_assert(offsetof(UModioUIStyleSet, NamedBrushes) == 0x0001B0, "Member 'UModioUIStyleSet::NamedBrushes' has a wrong offset!");
static_assert(offsetof(UModioUIStyleSet, NamedGlyphsAsset) == 0x000200, "Member 'UModioUIStyleSet::NamedGlyphsAsset' has a wrong offset!");
static_assert(offsetof(UModioUIStyleSet, MaterialInstanceCache) == 0x000258, "Member 'UModioUIStyleSet::MaterialInstanceCache' has a wrong offset!");
static_assert(offsetof(UModioUIStyleSet, DefaultComboBoxStyle) == 0x0002A8, "Member 'UModioUIStyleSet::DefaultComboBoxStyle' has a wrong offset!");
static_assert(offsetof(UModioUIStyleSet, MaterialData) == 0x000F68, "Member 'UModioUIStyleSet::MaterialData' has a wrong offset!");

// Class ModioUI.ModioUserButton
// 0x0008 (0x0280 - 0x0278)
class UModioUserButton final  : public UModioUserWidgetBase
{
public:
	uint8                                         Pad_18F1[0x8];                                     // 0x0278(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUserButton">();
	}
	static class UModioUserButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUserButton>();
	}
};
static_assert(alignof(UModioUserButton) == 0x000008, "Wrong alignment on UModioUserButton");
static_assert(sizeof(UModioUserButton) == 0x000280, "Wrong size on UModioUserButton");

// Class ModioUI.ModioUserProfileButton
// 0x00A0 (0x0340 - 0x02A0)
class UModioUserProfileButton : public UModioModManagementWidgetBase
{
public:
	uint8                                         Pad_18F2[0x68];                                    // 0x02A0(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioCircularProgressBar*              DownloadProgressIndicator;                         // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioButton*                           ProfileButton;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioImage*                            ProfileImage;                                      // 0x0318(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     GCMaterial;                                        // 0x0320(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     UserBrushMaterial;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     NoUserBrushMaterial;                               // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ProfileTextureParameterName;                       // 0x0338(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUserProfileButton">();
	}
	static class UModioUserProfileButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUserProfileButton>();
	}
};
static_assert(alignof(UModioUserProfileButton) == 0x000008, "Wrong alignment on UModioUserProfileButton");
static_assert(sizeof(UModioUserProfileButton) == 0x000340, "Wrong size on UModioUserProfileButton");
static_assert(offsetof(UModioUserProfileButton, DownloadProgressIndicator) == 0x000308, "Member 'UModioUserProfileButton::DownloadProgressIndicator' has a wrong offset!");
static_assert(offsetof(UModioUserProfileButton, ProfileButton) == 0x000310, "Member 'UModioUserProfileButton::ProfileButton' has a wrong offset!");
static_assert(offsetof(UModioUserProfileButton, ProfileImage) == 0x000318, "Member 'UModioUserProfileButton::ProfileImage' has a wrong offset!");
static_assert(offsetof(UModioUserProfileButton, GCMaterial) == 0x000320, "Member 'UModioUserProfileButton::GCMaterial' has a wrong offset!");
static_assert(offsetof(UModioUserProfileButton, UserBrushMaterial) == 0x000328, "Member 'UModioUserProfileButton::UserBrushMaterial' has a wrong offset!");
static_assert(offsetof(UModioUserProfileButton, NoUserBrushMaterial) == 0x000330, "Member 'UModioUserProfileButton::NoUserBrushMaterial' has a wrong offset!");
static_assert(offsetof(UModioUserProfileButton, ProfileTextureParameterName) == 0x000338, "Member 'UModioUserProfileButton::ProfileTextureParameterName' has a wrong offset!");

// Class ModioUI.ModioUserWidgetNamedSlotBase
// 0x0060 (0x02D8 - 0x0278)
class UModioUserWidgetNamedSlotBase final  : public UModioUserWidgetBase
{
public:
	TMap<class FName, class UWidget*>             NamedWidgets;                                      // 0x0278(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           DesignerSpecifiedSlotNames;                        // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUserWidgetNamedSlotBase">();
	}
	static class UModioUserWidgetNamedSlotBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUserWidgetNamedSlotBase>();
	}
};
static_assert(alignof(UModioUserWidgetNamedSlotBase) == 0x000008, "Wrong alignment on UModioUserWidgetNamedSlotBase");
static_assert(sizeof(UModioUserWidgetNamedSlotBase) == 0x0002D8, "Wrong size on UModioUserWidgetNamedSlotBase");
static_assert(offsetof(UModioUserWidgetNamedSlotBase, NamedWidgets) == 0x000278, "Member 'UModioUserWidgetNamedSlotBase::NamedWidgets' has a wrong offset!");
static_assert(offsetof(UModioUserWidgetNamedSlotBase, DesignerSpecifiedSlotNames) == 0x0002C8, "Member 'UModioUserWidgetNamedSlotBase::DesignerSpecifiedSlotNames' has a wrong offset!");

// Class ModioUI.ModioRoundedBorderStyle
// 0x0080 (0x0150 - 0x00D0)
class UModioRoundedBorderStyle final  : public UModioUIWidgetStyleContainer
{
public:
	struct FModioWidgetBorderStyle                Style;                                             // 0x00D0(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioRoundedBorderStyle">();
	}
	static class UModioRoundedBorderStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioRoundedBorderStyle>();
	}
};
static_assert(alignof(UModioRoundedBorderStyle) == 0x000008, "Wrong alignment on UModioRoundedBorderStyle");
static_assert(sizeof(UModioRoundedBorderStyle) == 0x000150, "Wrong size on UModioRoundedBorderStyle");
static_assert(offsetof(UModioRoundedBorderStyle, Style) == 0x0000D0, "Member 'UModioRoundedBorderStyle::Style' has a wrong offset!");

// Class ModioUI.ModioWidgetCarouselEntryWrapper
// 0x0000 (0x0108 - 0x0108)
class UModioWidgetCarouselEntryWrapper final  : public UWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioWidgetCarouselEntryWrapper">();
	}
	static class UModioWidgetCarouselEntryWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioWidgetCarouselEntryWrapper>();
	}
};
static_assert(alignof(UModioWidgetCarouselEntryWrapper) == 0x000008, "Wrong alignment on UModioWidgetCarouselEntryWrapper");
static_assert(sizeof(UModioWidgetCarouselEntryWrapper) == 0x000108, "Wrong size on UModioWidgetCarouselEntryWrapper");

// Class ModioUI.ModioWidgetCarousel
// 0x0078 (0x0180 - 0x0108)
class UModioWidgetCarousel final  : public UWidget
{
public:
	uint8                                         Pad_18F3[0x20];                                    // 0x0108(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UModioUserWidgetBase>       EntryWidgetClass;                                  // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioWidgetCarouselEntryWrapper*       LeftCarouselWidget;                                // 0x0130(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioWidgetCarouselEntryWrapper*       CenterCarouselWidget;                              // 0x0138(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioWidgetCarouselEntryWrapper*       RightCarouselWidget;                               // 0x0140(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UModioWidgetCarouselEntryWrapper*       IncomingWidget;                                    // 0x0148(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RelativeWidgetSpacing;                             // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWidgetClipping                               EntryWidgetClipping;                               // 0x0154(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18F4[0x3];                                     // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EModioWidgetCarouselSizeOverrideType          EntryWidgetSizeOverride;                           // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideAbsoluteWidth;                            // 0x015C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18F5[0x3];                                     // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EntryWidgetWidthOverride;                          // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideAbsoluteHeight;                           // 0x0164(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18F6[0x3];                                     // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EntryWidgetHeightOverride;                         // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideRelativeLayoutWidth;                      // 0x016C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18F7[0x3];                                     // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EntryWidgetRelativeWidthOverride;                  // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideRelativeLayoutHeight;                     // 0x0174(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18F8[0x3];                                     // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EntryWidgetRelativeHeightOverride;                 // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18F9[0x4];                                     // 0x017C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ScrollLeft();
	void ScrollRight();
	void SetFocusToCurrentElement();
	void SetItems(const TArray<class UObject*>& Items);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioWidgetCarousel">();
	}
	static class UModioWidgetCarousel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioWidgetCarousel>();
	}
};
static_assert(alignof(UModioWidgetCarousel) == 0x000008, "Wrong alignment on UModioWidgetCarousel");
static_assert(sizeof(UModioWidgetCarousel) == 0x000180, "Wrong size on UModioWidgetCarousel");
static_assert(offsetof(UModioWidgetCarousel, EntryWidgetClass) == 0x000128, "Member 'UModioWidgetCarousel::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, LeftCarouselWidget) == 0x000130, "Member 'UModioWidgetCarousel::LeftCarouselWidget' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, CenterCarouselWidget) == 0x000138, "Member 'UModioWidgetCarousel::CenterCarouselWidget' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, RightCarouselWidget) == 0x000140, "Member 'UModioWidgetCarousel::RightCarouselWidget' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, IncomingWidget) == 0x000148, "Member 'UModioWidgetCarousel::IncomingWidget' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, RelativeWidgetSpacing) == 0x000150, "Member 'UModioWidgetCarousel::RelativeWidgetSpacing' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, EntryWidgetClipping) == 0x000154, "Member 'UModioWidgetCarousel::EntryWidgetClipping' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, EntryWidgetSizeOverride) == 0x000158, "Member 'UModioWidgetCarousel::EntryWidgetSizeOverride' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, bOverrideAbsoluteWidth) == 0x00015C, "Member 'UModioWidgetCarousel::bOverrideAbsoluteWidth' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, EntryWidgetWidthOverride) == 0x000160, "Member 'UModioWidgetCarousel::EntryWidgetWidthOverride' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, bOverrideAbsoluteHeight) == 0x000164, "Member 'UModioWidgetCarousel::bOverrideAbsoluteHeight' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, EntryWidgetHeightOverride) == 0x000168, "Member 'UModioWidgetCarousel::EntryWidgetHeightOverride' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, bOverrideRelativeLayoutWidth) == 0x00016C, "Member 'UModioWidgetCarousel::bOverrideRelativeLayoutWidth' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, EntryWidgetRelativeWidthOverride) == 0x000170, "Member 'UModioWidgetCarousel::EntryWidgetRelativeWidthOverride' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, bOverrideRelativeLayoutHeight) == 0x000174, "Member 'UModioWidgetCarousel::bOverrideRelativeLayoutHeight' has a wrong offset!");
static_assert(offsetof(UModioWidgetCarousel, EntryWidgetRelativeHeightOverride) == 0x000178, "Member 'UModioWidgetCarousel::EntryWidgetRelativeHeightOverride' has a wrong offset!");

// Class ModioUI.ModioWidgetStyleData
// 0x0050 (0x0080 - 0x0030)
class UModioWidgetStyleData final  : public UDataAsset
{
public:
	TMap<class FName, class USlateWidgetStyleContainerBase*> WidgetStyles;                                      // 0x0030(0x0050)(Edit, BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioWidgetStyleData">();
	}
	static class UModioWidgetStyleData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioWidgetStyleData>();
	}
};
static_assert(alignof(UModioWidgetStyleData) == 0x000008, "Wrong alignment on UModioWidgetStyleData");
static_assert(sizeof(UModioWidgetStyleData) == 0x000080, "Wrong size on UModioWidgetStyleData");
static_assert(offsetof(UModioWidgetStyleData, WidgetStyles) == 0x000030, "Member 'UModioWidgetStyleData::WidgetStyles' has a wrong offset!");

// Class ModioUI.ModioWidgetSwitcher
// 0x0020 (0x0158 - 0x0138)
class UModioWidgetSwitcher final  : public UWidgetSwitcher
{
public:
	FMulticastInlineDelegateProperty_             OnActiveWidgetChanged;                             // 0x0138(0x0010)(Edit, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18FA[0x10];                                    // 0x0148(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioWidgetSwitcher">();
	}
	static class UModioWidgetSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioWidgetSwitcher>();
	}
};
static_assert(alignof(UModioWidgetSwitcher) == 0x000008, "Wrong alignment on UModioWidgetSwitcher");
static_assert(sizeof(UModioWidgetSwitcher) == 0x000158, "Wrong size on UModioWidgetSwitcher");
static_assert(offsetof(UModioWidgetSwitcher, OnActiveWidgetChanged) == 0x000138, "Member 'UModioWidgetSwitcher::OnActiveWidgetChanged' has a wrong offset!");

}

