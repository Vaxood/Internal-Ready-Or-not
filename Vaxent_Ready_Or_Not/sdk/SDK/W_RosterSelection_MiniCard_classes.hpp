#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RosterSelection_MiniCard

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C
// 0x0160 (0x03C0 - 0x0260)
class UW_RosterSelection_MiniCard_C final  : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       StressPulse;                                       // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UProgressBar*                           BackgroundProgressBar;                             // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonButton_C*                        btn_Card;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Countdown;                                         // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ForegroundProgressBar;                             // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HoverImage;                                        // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icn_Locked;                                        // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageSpinner;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_CountdownProgress;                             // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_PositionCorner;                                // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Lbl_Empty;                                         // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MissionsRemainingText;                             // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Position;                                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       PositionNumber;                                    // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ProfileImage;                                      // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SquadPositionBorder;                               // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          Status;                                            // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 StressBackground;                                  // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Txt_LockedTime;                                    // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Txt_Name;                                          // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Txt_Specialty;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Txt_Status;                                        // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_Lock;                                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class URosterCharacter*                       RosterCharacter;                                   // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnClicked;                                         // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSlateColor                            UnavailableTint;                                   // 0x0358(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            AvailableTint;                                     // 0x0380(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	ERosterSquadPosition                          DebugPosition;                                     // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterCharacterState                         DebugState;                                        // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Empty;                                             // 0x03AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Locked;                                            // 0x03AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32BE[0x4];                                     // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnEmptyClicked;                                    // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnHovered__DelegateSignature(class UW_RosterSelection_MiniCard_C* Card);
	void OnUnhovered__DelegateSignature(class UW_RosterSelection_MiniCard_C* Card);
	void OnClicked__DelegateSignature(class UW_RosterSelection_MiniCard_C* Card);
	void OnEmptyClicked__DelegateSignature(class UW_RosterSelection_MiniCard_C* Card);
	void ExecuteUbergraph_W_RosterSelection_MiniCard(int32 EntryPoint, ESlateVisibility Temp_byte_Variable, ERosterCharacterState Temp_byte_Variable_1, class UObject* K2Node_CustomEvent_Loaded, class UObject* Temp_object_Variable, ESlateVisibility Temp_byte_Variable_2, class URosterCharacter* K2Node_CustomEvent_Character, ESlateVisibility Temp_byte_Variable_3, ESlateVisibility Temp_byte_Variable_4, class FText K2Node_CustomEvent_Text, const struct FSlateColor& K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, const struct FSlateBrush& K2Node_MakeStruct_SlateBrush, const struct FSlateBrush& K2Node_MakeStruct_SlateBrush_1, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_Event_IsDesignTime, ERosterCharacterState Temp_byte_Variable_5, bool CallFunc_IsValid_ReturnValue_1, ESlateVisibility K2Node_Select_Default_1, class UCommonButtonBase* K2Node_ComponentBoundEvent_Button_2, class UCommonButtonBase* K2Node_ComponentBoundEvent_Button_1, class UCommonButtonBase* K2Node_ComponentBoundEvent_Button, TDelegate<void(class UObject* Loaded)> K2Node_CreateDelegate_OutputDelegate);
	void Construct();
	void BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void PreConstruct(bool IsDesignTime);
	void ShowStressChange();
	void SetCustomStateText(class FText Text);
	void SetCharacter(class URosterCharacter* Character);
	void OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8(class UObject* Loaded);
	void SetupStateText(class URosterCharacter* Character, ESlateVisibility Temp_byte_Variable, float CallFunc_Conv_IntToFloat_ReturnValue, class FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, class FText CallFunc_StressPercentageAsStatus_StatusText, const struct FSlateColor& CallFunc_StressPercentageAsStatus_StatusColor, ESlateVisibility Temp_byte_Variable_1, ESlateVisibility Temp_byte_Variable_2, ERosterCharacterState Temp_byte_Variable_3, class FText Temp_text_Variable, class FText Temp_text_Variable_1, class FText Temp_text_Variable_2, class FText K2Node_Select_Default, class UMaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, ESlateVisibility Temp_byte_Variable_4, ERosterCharacterState Temp_byte_Variable_5, ESlateVisibility K2Node_Select_Default_1);
	void SetPosition(ERosterSquadPosition Param_Position, ERosterSquadPosition Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float Temp_float_Variable, float Temp_float_Variable_1, float Temp_float_Variable_2, float Temp_float_Variable_3, float Temp_float_Variable_4, ERosterSquadPosition Temp_byte_Variable_1, float Temp_float_Variable_5, float Temp_float_Variable_6, float Temp_float_Variable_7, float Temp_float_Variable_8, float Temp_float_Variable_9, ERosterSquadPosition Temp_byte_Variable_2, EHorizontalAlignment Temp_byte_Variable_3, EHorizontalAlignment Temp_byte_Variable_4, EHorizontalAlignment Temp_byte_Variable_5, EHorizontalAlignment Temp_byte_Variable_6, EHorizontalAlignment Temp_byte_Variable_7, ERosterSquadPosition Temp_byte_Variable_8, class FText Temp_text_Variable, class FText Temp_text_Variable_1, class FText Temp_text_Variable_2, class FText Temp_text_Variable_3, class FText Temp_text_Variable_4, float K2Node_Select_Default, float K2Node_Select_Default_1, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue_1, EHorizontalAlignment K2Node_Select_Default_2, class FText K2Node_Select_Default_3, const struct FLinearColor& CallFunc_SquadPositionToColor_OutColor, class UOverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue);
	void SetHoverState(bool Hovered);
	void SetSelected(bool Selected);
	void SetEmpty(bool Param_Empty, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, bool Temp_bool_Variable_1, ESlateVisibility Temp_byte_Variable_2, ESlateVisibility Temp_byte_Variable_3, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, ESlateVisibility K2Node_Select_Default, ESlateVisibility K2Node_Select_Default_1);
	void SetLocked(bool Param_Locked, class FText UnlockText, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, ESlateVisibility K2Node_Select_Default);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_RosterSelection_MiniCard_C">();
	}
	static class UW_RosterSelection_MiniCard_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_RosterSelection_MiniCard_C>();
	}
};
static_assert(alignof(UW_RosterSelection_MiniCard_C) == 0x000008, "Wrong alignment on UW_RosterSelection_MiniCard_C");
static_assert(sizeof(UW_RosterSelection_MiniCard_C) == 0x0003C0, "Wrong size on UW_RosterSelection_MiniCard_C");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, UberGraphFrame) == 0x000260, "Member 'UW_RosterSelection_MiniCard_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, StressPulse) == 0x000268, "Member 'UW_RosterSelection_MiniCard_C::StressPulse' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, BackgroundProgressBar) == 0x000270, "Member 'UW_RosterSelection_MiniCard_C::BackgroundProgressBar' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, btn_Card) == 0x000278, "Member 'UW_RosterSelection_MiniCard_C::btn_Card' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Countdown) == 0x000280, "Member 'UW_RosterSelection_MiniCard_C::Countdown' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, ForegroundProgressBar) == 0x000288, "Member 'UW_RosterSelection_MiniCard_C::ForegroundProgressBar' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, HoverImage) == 0x000290, "Member 'UW_RosterSelection_MiniCard_C::HoverImage' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Icn_Locked) == 0x000298, "Member 'UW_RosterSelection_MiniCard_C::Icn_Locked' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, ImageSpinner) == 0x0002A0, "Member 'UW_RosterSelection_MiniCard_C::ImageSpinner' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Img_CountdownProgress) == 0x0002A8, "Member 'UW_RosterSelection_MiniCard_C::Img_CountdownProgress' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Img_PositionCorner) == 0x0002B0, "Member 'UW_RosterSelection_MiniCard_C::Img_PositionCorner' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Lbl_Empty) == 0x0002B8, "Member 'UW_RosterSelection_MiniCard_C::Lbl_Empty' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, MissionsRemainingText) == 0x0002C0, "Member 'UW_RosterSelection_MiniCard_C::MissionsRemainingText' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Position) == 0x0002C8, "Member 'UW_RosterSelection_MiniCard_C::Position' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, PositionNumber) == 0x0002D0, "Member 'UW_RosterSelection_MiniCard_C::PositionNumber' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, ProfileImage) == 0x0002D8, "Member 'UW_RosterSelection_MiniCard_C::ProfileImage' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, SquadPositionBorder) == 0x0002E0, "Member 'UW_RosterSelection_MiniCard_C::SquadPositionBorder' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Status) == 0x0002E8, "Member 'UW_RosterSelection_MiniCard_C::Status' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, StressBackground) == 0x0002F0, "Member 'UW_RosterSelection_MiniCard_C::StressBackground' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Txt_LockedTime) == 0x0002F8, "Member 'UW_RosterSelection_MiniCard_C::Txt_LockedTime' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Txt_Name) == 0x000300, "Member 'UW_RosterSelection_MiniCard_C::Txt_Name' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Txt_Specialty) == 0x000308, "Member 'UW_RosterSelection_MiniCard_C::Txt_Specialty' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Txt_Status) == 0x000310, "Member 'UW_RosterSelection_MiniCard_C::Txt_Status' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, VB_Lock) == 0x000318, "Member 'UW_RosterSelection_MiniCard_C::VB_Lock' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, OnHovered) == 0x000320, "Member 'UW_RosterSelection_MiniCard_C::OnHovered' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, OnUnhovered) == 0x000330, "Member 'UW_RosterSelection_MiniCard_C::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, RosterCharacter) == 0x000340, "Member 'UW_RosterSelection_MiniCard_C::RosterCharacter' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, OnClicked) == 0x000348, "Member 'UW_RosterSelection_MiniCard_C::OnClicked' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, UnavailableTint) == 0x000358, "Member 'UW_RosterSelection_MiniCard_C::UnavailableTint' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, AvailableTint) == 0x000380, "Member 'UW_RosterSelection_MiniCard_C::AvailableTint' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, DebugPosition) == 0x0003A8, "Member 'UW_RosterSelection_MiniCard_C::DebugPosition' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, DebugState) == 0x0003A9, "Member 'UW_RosterSelection_MiniCard_C::DebugState' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Empty) == 0x0003AA, "Member 'UW_RosterSelection_MiniCard_C::Empty' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, Locked) == 0x0003AB, "Member 'UW_RosterSelection_MiniCard_C::Locked' has a wrong offset!");
static_assert(offsetof(UW_RosterSelection_MiniCard_C, OnEmptyClicked) == 0x0003B0, "Member 'UW_RosterSelection_MiniCard_C::OnEmptyClicked' has a wrong offset!");

}

