#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Debug

#include "Basic.hpp"

#include "Debug_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class Debug.DebugLogLibrarySettings
// 0x00C8 (0x00F0 - 0x0028)
class UDebugLogLibrarySettings final  : public UObject
{
public:
	uint8                                         bUseTwosComplimentForDecimalToHexConversionOnNegativeNumbers : 1; // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCrashGameInShippingBuildConfiguration : 1;        // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSaveLogMessagesToCustomLogFile : 1;               // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1136[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 InfoColor;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ErrorColor;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 WarningColor;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 SuccessColor;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1137[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      ViewportLogKeys;                                   // 0x0040(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	uint8                                         bEnableSpecifiers : 1;                             // 0x0090(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ELoggingOptions                               DisplaySpecifiersIn;                               // 0x0091(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1138[0x6];                                     // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EDebugLogType, class FString>            LogCategorySpecifiers;                             // 0x0098(0x0050)(Edit, EditFixedSize, Config, NativeAccessSpecifierPublic)
	uint8                                         bLogContext : 1;                                   // 0x00E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ELoggingOptions                               DisplayContextIn;                                  // 0x00E9(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1139[0x6];                                     // 0x00EA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DebugLogLibrarySettings">();
	}
	static class UDebugLogLibrarySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDebugLogLibrarySettings>();
	}
};
static_assert(alignof(UDebugLogLibrarySettings) == 0x000008, "Wrong alignment on UDebugLogLibrarySettings");
static_assert(sizeof(UDebugLogLibrarySettings) == 0x0000F0, "Wrong size on UDebugLogLibrarySettings");
static_assert(offsetof(UDebugLogLibrarySettings, InfoColor) == 0x00002C, "Member 'UDebugLogLibrarySettings::InfoColor' has a wrong offset!");
static_assert(offsetof(UDebugLogLibrarySettings, ErrorColor) == 0x000030, "Member 'UDebugLogLibrarySettings::ErrorColor' has a wrong offset!");
static_assert(offsetof(UDebugLogLibrarySettings, WarningColor) == 0x000034, "Member 'UDebugLogLibrarySettings::WarningColor' has a wrong offset!");
static_assert(offsetof(UDebugLogLibrarySettings, SuccessColor) == 0x000038, "Member 'UDebugLogLibrarySettings::SuccessColor' has a wrong offset!");
static_assert(offsetof(UDebugLogLibrarySettings, ViewportLogKeys) == 0x000040, "Member 'UDebugLogLibrarySettings::ViewportLogKeys' has a wrong offset!");
static_assert(offsetof(UDebugLogLibrarySettings, DisplaySpecifiersIn) == 0x000091, "Member 'UDebugLogLibrarySettings::DisplaySpecifiersIn' has a wrong offset!");
static_assert(offsetof(UDebugLogLibrarySettings, LogCategorySpecifiers) == 0x000098, "Member 'UDebugLogLibrarySettings::LogCategorySpecifiers' has a wrong offset!");
static_assert(offsetof(UDebugLogLibrarySettings, DisplayContextIn) == 0x0000E9, "Member 'UDebugLogLibrarySettings::DisplayContextIn' has a wrong offset!");

// Class Debug.Log
// 0x0000 (0x0028 - 0x0028)
class ULog final  : public UBlueprintFunctionLibrary
{
public:
	static void Angle(float InAngleValue, EDebugLogAngularUnit AngleUnit, bool bConvertValueToInt, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Array_Bool(const TArray<bool>& InArray, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Color(const TArray<struct FLinearColor>& InArray, bool bCompact, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_DateTime(const TArray<struct FDateTime>& InArray, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Float(const TArray<float>& InArray, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Int32(const TArray<int32>& InArray, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Int64(const TArray<int64>& InArray, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Matrix(const TArray<struct FMatrix>& InArray, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Name(const TArray<class FName>& InArray, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Object(TArray<class UObject*>& InArray, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Quat(const TArray<struct FQuat>& InArray, bool bCompact, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Rotator(const TArray<struct FRotator>& InArray, bool bCompact, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_String(const TArray<class FString>& InArray, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Text(const TArray<class FText>& InArray, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Transform(const TArray<struct FTransform>& InArray, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Vector(const TArray<struct FVector>& InArray, bool bCompact, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static void Array_Vector2D(const TArray<struct FVector2D>& InArray, bool bCompact, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class UObject* ContextObject);
	static bool Assert_False(bool bCondition, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool Assert_IsValid(class UObject* Object, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool Assert_True(bool bCondition, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_Bool(bool bActual, bool bExpected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_Color(const struct FColor& Actual, const struct FColor& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_DateTime(const struct FDateTime& Actual, const struct FDateTime& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_Float(float Actual, float Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_Integer(int32 Actual, int32 Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_Name(class FName Actual, class FName Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_Object(class UObject* Actual, class UObject* Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_Quat(const struct FQuat& Actual, const struct FQuat& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_Rotator(const struct FRotator& Actual, const struct FRotator& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_String(const class FString& Actual, const class FString& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_Transform(const struct FTransform& Actual, const struct FTransform& Expected, const class FString& Message, bool bNoScale, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_Vector(const struct FVector& Actual, const struct FVector& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertEqual_Vector2D(const struct FVector2D& Actual, const struct FVector2D& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertNotEqual_Color(const struct FColor& Actual, const struct FColor& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertNotEqual_Name(class FName Actual, class FName Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertNotEqual_Object(class UObject* Actual, class UObject* Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertNotEqual_Quat(const struct FQuat& Actual, const struct FQuat& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertNotEqual_Rotator(const struct FRotator& Actual, const struct FRotator& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertNotEqual_String(const class FString& Actual, const class FString& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertNotEqual_Transform(const struct FTransform& Actual, const struct FTransform& Expected, const class FString& Message, bool bNoScale, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertNotEqual_Vector(const struct FVector& Actual, const struct FVector& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertNotEqual_Vector2D(const struct FVector2D& Actual, const struct FVector2D& Expected, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertValue_DateTime(const struct FDateTime& Actual, const struct FDateTime& Expected, EDebugLogComparisonMethod ShouldBe, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertValue_Float(float Actual, float Expected, EDebugLogComparisonMethod ShouldBe, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static bool AssertValue_Integer(int32 Actual, int32 Expected, EDebugLogComparisonMethod ShouldBe, const class FString& Message, bool bCrashOnFailure, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Bool(bool bBoolToTest, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Bye(ELoggingOptions LoggingOption, class FName ViewportKeyName, class UObject* ContextObject);
	static void CheckCondition(bool bCondition, const class FString& Message);
	static void CheckNoEntry();
	static void CheckNoRecursion();
	static void CheckNoReEntry();
	static void CheckObject(class UObject* Object, const class FString& Message);
	static void Color(struct FLinearColor& InColor, bool bCompact, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Crash(const class FString& Message, const class FString& FromFunction, class UObject* ContextObject);
	static void Cya(ELoggingOptions LoggingOption, class FName ViewportKeyName, class UObject* ContextObject);
	static void Data(float InDataValue, EDebugLogDataUnit DataUnit, bool bConvertValueToInt, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void DateTime(struct FDateTime& InDateTime, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void DebugMessage(EDebugLogType LogSeverity, const class FString& Message, ELoggingOptions LoggingOption, bool bAddPrefix, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void DebugMessage_WithCondition(EDebugLogType LogSeverity, bool bCondition, const class FString& Message, ELoggingOptions LoggingOption, bool bAddPrefix, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Dollar(float InDollarValue, bool bConvertValueToInt, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void EnsureCondition(bool bCondition, bool bAlwaysEnsure, const class FString& Message);
	static void EnsureObject(class UObject* Object, bool bAlwaysEnsure, const class FString& Message);
	static void Error(const class FString& Message, ELoggingOptions LoggingOption, bool bAddPrefix, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Error_WithCondition(const class FString& Message, bool bCondition, ELoggingOptions LoggingOption, bool bAddPrefix, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Fatal(const class FString& Message);
	static void Fatal_WithCondition(const class FString& Message, bool bCondition);
	static void Force(float InForceValue, EDebugLogForceUnit ForceUnit, bool bConvertValueToInt, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Frequency(float InFrequencyValue, EDebugLogFrequencyUnit FrequencyUnit, bool bConvertValueToInt, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Goodbye(ELoggingOptions LoggingOption, class FName ViewportKeyName, class UObject* ContextObject);
	static void Hello(ELoggingOptions LoggingOption, class FName ViewportKeyName, class UObject* ContextObject);
	static void Hey(ELoggingOptions LoggingOption, class FName ViewportKeyName, class UObject* ContextObject);
	static class FName InBrackets_Name_Blueprint(class FName Param_Name);
	static class FString InBrackets_String_Blueprint(const class FString& String);
	static class FText InBrackets_Text_Blueprint(class FText Text);
	static void Info(const class FString& Message, ELoggingOptions LoggingOption, bool bAddPrefix, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Info_WithCondition(const class FString& Message, bool bCondition, ELoggingOptions LoggingOption, bool bAddPrefix, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Invalid(const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, class FName ViewportKeyName, class UObject* ContextObject);
	static void Length(float InLengthValue, EDebugLogLengthUnit LengthUnit, bool bConvertValueToInt, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Light(float InLightValue, EDebugLogLightUnit LightUnit, bool bConvertValueToInt, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void LineBreak(ELoggingOptions LoggingOption);
	static void LineBreak_Symbol(const class FString& Symbol, ELoggingOptions LoggingOption);
	static void Mass(float InMassValue, EDebugLogMassUnit MassUnit, bool bConvertValueToInt, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Matrix(struct FMatrix& InMatrix, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void MessageInWorld(const class FString& Message, struct FVector& WorldLocation, float FontScale, const class FString& Prefix, const class FString& Suffix, float TimeToDisplay);
	static void No(const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, class FName ViewportKeyName, class UObject* ContextObject);
	static void Number_Float_Blueprint(float Number, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Number_Int_Blueprint(int32 Number, const class FString& Prefix, const class FString& Suffix, EDebugLogNumberSystems NumberSystem, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void ObjectName(class UObject* InObject, bool bSilenceOnError, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void ObjectValidity(class UObject* InObject, bool bSilenceOnError, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Percent(float Number, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Quat(struct FQuat& Quaternion, bool bCompact, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Rotator(struct FRotator& InRotator, bool bCompact, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Speed(float InSpeedValue, EDebugLogSpeedUnit SpeedUnit, bool bConvertValueToInt, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void StartDebugTimer(const class FString& Description);
	static float StopDebugTimer(bool bAutoDetermineTimeUnit, EDebugLogTimeUnit DisplayIn, ELoggingOptions LoggingOption, class FName ViewportKeyName, class UObject* ContextObject);
	static void Success(const class FString& Message, ELoggingOptions LoggingOption, bool bAddPrefix, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Success_WithCondition(const class FString& Message, bool bCondition, ELoggingOptions LoggingOption, bool bAddPrefix, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Temperature(float InTemperatureValue, EDebugLogTemperatureUnit TemperatureUnit, bool bConvertValueToInt, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Time(float InTimeValue, EDebugLogTimeUnit TimeUnit, bool bConvertValueToInt, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Transform(struct FTransform& InTransform, const class FString& Prefix, bool bFormat, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void UnImplemented();
	static void Valid(const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, class FName ViewportKeyName, class UObject* ContextObject);
	static void Vector(struct FVector& InVector, bool bCompact, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Vector2D(struct FVector2D& InVector2D, bool bCompact, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Volume(float InVolumeValue, EDebugLogVolumeUnit VolumeUnit, bool bConvertValueToInt, const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Warning(const class FString& Message, ELoggingOptions LoggingOption, bool bAddPrefix, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Warning_WithCondition(const class FString& Message, bool bCondition, ELoggingOptions LoggingOption, bool bAddPrefix, float TimeToDisplay, class FName ViewportKeyName, class UObject* ContextObject);
	static void Wassup(ELoggingOptions LoggingOption, class FName ViewportKeyName, class UObject* ContextObject);
	static void Yes(const class FString& Prefix, const class FString& Suffix, ELoggingOptions LoggingOption, class FName ViewportKeyName, class UObject* ContextObject);
	static void Yo(ELoggingOptions LoggingOption, class FName ViewportKeyName, class UObject* ContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Log">();
	}
	static class ULog* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULog>();
	}
};
static_assert(alignof(ULog) == 0x000008, "Wrong alignment on ULog");
static_assert(sizeof(ULog) == 0x000028, "Wrong size on ULog");

}

