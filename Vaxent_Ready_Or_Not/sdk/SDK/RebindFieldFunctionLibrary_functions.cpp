#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RebindFieldFunctionLibrary

#include "Basic.hpp"

#include "RebindFieldFunctionLibrary_classes.hpp"
#include "RebindFieldFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function RebindFieldFunctionLibrary.RebindFieldFunctionLibrary_C.Key is Non Modifier Key?
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CallFunc_Key_IsModifierKey_ReturnValue                 (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CallFunc_Not_PreBool_ReturnValue                       (ZeroConstructor, IsPlainOldData, NoDestructor)

void URebindFieldFunctionLibrary_C::Key_is_Non_Modifier_Key_(const struct FKey& Key, class UObject* __WorldContext, bool* Return_Value, bool CallFunc_Key_IsModifierKey_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RebindFieldFunctionLibrary_C", "Key is Non Modifier Key?");

	Params::RebindFieldFunctionLibrary_C_Key_is_Non_Modifier_Key_ Parms{};

	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;
	Parms.CallFunc_Key_IsModifierKey_ReturnValue = CallFunc_Key_IsModifierKey_ReturnValue;
	Parms.CallFunc_Not_PreBool_ReturnValue = CallFunc_Not_PreBool_ReturnValue;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = std::move(Parms.Return_Value);
}


// Function RebindFieldFunctionLibrary.RebindFieldFunctionLibrary_C.Abbreviate Key
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Abreviated_Name                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Temp_Abbreviation                                      (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Temp_Abbreviated_Name                                  (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
// struct FKey                             Temp_Key                                               (Edit, BlueprintVisible, HasGetValueTypeHash)
// class FString                           CallFunc_Split_LeftS                                   (ZeroConstructor, HasGetValueTypeHash)
// class FString                           CallFunc_Split_RightS                                  (ZeroConstructor, HasGetValueTypeHash)
// bool                                    CallFunc_Split_ReturnValue                             (ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           CallFunc_SelectString_ReturnValue                      (ZeroConstructor, HasGetValueTypeHash)
// class FString                           CallFunc_SelectString_ReturnValue_1                    (ZeroConstructor, HasGetValueTypeHash)
// class FString                           CallFunc_GetSubstring_ReturnValue                      (ZeroConstructor, HasGetValueTypeHash)
// class FString                           CallFunc_ToUpper_ReturnValue                           (ZeroConstructor, HasGetValueTypeHash)
// int32                                   CallFunc_Len_ReturnValue                               (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CallFunc_Concat_StrStr_ReturnValue                     (ZeroConstructor, HasGetValueTypeHash)
// bool                                    CallFunc_NotEqual_IntInt_ReturnValue                   (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CallFunc_Key_IsMouseButton_ReturnValue                 (ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             CallFunc_Key_GetDisplayName_ReturnValue                ()
// class FString                           CallFunc_Conv_TextToString_ReturnValue                 (ZeroConstructor, HasGetValueTypeHash)

void URebindFieldFunctionLibrary_C::Abbreviate_Key(const struct FKey& Key, class UObject* __WorldContext, class FString* Abreviated_Name, const class FString& Temp_Abbreviation, const class FString& Temp_Abbreviated_Name, const struct FKey& Temp_Key, const class FString& CallFunc_Split_LeftS, const class FString& CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, const class FString& CallFunc_SelectString_ReturnValue, const class FString& CallFunc_SelectString_ReturnValue_1, const class FString& CallFunc_GetSubstring_ReturnValue, const class FString& CallFunc_ToUpper_ReturnValue, int32 CallFunc_Len_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Key_IsMouseButton_ReturnValue, class FText CallFunc_Key_GetDisplayName_ReturnValue, const class FString& CallFunc_Conv_TextToString_ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RebindFieldFunctionLibrary_C", "Abbreviate Key");

	Params::RebindFieldFunctionLibrary_C_Abbreviate_Key Parms{};

	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;
	Parms.Temp_Abbreviation = std::move(Temp_Abbreviation);
	Parms.Temp_Abbreviated_Name = std::move(Temp_Abbreviated_Name);
	Parms.Temp_Key = std::move(Temp_Key);
	Parms.CallFunc_Split_LeftS = std::move(CallFunc_Split_LeftS);
	Parms.CallFunc_Split_RightS = std::move(CallFunc_Split_RightS);
	Parms.CallFunc_Split_ReturnValue = CallFunc_Split_ReturnValue;
	Parms.CallFunc_SelectString_ReturnValue = std::move(CallFunc_SelectString_ReturnValue);
	Parms.CallFunc_SelectString_ReturnValue_1 = std::move(CallFunc_SelectString_ReturnValue_1);
	Parms.CallFunc_GetSubstring_ReturnValue = std::move(CallFunc_GetSubstring_ReturnValue);
	Parms.CallFunc_ToUpper_ReturnValue = std::move(CallFunc_ToUpper_ReturnValue);
	Parms.CallFunc_Len_ReturnValue = CallFunc_Len_ReturnValue;
	Parms.CallFunc_Concat_StrStr_ReturnValue = std::move(CallFunc_Concat_StrStr_ReturnValue);
	Parms.CallFunc_NotEqual_IntInt_ReturnValue = CallFunc_NotEqual_IntInt_ReturnValue;
	Parms.CallFunc_Key_IsMouseButton_ReturnValue = CallFunc_Key_IsMouseButton_ReturnValue;
	Parms.CallFunc_Key_GetDisplayName_ReturnValue = CallFunc_Key_GetDisplayName_ReturnValue;
	Parms.CallFunc_Conv_TextToString_ReturnValue = std::move(CallFunc_Conv_TextToString_ReturnValue);

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Abreviated_Name != nullptr)
		*Abreviated_Name = Parms.Abreviated_Name;
}


// Function RebindFieldFunctionLibrary.RebindFieldFunctionLibrary_C.Key list has Non Modifier Key
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FKey>                     Key_List                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Has_Key_                                               (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   CallFunc_Array_Length_ReturnValue                      (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Temp_bool_True_if_break_was_hit_Variable               (ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Temp_int_Array_Index_Variable                          (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey                             CallFunc_Array_Get_Item                                (HasGetValueTypeHash)
// bool                                    CallFunc_Key_is_Non_Modifier_Key__Return_Value         (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CallFunc_Not_PreBool_ReturnValue                       (ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Temp_int_Loop_Counter_Variable                         (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CallFunc_Less_IntInt_ReturnValue                       (ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   CallFunc_Add_IntInt_ReturnValue                        (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CallFunc_BooleanAND_ReturnValue                        (ZeroConstructor, IsPlainOldData, NoDestructor)

void URebindFieldFunctionLibrary_C::Key_list_has_Non_Modifier_Key(TArray<struct FKey>& Key_List, class UObject* __WorldContext, bool* Return_Value, bool Has_Key_, int32 CallFunc_Array_Length_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int32 Temp_int_Array_Index_Variable, const struct FKey& CallFunc_Array_Get_Item, bool CallFunc_Key_is_Non_Modifier_Key__Return_Value, bool CallFunc_Not_PreBool_ReturnValue, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RebindFieldFunctionLibrary_C", "Key list has Non Modifier Key");

	Params::RebindFieldFunctionLibrary_C_Key_list_has_Non_Modifier_Key Parms{};

	Parms.Key_List = std::move(Key_List);
	Parms.__WorldContext = __WorldContext;
	Parms.Has_Key_ = Has_Key_;
	Parms.CallFunc_Array_Length_ReturnValue = CallFunc_Array_Length_ReturnValue;
	Parms.Temp_bool_True_if_break_was_hit_Variable = Temp_bool_True_if_break_was_hit_Variable;
	Parms.Temp_int_Array_Index_Variable = Temp_int_Array_Index_Variable;
	Parms.CallFunc_Array_Get_Item = std::move(CallFunc_Array_Get_Item);
	Parms.CallFunc_Key_is_Non_Modifier_Key__Return_Value = CallFunc_Key_is_Non_Modifier_Key__Return_Value;
	Parms.CallFunc_Not_PreBool_ReturnValue = CallFunc_Not_PreBool_ReturnValue;
	Parms.Temp_int_Loop_Counter_Variable = Temp_int_Loop_Counter_Variable;
	Parms.CallFunc_Less_IntInt_ReturnValue = CallFunc_Less_IntInt_ReturnValue;
	Parms.CallFunc_Add_IntInt_ReturnValue = CallFunc_Add_IntInt_ReturnValue;
	Parms.CallFunc_BooleanAND_ReturnValue = CallFunc_BooleanAND_ReturnValue;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Key_List = std::move(Parms.Key_List);

	if (Return_Value != nullptr)
		*Return_Value = std::move(Parms.Return_Value);
}


// Function RebindFieldFunctionLibrary.RebindFieldFunctionLibrary_C.Using Modifier Key?
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FKey>                     Key_List                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<EKeyModifiers>                   Modifiers                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Has_Key_                                               (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   CallFunc_Array_Length_ReturnValue                      (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CallFunc_Array_Length_ReturnValue_1                    (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CallFunc_Greater_IntInt_ReturnValue                    (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Temp_bool_True_if_break_was_hit_Variable               (ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Temp_int_Array_Index_Variable                          (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey                             CallFunc_Array_Get_Item                                (HasGetValueTypeHash)
// bool                                    CallFunc_Key_IsModifierKey_ReturnValue                 (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CallFunc_Not_PreBool_ReturnValue                       (ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Temp_int_Loop_Counter_Variable                         (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CallFunc_BooleanOR_ReturnValue                         (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CallFunc_Less_IntInt_ReturnValue                       (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CallFunc_BooleanAND_ReturnValue                        (ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   CallFunc_Add_IntInt_ReturnValue                        (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URebindFieldFunctionLibrary_C::Using_Modifier_Key_(TArray<struct FKey>& Key_List, TArray<EKeyModifiers>& Modifiers, class UObject* __WorldContext, bool* Return_Value, bool Has_Key_, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_Greater_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int32 Temp_int_Array_Index_Variable, const struct FKey& CallFunc_Array_Get_Item, bool CallFunc_Key_IsModifierKey_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RebindFieldFunctionLibrary_C", "Using Modifier Key?");

	Params::RebindFieldFunctionLibrary_C_Using_Modifier_Key_ Parms{};

	Parms.Key_List = std::move(Key_List);
	Parms.Modifiers = std::move(Modifiers);
	Parms.__WorldContext = __WorldContext;
	Parms.Has_Key_ = Has_Key_;
	Parms.CallFunc_Array_Length_ReturnValue = CallFunc_Array_Length_ReturnValue;
	Parms.CallFunc_Array_Length_ReturnValue_1 = CallFunc_Array_Length_ReturnValue_1;
	Parms.CallFunc_Greater_IntInt_ReturnValue = CallFunc_Greater_IntInt_ReturnValue;
	Parms.Temp_bool_True_if_break_was_hit_Variable = Temp_bool_True_if_break_was_hit_Variable;
	Parms.Temp_int_Array_Index_Variable = Temp_int_Array_Index_Variable;
	Parms.CallFunc_Array_Get_Item = std::move(CallFunc_Array_Get_Item);
	Parms.CallFunc_Key_IsModifierKey_ReturnValue = CallFunc_Key_IsModifierKey_ReturnValue;
	Parms.CallFunc_Not_PreBool_ReturnValue = CallFunc_Not_PreBool_ReturnValue;
	Parms.Temp_int_Loop_Counter_Variable = Temp_int_Loop_Counter_Variable;
	Parms.CallFunc_BooleanOR_ReturnValue = CallFunc_BooleanOR_ReturnValue;
	Parms.CallFunc_Less_IntInt_ReturnValue = CallFunc_Less_IntInt_ReturnValue;
	Parms.CallFunc_BooleanAND_ReturnValue = CallFunc_BooleanAND_ReturnValue;
	Parms.CallFunc_Add_IntInt_ReturnValue = CallFunc_Add_IntInt_ReturnValue;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Key_List = std::move(Parms.Key_List);
	Modifiers = std::move(Parms.Modifiers);

	if (Return_Value != nullptr)
		*Return_Value = std::move(Parms.Return_Value);
}

}

