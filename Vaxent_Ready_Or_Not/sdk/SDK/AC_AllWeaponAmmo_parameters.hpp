#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_AllWeaponAmmo

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"


namespace SDK::Params
{

// Function AC_AllWeaponAmmo.AC_AllWeaponAmmo_C.Score
// 0x0060 (0x0060 - 0x0000)
struct AC_AllWeaponAmmo_C_Score final 
{
public:
	struct FAIActionDecisionContext               Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_415A[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseMagazineWeapon*                    EquippedWeapon;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACyberneticCharacter*                   CallFunc_GetCharacter_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_415B[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseItem*                              CallFunc_GetEquippedItem_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMeleeWeapon*                           K2Node_DynamicCast_AsMelee_Weapon;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_415C[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseMagazineWeapon*                    K2Node_DynamicCast_AsBase_Magazine_Weapon;         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_415D[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTotalRemainingAmmoFromAllMags_Return_Value; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_AllWeaponAmmo_C_Score) == 0x000008, "Wrong alignment on AC_AllWeaponAmmo_C_Score");
static_assert(sizeof(AC_AllWeaponAmmo_C_Score) == 0x000060, "Wrong size on AC_AllWeaponAmmo_C_Score");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, Context) == 0x000000, "Member 'AC_AllWeaponAmmo_C_Score::Context' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, bSuccess) == 0x000010, "Member 'AC_AllWeaponAmmo_C_Score::bSuccess' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, ReturnValue) == 0x000014, "Member 'AC_AllWeaponAmmo_C_Score::ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, EquippedWeapon) == 0x000018, "Member 'AC_AllWeaponAmmo_C_Score::EquippedWeapon' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, CallFunc_GetCharacter_ReturnValue) == 0x000020, "Member 'AC_AllWeaponAmmo_C_Score::CallFunc_GetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'AC_AllWeaponAmmo_C_Score::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, CallFunc_GetEquippedItem_ReturnValue) == 0x000030, "Member 'AC_AllWeaponAmmo_C_Score::CallFunc_GetEquippedItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, K2Node_DynamicCast_AsMelee_Weapon) == 0x000038, "Member 'AC_AllWeaponAmmo_C_Score::K2Node_DynamicCast_AsMelee_Weapon' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'AC_AllWeaponAmmo_C_Score::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, K2Node_DynamicCast_AsBase_Magazine_Weapon) == 0x000048, "Member 'AC_AllWeaponAmmo_C_Score::K2Node_DynamicCast_AsBase_Magazine_Weapon' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'AC_AllWeaponAmmo_C_Score::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, CallFunc_GetTotalRemainingAmmoFromAllMags_Return_Value) == 0x000054, "Member 'AC_AllWeaponAmmo_C_Score::CallFunc_GetTotalRemainingAmmoFromAllMags_Return_Value' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000058, "Member 'AC_AllWeaponAmmo_C_Score::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_Score, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00005C, "Member 'AC_AllWeaponAmmo_C_Score::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function AC_AllWeaponAmmo.AC_AllWeaponAmmo_C.GetTotalRemainingAmmoFromAllMags
// 0x0030 (0x0030 - 0x0000)
struct AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags final 
{
public:
	class ABaseMagazineWeapon*                    Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Return_Value;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalRemainingWeaponAmmo;                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAmmoInMagazine_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_415E[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags) == 0x000008, "Wrong alignment on AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags");
static_assert(sizeof(AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags) == 0x000030, "Wrong size on AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags");
static_assert(offsetof(AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags, Weapon) == 0x000000, "Member 'AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags::Weapon' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags, Return_Value) == 0x000008, "Member 'AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags::Return_Value' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags, TotalRemainingWeaponAmmo) == 0x00000C, "Member 'AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags::TotalRemainingWeaponAmmo' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags, Temp_int_Array_Index_Variable) == 0x000010, "Member 'AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags, CallFunc_GetAmmoInMagazine_ReturnValue) == 0x000018, "Member 'AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags::CallFunc_GetAmmoInMagazine_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags, CallFunc_Add_FloatFloat_ReturnValue) == 0x000028, "Member 'AC_AllWeaponAmmo_C_GetTotalRemainingAmmoFromAllMags::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

}

