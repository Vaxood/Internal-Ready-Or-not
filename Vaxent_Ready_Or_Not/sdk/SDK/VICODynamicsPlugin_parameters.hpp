#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VICODynamicsPlugin

#include "Basic.hpp"

#include "VICODynamicsPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function VICODynamicsPlugin.BaseVDComponent.SetAffectedByGlobalWind
// 0x0001 (0x0001 - 0x0000)
struct BaseVDComponent_SetAffectedByGlobalWind final 
{
public:
	bool                                          IsAffected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseVDComponent_SetAffectedByGlobalWind) == 0x000001, "Wrong alignment on BaseVDComponent_SetAffectedByGlobalWind");
static_assert(sizeof(BaseVDComponent_SetAffectedByGlobalWind) == 0x000001, "Wrong size on BaseVDComponent_SetAffectedByGlobalWind");
static_assert(offsetof(BaseVDComponent_SetAffectedByGlobalWind, IsAffected) == 0x000000, "Member 'BaseVDComponent_SetAffectedByGlobalWind::IsAffected' has a wrong offset!");

// Function VICODynamicsPlugin.BaseVDComponent.SetUseExplicitRigidBodyCollision
// 0x0001 (0x0001 - 0x0000)
struct BaseVDComponent_SetUseExplicitRigidBodyCollision final 
{
public:
	bool                                          UseExplicitCollision;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseVDComponent_SetUseExplicitRigidBodyCollision) == 0x000001, "Wrong alignment on BaseVDComponent_SetUseExplicitRigidBodyCollision");
static_assert(sizeof(BaseVDComponent_SetUseExplicitRigidBodyCollision) == 0x000001, "Wrong size on BaseVDComponent_SetUseExplicitRigidBodyCollision");
static_assert(offsetof(BaseVDComponent_SetUseExplicitRigidBodyCollision, UseExplicitCollision) == 0x000000, "Member 'BaseVDComponent_SetUseExplicitRigidBodyCollision::UseExplicitCollision' has a wrong offset!");

// Function VICODynamicsPlugin.BaseVDComponent.GetLastAppliedForceFromTensionConstraint
// 0x0010 (0x0010 - 0x0000)
struct BaseVDComponent_GetLastAppliedForceFromTensionConstraint final 
{
public:
	int32                                         TensionConstraintIndex;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseVDComponent_GetLastAppliedForceFromTensionConstraint) == 0x000004, "Wrong alignment on BaseVDComponent_GetLastAppliedForceFromTensionConstraint");
static_assert(sizeof(BaseVDComponent_GetLastAppliedForceFromTensionConstraint) == 0x000010, "Wrong size on BaseVDComponent_GetLastAppliedForceFromTensionConstraint");
static_assert(offsetof(BaseVDComponent_GetLastAppliedForceFromTensionConstraint, TensionConstraintIndex) == 0x000000, "Member 'BaseVDComponent_GetLastAppliedForceFromTensionConstraint::TensionConstraintIndex' has a wrong offset!");
static_assert(offsetof(BaseVDComponent_GetLastAppliedForceFromTensionConstraint, ReturnValue) == 0x000004, "Member 'BaseVDComponent_GetLastAppliedForceFromTensionConstraint::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.BaseVDComponent.GetParticleBuildInfo
// 0x0010 (0x0010 - 0x0000)
struct BaseVDComponent_GetParticleBuildInfo final 
{
public:
	TArray<struct FVDParticleInfo>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseVDComponent_GetParticleBuildInfo) == 0x000008, "Wrong alignment on BaseVDComponent_GetParticleBuildInfo");
static_assert(sizeof(BaseVDComponent_GetParticleBuildInfo) == 0x000010, "Wrong size on BaseVDComponent_GetParticleBuildInfo");
static_assert(offsetof(BaseVDComponent_GetParticleBuildInfo, ReturnValue) == 0x000000, "Member 'BaseVDComponent_GetParticleBuildInfo::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.BaseVDComponent.GetTensionConstraintCount
// 0x0004 (0x0004 - 0x0000)
struct BaseVDComponent_GetTensionConstraintCount final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseVDComponent_GetTensionConstraintCount) == 0x000004, "Wrong alignment on BaseVDComponent_GetTensionConstraintCount");
static_assert(sizeof(BaseVDComponent_GetTensionConstraintCount) == 0x000004, "Wrong size on BaseVDComponent_GetTensionConstraintCount");
static_assert(offsetof(BaseVDComponent_GetTensionConstraintCount, ReturnValue) == 0x000000, "Member 'BaseVDComponent_GetTensionConstraintCount::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDBlueprintFunctionLibrary.GetVICODynamicsSimulationInstance
// 0x0008 (0x0008 - 0x0000)
struct VDBlueprintFunctionLibrary_GetVICODynamicsSimulationInstance final 
{
public:
	class UVDSimulation*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDBlueprintFunctionLibrary_GetVICODynamicsSimulationInstance) == 0x000008, "Wrong alignment on VDBlueprintFunctionLibrary_GetVICODynamicsSimulationInstance");
static_assert(sizeof(VDBlueprintFunctionLibrary_GetVICODynamicsSimulationInstance) == 0x000008, "Wrong size on VDBlueprintFunctionLibrary_GetVICODynamicsSimulationInstance");
static_assert(offsetof(VDBlueprintFunctionLibrary_GetVICODynamicsSimulationInstance, ReturnValue) == 0x000000, "Member 'VDBlueprintFunctionLibrary_GetVICODynamicsSimulationInstance::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDRopeComponent.BreakAtSegment
// 0x0004 (0x0004 - 0x0000)
struct VDRopeComponent_BreakAtSegment final 
{
public:
	int32                                         SegmentIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDRopeComponent_BreakAtSegment) == 0x000004, "Wrong alignment on VDRopeComponent_BreakAtSegment");
static_assert(sizeof(VDRopeComponent_BreakAtSegment) == 0x000004, "Wrong size on VDRopeComponent_BreakAtSegment");
static_assert(offsetof(VDRopeComponent_BreakAtSegment, SegmentIndex) == 0x000000, "Member 'VDRopeComponent_BreakAtSegment::SegmentIndex' has a wrong offset!");

// Function VICODynamicsPlugin.VDRopeComponent.SetNewRestLength
// 0x0008 (0x0008 - 0x0000)
struct VDRopeComponent_SetNewRestLength final 
{
public:
	float                                         NewLength;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PieceIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDRopeComponent_SetNewRestLength) == 0x000004, "Wrong alignment on VDRopeComponent_SetNewRestLength");
static_assert(sizeof(VDRopeComponent_SetNewRestLength) == 0x000008, "Wrong size on VDRopeComponent_SetNewRestLength");
static_assert(offsetof(VDRopeComponent_SetNewRestLength, NewLength) == 0x000000, "Member 'VDRopeComponent_SetNewRestLength::NewLength' has a wrong offset!");
static_assert(offsetof(VDRopeComponent_SetNewRestLength, PieceIndex) == 0x000004, "Member 'VDRopeComponent_SetNewRestLength::PieceIndex' has a wrong offset!");

// Function VICODynamicsPlugin.VDRopeComponent.SetNewRestLengthStartingAtParticle
// 0x0008 (0x0008 - 0x0000)
struct VDRopeComponent_SetNewRestLengthStartingAtParticle final 
{
public:
	int32                                         ParticleIndexStart;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewLength;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDRopeComponent_SetNewRestLengthStartingAtParticle) == 0x000004, "Wrong alignment on VDRopeComponent_SetNewRestLengthStartingAtParticle");
static_assert(sizeof(VDRopeComponent_SetNewRestLengthStartingAtParticle) == 0x000008, "Wrong size on VDRopeComponent_SetNewRestLengthStartingAtParticle");
static_assert(offsetof(VDRopeComponent_SetNewRestLengthStartingAtParticle, ParticleIndexStart) == 0x000000, "Member 'VDRopeComponent_SetNewRestLengthStartingAtParticle::ParticleIndexStart' has a wrong offset!");
static_assert(offsetof(VDRopeComponent_SetNewRestLengthStartingAtParticle, NewLength) == 0x000004, "Member 'VDRopeComponent_SetNewRestLengthStartingAtParticle::NewLength' has a wrong offset!");

// Function VICODynamicsPlugin.VDRopeComponent.GetPieces
// 0x0010 (0x0010 - 0x0000)
struct VDRopeComponent_GetPieces final 
{
public:
	TArray<struct FRopePiece>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDRopeComponent_GetPieces) == 0x000008, "Wrong alignment on VDRopeComponent_GetPieces");
static_assert(sizeof(VDRopeComponent_GetPieces) == 0x000010, "Wrong size on VDRopeComponent_GetPieces");
static_assert(offsetof(VDRopeComponent_GetPieces, ReturnValue) == 0x000000, "Member 'VDRopeComponent_GetPieces::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDRopeComponent.GetTrueLength
// 0x0008 (0x0008 - 0x0000)
struct VDRopeComponent_GetTrueLength final 
{
public:
	int32                                         PieceIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDRopeComponent_GetTrueLength) == 0x000004, "Wrong alignment on VDRopeComponent_GetTrueLength");
static_assert(sizeof(VDRopeComponent_GetTrueLength) == 0x000008, "Wrong size on VDRopeComponent_GetTrueLength");
static_assert(offsetof(VDRopeComponent_GetTrueLength, PieceIndex) == 0x000000, "Member 'VDRopeComponent_GetTrueLength::PieceIndex' has a wrong offset!");
static_assert(offsetof(VDRopeComponent_GetTrueLength, ReturnValue) == 0x000004, "Member 'VDRopeComponent_GetTrueLength::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDDynamicRopeComponent.RebuildRopeAtPoints
// 0x0020 (0x0020 - 0x0000)
struct VDDynamicRopeComponent_RebuildRopeAtPoints final 
{
public:
	float                                         DistancePerSegment;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativeLocations;                                // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175B[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDDynamicRopeComponent_RebuildRopeAtPoints) == 0x000004, "Wrong alignment on VDDynamicRopeComponent_RebuildRopeAtPoints");
static_assert(sizeof(VDDynamicRopeComponent_RebuildRopeAtPoints) == 0x000020, "Wrong size on VDDynamicRopeComponent_RebuildRopeAtPoints");
static_assert(offsetof(VDDynamicRopeComponent_RebuildRopeAtPoints, DistancePerSegment) == 0x000000, "Member 'VDDynamicRopeComponent_RebuildRopeAtPoints::DistancePerSegment' has a wrong offset!");
static_assert(offsetof(VDDynamicRopeComponent_RebuildRopeAtPoints, StartLocation) == 0x000004, "Member 'VDDynamicRopeComponent_RebuildRopeAtPoints::StartLocation' has a wrong offset!");
static_assert(offsetof(VDDynamicRopeComponent_RebuildRopeAtPoints, EndLocation) == 0x000010, "Member 'VDDynamicRopeComponent_RebuildRopeAtPoints::EndLocation' has a wrong offset!");
static_assert(offsetof(VDDynamicRopeComponent_RebuildRopeAtPoints, bRelativeLocations) == 0x00001C, "Member 'VDDynamicRopeComponent_RebuildRopeAtPoints::bRelativeLocations' has a wrong offset!");

// Function VICODynamicsPlugin.VDDynamicRopeComponent.RebuildRopeAttached
// 0x0038 (0x0038 - 0x0000)
struct VDDynamicRopeComponent_RebuildRopeAttached final 
{
public:
	float                                         DistancePerSegment;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        StartAttachedTo;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSocket;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartSimulateTension;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175D[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        EndAttachedTo;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndSocket;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndSimulateTension;                                // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175E[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDDynamicRopeComponent_RebuildRopeAttached) == 0x000008, "Wrong alignment on VDDynamicRopeComponent_RebuildRopeAttached");
static_assert(sizeof(VDDynamicRopeComponent_RebuildRopeAttached) == 0x000038, "Wrong size on VDDynamicRopeComponent_RebuildRopeAttached");
static_assert(offsetof(VDDynamicRopeComponent_RebuildRopeAttached, DistancePerSegment) == 0x000000, "Member 'VDDynamicRopeComponent_RebuildRopeAttached::DistancePerSegment' has a wrong offset!");
static_assert(offsetof(VDDynamicRopeComponent_RebuildRopeAttached, StartAttachedTo) == 0x000008, "Member 'VDDynamicRopeComponent_RebuildRopeAttached::StartAttachedTo' has a wrong offset!");
static_assert(offsetof(VDDynamicRopeComponent_RebuildRopeAttached, StartSocket) == 0x000010, "Member 'VDDynamicRopeComponent_RebuildRopeAttached::StartSocket' has a wrong offset!");
static_assert(offsetof(VDDynamicRopeComponent_RebuildRopeAttached, StartSimulateTension) == 0x000018, "Member 'VDDynamicRopeComponent_RebuildRopeAttached::StartSimulateTension' has a wrong offset!");
static_assert(offsetof(VDDynamicRopeComponent_RebuildRopeAttached, EndAttachedTo) == 0x000020, "Member 'VDDynamicRopeComponent_RebuildRopeAttached::EndAttachedTo' has a wrong offset!");
static_assert(offsetof(VDDynamicRopeComponent_RebuildRopeAttached, EndSocket) == 0x000028, "Member 'VDDynamicRopeComponent_RebuildRopeAttached::EndSocket' has a wrong offset!");
static_assert(offsetof(VDDynamicRopeComponent_RebuildRopeAttached, EndSimulateTension) == 0x000030, "Member 'VDDynamicRopeComponent_RebuildRopeAttached::EndSimulateTension' has a wrong offset!");

// Function VICODynamicsPlugin.VDMeshClothComponent.GetBendConstraintsArray
// 0x0010 (0x0010 - 0x0000)
struct VDMeshClothComponent_GetBendConstraintsArray final 
{
public:
	TArray<class UVDParticleSpringConstraint*>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDMeshClothComponent_GetBendConstraintsArray) == 0x000008, "Wrong alignment on VDMeshClothComponent_GetBendConstraintsArray");
static_assert(sizeof(VDMeshClothComponent_GetBendConstraintsArray) == 0x000010, "Wrong size on VDMeshClothComponent_GetBendConstraintsArray");
static_assert(offsetof(VDMeshClothComponent_GetBendConstraintsArray, ReturnValue) == 0x000000, "Member 'VDMeshClothComponent_GetBendConstraintsArray::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDMeshClothComponent.GetStretchConstraintsArray
// 0x0010 (0x0010 - 0x0000)
struct VDMeshClothComponent_GetStretchConstraintsArray final 
{
public:
	TArray<class UVDParticleSpringConstraint*>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDMeshClothComponent_GetStretchConstraintsArray) == 0x000008, "Wrong alignment on VDMeshClothComponent_GetStretchConstraintsArray");
static_assert(sizeof(VDMeshClothComponent_GetStretchConstraintsArray) == 0x000010, "Wrong size on VDMeshClothComponent_GetStretchConstraintsArray");
static_assert(offsetof(VDMeshClothComponent_GetStretchConstraintsArray, ReturnValue) == 0x000000, "Member 'VDMeshClothComponent_GetStretchConstraintsArray::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDMeshClothComponent.GetVolumeConstraint
// 0x0008 (0x0008 - 0x0000)
struct VDMeshClothComponent_GetVolumeConstraint final 
{
public:
	class UVDMeshVolumeConstraint*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDMeshClothComponent_GetVolumeConstraint) == 0x000008, "Wrong alignment on VDMeshClothComponent_GetVolumeConstraint");
static_assert(sizeof(VDMeshClothComponent_GetVolumeConstraint) == 0x000008, "Wrong size on VDMeshClothComponent_GetVolumeConstraint");
static_assert(offsetof(VDMeshClothComponent_GetVolumeConstraint, ReturnValue) == 0x000000, "Member 'VDMeshClothComponent_GetVolumeConstraint::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDMeshVolumeConstraint.SetRestVolume
// 0x0004 (0x0004 - 0x0000)
struct VDMeshVolumeConstraint_SetRestVolume final 
{
public:
	float                                         NewVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDMeshVolumeConstraint_SetRestVolume) == 0x000004, "Wrong alignment on VDMeshVolumeConstraint_SetRestVolume");
static_assert(sizeof(VDMeshVolumeConstraint_SetRestVolume) == 0x000004, "Wrong size on VDMeshVolumeConstraint_SetRestVolume");
static_assert(offsetof(VDMeshVolumeConstraint_SetRestVolume, NewVolume) == 0x000000, "Member 'VDMeshVolumeConstraint_SetRestVolume::NewVolume' has a wrong offset!");

// Function VICODynamicsPlugin.VDMeshVolumeConstraint.GetCurrentVolume
// 0x0004 (0x0004 - 0x0000)
struct VDMeshVolumeConstraint_GetCurrentVolume final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDMeshVolumeConstraint_GetCurrentVolume) == 0x000004, "Wrong alignment on VDMeshVolumeConstraint_GetCurrentVolume");
static_assert(sizeof(VDMeshVolumeConstraint_GetCurrentVolume) == 0x000004, "Wrong size on VDMeshVolumeConstraint_GetCurrentVolume");
static_assert(offsetof(VDMeshVolumeConstraint_GetCurrentVolume, ReturnValue) == 0x000000, "Member 'VDMeshVolumeConstraint_GetCurrentVolume::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDMeshVolumeConstraint.GetRestVolume
// 0x0004 (0x0004 - 0x0000)
struct VDMeshVolumeConstraint_GetRestVolume final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDMeshVolumeConstraint_GetRestVolume) == 0x000004, "Wrong alignment on VDMeshVolumeConstraint_GetRestVolume");
static_assert(sizeof(VDMeshVolumeConstraint_GetRestVolume) == 0x000004, "Wrong size on VDMeshVolumeConstraint_GetRestVolume");
static_assert(offsetof(VDMeshVolumeConstraint_GetRestVolume, ReturnValue) == 0x000000, "Member 'VDMeshVolumeConstraint_GetRestVolume::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDParticleSpringConstraint.SetRestDistance
// 0x0004 (0x0004 - 0x0000)
struct VDParticleSpringConstraint_SetRestDistance final 
{
public:
	float                                         NewRestDistance;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDParticleSpringConstraint_SetRestDistance) == 0x000004, "Wrong alignment on VDParticleSpringConstraint_SetRestDistance");
static_assert(sizeof(VDParticleSpringConstraint_SetRestDistance) == 0x000004, "Wrong size on VDParticleSpringConstraint_SetRestDistance");
static_assert(offsetof(VDParticleSpringConstraint_SetRestDistance, NewRestDistance) == 0x000000, "Member 'VDParticleSpringConstraint_SetRestDistance::NewRestDistance' has a wrong offset!");

// Function VICODynamicsPlugin.VDParticleSpringConstraint.SetStiffness
// 0x0004 (0x0004 - 0x0000)
struct VDParticleSpringConstraint_SetStiffness final 
{
public:
	float                                         NewStiffness;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDParticleSpringConstraint_SetStiffness) == 0x000004, "Wrong alignment on VDParticleSpringConstraint_SetStiffness");
static_assert(sizeof(VDParticleSpringConstraint_SetStiffness) == 0x000004, "Wrong size on VDParticleSpringConstraint_SetStiffness");
static_assert(offsetof(VDParticleSpringConstraint_SetStiffness, NewStiffness) == 0x000000, "Member 'VDParticleSpringConstraint_SetStiffness::NewStiffness' has a wrong offset!");

// Function VICODynamicsPlugin.VDParticleSpringConstraint.GetParticle1
// 0x0008 (0x0008 - 0x0000)
struct VDParticleSpringConstraint_GetParticle1 final 
{
public:
	class UVDSimulatedParticle*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDParticleSpringConstraint_GetParticle1) == 0x000008, "Wrong alignment on VDParticleSpringConstraint_GetParticle1");
static_assert(sizeof(VDParticleSpringConstraint_GetParticle1) == 0x000008, "Wrong size on VDParticleSpringConstraint_GetParticle1");
static_assert(offsetof(VDParticleSpringConstraint_GetParticle1, ReturnValue) == 0x000000, "Member 'VDParticleSpringConstraint_GetParticle1::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDParticleSpringConstraint.GetParticle2
// 0x0008 (0x0008 - 0x0000)
struct VDParticleSpringConstraint_GetParticle2 final 
{
public:
	class UVDSimulatedParticle*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDParticleSpringConstraint_GetParticle2) == 0x000008, "Wrong alignment on VDParticleSpringConstraint_GetParticle2");
static_assert(sizeof(VDParticleSpringConstraint_GetParticle2) == 0x000008, "Wrong size on VDParticleSpringConstraint_GetParticle2");
static_assert(offsetof(VDParticleSpringConstraint_GetParticle2, ReturnValue) == 0x000000, "Member 'VDParticleSpringConstraint_GetParticle2::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDParticleSpringConstraint.GetRestDistance
// 0x0004 (0x0004 - 0x0000)
struct VDParticleSpringConstraint_GetRestDistance final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDParticleSpringConstraint_GetRestDistance) == 0x000004, "Wrong alignment on VDParticleSpringConstraint_GetRestDistance");
static_assert(sizeof(VDParticleSpringConstraint_GetRestDistance) == 0x000004, "Wrong size on VDParticleSpringConstraint_GetRestDistance");
static_assert(offsetof(VDParticleSpringConstraint_GetRestDistance, ReturnValue) == 0x000000, "Member 'VDParticleSpringConstraint_GetRestDistance::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDParticleSpringConstraint.GetStifffness
// 0x0004 (0x0004 - 0x0000)
struct VDParticleSpringConstraint_GetStifffness final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDParticleSpringConstraint_GetStifffness) == 0x000004, "Wrong alignment on VDParticleSpringConstraint_GetStifffness");
static_assert(sizeof(VDParticleSpringConstraint_GetStifffness) == 0x000004, "Wrong size on VDParticleSpringConstraint_GetStifffness");
static_assert(offsetof(VDParticleSpringConstraint_GetStifffness, ReturnValue) == 0x000000, "Member 'VDParticleSpringConstraint_GetStifffness::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDParticleSpringConstraint.IsConstraining
// 0x0018 (0x0018 - 0x0000)
struct VDParticleSpringConstraint_IsConstraining final 
{
public:
	class UVDSimulatedParticle*                   Particle1;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVDSimulatedParticle*                   Particle2;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1766[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDParticleSpringConstraint_IsConstraining) == 0x000008, "Wrong alignment on VDParticleSpringConstraint_IsConstraining");
static_assert(sizeof(VDParticleSpringConstraint_IsConstraining) == 0x000018, "Wrong size on VDParticleSpringConstraint_IsConstraining");
static_assert(offsetof(VDParticleSpringConstraint_IsConstraining, Particle1) == 0x000000, "Member 'VDParticleSpringConstraint_IsConstraining::Particle1' has a wrong offset!");
static_assert(offsetof(VDParticleSpringConstraint_IsConstraining, Particle2) == 0x000008, "Member 'VDParticleSpringConstraint_IsConstraining::Particle2' has a wrong offset!");
static_assert(offsetof(VDParticleSpringConstraint_IsConstraining, ReturnValue) == 0x000010, "Member 'VDParticleSpringConstraint_IsConstraining::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.CreateParticle
// 0x0028 (0x0028 - 0x0000)
struct VDSimulatedObject_CreateParticle final 
{
public:
	struct FVDParticleInfo                        ParticleInfo;                                      // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_176A[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVDSimulatedParticle*                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_CreateParticle) == 0x000008, "Wrong alignment on VDSimulatedObject_CreateParticle");
static_assert(sizeof(VDSimulatedObject_CreateParticle) == 0x000028, "Wrong size on VDSimulatedObject_CreateParticle");
static_assert(offsetof(VDSimulatedObject_CreateParticle, ParticleInfo) == 0x000000, "Member 'VDSimulatedObject_CreateParticle::ParticleInfo' has a wrong offset!");
static_assert(offsetof(VDSimulatedObject_CreateParticle, ReturnValue) == 0x000020, "Member 'VDSimulatedObject_CreateParticle::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.CreateSpringConstraint
// 0x0020 (0x0020 - 0x0000)
struct VDSimulatedObject_CreateSpringConstraint final 
{
public:
	class UVDSimulatedParticle*                   Particle1;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVDSimulatedParticle*                   Particle2;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestDistance;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVDParticleSpringConstraint*            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_CreateSpringConstraint) == 0x000008, "Wrong alignment on VDSimulatedObject_CreateSpringConstraint");
static_assert(sizeof(VDSimulatedObject_CreateSpringConstraint) == 0x000020, "Wrong size on VDSimulatedObject_CreateSpringConstraint");
static_assert(offsetof(VDSimulatedObject_CreateSpringConstraint, Particle1) == 0x000000, "Member 'VDSimulatedObject_CreateSpringConstraint::Particle1' has a wrong offset!");
static_assert(offsetof(VDSimulatedObject_CreateSpringConstraint, Particle2) == 0x000008, "Member 'VDSimulatedObject_CreateSpringConstraint::Particle2' has a wrong offset!");
static_assert(offsetof(VDSimulatedObject_CreateSpringConstraint, RestDistance) == 0x000010, "Member 'VDSimulatedObject_CreateSpringConstraint::RestDistance' has a wrong offset!");
static_assert(offsetof(VDSimulatedObject_CreateSpringConstraint, Stiffness) == 0x000014, "Member 'VDSimulatedObject_CreateSpringConstraint::Stiffness' has a wrong offset!");
static_assert(offsetof(VDSimulatedObject_CreateSpringConstraint, ReturnValue) == 0x000018, "Member 'VDSimulatedObject_CreateSpringConstraint::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.CreateVolumeConstraint
// 0x0020 (0x0020 - 0x0000)
struct VDSimulatedObject_CreateVolumeConstraint final 
{
public:
	TArray<int32>                                 IndexList;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestVolume;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVDMeshVolumeConstraint*                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_CreateVolumeConstraint) == 0x000008, "Wrong alignment on VDSimulatedObject_CreateVolumeConstraint");
static_assert(sizeof(VDSimulatedObject_CreateVolumeConstraint) == 0x000020, "Wrong size on VDSimulatedObject_CreateVolumeConstraint");
static_assert(offsetof(VDSimulatedObject_CreateVolumeConstraint, IndexList) == 0x000000, "Member 'VDSimulatedObject_CreateVolumeConstraint::IndexList' has a wrong offset!");
static_assert(offsetof(VDSimulatedObject_CreateVolumeConstraint, Alpha) == 0x000010, "Member 'VDSimulatedObject_CreateVolumeConstraint::Alpha' has a wrong offset!");
static_assert(offsetof(VDSimulatedObject_CreateVolumeConstraint, RestVolume) == 0x000014, "Member 'VDSimulatedObject_CreateVolumeConstraint::RestVolume' has a wrong offset!");
static_assert(offsetof(VDSimulatedObject_CreateVolumeConstraint, ReturnValue) == 0x000018, "Member 'VDSimulatedObject_CreateVolumeConstraint::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.DestroyConstraint
// 0x0008 (0x0008 - 0x0000)
struct VDSimulatedObject_DestroyConstraint final 
{
public:
	class UVDParticleSpringConstraint*            Constraint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_DestroyConstraint) == 0x000008, "Wrong alignment on VDSimulatedObject_DestroyConstraint");
static_assert(sizeof(VDSimulatedObject_DestroyConstraint) == 0x000008, "Wrong size on VDSimulatedObject_DestroyConstraint");
static_assert(offsetof(VDSimulatedObject_DestroyConstraint, Constraint) == 0x000000, "Member 'VDSimulatedObject_DestroyConstraint::Constraint' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.DestroyParticle
// 0x0008 (0x0008 - 0x0000)
struct VDSimulatedObject_DestroyParticle final 
{
public:
	class UVDSimulatedParticle*                   Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_DestroyParticle) == 0x000008, "Wrong alignment on VDSimulatedObject_DestroyParticle");
static_assert(sizeof(VDSimulatedObject_DestroyParticle) == 0x000008, "Wrong size on VDSimulatedObject_DestroyParticle");
static_assert(offsetof(VDSimulatedObject_DestroyParticle, Particle) == 0x000000, "Member 'VDSimulatedObject_DestroyParticle::Particle' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.DestroyVolumeConstraint
// 0x0008 (0x0008 - 0x0000)
struct VDSimulatedObject_DestroyVolumeConstraint final 
{
public:
	class UVDMeshVolumeConstraint*                Constraint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_DestroyVolumeConstraint) == 0x000008, "Wrong alignment on VDSimulatedObject_DestroyVolumeConstraint");
static_assert(sizeof(VDSimulatedObject_DestroyVolumeConstraint) == 0x000008, "Wrong size on VDSimulatedObject_DestroyVolumeConstraint");
static_assert(offsetof(VDSimulatedObject_DestroyVolumeConstraint, Constraint) == 0x000000, "Member 'VDSimulatedObject_DestroyVolumeConstraint::Constraint' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.GetParticles
// 0x0010 (0x0010 - 0x0000)
struct VDSimulatedObject_GetParticles final 
{
public:
	TArray<class UVDSimulatedParticle*>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_GetParticles) == 0x000008, "Wrong alignment on VDSimulatedObject_GetParticles");
static_assert(sizeof(VDSimulatedObject_GetParticles) == 0x000010, "Wrong size on VDSimulatedObject_GetParticles");
static_assert(offsetof(VDSimulatedObject_GetParticles, ReturnValue) == 0x000000, "Member 'VDSimulatedObject_GetParticles::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.GetSpringConstraints
// 0x0010 (0x0010 - 0x0000)
struct VDSimulatedObject_GetSpringConstraints final 
{
public:
	TArray<class UVDParticleSpringConstraint*>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_GetSpringConstraints) == 0x000008, "Wrong alignment on VDSimulatedObject_GetSpringConstraints");
static_assert(sizeof(VDSimulatedObject_GetSpringConstraints) == 0x000010, "Wrong size on VDSimulatedObject_GetSpringConstraints");
static_assert(offsetof(VDSimulatedObject_GetSpringConstraints, ReturnValue) == 0x000000, "Member 'VDSimulatedObject_GetSpringConstraints::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.SetAffectiveWindVector
// 0x000C (0x000C - 0x0000)
struct VDSimulatedObject_SetAffectiveWindVector final 
{
public:
	struct FVector                                NewWindVector;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_SetAffectiveWindVector) == 0x000004, "Wrong alignment on VDSimulatedObject_SetAffectiveWindVector");
static_assert(sizeof(VDSimulatedObject_SetAffectiveWindVector) == 0x00000C, "Wrong size on VDSimulatedObject_SetAffectiveWindVector");
static_assert(offsetof(VDSimulatedObject_SetAffectiveWindVector, NewWindVector) == 0x000000, "Member 'VDSimulatedObject_SetAffectiveWindVector::NewWindVector' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.SetCollisionChannel
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedObject_SetCollisionChannel final 
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_SetCollisionChannel) == 0x000001, "Wrong alignment on VDSimulatedObject_SetCollisionChannel");
static_assert(sizeof(VDSimulatedObject_SetCollisionChannel) == 0x000001, "Wrong size on VDSimulatedObject_SetCollisionChannel");
static_assert(offsetof(VDSimulatedObject_SetCollisionChannel, Channel) == 0x000000, "Member 'VDSimulatedObject_SetCollisionChannel::Channel' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.SetCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedObject_SetCollisionEnabled final 
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_SetCollisionEnabled) == 0x000001, "Wrong alignment on VDSimulatedObject_SetCollisionEnabled");
static_assert(sizeof(VDSimulatedObject_SetCollisionEnabled) == 0x000001, "Wrong size on VDSimulatedObject_SetCollisionEnabled");
static_assert(offsetof(VDSimulatedObject_SetCollisionEnabled, Enabled) == 0x000000, "Member 'VDSimulatedObject_SetCollisionEnabled::Enabled' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.SetCollisionResponseToObjectType
// 0x0002 (0x0002 - 0x0000)
struct VDSimulatedObject_SetCollisionResponseToObjectType final 
{
public:
	ECollisionChannel                             ObjectType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionResponse                            Response;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_SetCollisionResponseToObjectType) == 0x000001, "Wrong alignment on VDSimulatedObject_SetCollisionResponseToObjectType");
static_assert(sizeof(VDSimulatedObject_SetCollisionResponseToObjectType) == 0x000002, "Wrong size on VDSimulatedObject_SetCollisionResponseToObjectType");
static_assert(offsetof(VDSimulatedObject_SetCollisionResponseToObjectType, ObjectType) == 0x000000, "Member 'VDSimulatedObject_SetCollisionResponseToObjectType::ObjectType' has a wrong offset!");
static_assert(offsetof(VDSimulatedObject_SetCollisionResponseToObjectType, Response) == 0x000001, "Member 'VDSimulatedObject_SetCollisionResponseToObjectType::Response' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.SetGravityScale
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedObject_SetGravityScale final 
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_SetGravityScale) == 0x000004, "Wrong alignment on VDSimulatedObject_SetGravityScale");
static_assert(sizeof(VDSimulatedObject_SetGravityScale) == 0x000004, "Wrong size on VDSimulatedObject_SetGravityScale");
static_assert(offsetof(VDSimulatedObject_SetGravityScale, Scale) == 0x000000, "Member 'VDSimulatedObject_SetGravityScale::Scale' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.SetMinimumConstraintSatisfactionDistance
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedObject_SetMinimumConstraintSatisfactionDistance final 
{
public:
	float                                         MinDistance;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_SetMinimumConstraintSatisfactionDistance) == 0x000004, "Wrong alignment on VDSimulatedObject_SetMinimumConstraintSatisfactionDistance");
static_assert(sizeof(VDSimulatedObject_SetMinimumConstraintSatisfactionDistance) == 0x000004, "Wrong size on VDSimulatedObject_SetMinimumConstraintSatisfactionDistance");
static_assert(offsetof(VDSimulatedObject_SetMinimumConstraintSatisfactionDistance, MinDistance) == 0x000000, "Member 'VDSimulatedObject_SetMinimumConstraintSatisfactionDistance::MinDistance' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.SetObjectType
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedObject_SetObjectType final 
{
public:
	ECollisionChannel                             ObjectType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_SetObjectType) == 0x000001, "Wrong alignment on VDSimulatedObject_SetObjectType");
static_assert(sizeof(VDSimulatedObject_SetObjectType) == 0x000001, "Wrong size on VDSimulatedObject_SetObjectType");
static_assert(offsetof(VDSimulatedObject_SetObjectType, ObjectType) == 0x000000, "Member 'VDSimulatedObject_SetObjectType::ObjectType' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.SetSkipRelativeVelocityCheckDuringCollision
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedObject_SetSkipRelativeVelocityCheckDuringCollision final 
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_SetSkipRelativeVelocityCheckDuringCollision) == 0x000001, "Wrong alignment on VDSimulatedObject_SetSkipRelativeVelocityCheckDuringCollision");
static_assert(sizeof(VDSimulatedObject_SetSkipRelativeVelocityCheckDuringCollision) == 0x000001, "Wrong size on VDSimulatedObject_SetSkipRelativeVelocityCheckDuringCollision");
static_assert(offsetof(VDSimulatedObject_SetSkipRelativeVelocityCheckDuringCollision, Skip) == 0x000000, "Member 'VDSimulatedObject_SetSkipRelativeVelocityCheckDuringCollision::Skip' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.GetAffectiveWindVector
// 0x000C (0x000C - 0x0000)
struct VDSimulatedObject_GetAffectiveWindVector final 
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_GetAffectiveWindVector) == 0x000004, "Wrong alignment on VDSimulatedObject_GetAffectiveWindVector");
static_assert(sizeof(VDSimulatedObject_GetAffectiveWindVector) == 0x00000C, "Wrong size on VDSimulatedObject_GetAffectiveWindVector");
static_assert(offsetof(VDSimulatedObject_GetAffectiveWindVector, ReturnValue) == 0x000000, "Member 'VDSimulatedObject_GetAffectiveWindVector::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.GetCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedObject_GetCollisionEnabled final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_GetCollisionEnabled) == 0x000001, "Wrong alignment on VDSimulatedObject_GetCollisionEnabled");
static_assert(sizeof(VDSimulatedObject_GetCollisionEnabled) == 0x000001, "Wrong size on VDSimulatedObject_GetCollisionEnabled");
static_assert(offsetof(VDSimulatedObject_GetCollisionEnabled, ReturnValue) == 0x000000, "Member 'VDSimulatedObject_GetCollisionEnabled::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.GetCollisionSettings
// 0x0040 (0x0040 - 0x0000)
struct VDSimulatedObject_GetCollisionSettings final 
{
public:
	struct FVDCollisionSettings                   ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_GetCollisionSettings) == 0x000008, "Wrong alignment on VDSimulatedObject_GetCollisionSettings");
static_assert(sizeof(VDSimulatedObject_GetCollisionSettings) == 0x000040, "Wrong size on VDSimulatedObject_GetCollisionSettings");
static_assert(offsetof(VDSimulatedObject_GetCollisionSettings, ReturnValue) == 0x000000, "Member 'VDSimulatedObject_GetCollisionSettings::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.GetGravityScale
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedObject_GetGravityScale final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_GetGravityScale) == 0x000004, "Wrong alignment on VDSimulatedObject_GetGravityScale");
static_assert(sizeof(VDSimulatedObject_GetGravityScale) == 0x000004, "Wrong size on VDSimulatedObject_GetGravityScale");
static_assert(offsetof(VDSimulatedObject_GetGravityScale, ReturnValue) == 0x000000, "Member 'VDSimulatedObject_GetGravityScale::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.GetMinimumConstraintSatisfactionDistance
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedObject_GetMinimumConstraintSatisfactionDistance final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_GetMinimumConstraintSatisfactionDistance) == 0x000004, "Wrong alignment on VDSimulatedObject_GetMinimumConstraintSatisfactionDistance");
static_assert(sizeof(VDSimulatedObject_GetMinimumConstraintSatisfactionDistance) == 0x000004, "Wrong size on VDSimulatedObject_GetMinimumConstraintSatisfactionDistance");
static_assert(offsetof(VDSimulatedObject_GetMinimumConstraintSatisfactionDistance, ReturnValue) == 0x000000, "Member 'VDSimulatedObject_GetMinimumConstraintSatisfactionDistance::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedObject.GetSkipRelativeVelocityCheckDuringCollision
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedObject_GetSkipRelativeVelocityCheckDuringCollision final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedObject_GetSkipRelativeVelocityCheckDuringCollision) == 0x000001, "Wrong alignment on VDSimulatedObject_GetSkipRelativeVelocityCheckDuringCollision");
static_assert(sizeof(VDSimulatedObject_GetSkipRelativeVelocityCheckDuringCollision) == 0x000001, "Wrong size on VDSimulatedObject_GetSkipRelativeVelocityCheckDuringCollision");
static_assert(offsetof(VDSimulatedObject_GetSkipRelativeVelocityCheckDuringCollision, ReturnValue) == 0x000000, "Member 'VDSimulatedObject_GetSkipRelativeVelocityCheckDuringCollision::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.AddForce
// 0x000C (0x000C - 0x0000)
struct VDSimulatedParticle_AddForce final 
{
public:
	struct FVector                                Force;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_AddForce) == 0x000004, "Wrong alignment on VDSimulatedParticle_AddForce");
static_assert(sizeof(VDSimulatedParticle_AddForce) == 0x00000C, "Wrong size on VDSimulatedParticle_AddForce");
static_assert(offsetof(VDSimulatedParticle_AddForce, Force) == 0x000000, "Member 'VDSimulatedParticle_AddForce::Force' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.AttachToActor
// 0x0028 (0x0028 - 0x0000)
struct VDSimulatedParticle_AttachToActor final 
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimulateTension;                                   // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176D[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Socket;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176E[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDSimulatedParticle_AttachToActor) == 0x000008, "Wrong alignment on VDSimulatedParticle_AttachToActor");
static_assert(sizeof(VDSimulatedParticle_AttachToActor) == 0x000028, "Wrong size on VDSimulatedParticle_AttachToActor");
static_assert(offsetof(VDSimulatedParticle_AttachToActor, Actor) == 0x000000, "Member 'VDSimulatedParticle_AttachToActor::Actor' has a wrong offset!");
static_assert(offsetof(VDSimulatedParticle_AttachToActor, Location) == 0x000008, "Member 'VDSimulatedParticle_AttachToActor::Location' has a wrong offset!");
static_assert(offsetof(VDSimulatedParticle_AttachToActor, SimulateTension) == 0x000014, "Member 'VDSimulatedParticle_AttachToActor::SimulateTension' has a wrong offset!");
static_assert(offsetof(VDSimulatedParticle_AttachToActor, Socket) == 0x000018, "Member 'VDSimulatedParticle_AttachToActor::Socket' has a wrong offset!");
static_assert(offsetof(VDSimulatedParticle_AttachToActor, ReturnValue) == 0x000020, "Member 'VDSimulatedParticle_AttachToActor::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.AttachToComponent
// 0x0028 (0x0028 - 0x0000)
struct VDSimulatedParticle_AttachToComponent final 
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimulateTension;                                   // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176F[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Socket;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1770[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDSimulatedParticle_AttachToComponent) == 0x000008, "Wrong alignment on VDSimulatedParticle_AttachToComponent");
static_assert(sizeof(VDSimulatedParticle_AttachToComponent) == 0x000028, "Wrong size on VDSimulatedParticle_AttachToComponent");
static_assert(offsetof(VDSimulatedParticle_AttachToComponent, Component) == 0x000000, "Member 'VDSimulatedParticle_AttachToComponent::Component' has a wrong offset!");
static_assert(offsetof(VDSimulatedParticle_AttachToComponent, Location) == 0x000008, "Member 'VDSimulatedParticle_AttachToComponent::Location' has a wrong offset!");
static_assert(offsetof(VDSimulatedParticle_AttachToComponent, SimulateTension) == 0x000014, "Member 'VDSimulatedParticle_AttachToComponent::SimulateTension' has a wrong offset!");
static_assert(offsetof(VDSimulatedParticle_AttachToComponent, Socket) == 0x000018, "Member 'VDSimulatedParticle_AttachToComponent::Socket' has a wrong offset!");
static_assert(offsetof(VDSimulatedParticle_AttachToComponent, ReturnValue) == 0x000020, "Member 'VDSimulatedParticle_AttachToComponent::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.AttachToLocation
// 0x0010 (0x0010 - 0x0000)
struct VDSimulatedParticle_AttachToLocation final 
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRelative;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1771[0x2];                                     // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDSimulatedParticle_AttachToLocation) == 0x000004, "Wrong alignment on VDSimulatedParticle_AttachToLocation");
static_assert(sizeof(VDSimulatedParticle_AttachToLocation) == 0x000010, "Wrong size on VDSimulatedParticle_AttachToLocation");
static_assert(offsetof(VDSimulatedParticle_AttachToLocation, Location) == 0x000000, "Member 'VDSimulatedParticle_AttachToLocation::Location' has a wrong offset!");
static_assert(offsetof(VDSimulatedParticle_AttachToLocation, IsRelative) == 0x00000C, "Member 'VDSimulatedParticle_AttachToLocation::IsRelative' has a wrong offset!");
static_assert(offsetof(VDSimulatedParticle_AttachToLocation, ReturnValue) == 0x00000D, "Member 'VDSimulatedParticle_AttachToLocation::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.CopyAttachment
// 0x0068 (0x0068 - 0x0000)
struct VDSimulatedParticle_CopyAttachment final 
{
public:
	struct FVDParticleAttachment                  Param_Attachment;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          UseCurrentMass;                                    // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1772[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDSimulatedParticle_CopyAttachment) == 0x000008, "Wrong alignment on VDSimulatedParticle_CopyAttachment");
static_assert(sizeof(VDSimulatedParticle_CopyAttachment) == 0x000068, "Wrong size on VDSimulatedParticle_CopyAttachment");
static_assert(offsetof(VDSimulatedParticle_CopyAttachment, Param_Attachment) == 0x000000, "Member 'VDSimulatedParticle_CopyAttachment::Param_Attachment' has a wrong offset!");
static_assert(offsetof(VDSimulatedParticle_CopyAttachment, UseCurrentMass) == 0x000060, "Member 'VDSimulatedParticle_CopyAttachment::UseCurrentMass' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.GetAttachment
// 0x0068 (0x0068 - 0x0000)
struct VDSimulatedParticle_GetAttachment final 
{
public:
	struct FVDParticleAttachment                  OutAttachment;                                     // 0x0000(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1773[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDSimulatedParticle_GetAttachment) == 0x000008, "Wrong alignment on VDSimulatedParticle_GetAttachment");
static_assert(sizeof(VDSimulatedParticle_GetAttachment) == 0x000068, "Wrong size on VDSimulatedParticle_GetAttachment");
static_assert(offsetof(VDSimulatedParticle_GetAttachment, OutAttachment) == 0x000000, "Member 'VDSimulatedParticle_GetAttachment::OutAttachment' has a wrong offset!");
static_assert(offsetof(VDSimulatedParticle_GetAttachment, ReturnValue) == 0x000060, "Member 'VDSimulatedParticle_GetAttachment::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.SetDragCoefficient
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedParticle_SetDragCoefficient final 
{
public:
	float                                         NewDragCoefficient;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_SetDragCoefficient) == 0x000004, "Wrong alignment on VDSimulatedParticle_SetDragCoefficient");
static_assert(sizeof(VDSimulatedParticle_SetDragCoefficient) == 0x000004, "Wrong size on VDSimulatedParticle_SetDragCoefficient");
static_assert(offsetof(VDSimulatedParticle_SetDragCoefficient, NewDragCoefficient) == 0x000000, "Member 'VDSimulatedParticle_SetDragCoefficient::NewDragCoefficient' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.SetFrictionCoefficient
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedParticle_SetFrictionCoefficient final 
{
public:
	float                                         NewFrictionCoefficient;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_SetFrictionCoefficient) == 0x000004, "Wrong alignment on VDSimulatedParticle_SetFrictionCoefficient");
static_assert(sizeof(VDSimulatedParticle_SetFrictionCoefficient) == 0x000004, "Wrong size on VDSimulatedParticle_SetFrictionCoefficient");
static_assert(offsetof(VDSimulatedParticle_SetFrictionCoefficient, NewFrictionCoefficient) == 0x000000, "Member 'VDSimulatedParticle_SetFrictionCoefficient::NewFrictionCoefficient' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.SetIsFree
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedParticle_SetIsFree final 
{
public:
	bool                                          IsFree;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_SetIsFree) == 0x000001, "Wrong alignment on VDSimulatedParticle_SetIsFree");
static_assert(sizeof(VDSimulatedParticle_SetIsFree) == 0x000001, "Wrong size on VDSimulatedParticle_SetIsFree");
static_assert(offsetof(VDSimulatedParticle_SetIsFree, IsFree) == 0x000000, "Member 'VDSimulatedParticle_SetIsFree::IsFree' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.SetIsParticleCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedParticle_SetIsParticleCollisionEnabled final 
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_SetIsParticleCollisionEnabled) == 0x000001, "Wrong alignment on VDSimulatedParticle_SetIsParticleCollisionEnabled");
static_assert(sizeof(VDSimulatedParticle_SetIsParticleCollisionEnabled) == 0x000001, "Wrong size on VDSimulatedParticle_SetIsParticleCollisionEnabled");
static_assert(offsetof(VDSimulatedParticle_SetIsParticleCollisionEnabled, IsEnabled) == 0x000000, "Member 'VDSimulatedParticle_SetIsParticleCollisionEnabled::IsEnabled' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.SetIsRigidBodyCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedParticle_SetIsRigidBodyCollisionEnabled final 
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_SetIsRigidBodyCollisionEnabled) == 0x000001, "Wrong alignment on VDSimulatedParticle_SetIsRigidBodyCollisionEnabled");
static_assert(sizeof(VDSimulatedParticle_SetIsRigidBodyCollisionEnabled) == 0x000001, "Wrong size on VDSimulatedParticle_SetIsRigidBodyCollisionEnabled");
static_assert(offsetof(VDSimulatedParticle_SetIsRigidBodyCollisionEnabled, IsEnabled) == 0x000000, "Member 'VDSimulatedParticle_SetIsRigidBodyCollisionEnabled::IsEnabled' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.SetIsWindOccluded
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedParticle_SetIsWindOccluded final 
{
public:
	bool                                          IsOccluded;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_SetIsWindOccluded) == 0x000001, "Wrong alignment on VDSimulatedParticle_SetIsWindOccluded");
static_assert(sizeof(VDSimulatedParticle_SetIsWindOccluded) == 0x000001, "Wrong size on VDSimulatedParticle_SetIsWindOccluded");
static_assert(offsetof(VDSimulatedParticle_SetIsWindOccluded, IsOccluded) == 0x000000, "Member 'VDSimulatedParticle_SetIsWindOccluded::IsOccluded' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.SetLocation
// 0x000C (0x000C - 0x0000)
struct VDSimulatedParticle_SetLocation final 
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_SetLocation) == 0x000004, "Wrong alignment on VDSimulatedParticle_SetLocation");
static_assert(sizeof(VDSimulatedParticle_SetLocation) == 0x00000C, "Wrong size on VDSimulatedParticle_SetLocation");
static_assert(offsetof(VDSimulatedParticle_SetLocation, NewLocation) == 0x000000, "Member 'VDSimulatedParticle_SetLocation::NewLocation' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.SetMass
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedParticle_SetMass final 
{
public:
	float                                         NewMass;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_SetMass) == 0x000004, "Wrong alignment on VDSimulatedParticle_SetMass");
static_assert(sizeof(VDSimulatedParticle_SetMass) == 0x000004, "Wrong size on VDSimulatedParticle_SetMass");
static_assert(offsetof(VDSimulatedParticle_SetMass, NewMass) == 0x000000, "Member 'VDSimulatedParticle_SetMass::NewMass' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.SetRadius
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedParticle_SetRadius final 
{
public:
	float                                         NewRadius;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_SetRadius) == 0x000004, "Wrong alignment on VDSimulatedParticle_SetRadius");
static_assert(sizeof(VDSimulatedParticle_SetRadius) == 0x000004, "Wrong size on VDSimulatedParticle_SetRadius");
static_assert(offsetof(VDSimulatedParticle_SetRadius, NewRadius) == 0x000000, "Member 'VDSimulatedParticle_SetRadius::NewRadius' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.SetRestitutionCoefficient
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedParticle_SetRestitutionCoefficient final 
{
public:
	float                                         NewRestitutionCoefficient;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_SetRestitutionCoefficient) == 0x000004, "Wrong alignment on VDSimulatedParticle_SetRestitutionCoefficient");
static_assert(sizeof(VDSimulatedParticle_SetRestitutionCoefficient) == 0x000004, "Wrong size on VDSimulatedParticle_SetRestitutionCoefficient");
static_assert(offsetof(VDSimulatedParticle_SetRestitutionCoefficient, NewRestitutionCoefficient) == 0x000000, "Member 'VDSimulatedParticle_SetRestitutionCoefficient::NewRestitutionCoefficient' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.SetVelocity
// 0x000C (0x000C - 0x0000)
struct VDSimulatedParticle_SetVelocity final 
{
public:
	struct FVector                                NewVelocity;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_SetVelocity) == 0x000004, "Wrong alignment on VDSimulatedParticle_SetVelocity");
static_assert(sizeof(VDSimulatedParticle_SetVelocity) == 0x00000C, "Wrong size on VDSimulatedParticle_SetVelocity");
static_assert(offsetof(VDSimulatedParticle_SetVelocity, NewVelocity) == 0x000000, "Member 'VDSimulatedParticle_SetVelocity::NewVelocity' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.GetDragCoefficient
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedParticle_GetDragCoefficient final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_GetDragCoefficient) == 0x000004, "Wrong alignment on VDSimulatedParticle_GetDragCoefficient");
static_assert(sizeof(VDSimulatedParticle_GetDragCoefficient) == 0x000004, "Wrong size on VDSimulatedParticle_GetDragCoefficient");
static_assert(offsetof(VDSimulatedParticle_GetDragCoefficient, ReturnValue) == 0x000000, "Member 'VDSimulatedParticle_GetDragCoefficient::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.GetFrictionCoefficient
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedParticle_GetFrictionCoefficient final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_GetFrictionCoefficient) == 0x000004, "Wrong alignment on VDSimulatedParticle_GetFrictionCoefficient");
static_assert(sizeof(VDSimulatedParticle_GetFrictionCoefficient) == 0x000004, "Wrong size on VDSimulatedParticle_GetFrictionCoefficient");
static_assert(offsetof(VDSimulatedParticle_GetFrictionCoefficient, ReturnValue) == 0x000000, "Member 'VDSimulatedParticle_GetFrictionCoefficient::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.GetIsFree
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedParticle_GetIsFree final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_GetIsFree) == 0x000001, "Wrong alignment on VDSimulatedParticle_GetIsFree");
static_assert(sizeof(VDSimulatedParticle_GetIsFree) == 0x000001, "Wrong size on VDSimulatedParticle_GetIsFree");
static_assert(offsetof(VDSimulatedParticle_GetIsFree, ReturnValue) == 0x000000, "Member 'VDSimulatedParticle_GetIsFree::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.GetIsParticleCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedParticle_GetIsParticleCollisionEnabled final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_GetIsParticleCollisionEnabled) == 0x000001, "Wrong alignment on VDSimulatedParticle_GetIsParticleCollisionEnabled");
static_assert(sizeof(VDSimulatedParticle_GetIsParticleCollisionEnabled) == 0x000001, "Wrong size on VDSimulatedParticle_GetIsParticleCollisionEnabled");
static_assert(offsetof(VDSimulatedParticle_GetIsParticleCollisionEnabled, ReturnValue) == 0x000000, "Member 'VDSimulatedParticle_GetIsParticleCollisionEnabled::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.GetIsRigidBodyCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedParticle_GetIsRigidBodyCollisionEnabled final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_GetIsRigidBodyCollisionEnabled) == 0x000001, "Wrong alignment on VDSimulatedParticle_GetIsRigidBodyCollisionEnabled");
static_assert(sizeof(VDSimulatedParticle_GetIsRigidBodyCollisionEnabled) == 0x000001, "Wrong size on VDSimulatedParticle_GetIsRigidBodyCollisionEnabled");
static_assert(offsetof(VDSimulatedParticle_GetIsRigidBodyCollisionEnabled, ReturnValue) == 0x000000, "Member 'VDSimulatedParticle_GetIsRigidBodyCollisionEnabled::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.GetIsWindOccluded
// 0x0001 (0x0001 - 0x0000)
struct VDSimulatedParticle_GetIsWindOccluded final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_GetIsWindOccluded) == 0x000001, "Wrong alignment on VDSimulatedParticle_GetIsWindOccluded");
static_assert(sizeof(VDSimulatedParticle_GetIsWindOccluded) == 0x000001, "Wrong size on VDSimulatedParticle_GetIsWindOccluded");
static_assert(offsetof(VDSimulatedParticle_GetIsWindOccluded, ReturnValue) == 0x000000, "Member 'VDSimulatedParticle_GetIsWindOccluded::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.GetLocation
// 0x000C (0x000C - 0x0000)
struct VDSimulatedParticle_GetLocation final 
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_GetLocation) == 0x000004, "Wrong alignment on VDSimulatedParticle_GetLocation");
static_assert(sizeof(VDSimulatedParticle_GetLocation) == 0x00000C, "Wrong size on VDSimulatedParticle_GetLocation");
static_assert(offsetof(VDSimulatedParticle_GetLocation, ReturnValue) == 0x000000, "Member 'VDSimulatedParticle_GetLocation::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.GetMass
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedParticle_GetMass final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_GetMass) == 0x000004, "Wrong alignment on VDSimulatedParticle_GetMass");
static_assert(sizeof(VDSimulatedParticle_GetMass) == 0x000004, "Wrong size on VDSimulatedParticle_GetMass");
static_assert(offsetof(VDSimulatedParticle_GetMass, ReturnValue) == 0x000000, "Member 'VDSimulatedParticle_GetMass::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.GetRadius
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedParticle_GetRadius final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_GetRadius) == 0x000004, "Wrong alignment on VDSimulatedParticle_GetRadius");
static_assert(sizeof(VDSimulatedParticle_GetRadius) == 0x000004, "Wrong size on VDSimulatedParticle_GetRadius");
static_assert(offsetof(VDSimulatedParticle_GetRadius, ReturnValue) == 0x000000, "Member 'VDSimulatedParticle_GetRadius::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.GetRestitutionCoefficient
// 0x0004 (0x0004 - 0x0000)
struct VDSimulatedParticle_GetRestitutionCoefficient final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_GetRestitutionCoefficient) == 0x000004, "Wrong alignment on VDSimulatedParticle_GetRestitutionCoefficient");
static_assert(sizeof(VDSimulatedParticle_GetRestitutionCoefficient) == 0x000004, "Wrong size on VDSimulatedParticle_GetRestitutionCoefficient");
static_assert(offsetof(VDSimulatedParticle_GetRestitutionCoefficient, ReturnValue) == 0x000000, "Member 'VDSimulatedParticle_GetRestitutionCoefficient::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulatedParticle.GetVelocity
// 0x000C (0x000C - 0x0000)
struct VDSimulatedParticle_GetVelocity final 
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulatedParticle_GetVelocity) == 0x000004, "Wrong alignment on VDSimulatedParticle_GetVelocity");
static_assert(sizeof(VDSimulatedParticle_GetVelocity) == 0x00000C, "Wrong size on VDSimulatedParticle_GetVelocity");
static_assert(offsetof(VDSimulatedParticle_GetVelocity, ReturnValue) == 0x000000, "Member 'VDSimulatedParticle_GetVelocity::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.AddExplicitColliderMapping
// 0x0018 (0x0018 - 0x0000)
struct VDSimulation_AddExplicitColliderMapping final 
{
public:
	class UBaseVDComponent*                       VDComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    Collider;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreConvexShapes;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1775[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDSimulation_AddExplicitColliderMapping) == 0x000008, "Wrong alignment on VDSimulation_AddExplicitColliderMapping");
static_assert(sizeof(VDSimulation_AddExplicitColliderMapping) == 0x000018, "Wrong size on VDSimulation_AddExplicitColliderMapping");
static_assert(offsetof(VDSimulation_AddExplicitColliderMapping, VDComponent) == 0x000000, "Member 'VDSimulation_AddExplicitColliderMapping::VDComponent' has a wrong offset!");
static_assert(offsetof(VDSimulation_AddExplicitColliderMapping, Collider) == 0x000008, "Member 'VDSimulation_AddExplicitColliderMapping::Collider' has a wrong offset!");
static_assert(offsetof(VDSimulation_AddExplicitColliderMapping, IgnoreConvexShapes) == 0x000010, "Member 'VDSimulation_AddExplicitColliderMapping::IgnoreConvexShapes' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.GetSettings
// 0x0044 (0x0044 - 0x0000)
struct VDSimulation_GetSettings final 
{
public:
	struct FVDSettings                            ReturnValue;                                       // 0x0000(0x0044)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_GetSettings) == 0x000004, "Wrong alignment on VDSimulation_GetSettings");
static_assert(sizeof(VDSimulation_GetSettings) == 0x000044, "Wrong size on VDSimulation_GetSettings");
static_assert(offsetof(VDSimulation_GetSettings, ReturnValue) == 0x000000, "Member 'VDSimulation_GetSettings::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.k2QueryBoxOverlaps
// 0x0040 (0x0040 - 0x0000)
struct VDSimulation_K2QueryBoxOverlaps final 
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HalfExtents;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UVDSimulatedParticle*>           Overlaps;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UVDSimulatedObject*>             SimObjectsToIgnore;                                // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         MaxOverlaps;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1776[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDSimulation_K2QueryBoxOverlaps) == 0x000008, "Wrong alignment on VDSimulation_K2QueryBoxOverlaps");
static_assert(sizeof(VDSimulation_K2QueryBoxOverlaps) == 0x000040, "Wrong size on VDSimulation_K2QueryBoxOverlaps");
static_assert(offsetof(VDSimulation_K2QueryBoxOverlaps, Location) == 0x000000, "Member 'VDSimulation_K2QueryBoxOverlaps::Location' has a wrong offset!");
static_assert(offsetof(VDSimulation_K2QueryBoxOverlaps, HalfExtents) == 0x00000C, "Member 'VDSimulation_K2QueryBoxOverlaps::HalfExtents' has a wrong offset!");
static_assert(offsetof(VDSimulation_K2QueryBoxOverlaps, Overlaps) == 0x000018, "Member 'VDSimulation_K2QueryBoxOverlaps::Overlaps' has a wrong offset!");
static_assert(offsetof(VDSimulation_K2QueryBoxOverlaps, SimObjectsToIgnore) == 0x000028, "Member 'VDSimulation_K2QueryBoxOverlaps::SimObjectsToIgnore' has a wrong offset!");
static_assert(offsetof(VDSimulation_K2QueryBoxOverlaps, MaxOverlaps) == 0x000038, "Member 'VDSimulation_K2QueryBoxOverlaps::MaxOverlaps' has a wrong offset!");
static_assert(offsetof(VDSimulation_K2QueryBoxOverlaps, ReturnValue) == 0x00003C, "Member 'VDSimulation_K2QueryBoxOverlaps::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.k2QuerySphereOverlaps
// 0x0038 (0x0038 - 0x0000)
struct VDSimulation_K2QuerySphereOverlaps final 
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UVDSimulatedParticle*>           Overlaps;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UVDSimulatedObject*>             SimObjectsToIgnore;                                // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         MaxOverlaps;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1777[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDSimulation_K2QuerySphereOverlaps) == 0x000008, "Wrong alignment on VDSimulation_K2QuerySphereOverlaps");
static_assert(sizeof(VDSimulation_K2QuerySphereOverlaps) == 0x000038, "Wrong size on VDSimulation_K2QuerySphereOverlaps");
static_assert(offsetof(VDSimulation_K2QuerySphereOverlaps, Location) == 0x000000, "Member 'VDSimulation_K2QuerySphereOverlaps::Location' has a wrong offset!");
static_assert(offsetof(VDSimulation_K2QuerySphereOverlaps, Radius) == 0x00000C, "Member 'VDSimulation_K2QuerySphereOverlaps::Radius' has a wrong offset!");
static_assert(offsetof(VDSimulation_K2QuerySphereOverlaps, Overlaps) == 0x000010, "Member 'VDSimulation_K2QuerySphereOverlaps::Overlaps' has a wrong offset!");
static_assert(offsetof(VDSimulation_K2QuerySphereOverlaps, SimObjectsToIgnore) == 0x000020, "Member 'VDSimulation_K2QuerySphereOverlaps::SimObjectsToIgnore' has a wrong offset!");
static_assert(offsetof(VDSimulation_K2QuerySphereOverlaps, MaxOverlaps) == 0x000030, "Member 'VDSimulation_K2QuerySphereOverlaps::MaxOverlaps' has a wrong offset!");
static_assert(offsetof(VDSimulation_K2QuerySphereOverlaps, ReturnValue) == 0x000034, "Member 'VDSimulation_K2QuerySphereOverlaps::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.RemoveAllExplicitColliderMappings
// 0x0008 (0x0008 - 0x0000)
struct VDSimulation_RemoveAllExplicitColliderMappings final 
{
public:
	class UBaseVDComponent*                       VDComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_RemoveAllExplicitColliderMappings) == 0x000008, "Wrong alignment on VDSimulation_RemoveAllExplicitColliderMappings");
static_assert(sizeof(VDSimulation_RemoveAllExplicitColliderMappings) == 0x000008, "Wrong size on VDSimulation_RemoveAllExplicitColliderMappings");
static_assert(offsetof(VDSimulation_RemoveAllExplicitColliderMappings, VDComponent) == 0x000000, "Member 'VDSimulation_RemoveAllExplicitColliderMappings::VDComponent' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.RemoveExplicitColliderMapping
// 0x0010 (0x0010 - 0x0000)
struct VDSimulation_RemoveExplicitColliderMapping final 
{
public:
	class UBaseVDComponent*                       VDComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    Collider;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_RemoveExplicitColliderMapping) == 0x000008, "Wrong alignment on VDSimulation_RemoveExplicitColliderMapping");
static_assert(sizeof(VDSimulation_RemoveExplicitColliderMapping) == 0x000010, "Wrong size on VDSimulation_RemoveExplicitColliderMapping");
static_assert(offsetof(VDSimulation_RemoveExplicitColliderMapping, VDComponent) == 0x000000, "Member 'VDSimulation_RemoveExplicitColliderMapping::VDComponent' has a wrong offset!");
static_assert(offsetof(VDSimulation_RemoveExplicitColliderMapping, Collider) == 0x000008, "Member 'VDSimulation_RemoveExplicitColliderMapping::Collider' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.SetConstrainPlaneNormal
// 0x000C (0x000C - 0x0000)
struct VDSimulation_SetConstrainPlaneNormal final 
{
public:
	struct FVector                                Normal;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_SetConstrainPlaneNormal) == 0x000004, "Wrong alignment on VDSimulation_SetConstrainPlaneNormal");
static_assert(sizeof(VDSimulation_SetConstrainPlaneNormal) == 0x00000C, "Wrong size on VDSimulation_SetConstrainPlaneNormal");
static_assert(offsetof(VDSimulation_SetConstrainPlaneNormal, Normal) == 0x000000, "Member 'VDSimulation_SetConstrainPlaneNormal::Normal' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.SetConstrainPlaneOrigin
// 0x000C (0x000C - 0x0000)
struct VDSimulation_SetConstrainPlaneOrigin final 
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_SetConstrainPlaneOrigin) == 0x000004, "Wrong alignment on VDSimulation_SetConstrainPlaneOrigin");
static_assert(sizeof(VDSimulation_SetConstrainPlaneOrigin) == 0x00000C, "Wrong size on VDSimulation_SetConstrainPlaneOrigin");
static_assert(offsetof(VDSimulation_SetConstrainPlaneOrigin, Origin) == 0x000000, "Member 'VDSimulation_SetConstrainPlaneOrigin::Origin' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.SetConstrainSimulationTo2DPlane
// 0x0001 (0x0001 - 0x0000)
struct VDSimulation_SetConstrainSimulationTo2DPlane final 
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_SetConstrainSimulationTo2DPlane) == 0x000001, "Wrong alignment on VDSimulation_SetConstrainSimulationTo2DPlane");
static_assert(sizeof(VDSimulation_SetConstrainSimulationTo2DPlane) == 0x000001, "Wrong size on VDSimulation_SetConstrainSimulationTo2DPlane");
static_assert(offsetof(VDSimulation_SetConstrainSimulationTo2DPlane, IsEnabled) == 0x000000, "Member 'VDSimulation_SetConstrainSimulationTo2DPlane::IsEnabled' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.SetConstraintIterationCount
// 0x0004 (0x0004 - 0x0000)
struct VDSimulation_SetConstraintIterationCount final 
{
public:
	int32                                         ConstraintIterationCount;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_SetConstraintIterationCount) == 0x000004, "Wrong alignment on VDSimulation_SetConstraintIterationCount");
static_assert(sizeof(VDSimulation_SetConstraintIterationCount) == 0x000004, "Wrong size on VDSimulation_SetConstraintIterationCount");
static_assert(offsetof(VDSimulation_SetConstraintIterationCount, ConstraintIterationCount) == 0x000000, "Member 'VDSimulation_SetConstraintIterationCount::ConstraintIterationCount' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.SetFrameRate
// 0x0004 (0x0004 - 0x0000)
struct VDSimulation_SetFrameRate final 
{
public:
	int32                                         FrameRate;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_SetFrameRate) == 0x000004, "Wrong alignment on VDSimulation_SetFrameRate");
static_assert(sizeof(VDSimulation_SetFrameRate) == 0x000004, "Wrong size on VDSimulation_SetFrameRate");
static_assert(offsetof(VDSimulation_SetFrameRate, FrameRate) == 0x000000, "Member 'VDSimulation_SetFrameRate::FrameRate' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.SetIsExplicitRigidBodyCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct VDSimulation_SetIsExplicitRigidBodyCollisionEnabled final 
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_SetIsExplicitRigidBodyCollisionEnabled) == 0x000001, "Wrong alignment on VDSimulation_SetIsExplicitRigidBodyCollisionEnabled");
static_assert(sizeof(VDSimulation_SetIsExplicitRigidBodyCollisionEnabled) == 0x000001, "Wrong size on VDSimulation_SetIsExplicitRigidBodyCollisionEnabled");
static_assert(offsetof(VDSimulation_SetIsExplicitRigidBodyCollisionEnabled, IsEnabled) == 0x000000, "Member 'VDSimulation_SetIsExplicitRigidBodyCollisionEnabled::IsEnabled' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.SetPerformExtraCollisionResolutionLoop
// 0x0001 (0x0001 - 0x0000)
struct VDSimulation_SetPerformExtraCollisionResolutionLoop final 
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_SetPerformExtraCollisionResolutionLoop) == 0x000001, "Wrong alignment on VDSimulation_SetPerformExtraCollisionResolutionLoop");
static_assert(sizeof(VDSimulation_SetPerformExtraCollisionResolutionLoop) == 0x000001, "Wrong size on VDSimulation_SetPerformExtraCollisionResolutionLoop");
static_assert(offsetof(VDSimulation_SetPerformExtraCollisionResolutionLoop, IsEnabled) == 0x000000, "Member 'VDSimulation_SetPerformExtraCollisionResolutionLoop::IsEnabled' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.SetPerFrameCollisionCacheEnable
// 0x0001 (0x0001 - 0x0000)
struct VDSimulation_SetPerFrameCollisionCacheEnable final 
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_SetPerFrameCollisionCacheEnable) == 0x000001, "Wrong alignment on VDSimulation_SetPerFrameCollisionCacheEnable");
static_assert(sizeof(VDSimulation_SetPerFrameCollisionCacheEnable) == 0x000001, "Wrong size on VDSimulation_SetPerFrameCollisionCacheEnable");
static_assert(offsetof(VDSimulation_SetPerFrameCollisionCacheEnable, IsEnabled) == 0x000000, "Member 'VDSimulation_SetPerFrameCollisionCacheEnable::IsEnabled' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.SetPhysXSceneCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct VDSimulation_SetPhysXSceneCollisionEnabled final 
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_SetPhysXSceneCollisionEnabled) == 0x000001, "Wrong alignment on VDSimulation_SetPhysXSceneCollisionEnabled");
static_assert(sizeof(VDSimulation_SetPhysXSceneCollisionEnabled) == 0x000001, "Wrong size on VDSimulation_SetPhysXSceneCollisionEnabled");
static_assert(offsetof(VDSimulation_SetPhysXSceneCollisionEnabled, IsEnabled) == 0x000000, "Member 'VDSimulation_SetPhysXSceneCollisionEnabled::IsEnabled' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.SetSelfCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct VDSimulation_SetSelfCollisionEnabled final 
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_SetSelfCollisionEnabled) == 0x000001, "Wrong alignment on VDSimulation_SetSelfCollisionEnabled");
static_assert(sizeof(VDSimulation_SetSelfCollisionEnabled) == 0x000001, "Wrong size on VDSimulation_SetSelfCollisionEnabled");
static_assert(offsetof(VDSimulation_SetSelfCollisionEnabled, IsEnabled) == 0x000000, "Member 'VDSimulation_SetSelfCollisionEnabled::IsEnabled' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.SetSubstepCount
// 0x0004 (0x0004 - 0x0000)
struct VDSimulation_SetSubstepCount final 
{
public:
	int32                                         SubstepCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_SetSubstepCount) == 0x000004, "Wrong alignment on VDSimulation_SetSubstepCount");
static_assert(sizeof(VDSimulation_SetSubstepCount) == 0x000004, "Wrong size on VDSimulation_SetSubstepCount");
static_assert(offsetof(VDSimulation_SetSubstepCount, SubstepCount) == 0x000000, "Member 'VDSimulation_SetSubstepCount::SubstepCount' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.GetDirectionalWindParameters
// 0x0020 (0x0020 - 0x0000)
struct VDSimulation_GetDirectionalWindParameters final 
{
public:
	class UBaseVDComponent*                       VDComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutDirection;                                      // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutSpeed;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutGust;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1778[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDSimulation_GetDirectionalWindParameters) == 0x000008, "Wrong alignment on VDSimulation_GetDirectionalWindParameters");
static_assert(sizeof(VDSimulation_GetDirectionalWindParameters) == 0x000020, "Wrong size on VDSimulation_GetDirectionalWindParameters");
static_assert(offsetof(VDSimulation_GetDirectionalWindParameters, VDComponent) == 0x000000, "Member 'VDSimulation_GetDirectionalWindParameters::VDComponent' has a wrong offset!");
static_assert(offsetof(VDSimulation_GetDirectionalWindParameters, OutDirection) == 0x000008, "Member 'VDSimulation_GetDirectionalWindParameters::OutDirection' has a wrong offset!");
static_assert(offsetof(VDSimulation_GetDirectionalWindParameters, OutSpeed) == 0x000014, "Member 'VDSimulation_GetDirectionalWindParameters::OutSpeed' has a wrong offset!");
static_assert(offsetof(VDSimulation_GetDirectionalWindParameters, OutGust) == 0x000018, "Member 'VDSimulation_GetDirectionalWindParameters::OutGust' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.GetIsExplicitRigidBodyCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct VDSimulation_GetIsExplicitRigidBodyCollisionEnabled final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_GetIsExplicitRigidBodyCollisionEnabled) == 0x000001, "Wrong alignment on VDSimulation_GetIsExplicitRigidBodyCollisionEnabled");
static_assert(sizeof(VDSimulation_GetIsExplicitRigidBodyCollisionEnabled) == 0x000001, "Wrong size on VDSimulation_GetIsExplicitRigidBodyCollisionEnabled");
static_assert(offsetof(VDSimulation_GetIsExplicitRigidBodyCollisionEnabled, ReturnValue) == 0x000000, "Member 'VDSimulation_GetIsExplicitRigidBodyCollisionEnabled::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulation.GetIsRunningOnWorkerThread
// 0x0001 (0x0001 - 0x0000)
struct VDSimulation_GetIsRunningOnWorkerThread final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulation_GetIsRunningOnWorkerThread) == 0x000001, "Wrong alignment on VDSimulation_GetIsRunningOnWorkerThread");
static_assert(sizeof(VDSimulation_GetIsRunningOnWorkerThread) == 0x000001, "Wrong size on VDSimulation_GetIsRunningOnWorkerThread");
static_assert(offsetof(VDSimulation_GetIsRunningOnWorkerThread, ReturnValue) == 0x000000, "Member 'VDSimulation_GetIsRunningOnWorkerThread::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDSimulationSettingsActor.GetSettings
// 0x0044 (0x0044 - 0x0000)
struct VDSimulationSettingsActor_GetSettings final 
{
public:
	struct FVDSettings                            ReturnValue;                                       // 0x0000(0x0044)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDSimulationSettingsActor_GetSettings) == 0x000004, "Wrong alignment on VDSimulationSettingsActor_GetSettings");
static_assert(sizeof(VDSimulationSettingsActor_GetSettings) == 0x000044, "Wrong size on VDSimulationSettingsActor_GetSettings");
static_assert(offsetof(VDSimulationSettingsActor_GetSettings, ReturnValue) == 0x000000, "Member 'VDSimulationSettingsActor_GetSettings::ReturnValue' has a wrong offset!");

// Function VICODynamicsPlugin.VDWindDirectionalSourceComponent.SetRadius
// 0x0004 (0x0004 - 0x0000)
struct VDWindDirectionalSourceComponent_SetRadius final 
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDWindDirectionalSourceComponent_SetRadius) == 0x000004, "Wrong alignment on VDWindDirectionalSourceComponent_SetRadius");
static_assert(sizeof(VDWindDirectionalSourceComponent_SetRadius) == 0x000004, "Wrong size on VDWindDirectionalSourceComponent_SetRadius");
static_assert(offsetof(VDWindDirectionalSourceComponent_SetRadius, InRadius) == 0x000000, "Member 'VDWindDirectionalSourceComponent_SetRadius::InRadius' has a wrong offset!");

// Function VICODynamicsPlugin.VDWindDirectionalSourceComponent.GetCurrentGust
// 0x0004 (0x0004 - 0x0000)
struct VDWindDirectionalSourceComponent_GetCurrentGust final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDWindDirectionalSourceComponent_GetCurrentGust) == 0x000004, "Wrong alignment on VDWindDirectionalSourceComponent_GetCurrentGust");
static_assert(sizeof(VDWindDirectionalSourceComponent_GetCurrentGust) == 0x000004, "Wrong size on VDWindDirectionalSourceComponent_GetCurrentGust");
static_assert(offsetof(VDWindDirectionalSourceComponent_GetCurrentGust, ReturnValue) == 0x000000, "Member 'VDWindDirectionalSourceComponent_GetCurrentGust::ReturnValue' has a wrong offset!");

}

