#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RadialSelectionBase

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_RadialSelectionBase.W_RadialSelectionBase_C.ExecuteUbergraph_W_RadialSelectionBase
// 0x0020 (0x0020 - 0x0000)
struct W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4472[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABasePlayer_C*                          K2Node_DynamicCast_AsBase_Player;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase) == 0x000008, "Wrong alignment on W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase");
static_assert(sizeof(W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase) == 0x000020, "Wrong size on W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase");
static_assert(offsetof(W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase, EntryPoint) == 0x000000, "Member 'W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000008, "Member 'W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase, K2Node_DynamicCast_AsBase_Player) == 0x000010, "Member 'W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase::K2Node_DynamicCast_AsBase_Player' has a wrong offset!");
static_assert(offsetof(W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase, K2Node_Event_IsDesignTime) == 0x000019, "Member 'W_RadialSelectionBase_C_ExecuteUbergraph_W_RadialSelectionBase::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function W_RadialSelectionBase.W_RadialSelectionBase_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_RadialSelectionBase_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RadialSelectionBase_C_PreConstruct) == 0x000001, "Wrong alignment on W_RadialSelectionBase_C_PreConstruct");
static_assert(sizeof(W_RadialSelectionBase_C_PreConstruct) == 0x000001, "Wrong size on W_RadialSelectionBase_C_PreConstruct");
static_assert(offsetof(W_RadialSelectionBase_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_RadialSelectionBase_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_RadialSelectionBase.W_RadialSelectionBase_C.OnSelected
// 0x0001 (0x0001 - 0x0000)
struct W_RadialSelectionBase_C_OnSelected final 
{
public:
	bool                                          Play_Animation;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RadialSelectionBase_C_OnSelected) == 0x000001, "Wrong alignment on W_RadialSelectionBase_C_OnSelected");
static_assert(sizeof(W_RadialSelectionBase_C_OnSelected) == 0x000001, "Wrong size on W_RadialSelectionBase_C_OnSelected");
static_assert(offsetof(W_RadialSelectionBase_C_OnSelected, Play_Animation) == 0x000000, "Member 'W_RadialSelectionBase_C_OnSelected::Play_Animation' has a wrong offset!");

// Function W_RadialSelectionBase.W_RadialSelectionBase_C.OnDeselected
// 0x0001 (0x0001 - 0x0000)
struct W_RadialSelectionBase_C_OnDeselected final 
{
public:
	bool                                          Play_Animation;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RadialSelectionBase_C_OnDeselected) == 0x000001, "Wrong alignment on W_RadialSelectionBase_C_OnDeselected");
static_assert(sizeof(W_RadialSelectionBase_C_OnDeselected) == 0x000001, "Wrong size on W_RadialSelectionBase_C_OnDeselected");
static_assert(offsetof(W_RadialSelectionBase_C_OnDeselected, Play_Animation) == 0x000000, "Member 'W_RadialSelectionBase_C_OnDeselected::Play_Animation' has a wrong offset!");

// Function W_RadialSelectionBase.W_RadialSelectionBase_C.Next
// 0x0001 (0x0001 - 0x0000)
struct W_RadialSelectionBase_C_Next final 
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RadialSelectionBase_C_Next) == 0x000001, "Wrong alignment on W_RadialSelectionBase_C_Next");
static_assert(sizeof(W_RadialSelectionBase_C_Next) == 0x000001, "Wrong size on W_RadialSelectionBase_C_Next");
static_assert(offsetof(W_RadialSelectionBase_C_Next, bSuccess) == 0x000000, "Member 'W_RadialSelectionBase_C_Next::bSuccess' has a wrong offset!");

// Function W_RadialSelectionBase.W_RadialSelectionBase_C.Previous
// 0x0002 (0x0002 - 0x0000)
struct W_RadialSelectionBase_C_Previous final 
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSucceeded;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RadialSelectionBase_C_Previous) == 0x000001, "Wrong alignment on W_RadialSelectionBase_C_Previous");
static_assert(sizeof(W_RadialSelectionBase_C_Previous) == 0x000002, "Wrong size on W_RadialSelectionBase_C_Previous");
static_assert(offsetof(W_RadialSelectionBase_C_Previous, bSuccess) == 0x000000, "Member 'W_RadialSelectionBase_C_Previous::bSuccess' has a wrong offset!");
static_assert(offsetof(W_RadialSelectionBase_C_Previous, bSucceeded) == 0x000001, "Member 'W_RadialSelectionBase_C_Previous::bSucceeded' has a wrong offset!");

// Function W_RadialSelectionBase.W_RadialSelectionBase_C.Select
// 0x0004 (0x0004 - 0x0000)
struct W_RadialSelectionBase_C_Select final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialSelectionBase_C_Select) == 0x000004, "Wrong alignment on W_RadialSelectionBase_C_Select");
static_assert(sizeof(W_RadialSelectionBase_C_Select) == 0x000004, "Wrong size on W_RadialSelectionBase_C_Select");
static_assert(offsetof(W_RadialSelectionBase_C_Select, Param_Index) == 0x000000, "Member 'W_RadialSelectionBase_C_Select::Param_Index' has a wrong offset!");

// Function W_RadialSelectionBase.W_RadialSelectionBase_C.UpdateIcon
// 0x0090 (0x0090 - 0x0000)
struct W_RadialSelectionBase_C_UpdateIcon final 
{
public:
	int32                                         SelectionIndex;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4473[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            InBrush;                                           // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_RadialSelectionBase_C_UpdateIcon) == 0x000008, "Wrong alignment on W_RadialSelectionBase_C_UpdateIcon");
static_assert(sizeof(W_RadialSelectionBase_C_UpdateIcon) == 0x000090, "Wrong size on W_RadialSelectionBase_C_UpdateIcon");
static_assert(offsetof(W_RadialSelectionBase_C_UpdateIcon, SelectionIndex) == 0x000000, "Member 'W_RadialSelectionBase_C_UpdateIcon::SelectionIndex' has a wrong offset!");
static_assert(offsetof(W_RadialSelectionBase_C_UpdateIcon, InBrush) == 0x000008, "Member 'W_RadialSelectionBase_C_UpdateIcon::InBrush' has a wrong offset!");

}

