#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Memorial

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_Memorial.W_Memorial_C.ExecuteUbergraph_W_Memorial
// 0x0040 (0x0040 - 0x0000)
struct W_Memorial_C_ExecuteUbergraph_W_Memorial final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14EA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetEffectMaterial_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Delay_1;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Delay;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsGamepad;                            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14EB[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PageName;                             // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BackPage_Handled;                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14EC[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_ComponentBoundEvent_ButtonID;               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Memorial_C_ExecuteUbergraph_W_Memorial) == 0x000008, "Wrong alignment on W_Memorial_C_ExecuteUbergraph_W_Memorial");
static_assert(sizeof(W_Memorial_C_ExecuteUbergraph_W_Memorial) == 0x000040, "Wrong size on W_Memorial_C_ExecuteUbergraph_W_Memorial");
static_assert(offsetof(W_Memorial_C_ExecuteUbergraph_W_Memorial, EntryPoint) == 0x000000, "Member 'W_Memorial_C_ExecuteUbergraph_W_Memorial::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_ExecuteUbergraph_W_Memorial, CallFunc_GetEffectMaterial_ReturnValue) == 0x000008, "Member 'W_Memorial_C_ExecuteUbergraph_W_Memorial::CallFunc_GetEffectMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_ExecuteUbergraph_W_Memorial, K2Node_Event_Delay_1) == 0x000010, "Member 'W_Memorial_C_ExecuteUbergraph_W_Memorial::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_ExecuteUbergraph_W_Memorial, K2Node_Event_Delay) == 0x000014, "Member 'W_Memorial_C_ExecuteUbergraph_W_Memorial::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_ExecuteUbergraph_W_Memorial, K2Node_Event_Collapse) == 0x000018, "Member 'W_Memorial_C_ExecuteUbergraph_W_Memorial::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_ExecuteUbergraph_W_Memorial, K2Node_Event_IsGamepad) == 0x000019, "Member 'W_Memorial_C_ExecuteUbergraph_W_Memorial::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_ExecuteUbergraph_W_Memorial, K2Node_Event_PageName) == 0x00001C, "Member 'W_Memorial_C_ExecuteUbergraph_W_Memorial::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_ExecuteUbergraph_W_Memorial, CallFunc_BackPage_Handled) == 0x000024, "Member 'W_Memorial_C_ExecuteUbergraph_W_Memorial::CallFunc_BackPage_Handled' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_ExecuteUbergraph_W_Memorial, K2Node_ComponentBoundEvent_ButtonID) == 0x000028, "Member 'W_Memorial_C_ExecuteUbergraph_W_Memorial::K2Node_ComponentBoundEvent_ButtonID' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_ExecuteUbergraph_W_Memorial, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000038, "Member 'W_Memorial_C_ExecuteUbergraph_W_Memorial::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

// Function W_Memorial.W_Memorial_C.BndEvt__W_Memorial_W_PageHeader_K2Node_ComponentBoundEvent_2_OnFooterButtonClicked__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct W_Memorial_C_BndEvt__W_Memorial_W_PageHeader_K2Node_ComponentBoundEvent_2_OnFooterButtonClicked__DelegateSignature final 
{
public:
	class FString                                 ButtonID;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Memorial_C_BndEvt__W_Memorial_W_PageHeader_K2Node_ComponentBoundEvent_2_OnFooterButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_Memorial_C_BndEvt__W_Memorial_W_PageHeader_K2Node_ComponentBoundEvent_2_OnFooterButtonClicked__DelegateSignature");
static_assert(sizeof(W_Memorial_C_BndEvt__W_Memorial_W_PageHeader_K2Node_ComponentBoundEvent_2_OnFooterButtonClicked__DelegateSignature) == 0x000010, "Wrong size on W_Memorial_C_BndEvt__W_Memorial_W_PageHeader_K2Node_ComponentBoundEvent_2_OnFooterButtonClicked__DelegateSignature");
static_assert(offsetof(W_Memorial_C_BndEvt__W_Memorial_W_PageHeader_K2Node_ComponentBoundEvent_2_OnFooterButtonClicked__DelegateSignature, ButtonID) == 0x000000, "Member 'W_Memorial_C_BndEvt__W_Memorial_W_PageHeader_K2Node_ComponentBoundEvent_2_OnFooterButtonClicked__DelegateSignature::ButtonID' has a wrong offset!");

// Function W_Memorial.W_Memorial_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_Memorial_C_ChangePage final 
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Memorial_C_ChangePage) == 0x000004, "Wrong alignment on W_Memorial_C_ChangePage");
static_assert(sizeof(W_Memorial_C_ChangePage) == 0x000008, "Wrong size on W_Memorial_C_ChangePage");
static_assert(offsetof(W_Memorial_C_ChangePage, PageName) == 0x000000, "Member 'W_Memorial_C_ChangePage::PageName' has a wrong offset!");

// Function W_Memorial.W_Memorial_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_Memorial_C_SetInputMode final 
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Memorial_C_SetInputMode) == 0x000001, "Wrong alignment on W_Memorial_C_SetInputMode");
static_assert(sizeof(W_Memorial_C_SetInputMode) == 0x000001, "Wrong size on W_Memorial_C_SetInputMode");
static_assert(offsetof(W_Memorial_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_Memorial_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_Memorial.W_Memorial_C.Hide
// 0x0008 (0x0008 - 0x0000)
struct W_Memorial_C_Hide final 
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Memorial_C_Hide) == 0x000004, "Wrong alignment on W_Memorial_C_Hide");
static_assert(sizeof(W_Memorial_C_Hide) == 0x000008, "Wrong size on W_Memorial_C_Hide");
static_assert(offsetof(W_Memorial_C_Hide, Delay) == 0x000000, "Member 'W_Memorial_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_Hide, Collapse) == 0x000004, "Member 'W_Memorial_C_Hide::Collapse' has a wrong offset!");

// Function W_Memorial.W_Memorial_C.Reveal
// 0x0004 (0x0004 - 0x0000)
struct W_Memorial_C_Reveal final 
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Memorial_C_Reveal) == 0x000004, "Wrong alignment on W_Memorial_C_Reveal");
static_assert(sizeof(W_Memorial_C_Reveal) == 0x000004, "Wrong size on W_Memorial_C_Reveal");
static_assert(offsetof(W_Memorial_C_Reveal, Delay) == 0x000000, "Member 'W_Memorial_C_Reveal::Delay' has a wrong offset!");

// Function W_Memorial.W_Memorial_C.BP_OnHandleBackAction
// 0x0002 (0x0002 - 0x0000)
struct W_Memorial_C_BP_OnHandleBackAction final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BackPage_Handled;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Memorial_C_BP_OnHandleBackAction) == 0x000001, "Wrong alignment on W_Memorial_C_BP_OnHandleBackAction");
static_assert(sizeof(W_Memorial_C_BP_OnHandleBackAction) == 0x000002, "Wrong size on W_Memorial_C_BP_OnHandleBackAction");
static_assert(offsetof(W_Memorial_C_BP_OnHandleBackAction, ReturnValue) == 0x000000, "Member 'W_Memorial_C_BP_OnHandleBackAction::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_BP_OnHandleBackAction, CallFunc_BackPage_Handled) == 0x000001, "Member 'W_Memorial_C_BP_OnHandleBackAction::CallFunc_BackPage_Handled' has a wrong offset!");

// Function W_Memorial.W_Memorial_C.PopulateMemorial
// 0x00A0 (0x00A0 - 0x0000)
struct W_Memorial_C_PopulateMemorial final 
{
public:
	float                                         RevealDelay;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLastCard;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14ED[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_MemorialCard_C*                      NewCard;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URosterCharacter*                       NewCharacter;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_MemorialCard_C*                      CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetSpacerVisibility_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14EE[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class URosterCharacter*>               CallFunc_GetMemorialCharacters_ReturnValue;        // 0x0048(0x0010)(ReferenceParm)
	class URosterCharacter*                       CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14EF[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IReadyOrNotUI_C>       CallFunc_Reveal_self_CastInput;                    // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class URosterCharacter*>               CallFunc_GetMemorialCharacters_ReturnValue_1;      // 0x0088(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Memorial_C_PopulateMemorial) == 0x000008, "Wrong alignment on W_Memorial_C_PopulateMemorial");
static_assert(sizeof(W_Memorial_C_PopulateMemorial) == 0x0000A0, "Wrong size on W_Memorial_C_PopulateMemorial");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, RevealDelay) == 0x000000, "Member 'W_Memorial_C_PopulateMemorial::RevealDelay' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, bLastCard) == 0x000004, "Member 'W_Memorial_C_PopulateMemorial::bLastCard' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, NewCard) == 0x000008, "Member 'W_Memorial_C_PopulateMemorial::NewCard' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, NewCharacter) == 0x000010, "Member 'W_Memorial_C_PopulateMemorial::NewCharacter' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_Create_ReturnValue) == 0x000018, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'W_Memorial_C_PopulateMemorial::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, Temp_int_Array_Index_Variable) == 0x000028, "Member 'W_Memorial_C_PopulateMemorial::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_GetSpacerVisibility_ReturnValue) == 0x00002C, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_GetSpacerVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_SelectFloat_ReturnValue) == 0x000034, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, K2Node_MakeStruct_Margin) == 0x000038, "Member 'W_Memorial_C_PopulateMemorial::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_GetMemorialCharacters_ReturnValue) == 0x000048, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_GetMemorialCharacters_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_Array_Get_Item) == 0x000058, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_Array_LastIndex_ReturnValue) == 0x000064, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000069, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000070, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_Reveal_self_CastInput) == 0x000078, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_Reveal_self_CastInput' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_GetMemorialCharacters_ReturnValue_1) == 0x000088, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_GetMemorialCharacters_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_PopulateMemorial, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000098, "Member 'W_Memorial_C_PopulateMemorial::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function W_Memorial.W_Memorial_C.GetSpacerVisibility
// 0x002C (0x002C - 0x0000)
struct W_Memorial_C_GetSpacerVisibility final 
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Memorial_C_GetSpacerVisibility) == 0x000004, "Wrong alignment on W_Memorial_C_GetSpacerVisibility");
static_assert(sizeof(W_Memorial_C_GetSpacerVisibility) == 0x00002C, "Wrong size on W_Memorial_C_GetSpacerVisibility");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, ReturnValue) == 0x000000, "Member 'W_Memorial_C_GetSpacerVisibility::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, Temp_bool_Variable) == 0x000001, "Member 'W_Memorial_C_GetSpacerVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, Temp_byte_Variable) == 0x000002, "Member 'W_Memorial_C_GetSpacerVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'W_Memorial_C_GetSpacerVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, CallFunc_GetViewportSize_ReturnValue) == 0x000004, "Member 'W_Memorial_C_GetSpacerVisibility::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, CallFunc_BreakVector2D_X) == 0x00000C, "Member 'W_Memorial_C_GetSpacerVisibility::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'W_Memorial_C_GetSpacerVisibility::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'W_Memorial_C_GetSpacerVisibility::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, CallFunc_GetDesiredSize_ReturnValue) == 0x000018, "Member 'W_Memorial_C_GetSpacerVisibility::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, CallFunc_BreakVector2D_X_1) == 0x000020, "Member 'W_Memorial_C_GetSpacerVisibility::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, CallFunc_BreakVector2D_Y_1) == 0x000024, "Member 'W_Memorial_C_GetSpacerVisibility::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000028, "Member 'W_Memorial_C_GetSpacerVisibility::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Memorial_C_GetSpacerVisibility, K2Node_Select_Default) == 0x000029, "Member 'W_Memorial_C_GetSpacerVisibility::K2Node_Select_Default' has a wrong offset!");

// Function W_Memorial.W_Memorial_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_Memorial_C_BackPage final 
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Memorial_C_BackPage) == 0x000001, "Wrong alignment on W_Memorial_C_BackPage");
static_assert(sizeof(W_Memorial_C_BackPage) == 0x000001, "Wrong size on W_Memorial_C_BackPage");
static_assert(offsetof(W_Memorial_C_BackPage, Handled) == 0x000000, "Member 'W_Memorial_C_BackPage::Handled' has a wrong offset!");

// Function W_Memorial.W_Memorial_C.GetFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct W_Memorial_C_GetFocusTarget final 
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Memorial_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_Memorial_C_GetFocusTarget");
static_assert(sizeof(W_Memorial_C_GetFocusTarget) == 0x000008, "Wrong size on W_Memorial_C_GetFocusTarget");
static_assert(offsetof(W_Memorial_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_Memorial_C_GetFocusTarget::Focus' has a wrong offset!");

}

