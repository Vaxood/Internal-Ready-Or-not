#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LiveLinkMvnPlugin

#include "Basic.hpp"

#include "LiveLinkMvnPlugin_structs.hpp"


namespace SDK::Params
{

// Function LiveLinkMvnPlugin.LiveLinkMvnRetargetAsset.GetCustomRemappedBoneName
// 0x000C (0x000C - 0x0000)
struct LiveLinkMvnRetargetAsset_GetCustomRemappedBoneName final 
{
public:
	EXsensMapping                                 Bone;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiveLinkMvnRetargetAsset_GetCustomRemappedBoneName) == 0x000004, "Wrong alignment on LiveLinkMvnRetargetAsset_GetCustomRemappedBoneName");
static_assert(sizeof(LiveLinkMvnRetargetAsset_GetCustomRemappedBoneName) == 0x00000C, "Wrong size on LiveLinkMvnRetargetAsset_GetCustomRemappedBoneName");
static_assert(offsetof(LiveLinkMvnRetargetAsset_GetCustomRemappedBoneName, Bone) == 0x000000, "Member 'LiveLinkMvnRetargetAsset_GetCustomRemappedBoneName::Bone' has a wrong offset!");
static_assert(offsetof(LiveLinkMvnRetargetAsset_GetCustomRemappedBoneName, ReturnValue) == 0x000004, "Member 'LiveLinkMvnRetargetAsset_GetCustomRemappedBoneName::ReturnValue' has a wrong offset!");

// Function LiveLinkMvnPlugin.LiveLinkMvnRetargetAsset.GetRemappedBoneNameByConvention
// 0x000C (0x000C - 0x0000)
struct LiveLinkMvnRetargetAsset_GetRemappedBoneNameByConvention final 
{
public:
	EXsensMapping                                 Bone;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXsensRetargetNamingConvention                Convention;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D1[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiveLinkMvnRetargetAsset_GetRemappedBoneNameByConvention) == 0x000004, "Wrong alignment on LiveLinkMvnRetargetAsset_GetRemappedBoneNameByConvention");
static_assert(sizeof(LiveLinkMvnRetargetAsset_GetRemappedBoneNameByConvention) == 0x00000C, "Wrong size on LiveLinkMvnRetargetAsset_GetRemappedBoneNameByConvention");
static_assert(offsetof(LiveLinkMvnRetargetAsset_GetRemappedBoneNameByConvention, Bone) == 0x000000, "Member 'LiveLinkMvnRetargetAsset_GetRemappedBoneNameByConvention::Bone' has a wrong offset!");
static_assert(offsetof(LiveLinkMvnRetargetAsset_GetRemappedBoneNameByConvention, Convention) == 0x000001, "Member 'LiveLinkMvnRetargetAsset_GetRemappedBoneNameByConvention::Convention' has a wrong offset!");
static_assert(offsetof(LiveLinkMvnRetargetAsset_GetRemappedBoneNameByConvention, ReturnValue) == 0x000004, "Member 'LiveLinkMvnRetargetAsset_GetRemappedBoneNameByConvention::ReturnValue' has a wrong offset!");

// Function LiveLinkMvnPlugin.MvnRemoteControlManager.StartRecording
// 0x0004 (0x0004 - 0x0000)
struct MvnRemoteControlManager_StartRecording final 
{
public:
	float                                         _fTimeOffsetInSeconds;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MvnRemoteControlManager_StartRecording) == 0x000004, "Wrong alignment on MvnRemoteControlManager_StartRecording");
static_assert(sizeof(MvnRemoteControlManager_StartRecording) == 0x000004, "Wrong size on MvnRemoteControlManager_StartRecording");
static_assert(offsetof(MvnRemoteControlManager_StartRecording, _fTimeOffsetInSeconds) == 0x000000, "Member 'MvnRemoteControlManager_StartRecording::_fTimeOffsetInSeconds' has a wrong offset!");

// Function LiveLinkMvnPlugin.MvnRemoteControlManager.StopRecording
// 0x0004 (0x0004 - 0x0000)
struct MvnRemoteControlManager_StopRecording final 
{
public:
	float                                         _fTimeOffsetInSeconds;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MvnRemoteControlManager_StopRecording) == 0x000004, "Wrong alignment on MvnRemoteControlManager_StopRecording");
static_assert(sizeof(MvnRemoteControlManager_StopRecording) == 0x000004, "Wrong size on MvnRemoteControlManager_StopRecording");
static_assert(offsetof(MvnRemoteControlManager_StopRecording, _fTimeOffsetInSeconds) == 0x000000, "Member 'MvnRemoteControlManager_StopRecording::_fTimeOffsetInSeconds' has a wrong offset!");

}

