#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_LoadoutSlot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "ST_Style_Text_structs.hpp"
#include "LoadoutCategory_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_LoadoutSlot.W_LoadoutSlot_C
// 0x0E48 (0x1270 - 0x0428)
class UW_LoadoutSlot_C final  : public ULoadoutSlotWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0428(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimReveal_Expand;                                 // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimCollapse;                                      // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimReveal;                                        // 0x0440(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimHideAugment;                                   // 0x0448(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimRevealAugment;                                 // 0x0450(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                AugmentContainer;                                  // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_1;                                          // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_DivBot;                                        // 0x0468(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_ItemImage;                                     // 0x0470(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Lbl_Equipped;                                      // 0x0478(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Name_W_LoadoutSlot_C;                              // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SB_Equipped;                                       // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              SB_Icon;                                           // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              Scale_Name;                                        // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_0;                                         // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            SlotButton;                                        // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                SlotContents;                                      // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_Augment;                                       // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_Category;                                      // 0x04C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_Count;                                         // 0x04C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_Name;                                          // 0x04D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          StartCollapsed;                                    // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39D8[0x7];                                     // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemName;                                          // 0x04E0(0x0018)(Edit, BlueprintVisible)
	class FText                                   Category;                                          // 0x04F8(0x0018)(Edit, BlueprintVisible)
	bool                                          HasAugment;                                        // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39D9[0x7];                                     // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Augment;                                           // 0x0518(0x0018)(Edit, BlueprintVisible)
	bool                                          CompactLayout;                                     // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MinimalLayout;                                     // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39DA[0x6];                                     // 0x0532(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ItemIcon;                                          // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartActive;                                       // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_Active;                                         // 0x0541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39DB[0x6];                                     // 0x0542(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_Style_Text                         NameTextStyle;                                     // 0x0548(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FMargin                                NormalNamePadding;                                 // 0x05E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FButtonStyle                           NormalButtonStyle;                                 // 0x05F8(0x0278)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FST_Style_Text                         NameTextStyle_Active;                              // 0x0870(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FButtonStyle                           ActiveButtonStyle;                                 // 0x0910(0x0278)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnSlotClicked;                                     // 0x0B88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnSlotHovered;                                     // 0x0B98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnSlotUnhovered;                                   // 0x0BA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EItemClass                                    Item_Class;                                        // 0x0BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_39DC[0x7];                                     // 0x0BB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EItemCategory>                         Item_Categories;                                   // 0x0BC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FItemVisualData                        Visuals;                                           // 0x0BD0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTexture2D*                             Icon;                                              // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnSlotDoubleClicked;                               // 0x0C08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct LoadoutCategory::FLoadoutCategory> Gear_Category_Classes;                             // 0x0C18(0x0010)(Edit, BlueprintVisible)
	struct FST_Style_Text                         MinimalNameTextStyle;                              // 0x0C28(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FMargin                                MinimalNamePadding;                                // 0x0CC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FST_Style_Text                         MinimalNameTextStyle_Active;                       // 0x0CD8(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsListItem;                                        // 0x0D78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Equipped;                                          // 0x0D79(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_39DD[0x2];                                     // 0x0D7A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           NormalColor;                                       // 0x0D7C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ActiveColor;                                       // 0x0D8C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EquippedColor;                                     // 0x0D9C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AugmentTextColor;                                  // 0x0DAC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39DE[0x4];                                     // 0x0DBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           EquippedButtonStyle;                               // 0x0DC0(0x0278)(Edit, BlueprintVisible, DisableEditOnInstance)
	EItemType                                     ItemType;                                          // 0x1038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attachment;                                        // 0x1039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_39DF[0x6];                                     // 0x103A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSavedLoadout                          Active_Loadout;                                    // 0x1040(0x0188)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AugmentDisplayed;                                  // 0x11C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39E0[0x7];                                     // 0x11C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CurrentAugment;                                    // 0x11D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         EquippedLabelHeight;                               // 0x11E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewItem;                                           // 0x11EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FirstInitialization;                               // 0x11ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39E1[0x2];                                     // 0x11EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraTag;                                         // 0x11F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 PreviewAnimation;                                  // 0x11F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   AmmoType_0;                                        // 0x1208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmmoMax;                                           // 0x1210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hidden;                                            // 0x1214(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39E2[0x3];                                     // 0x1215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Loadout_C*                           LoadoutWidget;                                     // 0x1218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CustomCategoryText;                                // 0x1220(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class UArmourMaterial*                        ArmourMaterialData_0;                              // 0x1238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAmmunition;                                      // 0x1240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsArmourMaterial;                                  // 0x1241(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPrimary;                                         // 0x1242(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Refreshing;                                        // 0x1243(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39E3[0x4];                                     // 0x1244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AmmoCaliber;                                       // 0x1248(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsCollapsed;                                       // 0x1260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39E4[0x3];                                     // 0x1261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimalHeight;                                     // 0x1264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CompactHeight;                                     // 0x1268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FullHeight;                                        // 0x126C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnSlotClicked__DelegateSignature(class UW_LoadoutSlot_C* TriggeringSlot);
	void OnSlotHovered__DelegateSignature(class UW_LoadoutSlot_C* TriggeringSlot);
	void OnSlotUnhovered__DelegateSignature(class UW_LoadoutSlot_C* TriggeringSlot);
	void OnSlotDoubleClicked__DelegateSignature(class UW_LoadoutSlot_C* TriggeringSlot);
	void ExecuteUbergraph_W_LoadoutSlot(int32 EntryPoint, class UClass* K2Node_CustomEvent_ItemData_1, class UArmourMaterial* K2Node_CustomEvent_ArmourMaterial, bool CallFunc_EqualEqual_ClassClass_ReturnValue, class UW_Button_C* K2Node_ComponentBoundEvent_Button_2, float CallFunc_GetEndTime_ReturnValue, class UArmourMaterial* K2Node_CustomEvent_ArmourMaterial_1, bool K2Node_CustomEvent_Primary, class FName K2Node_CustomEvent_AmmoType, class UClass* K2Node_CustomEvent_Weapon, int32 K2Node_CustomEvent_AmmoCount, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, class FText CallFunc_Format_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue, class UDataTable* CallFunc_GetAmmoLookupDataTable_ReturnValue, const struct FAmmoTypeData& CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_CustomEvent_Primary_1, class FName K2Node_CustomEvent_AmmoType_1, class UClass* K2Node_CustomEvent_Weapon_1, int32 K2Node_CustomEvent_AmmoCount_1, class UClass* K2Node_CustomEvent_ItemData, class UW_Button_C* K2Node_ComponentBoundEvent_Button_1, class UW_Button_C* K2Node_ComponentBoundEvent_Button, const struct FSavedLoadout& K2Node_Event_ActiveLoadout, bool CallFunc_BooleanAND_ReturnValue, class FText K2Node_CustomEvent_AugmentText, const struct FGeometry& K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool K2Node_Event_IsDesignTime, class FName K2Node_Event_OptionNameID, const TMap<EItemCategory, class UClass*>& K2Node_Event_ItemCategory, class UW_Loadout_C* K2Node_Event_LoadoutWidget, bool CallFunc_IsValidClass_ReturnValue, class UUMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, class UW_LoadoutSlot_C* K2Node_Event_CurrentSlot, int32 K2Node_CustomEvent_Count, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_1, class FName K2Node_Event_PageName, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array_1, bool K2Node_Event_IsGamepad, class FText CallFunc_Format_ReturnValue_1, class UObject* K2Node_Event_ListItemObject, bool K2Node_Event_bIsSelected, bool K2Node_Event_bIsExpanded, class UUMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, class UUMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_1, const struct FFocusEvent& K2Node_Event_InFocusEvent_1, bool CallFunc_BooleanAND_ReturnValue_1, const struct FFocusEvent& K2Node_Event_InFocusEvent, class APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_HasUserFocus_ReturnValue, float K2Node_Event_Delay_1, bool K2Node_Event_Collapse, float K2Node_Event_Delay, bool CallFunc_EqualEqual_ClassClass_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue_1, class UUMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue_1);
	void Reveal(float Delay);
	void BP_OnEntryReleased();
	void Hide(float Delay, bool Param_Collapse);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	void BP_OnItemExpansionChanged(bool bIsExpanded);
	void ExpandReveal();
	void BP_OnItemSelectionChanged(bool bIsSelected);
	void OnListItemObjectSet(class UObject* ListItemObject);
	void SetInputMode(bool IsGamepad);
	void ChangePage(class FName PageName);
	void UpdateAmmoCount(int32 Count);
	void UpdateCurrentSlot(class UW_LoadoutSlot_C* CurrentSlot);
	void UpdateCurrentItemMap(const TMap<EItemCategory, class UClass*>& ItemCategory);
	void HeaderSubpageNavigation(class FName OptionNameID);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateAugment(class FText AugmentText);
	void UpdateActiveLoadout(const struct FSavedLoadout& ActiveLoadout);
	void BndEvt__W_LoadoutSlot_SlotButton_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_LoadoutSlot_SlotButton_K2Node_ComponentBoundEvent_2_Hovered__DelegateSignature(class UW_Button_C* Button);
	void ReinitializeItemData(class UClass* Param_ItemData);
	void BndEvt__W_LoadoutSlot_SlotButton_K2Node_ComponentBoundEvent_3_Unhovered__DelegateSignature();
	void ForceClick();
	void ForceDoubleClick();
	void ApplyAugment();
	void InitializeAsSlot();
	void InitializeAmmoData(bool Primary, class FName Param_AmmoType, class UClass* Weapon, int32 AmmoCount);
	void Collapse();
	void BndEvt__W_LoadoutSlot_SlotButton_K2Node_ComponentBoundEvent_0_DoubleClicked__DelegateSignature(class UW_Button_C* Button);
	void InitializeArmourMaterialData(class UArmourMaterial* ArmourMaterial);
	void InitializeItemData(class UClass* Param_ItemData);
	void InitializeAsListItem();
	void ReinitializeArmorMaterialData(class UArmourMaterial* ArmourMaterial);
	void ReinitializeAmmoData(bool Primary, class FName Param_AmmoType, class UClass* Weapon, int32 AmmoCount);
	void SetLoadoutWidget(class UW_Loadout_C* Param_LoadoutWidget);
	void Set_Active_Old(bool Param_IsActive, bool Temp_bool_Variable, bool Temp_bool_Variable_1, bool Temp_bool_Variable_2, const struct FLinearColor& CallFunc_SelectColor_ReturnValue, const struct FLinearColor& CallFunc_SelectColor_ReturnValue_1, bool CallFunc_GetHoverState_ReturnValue, const struct FLinearColor& CallFunc_SelectColor_ReturnValue_2, float CallFunc_SelectFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue_1, const struct FLinearColor& CallFunc_SelectColor_ReturnValue_3, const struct FST_Style_Text& K2Node_Select_Default, const struct FST_Style_Text& K2Node_Select_Default_1, const struct FST_Style_Text& K2Node_Select_Default_2);
	bool GetHoverState();
	void GetIsSuppressed(bool* IsSuppressed, bool Temp_bool_Variable, bool Temp_bool_Variable_1, bool Temp_bool_Variable_2, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue, bool CallFunc_IsValidClass_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_1, bool K2Node_Select_Default, bool K2Node_Select_Default_1);
	void SetLayout(bool Param_MinimalLayout, bool Temp_bool_Variable, bool Temp_bool_Variable_1, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, bool Temp_bool_Variable_2, bool Temp_bool_Variable_3, class UVerticalBoxSlot* CallFunc_SlotAsVerticalBoxSlot_ReturnValue, float K2Node_Select_Default, ESlateVisibility K2Node_Select_Default_1, float K2Node_Select_Default_2, bool CallFunc_BooleanOR_ReturnValue, int32 CallFunc_SelectInt_ReturnValue, const struct FMargin& K2Node_Select_Default_3);
	void RefreshItemInfo(bool Temp_bool_Variable, bool Temp_bool_Variable_1, bool CallFunc_GetIsSuppressed_IsSuppressed, class UClass* K2Node_ClassDynamicCast_AsSWATArmour, bool K2Node_ClassDynamicCast_bSuccess, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, bool CallFunc_EqualEqual_ByteByte_ReturnValue, class FText CallFunc_Format_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, class FText CallFunc_GetItemClassText_Category_Text, class FText CallFunc_GetLoadoutCategoryText_Category_Text, class FText K2Node_Select_Default, class FText K2Node_Select_Default_1);
	void SetEquipped(bool Param_Equipped);
	void GetInvetoryCount(int32 Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, class APlayerController* CallFunc_GetOwningPlayer_ReturnValue, class UWorld* CallFunc_GetWorldBP_ReturnValue, class UItemData* CallFunc_GetItemData_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, const struct FDeviceData& CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_IntInt_ReturnValue, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, bool CallFunc_BooleanAND_ReturnValue, class FText CallFunc_Format_ReturnValue);
	void SetCountText(class FText Text, bool Temp_bool_Variable, bool CallFunc_TextIsEmpty_ReturnValue, ESlateVisibility Temp_byte_Variable, bool CallFunc_Not_PreBool_ReturnValue, ESlateVisibility Temp_byte_Variable_1, ESlateVisibility K2Node_Select_Default);
	void RefreshAmmoInfo(class FText CallFunc_GetAmmoCategoryText_Text, class UClass* K2Node_ClassDynamicCast_AsBase_Magazine_Weapon, bool K2Node_ClassDynamicCast_bSuccess);
	void GetAmmoCategoryText(class UClass* Param_ItemData, class FText* Text, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, class UClass* K2Node_ClassDynamicCast_AsPepperball_Gun, bool K2Node_ClassDynamicCast_bSuccess, class FText CallFunc_Format_ReturnValue, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array_1, class UClass* K2Node_ClassDynamicCast_AsTaser, bool K2Node_ClassDynamicCast_bSuccess_1, class FText CallFunc_Format_ReturnValue_1, class UClass* K2Node_ClassDynamicCast_AsShotgun, bool K2Node_ClassDynamicCast_bSuccess_2, class UClass* K2Node_ClassDynamicCast_AsBase_Magazine_Weapon, bool K2Node_ClassDynamicCast_bSuccess_3, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_1, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array_2, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_2, class FText CallFunc_Format_ReturnValue_2, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array_3, class FText CallFunc_Format_ReturnValue_3);
	void GetLoadoutWidget(class UW_Loadout_C** Param_LoadoutWidget, bool CallFunc_IsValid_ReturnValue, TArray<class UW_Loadout_C*>& CallFunc_GetAllWidgetsOfClass_FoundWidgets, class UW_Loadout_C* CallFunc_Array_Get_Item);
	void RefreshArmourMaterialInfo();
	void ApplyIcon(const class FString& CallFunc_GetDisplayName_ReturnValue, const class FString& CallFunc_AppendMultiple_ReturnValue, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_Blueprint_GetSizeY_ReturnValue, int32 CallFunc_Blueprint_GetSizeX_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
	void SetExclusiveLock(bool CallFunc_IsDLCLocked_ReturnValue);
	void SetCompactLayout(bool Param_CompactLayout);
	void DisableInteraction(bool Disabled);
	void SequenceEvent__ENTRYPOINTW_LoadoutSlot_0();
	void BackPage(bool* Handled);

	void GetItemIcon(TSoftObjectPtr<class UTexture2D>* Image, TSoftObjectPtr<class UTexture2D> OutImage, class UItemData* GameItemData, bool FoundItem, const TArray<struct FWeaponData>& Weapons, bool Temp_bool_True_if_break_was_hit_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable_1, int32 Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue_1, int32 Temp_int_Loop_Counter_Variable_1, int32 CallFunc_Add_IntInt_ReturnValue_1, bool Temp_bool_True_if_break_was_hit_Variable_2, int32 Temp_int_Array_Index_Variable_1, bool CallFunc_Not_PreBool_ReturnValue_2, int32 Temp_int_Loop_Counter_Variable_2, int32 CallFunc_Add_IntInt_ReturnValue_2, int32 Temp_int_Loop_Counter_Variable_3, int32 CallFunc_Add_IntInt_ReturnValue_3, bool Temp_bool_True_if_break_was_hit_Variable_3, int32 Temp_int_Array_Index_Variable_2, bool CallFunc_Not_PreBool_ReturnValue_3, int32 Temp_int_Array_Index_Variable_3, bool K2Node_SwitchEnum_CmpSuccess, int32 Temp_int_Array_Index_Variable_4, int32 Temp_int_Loop_Counter_Variable_4, int32 CallFunc_Add_IntInt_ReturnValue_4, int32 Temp_int_Array_Index_Variable_5, const struct FArmourData& CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable_4, const struct FWeaponData& CallFunc_Array_Get_Item_1, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_Less_IntInt_ReturnValue_1, bool CallFunc_EqualEqual_ClassClass_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_4, const struct FArmourData& CallFunc_Array_Get_Item_2, const struct FDeviceData& CallFunc_Array_Get_Item_3, bool CallFunc_EqualEqual_ClassClass_ReturnValue_2, bool CallFunc_EqualEqual_ClassClass_ReturnValue_3, int32 CallFunc_Array_Length_ReturnValue_2, int32 CallFunc_Array_Length_ReturnValue_3, bool CallFunc_Less_IntInt_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue_1, const struct FDeviceData& CallFunc_Array_Get_Item_4, int32 CallFunc_Array_Length_ReturnValue_4, bool CallFunc_EqualEqual_ClassClass_ReturnValue_4, bool CallFunc_Less_IntInt_ReturnValue_3, bool CallFunc_BooleanAND_ReturnValue_2, int32 Temp_int_Loop_Counter_Variable_5, const struct FWeaponData& CallFunc_Array_Get_Item_5, int32 CallFunc_Array_Length_ReturnValue_5, bool CallFunc_Less_IntInt_ReturnValue_4, bool CallFunc_EqualEqual_ClassClass_ReturnValue_5, bool CallFunc_BooleanAND_ReturnValue_3, bool CallFunc_Less_IntInt_ReturnValue_5, int32 CallFunc_Add_IntInt_ReturnValue_5, bool CallFunc_BooleanAND_ReturnValue_4, bool Temp_bool_True_if_break_was_hit_Variable_5, class APlayerController* CallFunc_GetOwningPlayer_ReturnValue, class UWorld* CallFunc_GetWorldBP_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_5, class UItemData* CallFunc_GetItemData_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_5) const;
	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_LoadoutSlot_C">();
	}
	static class UW_LoadoutSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_LoadoutSlot_C>();
	}
};
static_assert(alignof(UW_LoadoutSlot_C) == 0x000008, "Wrong alignment on UW_LoadoutSlot_C");
static_assert(sizeof(UW_LoadoutSlot_C) == 0x001270, "Wrong size on UW_LoadoutSlot_C");
static_assert(offsetof(UW_LoadoutSlot_C, UberGraphFrame) == 0x000428, "Member 'UW_LoadoutSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AnimReveal_Expand) == 0x000430, "Member 'UW_LoadoutSlot_C::AnimReveal_Expand' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AnimCollapse) == 0x000438, "Member 'UW_LoadoutSlot_C::AnimCollapse' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AnimReveal) == 0x000440, "Member 'UW_LoadoutSlot_C::AnimReveal' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AnimHideAugment) == 0x000448, "Member 'UW_LoadoutSlot_C::AnimHideAugment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AnimRevealAugment) == 0x000450, "Member 'UW_LoadoutSlot_C::AnimRevealAugment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AugmentContainer) == 0x000458, "Member 'UW_LoadoutSlot_C::AugmentContainer' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Border_1) == 0x000460, "Member 'UW_LoadoutSlot_C::Border_1' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Img_DivBot) == 0x000468, "Member 'UW_LoadoutSlot_C::Img_DivBot' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Img_ItemImage) == 0x000470, "Member 'UW_LoadoutSlot_C::Img_ItemImage' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Lbl_Equipped) == 0x000478, "Member 'UW_LoadoutSlot_C::Lbl_Equipped' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Name_W_LoadoutSlot_C) == 0x000480, "Member 'UW_LoadoutSlot_C::Name_W_LoadoutSlot_C' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, SB_Equipped) == 0x000488, "Member 'UW_LoadoutSlot_C::SB_Equipped' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, SB_Icon) == 0x000490, "Member 'UW_LoadoutSlot_C::SB_Icon' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Scale_Name) == 0x000498, "Member 'UW_LoadoutSlot_C::Scale_Name' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, SizeBox_0) == 0x0004A0, "Member 'UW_LoadoutSlot_C::SizeBox_0' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, SlotButton) == 0x0004A8, "Member 'UW_LoadoutSlot_C::SlotButton' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, SlotContents) == 0x0004B0, "Member 'UW_LoadoutSlot_C::SlotContents' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Txt_Augment) == 0x0004B8, "Member 'UW_LoadoutSlot_C::Txt_Augment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Txt_Category) == 0x0004C0, "Member 'UW_LoadoutSlot_C::Txt_Category' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Txt_Count) == 0x0004C8, "Member 'UW_LoadoutSlot_C::Txt_Count' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Txt_Name) == 0x0004D0, "Member 'UW_LoadoutSlot_C::Txt_Name' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, StartCollapsed) == 0x0004D8, "Member 'UW_LoadoutSlot_C::StartCollapsed' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, ItemName) == 0x0004E0, "Member 'UW_LoadoutSlot_C::ItemName' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Category) == 0x0004F8, "Member 'UW_LoadoutSlot_C::Category' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, HasAugment) == 0x000510, "Member 'UW_LoadoutSlot_C::HasAugment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Augment) == 0x000518, "Member 'UW_LoadoutSlot_C::Augment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, CompactLayout) == 0x000530, "Member 'UW_LoadoutSlot_C::CompactLayout' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, MinimalLayout) == 0x000531, "Member 'UW_LoadoutSlot_C::MinimalLayout' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, ItemIcon) == 0x000538, "Member 'UW_LoadoutSlot_C::ItemIcon' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, StartActive) == 0x000540, "Member 'UW_LoadoutSlot_C::StartActive' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Is_Active) == 0x000541, "Member 'UW_LoadoutSlot_C::Is_Active' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, NameTextStyle) == 0x000548, "Member 'UW_LoadoutSlot_C::NameTextStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, NormalNamePadding) == 0x0005E8, "Member 'UW_LoadoutSlot_C::NormalNamePadding' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, NormalButtonStyle) == 0x0005F8, "Member 'UW_LoadoutSlot_C::NormalButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, NameTextStyle_Active) == 0x000870, "Member 'UW_LoadoutSlot_C::NameTextStyle_Active' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, ActiveButtonStyle) == 0x000910, "Member 'UW_LoadoutSlot_C::ActiveButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, OnSlotClicked) == 0x000B88, "Member 'UW_LoadoutSlot_C::OnSlotClicked' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, OnSlotHovered) == 0x000B98, "Member 'UW_LoadoutSlot_C::OnSlotHovered' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, OnSlotUnhovered) == 0x000BA8, "Member 'UW_LoadoutSlot_C::OnSlotUnhovered' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Item_Class) == 0x000BB8, "Member 'UW_LoadoutSlot_C::Item_Class' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Item_Categories) == 0x000BC0, "Member 'UW_LoadoutSlot_C::Item_Categories' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Visuals) == 0x000BD0, "Member 'UW_LoadoutSlot_C::Visuals' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Icon) == 0x000C00, "Member 'UW_LoadoutSlot_C::Icon' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, OnSlotDoubleClicked) == 0x000C08, "Member 'UW_LoadoutSlot_C::OnSlotDoubleClicked' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Gear_Category_Classes) == 0x000C18, "Member 'UW_LoadoutSlot_C::Gear_Category_Classes' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, MinimalNameTextStyle) == 0x000C28, "Member 'UW_LoadoutSlot_C::MinimalNameTextStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, MinimalNamePadding) == 0x000CC8, "Member 'UW_LoadoutSlot_C::MinimalNamePadding' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, MinimalNameTextStyle_Active) == 0x000CD8, "Member 'UW_LoadoutSlot_C::MinimalNameTextStyle_Active' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, IsListItem) == 0x000D78, "Member 'UW_LoadoutSlot_C::IsListItem' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Equipped) == 0x000D79, "Member 'UW_LoadoutSlot_C::Equipped' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, NormalColor) == 0x000D7C, "Member 'UW_LoadoutSlot_C::NormalColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, ActiveColor) == 0x000D8C, "Member 'UW_LoadoutSlot_C::ActiveColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, EquippedColor) == 0x000D9C, "Member 'UW_LoadoutSlot_C::EquippedColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AugmentTextColor) == 0x000DAC, "Member 'UW_LoadoutSlot_C::AugmentTextColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, EquippedButtonStyle) == 0x000DC0, "Member 'UW_LoadoutSlot_C::EquippedButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, ItemType) == 0x001038, "Member 'UW_LoadoutSlot_C::ItemType' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Attachment) == 0x001039, "Member 'UW_LoadoutSlot_C::Attachment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Active_Loadout) == 0x001040, "Member 'UW_LoadoutSlot_C::Active_Loadout' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AugmentDisplayed) == 0x0011C8, "Member 'UW_LoadoutSlot_C::AugmentDisplayed' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, CurrentAugment) == 0x0011D0, "Member 'UW_LoadoutSlot_C::CurrentAugment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, EquippedLabelHeight) == 0x0011E8, "Member 'UW_LoadoutSlot_C::EquippedLabelHeight' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, NewItem) == 0x0011EC, "Member 'UW_LoadoutSlot_C::NewItem' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, FirstInitialization) == 0x0011ED, "Member 'UW_LoadoutSlot_C::FirstInitialization' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, CameraTag) == 0x0011F0, "Member 'UW_LoadoutSlot_C::CameraTag' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, PreviewAnimation) == 0x0011F8, "Member 'UW_LoadoutSlot_C::PreviewAnimation' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AmmoType_0) == 0x001208, "Member 'UW_LoadoutSlot_C::AmmoType_0' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AmmoMax) == 0x001210, "Member 'UW_LoadoutSlot_C::AmmoMax' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Hidden) == 0x001214, "Member 'UW_LoadoutSlot_C::Hidden' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, LoadoutWidget) == 0x001218, "Member 'UW_LoadoutSlot_C::LoadoutWidget' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, CustomCategoryText) == 0x001220, "Member 'UW_LoadoutSlot_C::CustomCategoryText' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, ArmourMaterialData_0) == 0x001238, "Member 'UW_LoadoutSlot_C::ArmourMaterialData_0' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, IsAmmunition) == 0x001240, "Member 'UW_LoadoutSlot_C::IsAmmunition' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, IsArmourMaterial) == 0x001241, "Member 'UW_LoadoutSlot_C::IsArmourMaterial' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, IsPrimary) == 0x001242, "Member 'UW_LoadoutSlot_C::IsPrimary' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Refreshing) == 0x001243, "Member 'UW_LoadoutSlot_C::Refreshing' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AmmoCaliber) == 0x001248, "Member 'UW_LoadoutSlot_C::AmmoCaliber' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, IsCollapsed) == 0x001260, "Member 'UW_LoadoutSlot_C::IsCollapsed' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, MinimalHeight) == 0x001264, "Member 'UW_LoadoutSlot_C::MinimalHeight' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, CompactHeight) == 0x001268, "Member 'UW_LoadoutSlot_C::CompactHeight' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, FullHeight) == 0x00126C, "Member 'UW_LoadoutSlot_C::FullHeight' has a wrong offset!");

}

