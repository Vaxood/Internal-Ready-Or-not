#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_PlanningMap_Level

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.OnMarkerDrawn__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_OnMarkerDrawn__DelegateSignature final 
{
public:
	int32                                         MarkerID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_MapMarker_C*       Marker;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_OnMarkerDrawn__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_OnMarkerDrawn__DelegateSignature");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_OnMarkerDrawn__DelegateSignature) == 0x000010, "Wrong size on W_PreMission_PlanningMap_Level_C_OnMarkerDrawn__DelegateSignature");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_OnMarkerDrawn__DelegateSignature, MarkerID) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_OnMarkerDrawn__DelegateSignature::MarkerID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_OnMarkerDrawn__DelegateSignature, Marker) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_OnMarkerDrawn__DelegateSignature::Marker' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.OnLineDrawn__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_OnLineDrawn__DelegateSignature final 
{
public:
	int32                                         LineID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           LineCanvas;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_OnLineDrawn__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_OnLineDrawn__DelegateSignature");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_OnLineDrawn__DelegateSignature) == 0x000010, "Wrong size on W_PreMission_PlanningMap_Level_C_OnLineDrawn__DelegateSignature");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_OnLineDrawn__DelegateSignature, LineID) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_OnLineDrawn__DelegateSignature::LineID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_OnLineDrawn__DelegateSignature, LineCanvas) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_OnLineDrawn__DelegateSignature::LineCanvas' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.OnMarkerRotated__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_OnMarkerRotated__DelegateSignature final 
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FloorLevel;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_OnMarkerRotated__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_OnMarkerRotated__DelegateSignature");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_OnMarkerRotated__DelegateSignature) == 0x000010, "Wrong size on W_PreMission_PlanningMap_Level_C_OnMarkerRotated__DelegateSignature");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_OnMarkerRotated__DelegateSignature, TriggeringMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_OnMarkerRotated__DelegateSignature::TriggeringMarker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_OnMarkerRotated__DelegateSignature, FloorLevel) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_OnMarkerRotated__DelegateSignature::FloorLevel' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_OnMarkerRotated__DelegateSignature, Rotation) == 0x00000C, "Member 'W_PreMission_PlanningMap_Level_C_OnMarkerRotated__DelegateSignature::Rotation' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.ExecuteUbergraph_W_PreMission_PlanningMap_Level
// 0x0004 (0x0004 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level) == 0x000004, "Wrong size on W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level, EntryPoint) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_ExecuteUbergraph_W_PreMission_PlanningMap_Level::EntryPoint' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.GetLineLength
// 0x0034 (0x0034 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_GetLineLength final 
{
public:
	struct FVector2D                              PointA;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PointB;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetSize_Absolute_ReturnValue;       // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue_1;  // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Distance2D_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_GetLineLength) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_Level_C_GetLineLength");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_GetLineLength) == 0x000034, "Wrong size on W_PreMission_PlanningMap_Level_C_GetLineLength");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, PointA) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::PointA' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, PointB) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::PointB' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, Length) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::Length' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, CallFunc_GetWidgetSize_Absolute_ReturnValue) == 0x000014, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::CallFunc_GetWidgetSize_Absolute_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x00001C, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, CallFunc_Multiply_Vector2DVector2D_ReturnValue_1) == 0x000024, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::CallFunc_Multiply_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, CallFunc_Distance2D_ReturnValue) == 0x00002C, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::CallFunc_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineLength, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'W_PreMission_PlanningMap_Level_C_GetLineLength::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.GetLineAngle
// 0x0064 (0x0064 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_GetLineAngle final 
{
public:
	struct FVector2D                              PointA;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PointB;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PointA_X;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PointA_Y;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PointB_X;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PointB_Y;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_GetLineAngle) == 0x000004, "Wrong alignment on W_PreMission_PlanningMap_Level_C_GetLineAngle");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_GetLineAngle) == 0x000064, "Wrong size on W_PreMission_PlanningMap_Level_C_GetLineAngle");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, PointA) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::PointA' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, PointB) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::PointB' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, PointA_X) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::PointA_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, PointA_Y) == 0x000014, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::PointA_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, PointB_X) == 0x000018, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::PointB_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, PointB_Y) == 0x00001C, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::PointB_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, Angle) == 0x000020, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::Angle' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakVector2D_X) == 0x000024, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakVector2D_X_1) == 0x00002C, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakVector2D_Y_1) == 0x000030, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_MakeVector_ReturnValue) == 0x000034, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_MakeVector_ReturnValue_1) == 0x000040, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_FindLookAtRotation_ReturnValue) == 0x00004C, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakRotator_Roll) == 0x000058, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakRotator_Pitch) == 0x00005C, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_GetLineAngle, CallFunc_BreakRotator_Yaw) == 0x000060, "Member 'W_PreMission_PlanningMap_Level_C_GetLineAngle::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.DrawLine
// 0x01D8 (0x01D8 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_DrawLine final 
{
public:
	int32                                         LineID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanningLine                          LineData;                                          // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AReadyOrNotPlayerState*                 LineOwner;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_PlanningMap_Line_C*       Line;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastNode;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_325D[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndOffset;                                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartOffset;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PreviousPoint;                                     // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Coordinates;                                       // 0x005C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325E[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                NodeWidget;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstNode;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_325F[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_PlanningMap_Line_C*       CallFunc_Create_ReturnValue;                       // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotPlayerState*                 CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_OfficerMarker_C*                     CallFunc_Create_ReturnValue_1;                     // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      CallFunc_Create_ReturnValue_2;                     // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Array_Get_Item;                           // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3260[0x2];                                     // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetPlayerTeamColor_LinearColor;           // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetPlayerTeamColor_SlateColor;            // 0x00C0(0x0028)()
	TDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> K2Node_CreateDelegate_OutputDelegate;              // 0x00E8(0x0010)(ZeroConstructor, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0100(0x0010)(NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData;                      // 0x0114(0x0028)(NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3261[0x3];                                     // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLineAngle_Angle;                       // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLineLength_Length;                     // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors_1;                       // 0x014C(0x0010)(NoDestructor)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData_1;                    // 0x015C(0x0028)(NoDestructor)
	uint8                                         Pad_3262[0x4];                                     // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue_1;           // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           CallFunc_SpawnObject_ReturnValue;                  // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors_2;                       // 0x0198(0x0010)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue_2;           // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchorData                            K2Node_MakeStruct_AnchorData_2;                    // 0x01B0(0x0028)(NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_DrawLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_DrawLine");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_DrawLine) == 0x0001D8, "Wrong size on W_PreMission_PlanningMap_Level_C_DrawLine");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, LineID) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::LineID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, LineData) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::LineData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, LineOwner) == 0x000030, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::LineOwner' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, Canvas) == 0x000038, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::Canvas' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, Line) == 0x000040, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::Line' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, LastNode) == 0x000048, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::LastNode' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, EndOffset) == 0x00004C, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::EndOffset' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, StartOffset) == 0x000050, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::StartOffset' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, PreviousPoint) == 0x000054, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::PreviousPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, Coordinates) == 0x00005C, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::Coordinates' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, NodeWidget) == 0x000068, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::NodeWidget' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, FirstNode) == 0x000070, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::FirstNode' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Create_ReturnValue) == 0x000078, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Array_LastIndex_ReturnValue) == 0x000084, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue) == 0x000088, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Create_ReturnValue_1) == 0x000090, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Create_ReturnValue_2) == 0x000098, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, Temp_int_Array_Index_Variable) == 0x0000A0, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Array_Get_Item) == 0x0000A4, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000AC, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000AD, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_GetPlayerTeamColor_LinearColor) == 0x0000B0, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_GetPlayerTeamColor_LinearColor' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_GetPlayerTeamColor_SlateColor) == 0x0000C0, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_GetPlayerTeamColor_SlateColor' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_CreateDelegate_OutputDelegate) == 0x0000E8, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_AddChildToCanvas_ReturnValue) == 0x0000F8, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_MakeStruct_Anchors) == 0x000100, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, Temp_int_Loop_Counter_Variable) == 0x000110, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_MakeStruct_AnchorData) == 0x000114, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_MakeStruct_AnchorData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Less_IntInt_ReturnValue) == 0x00013C, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_Add_IntInt_ReturnValue) == 0x000140, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_GetLineAngle_Angle) == 0x000144, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_GetLineAngle_Angle' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_GetLineLength_Length) == 0x000148, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_GetLineLength_Length' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_MakeStruct_Anchors_1) == 0x00014C, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_MakeStruct_Anchors_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_MakeStruct_AnchorData_1) == 0x00015C, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_MakeStruct_AnchorData_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_AddChildToCanvas_ReturnValue_1) == 0x000188, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_AddChildToCanvas_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_SpawnObject_ReturnValue) == 0x000190, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_MakeStruct_Anchors_2) == 0x000198, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_MakeStruct_Anchors_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, CallFunc_AddChildToCanvas_ReturnValue_2) == 0x0001A8, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::CallFunc_AddChildToCanvas_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawLine, K2Node_MakeStruct_AnchorData_2) == 0x0001B0, "Member 'W_PreMission_PlanningMap_Level_C_DrawLine::K2Node_MakeStruct_AnchorData_2' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.EraseLine
// 0x0018 (0x0018 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_EraseLine final 
{
public:
	int32                                         LineID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3263[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_EraseLine) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_EraseLine");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_EraseLine) == 0x000018, "Wrong size on W_PreMission_PlanningMap_Level_C_EraseLine");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseLine, LineID) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_EraseLine::LineID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseLine, CallFunc_Map_Remove_ReturnValue) == 0x000004, "Member 'W_PreMission_PlanningMap_Level_C_EraseLine::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseLine, CallFunc_Map_Find_Value) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_EraseLine::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_EraseLine, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'W_PreMission_PlanningMap_Level_C_EraseLine::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.DrawMarker
// 0x0068 (0x0068 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_DrawMarker final 
{
public:
	int32                                         MarkerID;                                          // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningMarker                        MarkerData;                                        // 0x0004(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	uint8                                         Pad_3264[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_Tablet_MapMarker_C*       Marker;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_Tablet_MapMarker_C*       CallFunc_Create_ReturnValue;                       // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0040(0x0010)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, float Rotation)> K2Node_CreateDelegate_OutputDelegate;              // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_DrawMarker) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_DrawMarker");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_DrawMarker) == 0x000068, "Wrong size on W_PreMission_PlanningMap_Level_C_DrawMarker");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, MarkerID) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::MarkerID' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, MarkerData) == 0x000004, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::MarkerData' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, Marker) == 0x000030, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::Marker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, CallFunc_Create_ReturnValue) == 0x000038, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, K2Node_MakeStruct_Anchors) == 0x000040, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, CallFunc_AddChildToCanvas_ReturnValue) == 0x000050, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_DrawMarker, K2Node_CreateDelegate_OutputDelegate) == 0x000058, "Member 'W_PreMission_PlanningMap_Level_C_DrawMarker::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.LineStartNodeSelected
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_LineStartNodeSelected final 
{
public:
	class UW_OfficerMarker_C*                     OfficerMarker;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_LineStartNodeSelected) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_LineStartNodeSelected");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_LineStartNodeSelected) == 0x000008, "Wrong size on W_PreMission_PlanningMap_Level_C_LineStartNodeSelected");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_LineStartNodeSelected, OfficerMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_LineStartNodeSelected::OfficerMarker' has a wrong offset!");

// Function W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C.MarkerRotated
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_PlanningMap_Level_C_MarkerRotated final 
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_PlanningMap_Level_C_MarkerRotated) == 0x000008, "Wrong alignment on W_PreMission_PlanningMap_Level_C_MarkerRotated");
static_assert(sizeof(W_PreMission_PlanningMap_Level_C_MarkerRotated) == 0x000010, "Wrong size on W_PreMission_PlanningMap_Level_C_MarkerRotated");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_MarkerRotated, TriggeringMarker) == 0x000000, "Member 'W_PreMission_PlanningMap_Level_C_MarkerRotated::TriggeringMarker' has a wrong offset!");
static_assert(offsetof(W_PreMission_PlanningMap_Level_C_MarkerRotated, Rotation) == 0x000008, "Member 'W_PreMission_PlanningMap_Level_C_MarkerRotated::Rotation' has a wrong offset!");

}

