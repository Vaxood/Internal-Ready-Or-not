#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RosterSelection_MiniCard

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.OnHovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_OnHovered__DelegateSignature final 
{
public:
	class UW_RosterSelection_MiniCard_C*          Card;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_OnHovered__DelegateSignature) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_OnHovered__DelegateSignature");
static_assert(sizeof(W_RosterSelection_MiniCard_C_OnHovered__DelegateSignature) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_OnHovered__DelegateSignature");
static_assert(offsetof(W_RosterSelection_MiniCard_C_OnHovered__DelegateSignature, Card) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_OnHovered__DelegateSignature::Card' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.OnUnhovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_OnUnhovered__DelegateSignature final 
{
public:
	class UW_RosterSelection_MiniCard_C*          Card;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_OnUnhovered__DelegateSignature) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_OnUnhovered__DelegateSignature");
static_assert(sizeof(W_RosterSelection_MiniCard_C_OnUnhovered__DelegateSignature) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_OnUnhovered__DelegateSignature");
static_assert(offsetof(W_RosterSelection_MiniCard_C_OnUnhovered__DelegateSignature, Card) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_OnUnhovered__DelegateSignature::Card' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_OnClicked__DelegateSignature final 
{
public:
	class UW_RosterSelection_MiniCard_C*          Card;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_OnClicked__DelegateSignature");
static_assert(sizeof(W_RosterSelection_MiniCard_C_OnClicked__DelegateSignature) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_OnClicked__DelegateSignature");
static_assert(offsetof(W_RosterSelection_MiniCard_C_OnClicked__DelegateSignature, Card) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_OnClicked__DelegateSignature::Card' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.OnEmptyClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_OnEmptyClicked__DelegateSignature final 
{
public:
	class UW_RosterSelection_MiniCard_C*          Card;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_OnEmptyClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_OnEmptyClicked__DelegateSignature");
static_assert(sizeof(W_RosterSelection_MiniCard_C_OnEmptyClicked__DelegateSignature) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_OnEmptyClicked__DelegateSignature");
static_assert(offsetof(W_RosterSelection_MiniCard_C_OnEmptyClicked__DelegateSignature, Card) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_OnEmptyClicked__DelegateSignature::Card' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.ExecuteUbergraph_W_RosterSelection_MiniCard
// 0x01B8 (0x01B8 - 0x0000)
struct W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterCharacterState                         Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BF[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C0[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URosterCharacter*                       K2Node_CustomEvent_Character;                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C1[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_Text;                           // 0x0030(0x0018)()
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0048(0x0028)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32C2[0x6];                                     // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0078(0x0088)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush_1;                    // 0x0100(0x0088)()
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERosterCharacterState                         Temp_byte_Variable_5;                              // 0x018B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C3[0x2];                                     // 0x018E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_2;               // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_1;               // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button;                 // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x01A8(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard");
static_assert(sizeof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard) == 0x0001B8, "Wrong size on W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, EntryPoint) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_byte_Variable) == 0x000004, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_byte_Variable_1) == 0x000005, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_CustomEvent_Loaded) == 0x000008, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_object_Variable) == 0x000010, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_byte_Variable_2) == 0x000018, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_CustomEvent_Character) == 0x000020, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_CustomEvent_Character' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_byte_Variable_3) == 0x000028, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_byte_Variable_4) == 0x000029, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_CustomEvent_Text) == 0x000030, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_CustomEvent_Text' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_Select_Default) == 0x000048, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000071, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_MakeStruct_SlateBrush) == 0x000078, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_MakeStruct_SlateBrush_1) == 0x000100, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_MakeStruct_SlateBrush_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000188, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_Not_PreBool_ReturnValue) == 0x000189, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_Event_IsDesignTime) == 0x00018A, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, Temp_byte_Variable_5) == 0x00018B, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, CallFunc_IsValid_ReturnValue_1) == 0x00018C, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_Select_Default_1) == 0x00018D, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_ComponentBoundEvent_Button_2) == 0x000190, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_ComponentBoundEvent_Button_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_ComponentBoundEvent_Button_1) == 0x000198, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_ComponentBoundEvent_Button) == 0x0001A0, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard, K2Node_CreateDelegate_OutputDelegate) == 0x0001A8, "Member 'W_RosterSelection_MiniCard_C_ExecuteUbergraph_W_RosterSelection_MiniCard::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature final 
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_7_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature final 
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_6_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature final 
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_BndEvt__W_RosterSelection_MiniCard_btn_Card_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_RosterSelection_MiniCard_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_PreConstruct) == 0x000001, "Wrong alignment on W_RosterSelection_MiniCard_C_PreConstruct");
static_assert(sizeof(W_RosterSelection_MiniCard_C_PreConstruct) == 0x000001, "Wrong size on W_RosterSelection_MiniCard_C_PreConstruct");
static_assert(offsetof(W_RosterSelection_MiniCard_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetCustomStateText
// 0x0018 (0x0018 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetCustomStateText final 
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetCustomStateText) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_SetCustomStateText");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetCustomStateText) == 0x000018, "Wrong size on W_RosterSelection_MiniCard_C_SetCustomStateText");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetCustomStateText, Text) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetCustomStateText::Text' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetCharacter
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetCharacter final 
{
public:
	class URosterCharacter*                       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetCharacter) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_SetCharacter");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetCharacter) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_SetCharacter");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetCharacter, Character) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetCharacter::Character' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8
// 0x0008 (0x0008 - 0x0000)
struct W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8 final 
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8");
static_assert(sizeof(W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8) == 0x000008, "Wrong size on W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8");
static_assert(offsetof(W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8, Loaded) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_OnLoaded_1B6BA88D4B585FF2FE0A5EA31A024DD8::Loaded' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetupStateText
// 0x00E8 (0x00E8 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetupStateText final 
{
public:
	class URosterCharacter*                       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C4[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C5[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_StressPercentageAsStatus_StatusText;      // 0x0030(0x0018)()
	struct FSlateColor                            CallFunc_StressPercentageAsStatus_StatusColor;     // 0x0048(0x0028)()
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterCharacterState                         Temp_byte_Variable_3;                              // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C6[0x5];                                     // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x00A8(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x00C0(0x0018)()
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterCharacterState                         Temp_byte_Variable_5;                              // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetupStateText) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_SetupStateText");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetupStateText) == 0x0000E8, "Wrong size on W_RosterSelection_MiniCard_C_SetupStateText");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Character) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Character' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_byte_Variable) == 0x000008, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00000C, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_StressPercentageAsStatus_StatusText) == 0x000030, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_StressPercentageAsStatus_StatusText' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_StressPercentageAsStatus_StatusColor) == 0x000048, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_StressPercentageAsStatus_StatusColor' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_byte_Variable_1) == 0x000070, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_byte_Variable_2) == 0x000071, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_byte_Variable_3) == 0x000072, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_text_Variable) == 0x000078, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_text_Variable_1) == 0x000090, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_text_Variable_2) == 0x0000A8, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, K2Node_Select_Default) == 0x0000C0, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000D8, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_byte_Variable_4) == 0x0000E0, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, Temp_byte_Variable_5) == 0x0000E1, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetupStateText, K2Node_Select_Default_1) == 0x0000E2, "Member 'W_RosterSelection_MiniCard_C_SetupStateText::K2Node_Select_Default_1' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetPosition
// 0x0100 (0x0100 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetPosition final 
{
public:
	ERosterSquadPosition                          Param_Position;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterSquadPosition                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32C7[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterSquadPosition                          Temp_byte_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C8[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_5;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_8;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterSquadPosition                          Temp_byte_Variable_2;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_3;                              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_4;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_5;                              // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_6;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_7;                              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterSquadPosition                          Temp_byte_Variable_8;                              // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C9[0x1];                                     // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0050(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0068(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0080(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0098(0x0018)()
	float                                         K2Node_Select_Default;                             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          K2Node_Select_Default_2;                           // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32CA[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_3;                           // 0x00D0(0x0018)()
	struct FLinearColor                           CallFunc_SquadPositionToColor_OutColor;            // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetPosition) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_SetPosition");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetPosition) == 0x000100, "Wrong size on W_RosterSelection_MiniCard_C_SetPosition");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Param_Position) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Param_Position' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable) == 0x000001, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'W_RosterSelection_MiniCard_C_SetPosition::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_float_Variable) == 0x000004, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_float_Variable_1) == 0x000008, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_float_Variable_2) == 0x00000C, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_float_Variable_3) == 0x000010, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_float_Variable_4) == 0x000014, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_1) == 0x000018, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_float_Variable_5) == 0x00001C, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_float_Variable_6) == 0x000020, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_float_Variable_7) == 0x000024, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_float_Variable_8) == 0x000028, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_float_Variable_9) == 0x00002C, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_2) == 0x000030, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_3) == 0x000031, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_4) == 0x000032, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_5) == 0x000033, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_6) == 0x000034, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_7) == 0x000035, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_byte_Variable_8) == 0x000036, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_text_Variable) == 0x000038, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_text_Variable_1) == 0x000050, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_text_Variable_2) == 0x000068, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_text_Variable_3) == 0x000080, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, Temp_text_Variable_4) == 0x000098, "Member 'W_RosterSelection_MiniCard_C_SetPosition::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, K2Node_Select_Default) == 0x0000B0, "Member 'W_RosterSelection_MiniCard_C_SetPosition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, K2Node_Select_Default_1) == 0x0000B4, "Member 'W_RosterSelection_MiniCard_C_SetPosition::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, CallFunc_MakeVector2D_ReturnValue) == 0x0000B8, "Member 'W_RosterSelection_MiniCard_C_SetPosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, CallFunc_MakeVector2D_ReturnValue_1) == 0x0000C0, "Member 'W_RosterSelection_MiniCard_C_SetPosition::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, K2Node_Select_Default_2) == 0x0000C8, "Member 'W_RosterSelection_MiniCard_C_SetPosition::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, K2Node_Select_Default_3) == 0x0000D0, "Member 'W_RosterSelection_MiniCard_C_SetPosition::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, CallFunc_SquadPositionToColor_OutColor) == 0x0000E8, "Member 'W_RosterSelection_MiniCard_C_SetPosition::CallFunc_SquadPositionToColor_OutColor' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetPosition, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x0000F8, "Member 'W_RosterSelection_MiniCard_C_SetPosition::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetHoverState
// 0x0001 (0x0001 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetHoverState final 
{
public:
	bool                                          Hovered;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetHoverState) == 0x000001, "Wrong alignment on W_RosterSelection_MiniCard_C_SetHoverState");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetHoverState) == 0x000001, "Wrong size on W_RosterSelection_MiniCard_C_SetHoverState");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetHoverState, Hovered) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetHoverState::Hovered' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetSelected final 
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetSelected) == 0x000001, "Wrong alignment on W_RosterSelection_MiniCard_C_SetSelected");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetSelected) == 0x000001, "Wrong size on W_RosterSelection_MiniCard_C_SetSelected");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetSelected, Selected) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetSelected::Selected' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetEmpty
// 0x0010 (0x0010 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetEmpty final 
{
public:
	bool                                          Param_Empty;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32CB[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetEmpty) == 0x000004, "Wrong alignment on W_RosterSelection_MiniCard_C_SetEmpty");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetEmpty) == 0x000010, "Wrong size on W_RosterSelection_MiniCard_C_SetEmpty");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Param_Empty) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Param_Empty' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Temp_bool_Variable) == 0x000001, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Temp_byte_Variable) == 0x000002, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Temp_byte_Variable_1) == 0x000003, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Temp_bool_Variable_1) == 0x000004, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Temp_byte_Variable_2) == 0x000005, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, Temp_byte_Variable_3) == 0x000006, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, CallFunc_BooleanAND_ReturnValue) == 0x00000D, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, K2Node_Select_Default) == 0x00000E, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetEmpty, K2Node_Select_Default_1) == 0x00000F, "Member 'W_RosterSelection_MiniCard_C_SetEmpty::K2Node_Select_Default_1' has a wrong offset!");

// Function W_RosterSelection_MiniCard.W_RosterSelection_MiniCard_C.SetLocked
// 0x0030 (0x0030 - 0x0000)
struct W_RosterSelection_MiniCard_C_SetLocked final 
{
public:
	bool                                          Param_Locked;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32CC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnlockText;                                        // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32CD[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterSelection_MiniCard_C_SetLocked) == 0x000008, "Wrong alignment on W_RosterSelection_MiniCard_C_SetLocked");
static_assert(sizeof(W_RosterSelection_MiniCard_C_SetLocked) == 0x000030, "Wrong size on W_RosterSelection_MiniCard_C_SetLocked");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, Param_Locked) == 0x000000, "Member 'W_RosterSelection_MiniCard_C_SetLocked::Param_Locked' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, UnlockText) == 0x000008, "Member 'W_RosterSelection_MiniCard_C_SetLocked::UnlockText' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, Temp_bool_Variable) == 0x000020, "Member 'W_RosterSelection_MiniCard_C_SetLocked::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, Temp_byte_Variable) == 0x000021, "Member 'W_RosterSelection_MiniCard_C_SetLocked::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, Temp_byte_Variable_1) == 0x000022, "Member 'W_RosterSelection_MiniCard_C_SetLocked::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, CallFunc_SelectFloat_ReturnValue) == 0x000024, "Member 'W_RosterSelection_MiniCard_C_SetLocked::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'W_RosterSelection_MiniCard_C_SetLocked::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterSelection_MiniCard_C_SetLocked, K2Node_Select_Default) == 0x000029, "Member 'W_RosterSelection_MiniCard_C_SetLocked::K2Node_Select_Default' has a wrong offset!");

}

