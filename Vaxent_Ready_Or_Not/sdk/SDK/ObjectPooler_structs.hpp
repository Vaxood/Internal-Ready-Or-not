#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ObjectPooler

#include "Basic.hpp"


namespace SDK
{

// Enum ObjectPooler.EObjectPoolRetrieveActorResult
// NumValues: 0x0003
enum class EObjectPoolRetrieveActorResult : uint8
{
	Succeeded                                = 0,
	Failed                                   = 1,
	EObjectPoolRetrieveActorResult_MAX       = 2,
};

// Enum ObjectPooler.EObjectPoolReuseSetting
// NumValues: 0x0004
enum class EObjectPoolReuseSetting : uint8
{
	Reuse                                    = 0,
	DoNotReuse                               = 1,
	CreateNewActor                           = 2,
	EObjectPoolReuseSetting_MAX              = 3,
};

// ScriptStruct ObjectPooler.PlatformPoolSettings
// 0x000C (0x000C - 0x0000)
struct FPlatformPoolSettings final 
{
public:
	int32                                         PoolSize;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorMaxLifetime;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectPoolReuseSetting                       ReuseSetting;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnToPoolAfterPhysicsHit;                      // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19AC[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlatformPoolSettings) == 0x000004, "Wrong alignment on FPlatformPoolSettings");
static_assert(sizeof(FPlatformPoolSettings) == 0x00000C, "Wrong size on FPlatformPoolSettings");
static_assert(offsetof(FPlatformPoolSettings, PoolSize) == 0x000000, "Member 'FPlatformPoolSettings::PoolSize' has a wrong offset!");
static_assert(offsetof(FPlatformPoolSettings, ActorMaxLifetime) == 0x000004, "Member 'FPlatformPoolSettings::ActorMaxLifetime' has a wrong offset!");
static_assert(offsetof(FPlatformPoolSettings, ReuseSetting) == 0x000008, "Member 'FPlatformPoolSettings::ReuseSetting' has a wrong offset!");
static_assert(offsetof(FPlatformPoolSettings, bReturnToPoolAfterPhysicsHit) == 0x000009, "Member 'FPlatformPoolSettings::bReturnToPoolAfterPhysicsHit' has a wrong offset!");

// ScriptStruct ObjectPooler.ObjectPoolWarmUpSetting
// 0x0008 (0x0008 - 0x0000)
struct FObjectPoolWarmUpSetting final 
{
public:
	uint8                                         bEnabled : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19AD[0x1];                                     // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        WarmUpAcross;                                      // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19AE[0x4];                                     // 0x0004(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FObjectPoolWarmUpSetting) == 0x000002, "Wrong alignment on FObjectPoolWarmUpSetting");
static_assert(sizeof(FObjectPoolWarmUpSetting) == 0x000008, "Wrong size on FObjectPoolWarmUpSetting");
static_assert(offsetof(FObjectPoolWarmUpSetting, WarmUpAcross) == 0x000002, "Member 'FObjectPoolWarmUpSetting::WarmUpAcross' has a wrong offset!");

// ScriptStruct ObjectPooler.ObjectPoolManager
// 0x0038 (0x0038 - 0x0000)
struct FObjectPoolManager final 
{
public:
	uint8                                         bEnabled : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19AF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ManagerName;                                       // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B0[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UObjectPoolBase>>    ObjectPools;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FText                                   Note;                                              // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectPoolManager) == 0x000008, "Wrong alignment on FObjectPoolManager");
static_assert(sizeof(FObjectPoolManager) == 0x000038, "Wrong size on FObjectPoolManager");
static_assert(offsetof(FObjectPoolManager, ManagerName) == 0x000004, "Member 'FObjectPoolManager::ManagerName' has a wrong offset!");
static_assert(offsetof(FObjectPoolManager, ObjectPools) == 0x000010, "Member 'FObjectPoolManager::ObjectPools' has a wrong offset!");
static_assert(offsetof(FObjectPoolManager, Note) == 0x000020, "Member 'FObjectPoolManager::Note' has a wrong offset!");

}

