#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Text

#include "Basic.hpp"

#include "W_Text_classes.hpp"
#include "W_Text_parameters.hpp"


namespace SDK
{

// Function W_Text.W_Text_C.ExecuteUbergraph_W_Text
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    K2Node_Event_IsDesignTime                              (ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           CallFunc_GetEnumeratorUserFriendlyName_ReturnValue     (ZeroConstructor, HasGetValueTypeHash)
// bool                                    CallFunc_EqualEqual_ByteByte_ReturnValue               (ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           CallFunc_RemoveSpacesFromString_ReturnString           (ZeroConstructor, HasGetValueTypeHash)
// class FText                             CallFunc_RemoveSpacesFromString_ReturnText             ()
// class FName                             CallFunc_RemoveSpacesFromString_ReturnName             (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_Style_Text                   CallFunc_GetDataTableRowFromName_OutRow                (HasGetValueTypeHash)
// bool                                    CallFunc_GetDataTableRowFromName_ReturnValue           (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CallFunc_NotEqual_LinearColorLinearColor_ReturnValue   (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CallFunc_GreaterEqual_IntInt_ReturnValue               (ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_Text_C::ExecuteUbergraph_W_Text(int32 EntryPoint, bool K2Node_Event_IsDesignTime, const class FString& CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, const class FString& CallFunc_RemoveSpacesFromString_ReturnString, class FText CallFunc_RemoveSpacesFromString_ReturnText, class FName CallFunc_RemoveSpacesFromString_ReturnName, const struct FST_Style_Text& CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_NotEqual_LinearColorLinearColor_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "ExecuteUbergraph_W_Text");

	Params::W_Text_C_ExecuteUbergraph_W_Text Parms{};

	Parms.EntryPoint = EntryPoint;
	Parms.K2Node_Event_IsDesignTime = K2Node_Event_IsDesignTime;
	Parms.CallFunc_GetEnumeratorUserFriendlyName_ReturnValue = std::move(CallFunc_GetEnumeratorUserFriendlyName_ReturnValue);
	Parms.CallFunc_EqualEqual_ByteByte_ReturnValue = CallFunc_EqualEqual_ByteByte_ReturnValue;
	Parms.CallFunc_RemoveSpacesFromString_ReturnString = std::move(CallFunc_RemoveSpacesFromString_ReturnString);
	Parms.CallFunc_RemoveSpacesFromString_ReturnText = CallFunc_RemoveSpacesFromString_ReturnText;
	Parms.CallFunc_RemoveSpacesFromString_ReturnName = CallFunc_RemoveSpacesFromString_ReturnName;
	Parms.CallFunc_GetDataTableRowFromName_OutRow = std::move(CallFunc_GetDataTableRowFromName_OutRow);
	Parms.CallFunc_GetDataTableRowFromName_ReturnValue = CallFunc_GetDataTableRowFromName_ReturnValue;
	Parms.CallFunc_NotEqual_LinearColorLinearColor_ReturnValue = CallFunc_NotEqual_LinearColorLinearColor_ReturnValue;
	Parms.CallFunc_GreaterEqual_IntInt_ReturnValue = CallFunc_GreaterEqual_IntInt_ReturnValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_Text_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Text.W_Text_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_Text_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "PreConstruct");

	Params::W_Text_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.SetText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_Text                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             CallFunc_TruncateText_TruncatedText                    ()

void UW_Text_C::SetText(class FText Param_Text, class FText CallFunc_TruncateText_TruncatedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "SetText");

	Params::W_Text_C_SetText Parms{};

	Parms.Param_Text = Param_Text;
	Parms.CallFunc_TruncateText_TruncatedText = CallFunc_TruncateText_TruncatedText;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.SetStyle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FST_Style_Text                   Param_TextStyle                                        (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UW_Text_C::SetStyle(const struct FST_Style_Text& Param_TextStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "SetStyle");

	Params::W_Text_C_SetStyle Parms{};

	Parms.Param_TextStyle = std::move(Param_TextStyle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.UpdateFont
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateFontInfo                   Font                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UW_Text_C::UpdateFont(const struct FSlateFontInfo& Font)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "UpdateFont");

	Params::W_Text_C_UpdateFont Parms{};

	Parms.Font = std::move(Font);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.TruncateText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Truncate                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_CharacterLimit                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Param_TruncationCharacters                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FText                             TruncatedText                                          (Parm, OutParm)
// int32                                   CallFunc_Len_ReturnValue                               (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CallFunc_Subtract_IntInt_ReturnValue                   (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CallFunc_Subtract_IntInt_ReturnValue_1                 (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CallFunc_Conv_TextToString_ReturnValue                 (ZeroConstructor, HasGetValueTypeHash)
// bool                                    Temp_bool_Variable                                     (ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           CallFunc_Left_ReturnValue                              (ZeroConstructor, HasGetValueTypeHash)
// int32                                   CallFunc_Len_ReturnValue_1                             (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CallFunc_Left_ReturnValue_1                            (ZeroConstructor, HasGetValueTypeHash)
// bool                                    CallFunc_Greater_IntInt_ReturnValue                    (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CallFunc_EndsWith_ReturnValue                          (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CallFunc_BooleanAND_ReturnValue                        (ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           CallFunc_SelectString_ReturnValue                      (ZeroConstructor, HasGetValueTypeHash)
// class FString                           CallFunc_Concat_StrStr_ReturnValue                     (ZeroConstructor, HasGetValueTypeHash)
// class FText                             CallFunc_Conv_StringToText_ReturnValue                 ()
// class FText                             K2Node_Select_Default                                  ()

void UW_Text_C::TruncateText(bool Param_Truncate, int32 Param_CharacterLimit, const class FString& Param_TruncationCharacters, class FText* TruncatedText, int32 CallFunc_Len_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue_1, const class FString& CallFunc_Conv_TextToString_ReturnValue, bool Temp_bool_Variable, const class FString& CallFunc_Left_ReturnValue, int32 CallFunc_Len_ReturnValue_1, const class FString& CallFunc_Left_ReturnValue_1, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EndsWith_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const class FString& CallFunc_SelectString_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue, class FText CallFunc_Conv_StringToText_ReturnValue, class FText K2Node_Select_Default)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "TruncateText");

	Params::W_Text_C_TruncateText Parms{};

	Parms.Param_Truncate = Param_Truncate;
	Parms.Param_CharacterLimit = Param_CharacterLimit;
	Parms.Param_TruncationCharacters = std::move(Param_TruncationCharacters);
	Parms.CallFunc_Len_ReturnValue = CallFunc_Len_ReturnValue;
	Parms.CallFunc_Subtract_IntInt_ReturnValue = CallFunc_Subtract_IntInt_ReturnValue;
	Parms.CallFunc_Subtract_IntInt_ReturnValue_1 = CallFunc_Subtract_IntInt_ReturnValue_1;
	Parms.CallFunc_Conv_TextToString_ReturnValue = std::move(CallFunc_Conv_TextToString_ReturnValue);
	Parms.Temp_bool_Variable = Temp_bool_Variable;
	Parms.CallFunc_Left_ReturnValue = std::move(CallFunc_Left_ReturnValue);
	Parms.CallFunc_Len_ReturnValue_1 = CallFunc_Len_ReturnValue_1;
	Parms.CallFunc_Left_ReturnValue_1 = std::move(CallFunc_Left_ReturnValue_1);
	Parms.CallFunc_Greater_IntInt_ReturnValue = CallFunc_Greater_IntInt_ReturnValue;
	Parms.CallFunc_EndsWith_ReturnValue = CallFunc_EndsWith_ReturnValue;
	Parms.CallFunc_BooleanAND_ReturnValue = CallFunc_BooleanAND_ReturnValue;
	Parms.CallFunc_SelectString_ReturnValue = std::move(CallFunc_SelectString_ReturnValue);
	Parms.CallFunc_Concat_StrStr_ReturnValue = std::move(CallFunc_Concat_StrStr_ReturnValue);
	Parms.CallFunc_Conv_StringToText_ReturnValue = CallFunc_Conv_StringToText_ReturnValue;
	Parms.K2Node_Select_Default = K2Node_Select_Default;

	UObject::ProcessEvent(Func, &Parms);

	if (TruncatedText != nullptr)
		*TruncatedText = std::move(Parms.TruncatedText);
}


// Function W_Text.W_Text_C.UpdateText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Param_Text                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_Text_C::UpdateText(class FText Param_Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "UpdateText");

	Params::W_Text_C_UpdateText Parms{};

	Parms.Param_Text = Param_Text;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.GetText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Param_CurrentText                                      (Parm, OutParm)

void UW_Text_C::GetText(class FText* Param_CurrentText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "GetText");

	Params::W_Text_C_GetText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_CurrentText != nullptr)
		*Param_CurrentText = std::move(Parms.Param_CurrentText);
}


// Function W_Text.W_Text_C.SetTextColor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Param_Color                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      K2Node_MakeStruct_SlateColor                           ()

void UW_Text_C::SetTextColor(const struct FLinearColor& Param_Color, const struct FSlateColor& K2Node_MakeStruct_SlateColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "SetTextColor");

	Params::W_Text_C_SetTextColor Parms{};

	Parms.Param_Color = std::move(Param_Color);
	Parms.K2Node_MakeStruct_SlateColor = std::move(K2Node_MakeStruct_SlateColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.SetTextLetterSpacing
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_LetterSpacing                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateFontInfo                   K2Node_MakeStruct_SlateFontInfo                        (HasGetValueTypeHash)

void UW_Text_C::SetTextLetterSpacing(int32 Param_LetterSpacing, const struct FSlateFontInfo& K2Node_MakeStruct_SlateFontInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "SetTextLetterSpacing");

	Params::W_Text_C_SetTextLetterSpacing Parms{};

	Parms.Param_LetterSpacing = Param_LetterSpacing;
	Parms.K2Node_MakeStruct_SlateFontInfo = std::move(K2Node_MakeStruct_SlateFontInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.SetTextShadow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Param_ShadowOffset                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Param_ShadowColor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Text_C::SetTextShadow(const struct FVector2D& Param_ShadowOffset, const struct FLinearColor& Param_ShadowColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "SetTextShadow");

	Params::W_Text_C_SetTextShadow Parms{};

	Parms.Param_ShadowOffset = std::move(Param_ShadowOffset);
	Parms.Param_ShadowColor = std::move(Param_ShadowColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.SetTextTransform
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETextTransformPolicy                    TextTransform                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Text_C::SetTextTransform(ETextTransformPolicy TextTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "SetTextTransform");

	Params::W_Text_C_SetTextTransform Parms{};

	Parms.TextTransform = TextTransform;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.SetFontSize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_FontSize                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateFontInfo                   K2Node_MakeStruct_SlateFontInfo                        (HasGetValueTypeHash)

void UW_Text_C::SetFontSize(int32 Param_FontSize, const struct FSlateFontInfo& K2Node_MakeStruct_SlateFontInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "SetFontSize");

	Params::W_Text_C_SetFontSize Parms{};

	Parms.Param_FontSize = Param_FontSize;
	Parms.K2Node_MakeStruct_SlateFontInfo = std::move(K2Node_MakeStruct_SlateFontInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.SetFont
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateFontInfo                   Font                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FST_Style_Text                   K2Node_MakeStruct_ST_Style_Text                        (HasGetValueTypeHash)

void UW_Text_C::SetFont(const struct FSlateFontInfo& Font, const struct FST_Style_Text& K2Node_MakeStruct_ST_Style_Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "SetFont");

	Params::W_Text_C_SetFont Parms{};

	Parms.Font = std::move(Font);
	Parms.K2Node_MakeStruct_ST_Style_Text = std::move(K2Node_MakeStruct_ST_Style_Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.SetOutline
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFontOutlineSettings             FontOutlineSettings                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FSlateFontInfo                   K2Node_MakeStruct_SlateFontInfo                        (HasGetValueTypeHash)

void UW_Text_C::SetOutline(const struct FFontOutlineSettings& FontOutlineSettings, const struct FSlateFontInfo& K2Node_MakeStruct_SlateFontInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "SetOutline");

	Params::W_Text_C_SetOutline Parms{};

	Parms.FontOutlineSettings = std::move(FontOutlineSettings);
	Parms.K2Node_MakeStruct_SlateFontInfo = std::move(K2Node_MakeStruct_SlateFontInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Text.W_Text_C.SetTextJustification
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETextJustify                            Param_Justification                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Text_C::SetTextJustification(ETextJustify Param_Justification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Text_C", "SetTextJustification");

	Params::W_Text_C_SetTextJustification Parms{};

	Parms.Param_Justification = Param_Justification;

	UObject::ProcessEvent(Func, &Parms);
}

}

