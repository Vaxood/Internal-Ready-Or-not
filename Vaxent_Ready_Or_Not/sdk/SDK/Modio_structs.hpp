#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Modio

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Modio.EModioModServerSideStatus
// NumValues: 0x0004
enum class EModioModServerSideStatus : uint8
{
	NotAccepted                              = 0,
	Accepted                                 = 1,
	Deleted                                  = 3,
	EModioModServerSideStatus_MAX            = 4,
};

// Enum Modio.EModioVirusStatus
// NumValues: 0x0003
enum class EModioVirusStatus : uint8
{
	NoThreat                                 = 0,
	Malicious                                = 1,
	EModioVirusStatus_MAX                    = 2,
};

// Enum Modio.EModioVirusScanStatus
// NumValues: 0x0007
enum class EModioVirusScanStatus : uint8
{
	NotScanned                               = 0,
	ScanComplete                             = 1,
	InProgress                               = 2,
	TooLargeToScan                           = 3,
	FileNotFound                             = 4,
	ErrorScanning                            = 5,
	EModioVirusScanStatus_MAX                = 6,
};

// Enum Modio.EModioObjectVisibilityFlags
// NumValues: 0x0003
enum class EModioObjectVisibilityFlags : uint8
{
	Hidden                                   = 0,
	Public                                   = 1,
	EModioObjectVisibilityFlags_MAX          = 2,
};

// Enum Modio.EModioMaturityFlags
// NumValues: 0x0006
enum class EModioMaturityFlags : uint8
{
	None                                     = 0,
	Alcohol                                  = 1,
	Drugs                                    = 2,
	Violence                                 = 4,
	Explicit                                 = 8,
	EModioMaturityFlags_MAX                  = 9,
};

// Enum Modio.EModioModManagementEventType
// NumValues: 0x0009
enum class EModioModManagementEventType : uint8
{
	Installed                                = 0,
	Uninstalled                              = 1,
	Updated                                  = 2,
	Uploaded                                 = 3,
	BeginInstall                             = 4,
	BeginUninstall                           = 5,
	BeginUpdate                              = 6,
	BeginUpload                              = 7,
	EModioModManagementEventType_MAX         = 8,
};

// Enum Modio.EModioAuthenticationProvider
// NumValues: 0x000B
enum class EModioAuthenticationProvider : uint8
{
	XboxLive                                 = 0,
	Steam                                    = 1,
	GoG                                      = 2,
	Itch                                     = 3,
	Switch                                   = 4,
	Discord                                  = 5,
	PSN                                      = 6,
	Epic                                     = 7,
	Oculus                                   = 8,
	OpenID                                   = 9,
	EModioAuthenticationProvider_MAX         = 10,
};

// Enum Modio.EModioLanguage
// NumValues: 0x0010
enum class EModioLanguage : uint8
{
	English                                  = 0,
	Bulgarian                                = 1,
	French                                   = 2,
	German                                   = 3,
	Italian                                  = 4,
	Polish                                   = 5,
	Portuguese                               = 6,
	Hungarian                                = 7,
	Japanese                                 = 8,
	Korean                                   = 9,
	Russian                                  = 10,
	Spanish                                  = 11,
	Thai                                     = 12,
	ChineseSimplified                        = 13,
	ChineseTraditional                       = 14,
	EModioLanguage_MAX                       = 15,
};

// Enum Modio.EModioLogLevel
// NumValues: 0x0005
enum class EModioLogLevel : uint8
{
	Trace                                    = 0,
	Info                                     = 1,
	Warning                                  = 2,
	Error                                    = 3,
	EModioLogLevel_MAX                       = 4,
};

// Enum Modio.EModioGallerySize
// NumValues: 0x0003
enum class EModioGallerySize : uint8
{
	Original                                 = 0,
	Thumb320                                 = 1,
	EModioGallerySize_MAX                    = 2,
};

// Enum Modio.EModioAvatarSize
// NumValues: 0x0004
enum class EModioAvatarSize : uint8
{
	Original                                 = 0,
	Thumb50                                  = 1,
	Thumb100                                 = 2,
	EModioAvatarSize_MAX                     = 3,
};

// Enum Modio.EModioLogoSize
// NumValues: 0x0005
enum class EModioLogoSize : uint8
{
	Thumb320                                 = 0,
	Thumb640                                 = 1,
	Thumb1280                                = 2,
	Original                                 = 3,
	EModioLogoSize_MAX                       = 4,
};

// Enum Modio.EModioModfilePlatform
// NumValues: 0x000D
enum class EModioModfilePlatform : uint8
{
	Windows                                  = 0,
	Mac                                      = 1,
	Linux                                    = 2,
	Android                                  = 3,
	IOS                                      = 4,
	XboxOne                                  = 5,
	XboxSeriesX                              = 6,
	PS4                                      = 7,
	PS5                                      = 8,
	Switch                                   = 9,
	Oculus                                   = 10,
	Source                                   = 11,
	EModioModfilePlatform_MAX                = 12,
};

// Enum Modio.EModioPortal
// NumValues: 0x000B
enum class EModioPortal : uint8
{
	None                                     = 0,
	Apple                                    = 1,
	EpicGamesStore                           = 2,
	GOG                                      = 3,
	Google                                   = 4,
	Itchio                                   = 5,
	Nintendo                                 = 6,
	PSN                                      = 7,
	Steam                                    = 8,
	XboxLive                                 = 9,
	EModioPortal_MAX                         = 10,
};

// Enum Modio.EModioEnvironment
// NumValues: 0x0003
enum class EModioEnvironment : uint8
{
	Test                                     = 0,
	Live                                     = 1,
	EModioEnvironment_MAX                    = 2,
};

// Enum Modio.EModioErrorCondition
// NumValues: 0x0010
enum class EModioErrorCondition : uint8
{
	NoError                                  = 0,
	NetworkError                             = 2,
	ConfigurationError                       = 3,
	InvalidArgsError                         = 4,
	FilesystemError                          = 5,
	InternalError                            = 6,
	EntityNotFoundError                      = 12,
	UserTermsOfUseError                      = 13,
	SubmitReportError                        = 14,
	UserNotAuthenticatedError                = 15,
	SDKNotInitialized                        = 16,
	UserAlreadyAuthenticatedError            = 17,
	SystemError                              = 18,
	OperationCanceled                        = 19,
	ModManagementDisabled                    = 20,
	EModioErrorCondition_MAX                 = 21,
};

// Enum Modio.EModioSortDirection
// NumValues: 0x0003
enum class EModioSortDirection : uint8
{
	Ascending                                = 0,
	Descending                               = 1,
	EModioSortDirection_MAX                  = 2,
};

// Enum Modio.EModioSortFieldType
// NumValues: 0x0008
enum class EModioSortFieldType : uint8
{
	ID                                       = 0,
	DownloadsToday                           = 1,
	SubscriberCount                          = 2,
	Rating                                   = 3,
	DateMarkedLive                           = 4,
	DateUpdated                              = 5,
	DownloadsTotal                           = 6,
	EModioSortFieldType_MAX                  = 7,
};

// Enum Modio.EModioImageState
// NumValues: 0x0005
enum class EModioImageState : uint8
{
	OnDisc                                   = 0,
	LoadingIntoMemory                        = 1,
	InMemory                                 = 2,
	Corrupted                                = 3,
	EModioImageState_MAX                     = 4,
};

// Enum Modio.EModioModState
// NumValues: 0x0007
enum class EModioModState : uint8
{
	InstallationPending                      = 0,
	Installed                                = 1,
	UpdatePending                            = 2,
	Downloading                              = 3,
	Extracting                               = 4,
	UninstallPending                         = 5,
	EModioModState_MAX                       = 6,
};

// Enum Modio.EModioModProgressState
// NumValues: 0x0006
enum class EModioModProgressState : uint8
{
	Initializing                             = 0,
	Downloading                              = 1,
	Extracting                               = 2,
	Compressing                              = 3,
	Uploading                                = 4,
	EModioModProgressState_MAX               = 5,
};

// Enum Modio.EModioRating
// NumValues: 0x0004
enum class EModioRating : uint8
{
	Neutral                                  = 0,
	Positive                                 = 1,
	Negative                                 = 2,
	EModioRating_MAX                         = 3,
};

// Enum Modio.EModioReportType
// NumValues: 0x0009
enum class EModioReportType : uint8
{
	Generic                                  = 0,
	DMCA                                     = 1,
	NotWorking                               = 2,
	RudeContent                              = 3,
	IllegalContent                           = 4,
	StolenContent                            = 5,
	FalseInformation                         = 6,
	Other                                    = 7,
	EModioReportType_MAX                     = 8,
};

// Enum Modio.EFileSizeUnit
// NumValues: 0x0006
enum class EFileSizeUnit : uint8
{
	Largest                                  = 0,
	B                                        = 1,
	KB                                       = 1024,
	MB                                       = 1048576,
	GB                                       = 1073741824,
	EFileSizeUnit_MAX                        = 1073741825,
};

// ScriptStruct Modio.ModioEmailAuthCode
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FModioEmailAuthCode final 
{
public:
	uint8                                         Pad_1794[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioEmailAuthCode) == 0x000008, "Wrong alignment on FModioEmailAuthCode");
static_assert(sizeof(FModioEmailAuthCode) == 0x000010, "Wrong size on FModioEmailAuthCode");

// ScriptStruct Modio.ModioFileMetadataID
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FModioFileMetadataID final 
{
public:
	uint8                                         Pad_1795[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioFileMetadataID) == 0x000008, "Wrong alignment on FModioFileMetadataID");
static_assert(sizeof(FModioFileMetadataID) == 0x000008, "Wrong size on FModioFileMetadataID");

// ScriptStruct Modio.ModioModID
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FModioModID final 
{
public:
	uint8                                         Pad_1796[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioModID) == 0x000008, "Wrong alignment on FModioModID");
static_assert(sizeof(FModioModID) == 0x000008, "Wrong size on FModioModID");

// ScriptStruct Modio.ModioFileMetadata
// 0x0068 (0x0068 - 0x0000)
struct FModioFileMetadata final 
{
public:
	struct FModioFileMetadataID                   MetadataId;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioModID                            ModId;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateAdded;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioVirusScanStatus                         CurrentVirusScanStatus;                            // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioVirusStatus                             CurrentVirusStatus;                                // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1797[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Filesize;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Changelog;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetadataBlob;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioFileMetadata) == 0x000008, "Wrong alignment on FModioFileMetadata");
static_assert(sizeof(FModioFileMetadata) == 0x000068, "Wrong size on FModioFileMetadata");
static_assert(offsetof(FModioFileMetadata, MetadataId) == 0x000000, "Member 'FModioFileMetadata::MetadataId' has a wrong offset!");
static_assert(offsetof(FModioFileMetadata, ModId) == 0x000008, "Member 'FModioFileMetadata::ModId' has a wrong offset!");
static_assert(offsetof(FModioFileMetadata, DateAdded) == 0x000010, "Member 'FModioFileMetadata::DateAdded' has a wrong offset!");
static_assert(offsetof(FModioFileMetadata, CurrentVirusScanStatus) == 0x000018, "Member 'FModioFileMetadata::CurrentVirusScanStatus' has a wrong offset!");
static_assert(offsetof(FModioFileMetadata, CurrentVirusStatus) == 0x000019, "Member 'FModioFileMetadata::CurrentVirusStatus' has a wrong offset!");
static_assert(offsetof(FModioFileMetadata, Filesize) == 0x000020, "Member 'FModioFileMetadata::Filesize' has a wrong offset!");
static_assert(offsetof(FModioFileMetadata, Filename) == 0x000028, "Member 'FModioFileMetadata::Filename' has a wrong offset!");
static_assert(offsetof(FModioFileMetadata, Version) == 0x000038, "Member 'FModioFileMetadata::Version' has a wrong offset!");
static_assert(offsetof(FModioFileMetadata, Changelog) == 0x000048, "Member 'FModioFileMetadata::Changelog' has a wrong offset!");
static_assert(offsetof(FModioFileMetadata, MetadataBlob) == 0x000058, "Member 'FModioFileMetadata::MetadataBlob' has a wrong offset!");

// ScriptStruct Modio.ModioLink
// 0x0028 (0x0028 - 0x0000)
struct FModioLink final 
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequired;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1798[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioLink) == 0x000008, "Wrong alignment on FModioLink");
static_assert(sizeof(FModioLink) == 0x000028, "Wrong size on FModioLink");
static_assert(offsetof(FModioLink, Text) == 0x000000, "Member 'FModioLink::Text' has a wrong offset!");
static_assert(offsetof(FModioLink, URL) == 0x000010, "Member 'FModioLink::URL' has a wrong offset!");
static_assert(offsetof(FModioLink, bRequired) == 0x000020, "Member 'FModioLink::bRequired' has a wrong offset!");

// ScriptStruct Modio.ModioYoutubeURLList
// 0x0001 (0x0001 - 0x0000)
struct FModioYoutubeURLList final 
{
public:
	uint8                                         Pad_1799[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioYoutubeURLList) == 0x000001, "Wrong alignment on FModioYoutubeURLList");
static_assert(sizeof(FModioYoutubeURLList) == 0x000001, "Wrong size on FModioYoutubeURLList");

// ScriptStruct Modio.ModioSketchfabURLList
// 0x0001 (0x0001 - 0x0000)
struct FModioSketchfabURLList final 
{
public:
	uint8                                         Pad_179A[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioSketchfabURLList) == 0x000001, "Wrong alignment on FModioSketchfabURLList");
static_assert(sizeof(FModioSketchfabURLList) == 0x000001, "Wrong size on FModioSketchfabURLList");

// ScriptStruct Modio.ModioReportParams
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FModioReportParams final 
{
public:
	uint8                                         Pad_179B[0x58];                                    // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioReportParams) == 0x000008, "Wrong alignment on FModioReportParams");
static_assert(sizeof(FModioReportParams) == 0x000058, "Wrong size on FModioReportParams");

// ScriptStruct Modio.ModioPagedResult
// 0x0014 (0x0014 - 0x0000)
struct FModioPagedResult final 
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PageSize;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PageCount;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalResultCount;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ResultCount;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FModioPagedResult) == 0x000004, "Wrong alignment on FModioPagedResult");
static_assert(sizeof(FModioPagedResult) == 0x000014, "Wrong size on FModioPagedResult");
static_assert(offsetof(FModioPagedResult, PageIndex) == 0x000000, "Member 'FModioPagedResult::PageIndex' has a wrong offset!");
static_assert(offsetof(FModioPagedResult, PageSize) == 0x000004, "Member 'FModioPagedResult::PageSize' has a wrong offset!");
static_assert(offsetof(FModioPagedResult, PageCount) == 0x000008, "Member 'FModioPagedResult::PageCount' has a wrong offset!");
static_assert(offsetof(FModioPagedResult, TotalResultCount) == 0x00000C, "Member 'FModioPagedResult::TotalResultCount' has a wrong offset!");
static_assert(offsetof(FModioPagedResult, ResultCount) == 0x000010, "Member 'FModioPagedResult::ResultCount' has a wrong offset!");

// ScriptStruct Modio.ModioUserID
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FModioUserID final 
{
public:
	uint8                                         Pad_179C[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioUserID) == 0x000008, "Wrong alignment on FModioUserID");
static_assert(sizeof(FModioUserID) == 0x000008, "Wrong size on FModioUserID");

// ScriptStruct Modio.ModioUser
// 0x0040 (0x0040 - 0x0000)
struct FModioUser final 
{
public:
	struct FModioUserID                           UserID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateOnline;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileUrl;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayNamePortal;                                 // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioUser) == 0x000008, "Wrong alignment on FModioUser");
static_assert(sizeof(FModioUser) == 0x000040, "Wrong size on FModioUser");
static_assert(offsetof(FModioUser, UserID) == 0x000000, "Member 'FModioUser::UserID' has a wrong offset!");
static_assert(offsetof(FModioUser, Username) == 0x000008, "Member 'FModioUser::Username' has a wrong offset!");
static_assert(offsetof(FModioUser, DateOnline) == 0x000018, "Member 'FModioUser::DateOnline' has a wrong offset!");
static_assert(offsetof(FModioUser, ProfileUrl) == 0x000020, "Member 'FModioUser::ProfileUrl' has a wrong offset!");
static_assert(offsetof(FModioUser, DisplayNamePortal) == 0x000030, "Member 'FModioUser::DisplayNamePortal' has a wrong offset!");

// ScriptStruct Modio.ModioMetadata
// 0x0020 (0x0020 - 0x0000)
struct FModioMetadata final 
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioMetadata) == 0x000008, "Wrong alignment on FModioMetadata");
static_assert(sizeof(FModioMetadata) == 0x000020, "Wrong size on FModioMetadata");
static_assert(offsetof(FModioMetadata, Key) == 0x000000, "Member 'FModioMetadata::Key' has a wrong offset!");
static_assert(offsetof(FModioMetadata, Value) == 0x000010, "Member 'FModioMetadata::Value' has a wrong offset!");

// ScriptStruct Modio.ModioModTag
// 0x0010 (0x0010 - 0x0000)
struct FModioModTag final 
{
public:
	class FString                                 Tag;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModTag) == 0x000008, "Wrong alignment on FModioModTag");
static_assert(sizeof(FModioModTag) == 0x000010, "Wrong size on FModioModTag");
static_assert(offsetof(FModioModTag, Tag) == 0x000000, "Member 'FModioModTag::Tag' has a wrong offset!");

// ScriptStruct Modio.ModioModStats
// 0x0058 (0x0058 - 0x0000)
struct FModioModStats final 
{
public:
	int64                                         PopularityRankPosition;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PopularityRankTotalMods;                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DownloadsTotal;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SubscribersTotal;                                  // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RatingTotal;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RatingPositive;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RatingNegative;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RatingPercentagePositive;                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RatingWeightedAggregate;                           // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179D[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RatingDisplayText;                                 // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModStats) == 0x000008, "Wrong alignment on FModioModStats");
static_assert(sizeof(FModioModStats) == 0x000058, "Wrong size on FModioModStats");
static_assert(offsetof(FModioModStats, PopularityRankPosition) == 0x000000, "Member 'FModioModStats::PopularityRankPosition' has a wrong offset!");
static_assert(offsetof(FModioModStats, PopularityRankTotalMods) == 0x000008, "Member 'FModioModStats::PopularityRankTotalMods' has a wrong offset!");
static_assert(offsetof(FModioModStats, DownloadsTotal) == 0x000010, "Member 'FModioModStats::DownloadsTotal' has a wrong offset!");
static_assert(offsetof(FModioModStats, SubscribersTotal) == 0x000018, "Member 'FModioModStats::SubscribersTotal' has a wrong offset!");
static_assert(offsetof(FModioModStats, RatingTotal) == 0x000020, "Member 'FModioModStats::RatingTotal' has a wrong offset!");
static_assert(offsetof(FModioModStats, RatingPositive) == 0x000028, "Member 'FModioModStats::RatingPositive' has a wrong offset!");
static_assert(offsetof(FModioModStats, RatingNegative) == 0x000030, "Member 'FModioModStats::RatingNegative' has a wrong offset!");
static_assert(offsetof(FModioModStats, RatingPercentagePositive) == 0x000038, "Member 'FModioModStats::RatingPercentagePositive' has a wrong offset!");
static_assert(offsetof(FModioModStats, RatingWeightedAggregate) == 0x000040, "Member 'FModioModStats::RatingWeightedAggregate' has a wrong offset!");
static_assert(offsetof(FModioModStats, RatingDisplayText) == 0x000048, "Member 'FModioModStats::RatingDisplayText' has a wrong offset!");

// ScriptStruct Modio.ModioModInfo
// 0x01D8 (0x01D8 - 0x0000)
struct FModioModInfo final 
{
public:
	struct FModioModID                            ModId;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileSummary;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileDescription;                                // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileDescriptionPlaintext;                       // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileUrl;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioUser                             ProfileSubmittedBy;                                // 0x0058(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FDateTime                              ProfileDateAdded;                                  // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ProfileDateUpdated;                                // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ProfileDateLive;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioMaturityFlags                           ProfileMaturityOption;                             // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x00B1(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioObjectVisibilityFlags                   Visibility;                                        // 0x00B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179E[0x5];                                     // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MetadataBlob;                                      // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioFileMetadata                     FileInfo;                                          // 0x00C8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<struct FModioMetadata>                 MetadataKvp;                                       // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<struct FModioModTag>                   Tags;                                              // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	int32                                         NumGalleryImages;                                  // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179F[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioYoutubeURLList                   YoutubeURLs;                                       // 0x0158(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A0[0xF];                                     // 0x0159(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioSketchfabURLList                 SketchfabURLs;                                     // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A1[0xF];                                     // 0x0169(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModStats                         Stats;                                             // 0x0178(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	EModioModServerSideStatus                     ModStatus;                                         // 0x01D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A2[0x7];                                     // 0x01D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioModInfo) == 0x000008, "Wrong alignment on FModioModInfo");
static_assert(sizeof(FModioModInfo) == 0x0001D8, "Wrong size on FModioModInfo");
static_assert(offsetof(FModioModInfo, ModId) == 0x000000, "Member 'FModioModInfo::ModId' has a wrong offset!");
static_assert(offsetof(FModioModInfo, ProfileName) == 0x000008, "Member 'FModioModInfo::ProfileName' has a wrong offset!");
static_assert(offsetof(FModioModInfo, ProfileSummary) == 0x000018, "Member 'FModioModInfo::ProfileSummary' has a wrong offset!");
static_assert(offsetof(FModioModInfo, ProfileDescription) == 0x000028, "Member 'FModioModInfo::ProfileDescription' has a wrong offset!");
static_assert(offsetof(FModioModInfo, ProfileDescriptionPlaintext) == 0x000038, "Member 'FModioModInfo::ProfileDescriptionPlaintext' has a wrong offset!");
static_assert(offsetof(FModioModInfo, ProfileUrl) == 0x000048, "Member 'FModioModInfo::ProfileUrl' has a wrong offset!");
static_assert(offsetof(FModioModInfo, ProfileSubmittedBy) == 0x000058, "Member 'FModioModInfo::ProfileSubmittedBy' has a wrong offset!");
static_assert(offsetof(FModioModInfo, ProfileDateAdded) == 0x000098, "Member 'FModioModInfo::ProfileDateAdded' has a wrong offset!");
static_assert(offsetof(FModioModInfo, ProfileDateUpdated) == 0x0000A0, "Member 'FModioModInfo::ProfileDateUpdated' has a wrong offset!");
static_assert(offsetof(FModioModInfo, ProfileDateLive) == 0x0000A8, "Member 'FModioModInfo::ProfileDateLive' has a wrong offset!");
static_assert(offsetof(FModioModInfo, ProfileMaturityOption) == 0x0000B0, "Member 'FModioModInfo::ProfileMaturityOption' has a wrong offset!");
static_assert(offsetof(FModioModInfo, bVisible) == 0x0000B1, "Member 'FModioModInfo::bVisible' has a wrong offset!");
static_assert(offsetof(FModioModInfo, Visibility) == 0x0000B2, "Member 'FModioModInfo::Visibility' has a wrong offset!");
static_assert(offsetof(FModioModInfo, MetadataBlob) == 0x0000B8, "Member 'FModioModInfo::MetadataBlob' has a wrong offset!");
static_assert(offsetof(FModioModInfo, FileInfo) == 0x0000C8, "Member 'FModioModInfo::FileInfo' has a wrong offset!");
static_assert(offsetof(FModioModInfo, MetadataKvp) == 0x000130, "Member 'FModioModInfo::MetadataKvp' has a wrong offset!");
static_assert(offsetof(FModioModInfo, Tags) == 0x000140, "Member 'FModioModInfo::Tags' has a wrong offset!");
static_assert(offsetof(FModioModInfo, NumGalleryImages) == 0x000150, "Member 'FModioModInfo::NumGalleryImages' has a wrong offset!");
static_assert(offsetof(FModioModInfo, YoutubeURLs) == 0x000158, "Member 'FModioModInfo::YoutubeURLs' has a wrong offset!");
static_assert(offsetof(FModioModInfo, SketchfabURLs) == 0x000168, "Member 'FModioModInfo::SketchfabURLs' has a wrong offset!");
static_assert(offsetof(FModioModInfo, Stats) == 0x000178, "Member 'FModioModInfo::Stats' has a wrong offset!");
static_assert(offsetof(FModioModInfo, ModStatus) == 0x0001D0, "Member 'FModioModInfo::ModStatus' has a wrong offset!");

// ScriptStruct Modio.ModioModInfoList
// 0x0028 (0x0028 - 0x0000)
struct FModioModInfoList final 
{
public:
	struct FModioPagedResult                      PagedResult;                                       // 0x0000(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A3[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModioModInfo>                  InternalList;                                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModInfoList) == 0x000008, "Wrong alignment on FModioModInfoList");
static_assert(sizeof(FModioModInfoList) == 0x000028, "Wrong size on FModioModInfoList");
static_assert(offsetof(FModioModInfoList, PagedResult) == 0x000000, "Member 'FModioModInfoList::PagedResult' has a wrong offset!");
static_assert(offsetof(FModioModInfoList, InternalList) == 0x000018, "Member 'FModioModInfoList::InternalList' has a wrong offset!");

// ScriptStruct Modio.ModioModDependency
// 0x0018 (0x0018 - 0x0000)
struct FModioModDependency final 
{
public:
	struct FModioModID                            ModId;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModName;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModDependency) == 0x000008, "Wrong alignment on FModioModDependency");
static_assert(sizeof(FModioModDependency) == 0x000018, "Wrong size on FModioModDependency");
static_assert(offsetof(FModioModDependency, ModId) == 0x000000, "Member 'FModioModDependency::ModId' has a wrong offset!");
static_assert(offsetof(FModioModDependency, ModName) == 0x000008, "Member 'FModioModDependency::ModName' has a wrong offset!");

// ScriptStruct Modio.ModioModDependencyList
// 0x0028 (0x0028 - 0x0000)
struct FModioModDependencyList final 
{
public:
	struct FModioPagedResult                      PagedResult;                                       // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModioModDependency>            InternalList;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModDependencyList) == 0x000008, "Wrong alignment on FModioModDependencyList");
static_assert(sizeof(FModioModDependencyList) == 0x000028, "Wrong size on FModioModDependencyList");
static_assert(offsetof(FModioModDependencyList, PagedResult) == 0x000000, "Member 'FModioModDependencyList::PagedResult' has a wrong offset!");
static_assert(offsetof(FModioModDependencyList, InternalList) == 0x000018, "Member 'FModioModDependencyList::InternalList' has a wrong offset!");

// ScriptStruct Modio.ModioTerms
// 0x00D0 (0x00D0 - 0x0000)
struct FModioTerms final 
{
public:
	class FString                                 AgreeButtonText;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisagreeButtonText;                                // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioLink                             WebsiteLink;                                       // 0x0020(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FModioLink                             TermsLink;                                         // 0x0048(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FModioLink                             PrivacyLink;                                       // 0x0070(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FModioLink                             ManageLink;                                        // 0x0098(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A5[0x10];                                    // 0x00C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioTerms) == 0x000008, "Wrong alignment on FModioTerms");
static_assert(sizeof(FModioTerms) == 0x0000D0, "Wrong size on FModioTerms");
static_assert(offsetof(FModioTerms, AgreeButtonText) == 0x000000, "Member 'FModioTerms::AgreeButtonText' has a wrong offset!");
static_assert(offsetof(FModioTerms, DisagreeButtonText) == 0x000010, "Member 'FModioTerms::DisagreeButtonText' has a wrong offset!");
static_assert(offsetof(FModioTerms, WebsiteLink) == 0x000020, "Member 'FModioTerms::WebsiteLink' has a wrong offset!");
static_assert(offsetof(FModioTerms, TermsLink) == 0x000048, "Member 'FModioTerms::TermsLink' has a wrong offset!");
static_assert(offsetof(FModioTerms, PrivacyLink) == 0x000070, "Member 'FModioTerms::PrivacyLink' has a wrong offset!");
static_assert(offsetof(FModioTerms, ManageLink) == 0x000098, "Member 'FModioTerms::ManageLink' has a wrong offset!");

// ScriptStruct Modio.ModioLogo
// 0x0050 (0x0050 - 0x0000)
struct FModioLogo final 
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Original;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb320x180;                                      // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb640x360;                                      // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb1280x720;                                     // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioLogo) == 0x000008, "Wrong alignment on FModioLogo");
static_assert(sizeof(FModioLogo) == 0x000050, "Wrong size on FModioLogo");
static_assert(offsetof(FModioLogo, Filename) == 0x000000, "Member 'FModioLogo::Filename' has a wrong offset!");
static_assert(offsetof(FModioLogo, Original) == 0x000010, "Member 'FModioLogo::Original' has a wrong offset!");
static_assert(offsetof(FModioLogo, Thumb320x180) == 0x000020, "Member 'FModioLogo::Thumb320x180' has a wrong offset!");
static_assert(offsetof(FModioLogo, Thumb640x360) == 0x000030, "Member 'FModioLogo::Thumb640x360' has a wrong offset!");
static_assert(offsetof(FModioLogo, Thumb1280x720) == 0x000040, "Member 'FModioLogo::Thumb1280x720' has a wrong offset!");

// ScriptStruct Modio.ModioAuthenticationParams
// 0x0078 (0x0078 - 0x0000)
struct FModioAuthenticationParams final 
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserEmail;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUserHasAcceptedTerms;                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A6[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            ExtendedParameters;                                // 0x0028(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioAuthenticationParams) == 0x000008, "Wrong alignment on FModioAuthenticationParams");
static_assert(sizeof(FModioAuthenticationParams) == 0x000078, "Wrong size on FModioAuthenticationParams");
static_assert(offsetof(FModioAuthenticationParams, AuthToken) == 0x000000, "Member 'FModioAuthenticationParams::AuthToken' has a wrong offset!");
static_assert(offsetof(FModioAuthenticationParams, UserEmail) == 0x000010, "Member 'FModioAuthenticationParams::UserEmail' has a wrong offset!");
static_assert(offsetof(FModioAuthenticationParams, bUserHasAcceptedTerms) == 0x000020, "Member 'FModioAuthenticationParams::bUserHasAcceptedTerms' has a wrong offset!");
static_assert(offsetof(FModioAuthenticationParams, ExtendedParameters) == 0x000028, "Member 'FModioAuthenticationParams::ExtendedParameters' has a wrong offset!");

// ScriptStruct Modio.ModioOtherUrl
// 0x0020 (0x0020 - 0x0000)
struct FModioOtherUrl final 
{
public:
	class FString                                 Label;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioOtherUrl) == 0x000008, "Wrong alignment on FModioOtherUrl");
static_assert(sizeof(FModioOtherUrl) == 0x000020, "Wrong size on FModioOtherUrl");
static_assert(offsetof(FModioOtherUrl, Label) == 0x000000, "Member 'FModioOtherUrl::Label' has a wrong offset!");
static_assert(offsetof(FModioOtherUrl, URL) == 0x000010, "Member 'FModioOtherUrl::URL' has a wrong offset!");

// ScriptStruct Modio.ModioIcon
// 0x0050 (0x0050 - 0x0000)
struct FModioIcon final 
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Original;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb64x64;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb128x128;                                      // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb256x256;                                      // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioIcon) == 0x000008, "Wrong alignment on FModioIcon");
static_assert(sizeof(FModioIcon) == 0x000050, "Wrong size on FModioIcon");
static_assert(offsetof(FModioIcon, Filename) == 0x000000, "Member 'FModioIcon::Filename' has a wrong offset!");
static_assert(offsetof(FModioIcon, Original) == 0x000010, "Member 'FModioIcon::Original' has a wrong offset!");
static_assert(offsetof(FModioIcon, Thumb64x64) == 0x000020, "Member 'FModioIcon::Thumb64x64' has a wrong offset!");
static_assert(offsetof(FModioIcon, Thumb128x128) == 0x000030, "Member 'FModioIcon::Thumb128x128' has a wrong offset!");
static_assert(offsetof(FModioIcon, Thumb256x256) == 0x000040, "Member 'FModioIcon::Thumb256x256' has a wrong offset!");

// ScriptStruct Modio.ModioEditModParams
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0x08) FModioEditModParams final 
{
public:
	uint8                                         Pad_17A7[0xD0];                                    // 0x0000(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioEditModParams) == 0x000008, "Wrong alignment on FModioEditModParams");
static_assert(sizeof(FModioEditModParams) == 0x0000D0, "Wrong size on FModioEditModParams");

// ScriptStruct Modio.ModioModTagInfo
// 0x0028 (0x0028 - 0x0000)
struct FModioModTagInfo final 
{
public:
	class FString                                 TagGroupName;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TagGroupValues;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          bAllowMultipleSelection;                           // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A8[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioModTagInfo) == 0x000008, "Wrong alignment on FModioModTagInfo");
static_assert(sizeof(FModioModTagInfo) == 0x000028, "Wrong size on FModioModTagInfo");
static_assert(offsetof(FModioModTagInfo, TagGroupName) == 0x000000, "Member 'FModioModTagInfo::TagGroupName' has a wrong offset!");
static_assert(offsetof(FModioModTagInfo, TagGroupValues) == 0x000010, "Member 'FModioModTagInfo::TagGroupValues' has a wrong offset!");
static_assert(offsetof(FModioModTagInfo, bAllowMultipleSelection) == 0x000020, "Member 'FModioModTagInfo::bAllowMultipleSelection' has a wrong offset!");

// ScriptStruct Modio.ModioModTagOptions
// 0x0028 (0x0028 - 0x0000)
struct FModioModTagOptions final 
{
public:
	struct FModioPagedResult                      PagedResult;                                       // 0x0000(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A9[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModioModTagInfo>               InternalList;                                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModTagOptions) == 0x000008, "Wrong alignment on FModioModTagOptions");
static_assert(sizeof(FModioModTagOptions) == 0x000028, "Wrong size on FModioModTagOptions");
static_assert(offsetof(FModioModTagOptions, PagedResult) == 0x000000, "Member 'FModioModTagOptions::PagedResult' has a wrong offset!");
static_assert(offsetof(FModioModTagOptions, InternalList) == 0x000018, "Member 'FModioModTagOptions::InternalList' has a wrong offset!");

// ScriptStruct Modio.ModioUserList
// 0x0028 (0x0028 - 0x0000)
struct FModioUserList final 
{
public:
	struct FModioPagedResult                      PagedResult;                                       // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17AA[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModioUser>                     InternalList;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioUserList) == 0x000008, "Wrong alignment on FModioUserList");
static_assert(sizeof(FModioUserList) == 0x000028, "Wrong size on FModioUserList");
static_assert(offsetof(FModioUserList, PagedResult) == 0x000000, "Member 'FModioUserList::PagedResult' has a wrong offset!");
static_assert(offsetof(FModioUserList, InternalList) == 0x000018, "Member 'FModioUserList::InternalList' has a wrong offset!");

// ScriptStruct Modio.ModioApiKey
// 0x0010 (0x0010 - 0x0000)
struct FModioApiKey final 
{
public:
	class FString                                 ApiKey;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FModioApiKey) == 0x000008, "Wrong alignment on FModioApiKey");
static_assert(sizeof(FModioApiKey) == 0x000010, "Wrong size on FModioApiKey");
static_assert(offsetof(FModioApiKey, ApiKey) == 0x000000, "Member 'FModioApiKey::ApiKey' has a wrong offset!");

// ScriptStruct Modio.ModioErrorCode
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FModioErrorCode final 
{
public:
	uint8                                         Pad_17AB[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioErrorCode) == 0x000008, "Wrong alignment on FModioErrorCode");
static_assert(sizeof(FModioErrorCode) == 0x000008, "Wrong size on FModioErrorCode");

// ScriptStruct Modio.ModioFilterParams
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FModioFilterParams final 
{
public:
	uint8                                         Pad_17AC[0xA8];                                    // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioFilterParams) == 0x000008, "Wrong alignment on FModioFilterParams");
static_assert(sizeof(FModioFilterParams) == 0x0000A8, "Wrong size on FModioFilterParams");

// ScriptStruct Modio.ModioModManagementEvent
// 0x0018 (0x0018 - 0x0000)
struct FModioModManagementEvent final 
{
public:
	struct FModioModID                            ID;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioModManagementEventType                  Event;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17AD[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioErrorCode                        Status;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModManagementEvent) == 0x000008, "Wrong alignment on FModioModManagementEvent");
static_assert(sizeof(FModioModManagementEvent) == 0x000018, "Wrong size on FModioModManagementEvent");
static_assert(offsetof(FModioModManagementEvent, ID) == 0x000000, "Member 'FModioModManagementEvent::ID' has a wrong offset!");
static_assert(offsetof(FModioModManagementEvent, Event) == 0x000008, "Member 'FModioModManagementEvent::Event' has a wrong offset!");
static_assert(offsetof(FModioModManagementEvent, Status) == 0x000010, "Member 'FModioModManagementEvent::Status' has a wrong offset!");

// ScriptStruct Modio.ModioGameID
// 0x0008 (0x0008 - 0x0000)
struct FModioGameID final 
{
public:
	int64                                         GameId;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FModioGameID) == 0x000008, "Wrong alignment on FModioGameID");
static_assert(sizeof(FModioGameID) == 0x000008, "Wrong size on FModioGameID");
static_assert(offsetof(FModioGameID, GameId) == 0x000000, "Member 'FModioGameID::GameId' has a wrong offset!");

// ScriptStruct Modio.ModioOptionalModInfoList
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FModioOptionalModInfoList final 
{
public:
	uint8                                         Pad_17AE[0x30];                                    // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioOptionalModInfoList) == 0x000008, "Wrong alignment on FModioOptionalModInfoList");
static_assert(sizeof(FModioOptionalModInfoList) == 0x000030, "Wrong size on FModioOptionalModInfoList");

// ScriptStruct Modio.ModioEmailAddress
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FModioEmailAddress final 
{
public:
	uint8                                         Pad_17AF[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioEmailAddress) == 0x000008, "Wrong alignment on FModioEmailAddress");
static_assert(sizeof(FModioEmailAddress) == 0x000010, "Wrong size on FModioEmailAddress");

// ScriptStruct Modio.ModioOptionalModInfo
// 0x01E0 (0x01E0 - 0x0000)
struct alignas(0x08) FModioOptionalModInfo final 
{
public:
	uint8                                         Pad_17B0[0x1E0];                                   // 0x0000(0x01E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioOptionalModInfo) == 0x000008, "Wrong alignment on FModioOptionalModInfo");
static_assert(sizeof(FModioOptionalModInfo) == 0x0001E0, "Wrong size on FModioOptionalModInfo");

// ScriptStruct Modio.ModioOptionalGameInfo
// 0x0200 (0x0200 - 0x0000)
struct alignas(0x08) FModioOptionalGameInfo final 
{
public:
	uint8                                         Pad_17B1[0x200];                                   // 0x0000(0x0200)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioOptionalGameInfo) == 0x000008, "Wrong alignment on FModioOptionalGameInfo");
static_assert(sizeof(FModioOptionalGameInfo) == 0x000200, "Wrong size on FModioOptionalGameInfo");

// ScriptStruct Modio.ModioOptionalImage
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FModioOptionalImage final 
{
public:
	uint8                                         Pad_17B2[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioOptionalImage) == 0x000008, "Wrong alignment on FModioOptionalImage");
static_assert(sizeof(FModioOptionalImage) == 0x000018, "Wrong size on FModioOptionalImage");

// ScriptStruct Modio.ModioHeaderImage
// 0x0020 (0x0020 - 0x0000)
struct FModioHeaderImage final 
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Original;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioHeaderImage) == 0x000008, "Wrong alignment on FModioHeaderImage");
static_assert(sizeof(FModioHeaderImage) == 0x000020, "Wrong size on FModioHeaderImage");
static_assert(offsetof(FModioHeaderImage, Filename) == 0x000000, "Member 'FModioHeaderImage::Filename' has a wrong offset!");
static_assert(offsetof(FModioHeaderImage, Original) == 0x000010, "Member 'FModioHeaderImage::Original' has a wrong offset!");

// ScriptStruct Modio.ModioOptionalModTagOptions
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FModioOptionalModTagOptions final 
{
public:
	uint8                                         Pad_17B3[0x30];                                    // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioOptionalModTagOptions) == 0x000008, "Wrong alignment on FModioOptionalModTagOptions");
static_assert(sizeof(FModioOptionalModTagOptions) == 0x000030, "Wrong size on FModioOptionalModTagOptions");

// ScriptStruct Modio.ModioGameStats
// 0x0038 (0x0038 - 0x0000)
struct FModioGameStats final 
{
public:
	struct FModioGameID                           GameId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ModCountTotal;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ModDownloadsToday;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ModDownloadsTotal;                                 // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ModDownloadsDailyAverage;                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ModSubscribersTotal;                               // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DateExpires;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioGameStats) == 0x000008, "Wrong alignment on FModioGameStats");
static_assert(sizeof(FModioGameStats) == 0x000038, "Wrong size on FModioGameStats");
static_assert(offsetof(FModioGameStats, GameId) == 0x000000, "Member 'FModioGameStats::GameId' has a wrong offset!");
static_assert(offsetof(FModioGameStats, ModCountTotal) == 0x000008, "Member 'FModioGameStats::ModCountTotal' has a wrong offset!");
static_assert(offsetof(FModioGameStats, ModDownloadsToday) == 0x000010, "Member 'FModioGameStats::ModDownloadsToday' has a wrong offset!");
static_assert(offsetof(FModioGameStats, ModDownloadsTotal) == 0x000018, "Member 'FModioGameStats::ModDownloadsTotal' has a wrong offset!");
static_assert(offsetof(FModioGameStats, ModDownloadsDailyAverage) == 0x000020, "Member 'FModioGameStats::ModDownloadsDailyAverage' has a wrong offset!");
static_assert(offsetof(FModioGameStats, ModSubscribersTotal) == 0x000028, "Member 'FModioGameStats::ModSubscribersTotal' has a wrong offset!");
static_assert(offsetof(FModioGameStats, DateExpires) == 0x000030, "Member 'FModioGameStats::DateExpires' has a wrong offset!");

// ScriptStruct Modio.ModioOptionalTerms
// 0x00D8 (0x00D8 - 0x0000)
struct alignas(0x08) FModioOptionalTerms final 
{
public:
	uint8                                         Pad_17B4[0xD8];                                    // 0x0000(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioOptionalTerms) == 0x000008, "Wrong alignment on FModioOptionalTerms");
static_assert(sizeof(FModioOptionalTerms) == 0x0000D8, "Wrong size on FModioOptionalTerms");

// ScriptStruct Modio.ModioOptionalModDependencyList
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FModioOptionalModDependencyList final 
{
public:
	uint8                                         Pad_17B5[0x30];                                    // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioOptionalModDependencyList) == 0x000008, "Wrong alignment on FModioOptionalModDependencyList");
static_assert(sizeof(FModioOptionalModDependencyList) == 0x000030, "Wrong size on FModioOptionalModDependencyList");

// ScriptStruct Modio.ModioOptionalModID
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FModioOptionalModID final 
{
public:
	uint8                                         Pad_17B6[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioOptionalModID) == 0x000008, "Wrong alignment on FModioOptionalModID");
static_assert(sizeof(FModioOptionalModID) == 0x000010, "Wrong size on FModioOptionalModID");

// ScriptStruct Modio.ModioOptionalUserList
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FModioOptionalUserList final 
{
public:
	uint8                                         Pad_17B7[0x30];                                    // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioOptionalUserList) == 0x000008, "Wrong alignment on FModioOptionalUserList");
static_assert(sizeof(FModioOptionalUserList) == 0x000030, "Wrong size on FModioOptionalUserList");

// ScriptStruct Modio.ModioCreateModFileParams
// 0x0078 (0x0078 - 0x0000)
struct FModioCreateModFileParams final 
{
public:
	class FString                                 PathToModRootDirectory;                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B8[0x68];                                    // 0x0010(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioCreateModFileParams) == 0x000008, "Wrong alignment on FModioCreateModFileParams");
static_assert(sizeof(FModioCreateModFileParams) == 0x000078, "Wrong size on FModioCreateModFileParams");
static_assert(offsetof(FModioCreateModFileParams, PathToModRootDirectory) == 0x000000, "Member 'FModioCreateModFileParams::PathToModRootDirectory' has a wrong offset!");

// ScriptStruct Modio.ModioCreateModParams
// 0x00C8 (0x00C8 - 0x0000)
struct FModioCreateModParams final 
{
public:
	class FString                                 PathToLogoFile;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Summary;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B9[0x98];                                    // 0x0030(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioCreateModParams) == 0x000008, "Wrong alignment on FModioCreateModParams");
static_assert(sizeof(FModioCreateModParams) == 0x0000C8, "Wrong size on FModioCreateModParams");
static_assert(offsetof(FModioCreateModParams, PathToLogoFile) == 0x000000, "Member 'FModioCreateModParams::PathToLogoFile' has a wrong offset!");
static_assert(offsetof(FModioCreateModParams, Name) == 0x000010, "Member 'FModioCreateModParams::Name' has a wrong offset!");
static_assert(offsetof(FModioCreateModParams, Summary) == 0x000020, "Member 'FModioCreateModParams::Summary' has a wrong offset!");

// ScriptStruct Modio.ModioTheme
// 0x0060 (0x0060 - 0x0000)
struct FModioTheme final 
{
public:
	class FString                                 Primary;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dark;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Light;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Success;                                           // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Warning;                                           // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Danger;                                            // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioTheme) == 0x000008, "Wrong alignment on FModioTheme");
static_assert(sizeof(FModioTheme) == 0x000060, "Wrong size on FModioTheme");
static_assert(offsetof(FModioTheme, Primary) == 0x000000, "Member 'FModioTheme::Primary' has a wrong offset!");
static_assert(offsetof(FModioTheme, Dark) == 0x000010, "Member 'FModioTheme::Dark' has a wrong offset!");
static_assert(offsetof(FModioTheme, Light) == 0x000020, "Member 'FModioTheme::Light' has a wrong offset!");
static_assert(offsetof(FModioTheme, Success) == 0x000030, "Member 'FModioTheme::Success' has a wrong offset!");
static_assert(offsetof(FModioTheme, Warning) == 0x000040, "Member 'FModioTheme::Warning' has a wrong offset!");
static_assert(offsetof(FModioTheme, Danger) == 0x000050, "Member 'FModioTheme::Danger' has a wrong offset!");

// ScriptStruct Modio.ModioGameInfo
// 0x01F8 (0x01F8 - 0x0000)
struct FModioGameInfo final 
{
public:
	struct FModioGameID                           GameId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateAdded;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateUpdated;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateLive;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UgcName;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioIcon                             Icon;                                              // 0x0030(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FModioLogo                             Logo;                                              // 0x0080(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FModioHeaderImage                      HeaderImage;                                       // 0x00D0(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x00F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Summary;                                           // 0x0100(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Instructions;                                      // 0x0110(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstructionsUrl;                                   // 0x0120(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileUrl;                                        // 0x0130(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioTheme                            Theme;                                             // 0x0140(0x0060)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FModioGameStats                        Stats;                                             // 0x01A0(0x0038)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModioOtherUrl>                 OtherUrls;                                         // 0x01D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EModioModfilePlatform>                 Platforms;                                         // 0x01E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioGameInfo) == 0x000008, "Wrong alignment on FModioGameInfo");
static_assert(sizeof(FModioGameInfo) == 0x0001F8, "Wrong size on FModioGameInfo");
static_assert(offsetof(FModioGameInfo, GameId) == 0x000000, "Member 'FModioGameInfo::GameId' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, DateAdded) == 0x000008, "Member 'FModioGameInfo::DateAdded' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, DateUpdated) == 0x000010, "Member 'FModioGameInfo::DateUpdated' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, DateLive) == 0x000018, "Member 'FModioGameInfo::DateLive' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, UgcName) == 0x000020, "Member 'FModioGameInfo::UgcName' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, Icon) == 0x000030, "Member 'FModioGameInfo::Icon' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, Logo) == 0x000080, "Member 'FModioGameInfo::Logo' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, HeaderImage) == 0x0000D0, "Member 'FModioGameInfo::HeaderImage' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, Name) == 0x0000F0, "Member 'FModioGameInfo::Name' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, Summary) == 0x000100, "Member 'FModioGameInfo::Summary' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, Instructions) == 0x000110, "Member 'FModioGameInfo::Instructions' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, InstructionsUrl) == 0x000120, "Member 'FModioGameInfo::InstructionsUrl' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, ProfileUrl) == 0x000130, "Member 'FModioGameInfo::ProfileUrl' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, Theme) == 0x000140, "Member 'FModioGameInfo::Theme' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, Stats) == 0x0001A0, "Member 'FModioGameInfo::Stats' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, OtherUrls) == 0x0001D8, "Member 'FModioGameInfo::OtherUrls' has a wrong offset!");
static_assert(offsetof(FModioGameInfo, Platforms) == 0x0001E8, "Member 'FModioGameInfo::Platforms' has a wrong offset!");

// ScriptStruct Modio.ModioImageWrapper
// 0x0010 (0x0010 - 0x0000)
struct FModioImageWrapper final 
{
public:
	class FString                                 ImagePath;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioImageWrapper) == 0x000008, "Wrong alignment on FModioImageWrapper");
static_assert(sizeof(FModioImageWrapper) == 0x000010, "Wrong size on FModioImageWrapper");
static_assert(offsetof(FModioImageWrapper, ImagePath) == 0x000000, "Member 'FModioImageWrapper::ImagePath' has a wrong offset!");

// ScriptStruct Modio.ModioInitializeOptions
// 0x0090 (0x0090 - 0x0000)
struct FModioInitializeOptions final 
{
public:
	struct FModioGameID                           GameId;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioApiKey                           ApiKey;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EModioEnvironment                             GameEnvironment;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioPortal                                  PortalInUse;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17BA[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            ExtendedInitializationParameters;                  // 0x0020(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bUseBackgroundThread;                              // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17BB[0x1F];                                    // 0x0071(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioInitializeOptions) == 0x000008, "Wrong alignment on FModioInitializeOptions");
static_assert(sizeof(FModioInitializeOptions) == 0x000090, "Wrong size on FModioInitializeOptions");
static_assert(offsetof(FModioInitializeOptions, GameId) == 0x000000, "Member 'FModioInitializeOptions::GameId' has a wrong offset!");
static_assert(offsetof(FModioInitializeOptions, ApiKey) == 0x000008, "Member 'FModioInitializeOptions::ApiKey' has a wrong offset!");
static_assert(offsetof(FModioInitializeOptions, GameEnvironment) == 0x000018, "Member 'FModioInitializeOptions::GameEnvironment' has a wrong offset!");
static_assert(offsetof(FModioInitializeOptions, PortalInUse) == 0x000019, "Member 'FModioInitializeOptions::PortalInUse' has a wrong offset!");
static_assert(offsetof(FModioInitializeOptions, ExtendedInitializationParameters) == 0x000020, "Member 'FModioInitializeOptions::ExtendedInitializationParameters' has a wrong offset!");
static_assert(offsetof(FModioInitializeOptions, bUseBackgroundThread) == 0x000070, "Member 'FModioInitializeOptions::bUseBackgroundThread' has a wrong offset!");

// ScriptStruct Modio.ModioModCollectionEntry
// 0x0208 (0x0208 - 0x0000)
struct alignas(0x08) FModioModCollectionEntry final 
{
public:
	uint8                                         Pad_17BC[0x208];                                   // 0x0000(0x0208)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioModCollectionEntry) == 0x000008, "Wrong alignment on FModioModCollectionEntry");
static_assert(sizeof(FModioModCollectionEntry) == 0x000208, "Wrong size on FModioModCollectionEntry");

// ScriptStruct Modio.ModioModCreationHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FModioModCreationHandle final 
{
public:
	uint8                                         Pad_17BD[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioModCreationHandle) == 0x000008, "Wrong alignment on FModioModCreationHandle");
static_assert(sizeof(FModioModCreationHandle) == 0x000008, "Wrong size on FModioModCreationHandle");

// ScriptStruct Modio.ModioOptionalModProgressInfo
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FModioOptionalModProgressInfo final 
{
public:
	uint8                                         Pad_17BE[0x58];                                    // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioOptionalModProgressInfo) == 0x000008, "Wrong alignment on FModioOptionalModProgressInfo");
static_assert(sizeof(FModioOptionalModProgressInfo) == 0x000058, "Wrong size on FModioOptionalModProgressInfo");

// ScriptStruct Modio.ModioModProgressInfo
// 0x0050 (0x0050 - 0x0000)
struct FModioModProgressInfo final 
{
public:
	struct FModioModID                            ID;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17BF[0x48];                                    // 0x0008(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioModProgressInfo) == 0x000008, "Wrong alignment on FModioModProgressInfo");
static_assert(sizeof(FModioModProgressInfo) == 0x000050, "Wrong size on FModioModProgressInfo");
static_assert(offsetof(FModioModProgressInfo, ID) == 0x000000, "Member 'FModioModProgressInfo::ID' has a wrong offset!");

// ScriptStruct Modio.ModioUnsigned64
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FModioUnsigned64 final 
{
public:
	uint8                                         Pad_17C0[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioUnsigned64) == 0x000008, "Wrong alignment on FModioUnsigned64");
static_assert(sizeof(FModioUnsigned64) == 0x000008, "Wrong size on FModioUnsigned64");

// ScriptStruct Modio.ModioOptionalUser
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FModioOptionalUser final 
{
public:
	uint8                                         Pad_17C1[0x48];                                    // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioOptionalUser) == 0x000008, "Wrong alignment on FModioOptionalUser");
static_assert(sizeof(FModioOptionalUser) == 0x000048, "Wrong size on FModioOptionalUser");

// ScriptStruct Modio.ModioValidationError
// 0x0020 (0x0020 - 0x0000)
struct FModioValidationError final 
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValidationFailureDescription;                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioValidationError) == 0x000008, "Wrong alignment on FModioValidationError");
static_assert(sizeof(FModioValidationError) == 0x000020, "Wrong size on FModioValidationError");
static_assert(offsetof(FModioValidationError, FieldName) == 0x000000, "Member 'FModioValidationError::FieldName' has a wrong offset!");
static_assert(offsetof(FModioValidationError, ValidationFailureDescription) == 0x000010, "Member 'FModioValidationError::ValidationFailureDescription' has a wrong offset!");

}

