#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VICODynamicsPlugin

#include "Basic.hpp"

#include "VICODynamicsPlugin_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class VICODynamicsPlugin.BaseVDComponent
// 0x0200 (0x0680 - 0x0480)
#pragma pack(push, 0x1)
class alignas(0x10) UBaseVDComponent : public UMeshComponent
{
public:
	uint8                                         Pad_174C[0x8];                                     // 0x0478(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UVDSimulation*                          SimulationInstance;                                // 0x0480(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVDSimulatedObject*                     VDSimObject;                                       // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UVDSimulatedParticle*>           Particles;                                         // 0x0490(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	float                                         FrictionCoefficient;                               // 0x04A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RestitutionCoefficient;                            // 0x04A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVDCollisionSettings                   CollisionSettings;                                 // 0x04A8(0x0040)(Edit, Protected, NativeAccessSpecifierProtected)
	float                                         ParticleRadius;                                    // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachToRigids;                                    // 0x04EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachToParticles;                                 // 0x04ED(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174D[0x2];                                     // 0x04EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttachToParticlesConstraintStiffness;              // 0x04F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x04F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetectionRadiusInflationFactor;                    // 0x04F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateTensionConstraintsForSimulatingRigids;       // 0x04FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapToSimulatingAttachment;                       // 0x04FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ManuallyAttachParticles;                           // 0x04FE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174E[0x1];                                     // 0x04FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVDParticleAttachment>          ParticleAttachments;                               // 0x0500(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TensionForce;                                      // 0x0510(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TensionDampening;                                  // 0x0514(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AdjustOtherParticleLocationsBasedOnAttachments : 1; // 0x0518(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         AffectedByGlobalWind : 1;                          // 0x0518(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UseExplicitRigidBodyCollision : 1;                 // 0x0518(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_174F[0x3];                                     // 0x0519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindResistance;                                    // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FComponentReference>            AffectedByWindSources;                             // 0x0520(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CheckForWindOccluders;                             // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1750[0x3];                                     // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWindOccluderDistance;                           // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVDCollisionSettings                   WindOccluderTraceSettings;                         // 0x0538(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSimulationDataCreated;                           // 0x0578(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSimulationSync;                                  // 0x0588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         ShowParticles : 1;                                 // 0x0598(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1751[0x3];                                     // 0x0599(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityScale;                                      // 0x059C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinConstraintDistance;                             // 0x05A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SimulateOnlyWhenRendered;                          // 0x05A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1752[0x3];                                     // 0x05A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SimulationToggleThreshold;                         // 0x05A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         EnableParticleToParticleCollisions : 1;            // 0x05AC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         ConsiderInnerCollisions : 1;                       // 0x05AC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         SkipRelativeVelocityCheckDuringRigidBodyCollisions : 1; // 0x05AC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BitPad_44 : 5;                                     // 0x00AC(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         bNotifyOnVDCollision : 1;                          // 0x05AD(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1753[0x2];                                     // 0x05AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnVDCollisionEvent;                                // 0x05B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<class UVDSimulatedParticle*, struct FVDCollision> PendingCollisionNotifications;                     // 0x05C0(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1754[0x20];                                    // 0x0610(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVDParticleSpringConstraint*>    ConstraintsToOtherParticles;                       // 0x0630(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1755[0x20];                                    // 0x0640(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseLocationCache : 1;                             // 0x0660(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bApplyCachedStartLocationBeforeAttachToRigids : 1; // 0x0660(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1756[0x7];                                     // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVDCachedParticleStartLocation> CachedStartLocations;                              // 0x0668(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void AttachToOverlappingRigidBodies();
	void OnSync();
	void SetAffectedByGlobalWind(bool IsAffected);
	void SetUseExplicitRigidBodyCollision(bool UseExplicitCollision);

	struct FVector GetLastAppliedForceFromTensionConstraint(int32 TensionConstraintIndex) const;
	const TArray<struct FVDParticleInfo> GetParticleBuildInfo() const;
	int32 GetTensionConstraintCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseVDComponent">();
	}
	static class UBaseVDComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseVDComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UBaseVDComponent) == 0x000010, "Wrong alignment on UBaseVDComponent");
static_assert(sizeof(UBaseVDComponent) == 0x000680, "Wrong size on UBaseVDComponent");
static_assert(offsetof(UBaseVDComponent, SimulationInstance) == 0x000480, "Member 'UBaseVDComponent::SimulationInstance' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, VDSimObject) == 0x000488, "Member 'UBaseVDComponent::VDSimObject' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, Particles) == 0x000490, "Member 'UBaseVDComponent::Particles' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, FrictionCoefficient) == 0x0004A0, "Member 'UBaseVDComponent::FrictionCoefficient' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, RestitutionCoefficient) == 0x0004A4, "Member 'UBaseVDComponent::RestitutionCoefficient' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, CollisionSettings) == 0x0004A8, "Member 'UBaseVDComponent::CollisionSettings' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, ParticleRadius) == 0x0004E8, "Member 'UBaseVDComponent::ParticleRadius' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, AttachToRigids) == 0x0004EC, "Member 'UBaseVDComponent::AttachToRigids' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, AttachToParticles) == 0x0004ED, "Member 'UBaseVDComponent::AttachToParticles' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, AttachToParticlesConstraintStiffness) == 0x0004F0, "Member 'UBaseVDComponent::AttachToParticlesConstraintStiffness' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, EndOffset) == 0x0004F4, "Member 'UBaseVDComponent::EndOffset' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, DetectionRadiusInflationFactor) == 0x0004F8, "Member 'UBaseVDComponent::DetectionRadiusInflationFactor' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, CreateTensionConstraintsForSimulatingRigids) == 0x0004FC, "Member 'UBaseVDComponent::CreateTensionConstraintsForSimulatingRigids' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, bSnapToSimulatingAttachment) == 0x0004FD, "Member 'UBaseVDComponent::bSnapToSimulatingAttachment' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, ManuallyAttachParticles) == 0x0004FE, "Member 'UBaseVDComponent::ManuallyAttachParticles' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, ParticleAttachments) == 0x000500, "Member 'UBaseVDComponent::ParticleAttachments' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, TensionForce) == 0x000510, "Member 'UBaseVDComponent::TensionForce' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, TensionDampening) == 0x000514, "Member 'UBaseVDComponent::TensionDampening' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, WindResistance) == 0x00051C, "Member 'UBaseVDComponent::WindResistance' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, AffectedByWindSources) == 0x000520, "Member 'UBaseVDComponent::AffectedByWindSources' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, CheckForWindOccluders) == 0x000530, "Member 'UBaseVDComponent::CheckForWindOccluders' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, MaxWindOccluderDistance) == 0x000534, "Member 'UBaseVDComponent::MaxWindOccluderDistance' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, WindOccluderTraceSettings) == 0x000538, "Member 'UBaseVDComponent::WindOccluderTraceSettings' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, OnSimulationDataCreated) == 0x000578, "Member 'UBaseVDComponent::OnSimulationDataCreated' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, OnSimulationSync) == 0x000588, "Member 'UBaseVDComponent::OnSimulationSync' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, GravityScale) == 0x00059C, "Member 'UBaseVDComponent::GravityScale' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, MinConstraintDistance) == 0x0005A0, "Member 'UBaseVDComponent::MinConstraintDistance' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, SimulateOnlyWhenRendered) == 0x0005A4, "Member 'UBaseVDComponent::SimulateOnlyWhenRendered' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, SimulationToggleThreshold) == 0x0005A8, "Member 'UBaseVDComponent::SimulationToggleThreshold' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, OnVDCollisionEvent) == 0x0005B0, "Member 'UBaseVDComponent::OnVDCollisionEvent' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, PendingCollisionNotifications) == 0x0005C0, "Member 'UBaseVDComponent::PendingCollisionNotifications' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, ConstraintsToOtherParticles) == 0x000630, "Member 'UBaseVDComponent::ConstraintsToOtherParticles' has a wrong offset!");
static_assert(offsetof(UBaseVDComponent, CachedStartLocations) == 0x000668, "Member 'UBaseVDComponent::CachedStartLocations' has a wrong offset!");

// Class VICODynamicsPlugin.VDBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UVDBlueprintFunctionLibrary final  : public UBlueprintFunctionLibrary
{
public:
	static class UVDSimulation* GetVICODynamicsSimulationInstance();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDBlueprintFunctionLibrary">();
	}
	static class UVDBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UVDBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UVDBlueprintFunctionLibrary");
static_assert(sizeof(UVDBlueprintFunctionLibrary) == 0x000028, "Wrong size on UVDBlueprintFunctionLibrary");

// Class VICODynamicsPlugin.VDColliderComponent
// 0x0030 (0x00E0 - 0x00B0)
class UVDColliderComponent final  : public UActorComponent
{
public:
	class UVDSimulation*                          SimulationInstance;                                // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FComponentReference>            AssociatedVDComponents;                            // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bAddAllComponents : 1;                             // 0x00C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreConvexShapes : 1;                           // 0x00C8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1757[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SpecificColliders;                                 // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDColliderComponent">();
	}
	static class UVDColliderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDColliderComponent>();
	}
};
static_assert(alignof(UVDColliderComponent) == 0x000008, "Wrong alignment on UVDColliderComponent");
static_assert(sizeof(UVDColliderComponent) == 0x0000E0, "Wrong size on UVDColliderComponent");
static_assert(offsetof(UVDColliderComponent, SimulationInstance) == 0x0000B0, "Member 'UVDColliderComponent::SimulationInstance' has a wrong offset!");
static_assert(offsetof(UVDColliderComponent, AssociatedVDComponents) == 0x0000B8, "Member 'UVDColliderComponent::AssociatedVDComponents' has a wrong offset!");
static_assert(offsetof(UVDColliderComponent, SpecificColliders) == 0x0000D0, "Member 'UVDColliderComponent::SpecificColliders' has a wrong offset!");

// Class VICODynamicsPlugin.VDRopeComponent
// 0x0080 (0x0700 - 0x0680)
#pragma pack(push, 0x1)
class alignas(0x10) UVDRopeComponent : public UBaseVDComponent
{
public:
	float                                         StretchStiffness;                                  // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendStiffness;                                     // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficient;                                   // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x068C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSegments;                                       // 0x0690(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforceStrictLength;                              // 0x0694(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1758[0x3];                                     // 0x0695(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumSides;                                          // 0x0698(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileMaterial;                                      // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1759[0x20];                                    // 0x06A0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVDParticleSpringConstraint*>    StretchConstraints;                                // 0x06C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UVDParticleSpringConstraint*>    BendConstraints;                                   // 0x06D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRopePiece>                     Pieces;                                            // 0x06E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_175A[0x8];                                     // 0x06F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BreakAtSegment(int32 SegmentIndex);
	void CreateRopeGeometry_BP();
	void ResetRope();
	void SetNewRestLength(float NewLength, int32 PieceIndex);
	void SetNewRestLengthStartingAtParticle(int32 ParticleIndexStart, float NewLength);

	TArray<struct FRopePiece> GetPieces() const;
	float GetTrueLength(int32 PieceIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDRopeComponent">();
	}
	static class UVDRopeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDRopeComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UVDRopeComponent) == 0x000010, "Wrong alignment on UVDRopeComponent");
static_assert(sizeof(UVDRopeComponent) == 0x000700, "Wrong size on UVDRopeComponent");
static_assert(offsetof(UVDRopeComponent, StretchStiffness) == 0x000678, "Member 'UVDRopeComponent::StretchStiffness' has a wrong offset!");
static_assert(offsetof(UVDRopeComponent, BendStiffness) == 0x00067C, "Member 'UVDRopeComponent::BendStiffness' has a wrong offset!");
static_assert(offsetof(UVDRopeComponent, Mass) == 0x000680, "Member 'UVDRopeComponent::Mass' has a wrong offset!");
static_assert(offsetof(UVDRopeComponent, DragCoefficient) == 0x000684, "Member 'UVDRopeComponent::DragCoefficient' has a wrong offset!");
static_assert(offsetof(UVDRopeComponent, Length) == 0x000688, "Member 'UVDRopeComponent::Length' has a wrong offset!");
static_assert(offsetof(UVDRopeComponent, Width) == 0x00068C, "Member 'UVDRopeComponent::Width' has a wrong offset!");
static_assert(offsetof(UVDRopeComponent, NumSegments) == 0x000690, "Member 'UVDRopeComponent::NumSegments' has a wrong offset!");
static_assert(offsetof(UVDRopeComponent, bEnforceStrictLength) == 0x000694, "Member 'UVDRopeComponent::bEnforceStrictLength' has a wrong offset!");
static_assert(offsetof(UVDRopeComponent, NumSides) == 0x000698, "Member 'UVDRopeComponent::NumSides' has a wrong offset!");
static_assert(offsetof(UVDRopeComponent, TileMaterial) == 0x00069C, "Member 'UVDRopeComponent::TileMaterial' has a wrong offset!");
static_assert(offsetof(UVDRopeComponent, StretchConstraints) == 0x0006C0, "Member 'UVDRopeComponent::StretchConstraints' has a wrong offset!");
static_assert(offsetof(UVDRopeComponent, BendConstraints) == 0x0006D0, "Member 'UVDRopeComponent::BendConstraints' has a wrong offset!");
static_assert(offsetof(UVDRopeComponent, Pieces) == 0x0006E0, "Member 'UVDRopeComponent::Pieces' has a wrong offset!");

// Class VICODynamicsPlugin.VDDynamicRopeComponent
// 0x0000 (0x0700 - 0x0700)
class UVDDynamicRopeComponent final  : public UVDRopeComponent
{
public:
	void RebuildRope();
	void RebuildRopeAtPoints(float DistancePerSegment, struct FVector& StartLocation, struct FVector& EndLocation, bool bRelativeLocations);
	void RebuildRopeAttached(float DistancePerSegment, class USceneComponent* StartAttachedTo, class FName StartSocket, bool StartSimulateTension, class USceneComponent* EndAttachedTo, class FName EndSocket, bool EndSimulateTension);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDDynamicRopeComponent">();
	}
	static class UVDDynamicRopeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDDynamicRopeComponent>();
	}
};
static_assert(alignof(UVDDynamicRopeComponent) == 0x000010, "Wrong alignment on UVDDynamicRopeComponent");
static_assert(sizeof(UVDDynamicRopeComponent) == 0x000700, "Wrong size on UVDDynamicRopeComponent");

// Class VICODynamicsPlugin.VDMeshClothComponent
// 0x00E0 (0x0760 - 0x0680)
class UVDMeshClothComponent final  : public UBaseVDComponent
{
public:
	class UStaticMesh*                            HullMesh;                                          // 0x0678(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchStiffness;                                  // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendStiffness;                                     // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficient;                                   // 0x068C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreserveVolume;                                    // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175F[0x3];                                     // 0x0691(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentVolume;                                     // 0x0694(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideRestVolume;                                // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1760[0x4];                                     // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         UseVertexColorDataForSetup : 1;                    // 0x06A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1761[0x3];                                     // 0x06A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxBendConstraintDistance;                         // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1762[0x28];                                    // 0x06A8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVDParticleSpringConstraint*>    StretchConstraints;                                // 0x06D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UVDParticleSpringConstraint*>    BendConstraints;                                   // 0x06E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UVDMeshVolumeConstraint*                VolumeConstraint;                                  // 0x06F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1763[0x68];                                    // 0x06F8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const TArray<class UVDParticleSpringConstraint*> GetBendConstraintsArray() const;
	const TArray<class UVDParticleSpringConstraint*> GetStretchConstraintsArray() const;
	class UVDMeshVolumeConstraint* GetVolumeConstraint() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDMeshClothComponent">();
	}
	static class UVDMeshClothComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDMeshClothComponent>();
	}
};
static_assert(alignof(UVDMeshClothComponent) == 0x000010, "Wrong alignment on UVDMeshClothComponent");
static_assert(sizeof(UVDMeshClothComponent) == 0x000760, "Wrong size on UVDMeshClothComponent");
static_assert(offsetof(UVDMeshClothComponent, HullMesh) == 0x000678, "Member 'UVDMeshClothComponent::HullMesh' has a wrong offset!");
static_assert(offsetof(UVDMeshClothComponent, StretchStiffness) == 0x000680, "Member 'UVDMeshClothComponent::StretchStiffness' has a wrong offset!");
static_assert(offsetof(UVDMeshClothComponent, BendStiffness) == 0x000684, "Member 'UVDMeshClothComponent::BendStiffness' has a wrong offset!");
static_assert(offsetof(UVDMeshClothComponent, Mass) == 0x000688, "Member 'UVDMeshClothComponent::Mass' has a wrong offset!");
static_assert(offsetof(UVDMeshClothComponent, DragCoefficient) == 0x00068C, "Member 'UVDMeshClothComponent::DragCoefficient' has a wrong offset!");
static_assert(offsetof(UVDMeshClothComponent, PreserveVolume) == 0x000690, "Member 'UVDMeshClothComponent::PreserveVolume' has a wrong offset!");
static_assert(offsetof(UVDMeshClothComponent, CurrentVolume) == 0x000694, "Member 'UVDMeshClothComponent::CurrentVolume' has a wrong offset!");
static_assert(offsetof(UVDMeshClothComponent, OverrideRestVolume) == 0x000698, "Member 'UVDMeshClothComponent::OverrideRestVolume' has a wrong offset!");
static_assert(offsetof(UVDMeshClothComponent, MaxBendConstraintDistance) == 0x0006A4, "Member 'UVDMeshClothComponent::MaxBendConstraintDistance' has a wrong offset!");
static_assert(offsetof(UVDMeshClothComponent, StretchConstraints) == 0x0006D0, "Member 'UVDMeshClothComponent::StretchConstraints' has a wrong offset!");
static_assert(offsetof(UVDMeshClothComponent, BendConstraints) == 0x0006E0, "Member 'UVDMeshClothComponent::BendConstraints' has a wrong offset!");
static_assert(offsetof(UVDMeshClothComponent, VolumeConstraint) == 0x0006F0, "Member 'UVDMeshClothComponent::VolumeConstraint' has a wrong offset!");

// Class VICODynamicsPlugin.VDMeshVolumeConstraint
// 0x0010 (0x0038 - 0x0028)
class UVDMeshVolumeConstraint final  : public UObject
{
public:
	uint8                                         Pad_1764[0x10];                                    // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRestVolume(float NewVolume);

	float GetCurrentVolume() const;
	float GetRestVolume() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDMeshVolumeConstraint">();
	}
	static class UVDMeshVolumeConstraint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDMeshVolumeConstraint>();
	}
};
static_assert(alignof(UVDMeshVolumeConstraint) == 0x000008, "Wrong alignment on UVDMeshVolumeConstraint");
static_assert(sizeof(UVDMeshVolumeConstraint) == 0x000038, "Wrong size on UVDMeshVolumeConstraint");

// Class VICODynamicsPlugin.VDParticleSpringConstraint
// 0x0010 (0x0038 - 0x0028)
class UVDParticleSpringConstraint final  : public UObject
{
public:
	uint8                                         Pad_1765[0x10];                                    // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRestDistance(float& NewRestDistance);
	void SetStiffness(float& NewStiffness);

	class UVDSimulatedParticle* GetParticle1() const;
	class UVDSimulatedParticle* GetParticle2() const;
	float GetRestDistance() const;
	float GetStifffness() const;
	bool IsConstraining(class UVDSimulatedParticle* Particle1, class UVDSimulatedParticle* Particle2) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDParticleSpringConstraint">();
	}
	static class UVDParticleSpringConstraint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDParticleSpringConstraint>();
	}
};
static_assert(alignof(UVDParticleSpringConstraint) == 0x000008, "Wrong alignment on UVDParticleSpringConstraint");
static_assert(sizeof(UVDParticleSpringConstraint) == 0x000038, "Wrong size on UVDParticleSpringConstraint");

// Class VICODynamicsPlugin.VDProceduralClothComponent
// 0x0070 (0x06F0 - 0x0680)
class UVDProceduralClothComponent final  : public UBaseVDComponent
{
public:
	float                                         StretchStiffness;                                  // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendStiffness;                                     // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficient;                                   // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x068C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumParticlesWide;                                  // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumParticlesHigh;                                  // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileMaterialAlongWidth;                            // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileMaterialAlongHeight;                           // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1767[0x20];                                    // 0x06A0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVDParticleSpringConstraint*>    StretchConstraints;                                // 0x06C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UVDParticleSpringConstraint*>    BendConstraints;                                   // 0x06D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1768[0x10];                                    // 0x06E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDProceduralClothComponent">();
	}
	static class UVDProceduralClothComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDProceduralClothComponent>();
	}
};
static_assert(alignof(UVDProceduralClothComponent) == 0x000010, "Wrong alignment on UVDProceduralClothComponent");
static_assert(sizeof(UVDProceduralClothComponent) == 0x0006F0, "Wrong size on UVDProceduralClothComponent");
static_assert(offsetof(UVDProceduralClothComponent, StretchStiffness) == 0x000678, "Member 'UVDProceduralClothComponent::StretchStiffness' has a wrong offset!");
static_assert(offsetof(UVDProceduralClothComponent, BendStiffness) == 0x00067C, "Member 'UVDProceduralClothComponent::BendStiffness' has a wrong offset!");
static_assert(offsetof(UVDProceduralClothComponent, Mass) == 0x000680, "Member 'UVDProceduralClothComponent::Mass' has a wrong offset!");
static_assert(offsetof(UVDProceduralClothComponent, DragCoefficient) == 0x000684, "Member 'UVDProceduralClothComponent::DragCoefficient' has a wrong offset!");
static_assert(offsetof(UVDProceduralClothComponent, Width) == 0x000688, "Member 'UVDProceduralClothComponent::Width' has a wrong offset!");
static_assert(offsetof(UVDProceduralClothComponent, Height) == 0x00068C, "Member 'UVDProceduralClothComponent::Height' has a wrong offset!");
static_assert(offsetof(UVDProceduralClothComponent, NumParticlesWide) == 0x000690, "Member 'UVDProceduralClothComponent::NumParticlesWide' has a wrong offset!");
static_assert(offsetof(UVDProceduralClothComponent, NumParticlesHigh) == 0x000694, "Member 'UVDProceduralClothComponent::NumParticlesHigh' has a wrong offset!");
static_assert(offsetof(UVDProceduralClothComponent, TileMaterialAlongWidth) == 0x000698, "Member 'UVDProceduralClothComponent::TileMaterialAlongWidth' has a wrong offset!");
static_assert(offsetof(UVDProceduralClothComponent, TileMaterialAlongHeight) == 0x00069C, "Member 'UVDProceduralClothComponent::TileMaterialAlongHeight' has a wrong offset!");
static_assert(offsetof(UVDProceduralClothComponent, StretchConstraints) == 0x0006C0, "Member 'UVDProceduralClothComponent::StretchConstraints' has a wrong offset!");
static_assert(offsetof(UVDProceduralClothComponent, BendConstraints) == 0x0006D0, "Member 'UVDProceduralClothComponent::BendConstraints' has a wrong offset!");

// Class VICODynamicsPlugin.VDSimulatedObject
// 0x0050 (0x0078 - 0x0028)
class UVDSimulatedObject final  : public UObject
{
public:
	uint8                                         Pad_1769[0x50];                                    // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UVDSimulatedParticle* CreateParticle(struct FVDParticleInfo& ParticleInfo);
	class UVDParticleSpringConstraint* CreateSpringConstraint(class UVDSimulatedParticle* Particle1, class UVDSimulatedParticle* Particle2, float RestDistance, float Stiffness);
	class UVDMeshVolumeConstraint* CreateVolumeConstraint(TArray<int32>& IndexList, float Alpha, float RestVolume);
	void DestroyConstraint(class UVDParticleSpringConstraint* Constraint);
	void DestroyParticle(class UVDSimulatedParticle* Particle);
	void DestroyVolumeConstraint(class UVDMeshVolumeConstraint* Constraint);
	TArray<class UVDSimulatedParticle*> GetParticles();
	TArray<class UVDParticleSpringConstraint*> GetSpringConstraints();
	void SetAffectiveWindVector(const struct FVector& NewWindVector);
	void SetCollisionChannel(ECollisionChannel Channel);
	void SetCollisionEnabled(bool Enabled);
	void SetCollisionResponseToObjectType(ECollisionChannel ObjectType, ECollisionResponse Response);
	void SetGravityScale(float Scale);
	void SetMinimumConstraintSatisfactionDistance(float MinDistance);
	void SetObjectType(ECollisionChannel ObjectType);
	void SetSkipRelativeVelocityCheckDuringCollision(bool Skip);

	struct FVector GetAffectiveWindVector() const;
	bool GetCollisionEnabled() const;
	struct FVDCollisionSettings GetCollisionSettings() const;
	float GetGravityScale() const;
	float GetMinimumConstraintSatisfactionDistance() const;
	bool GetSkipRelativeVelocityCheckDuringCollision() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDSimulatedObject">();
	}
	static class UVDSimulatedObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDSimulatedObject>();
	}
};
static_assert(alignof(UVDSimulatedObject) == 0x000008, "Wrong alignment on UVDSimulatedObject");
static_assert(sizeof(UVDSimulatedObject) == 0x000078, "Wrong size on UVDSimulatedObject");

// Class VICODynamicsPlugin.VDSimulatedParticle
// 0x0080 (0x00A8 - 0x0028)
class UVDSimulatedParticle final  : public UObject
{
public:
	bool                                          IsAttached;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176B[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVDParticleAttachment                  Attachment;                                        // 0x0030(0x0060)(NativeAccessSpecifierPublic)
	uint8                                         Pad_176C[0x18];                                    // 0x0090(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddForce(struct FVector& Force);
	bool AttachToActor(class AActor* Actor, const struct FVector& Location, bool SimulateTension, class FName Socket);
	bool AttachToComponent(class UPrimitiveComponent* Component, const struct FVector& Location, bool SimulateTension, class FName Socket);
	bool AttachToLocation(const struct FVector& Location, bool IsRelative);
	void CopyAttachment(struct FVDParticleAttachment& Param_Attachment, bool UseCurrentMass);
	void Detach();
	bool GetAttachment(struct FVDParticleAttachment* OutAttachment);
	void SetDragCoefficient(float NewDragCoefficient);
	void SetFrictionCoefficient(float NewFrictionCoefficient);
	void SetIsFree(bool IsFree);
	void SetIsParticleCollisionEnabled(bool IsEnabled);
	void SetIsRigidBodyCollisionEnabled(bool IsEnabled);
	void SetIsWindOccluded(bool IsOccluded);
	void SetLocation(struct FVector& NewLocation);
	void SetMass(float NewMass);
	void SetRadius(float NewRadius);
	void SetRestitutionCoefficient(float NewRestitutionCoefficient);
	void SetVelocity(struct FVector& NewVelocity);

	float GetDragCoefficient() const;
	float GetFrictionCoefficient() const;
	bool GetIsFree() const;
	bool GetIsParticleCollisionEnabled() const;
	bool GetIsRigidBodyCollisionEnabled() const;
	bool GetIsWindOccluded() const;
	struct FVector GetLocation() const;
	float GetMass() const;
	float GetRadius() const;
	float GetRestitutionCoefficient() const;
	struct FVector GetVelocity() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDSimulatedParticle">();
	}
	static class UVDSimulatedParticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDSimulatedParticle>();
	}
};
static_assert(alignof(UVDSimulatedParticle) == 0x000008, "Wrong alignment on UVDSimulatedParticle");
static_assert(sizeof(UVDSimulatedParticle) == 0x0000A8, "Wrong size on UVDSimulatedParticle");
static_assert(offsetof(UVDSimulatedParticle, IsAttached) == 0x000028, "Member 'UVDSimulatedParticle::IsAttached' has a wrong offset!");
static_assert(offsetof(UVDSimulatedParticle, Attachment) == 0x000030, "Member 'UVDSimulatedParticle::Attachment' has a wrong offset!");

// Class VICODynamicsPlugin.VDSimulation
// 0x0140 (0x0168 - 0x0028)
class UVDSimulation final  : public UObject
{
public:
	uint8                                         Pad_1774[0x130];                                   // 0x0028(0x0130)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVDWindDirectionalSourceComponent*> WindSources;                                       // 0x0158(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void AddExplicitColliderMapping(class UBaseVDComponent* VDComponent, class UPrimitiveComponent* Collider, bool IgnoreConvexShapes);
	struct FVDSettings GetSettings();
	bool K2QueryBoxOverlaps(const struct FVector& Location, const struct FVector& HalfExtents, TArray<class UVDSimulatedParticle*>* Overlaps, TArray<class UVDSimulatedObject*>& SimObjectsToIgnore, int32 MaxOverlaps);
	bool K2QuerySphereOverlaps(const struct FVector& Location, float Radius, TArray<class UVDSimulatedParticle*>* Overlaps, TArray<class UVDSimulatedObject*>& SimObjectsToIgnore, int32 MaxOverlaps);
	void RemoveAllExplicitColliderMappings(class UBaseVDComponent* VDComponent);
	void RemoveExplicitColliderMapping(class UBaseVDComponent* VDComponent, class UPrimitiveComponent* Collider);
	void SetConstrainPlaneNormal(const struct FVector& Normal);
	void SetConstrainPlaneOrigin(const struct FVector& Origin);
	void SetConstrainSimulationTo2DPlane(bool IsEnabled);
	void SetConstraintIterationCount(int32 ConstraintIterationCount);
	void SetFrameRate(int32 FrameRate);
	void SetIsExplicitRigidBodyCollisionEnabled(bool IsEnabled);
	void SetPerformExtraCollisionResolutionLoop(bool IsEnabled);
	void SetPerFrameCollisionCacheEnable(bool IsEnabled);
	void SetPhysXSceneCollisionEnabled(bool IsEnabled);
	void SetSelfCollisionEnabled(bool IsEnabled);
	void SetSubstepCount(int32 SubstepCount);

	void GetDirectionalWindParameters(class UBaseVDComponent* VDComponent, struct FVector* OutDirection, float* OutSpeed, float* OutGust) const;
	bool GetIsExplicitRigidBodyCollisionEnabled() const;
	bool GetIsRunningOnWorkerThread() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDSimulation">();
	}
	static class UVDSimulation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDSimulation>();
	}
};
static_assert(alignof(UVDSimulation) == 0x000008, "Wrong alignment on UVDSimulation");
static_assert(sizeof(UVDSimulation) == 0x000168, "Wrong size on UVDSimulation");
static_assert(offsetof(UVDSimulation, WindSources) == 0x000158, "Member 'UVDSimulation::WindSources' has a wrong offset!");

// Class VICODynamicsPlugin.VDSimulationSettingsActor
// 0x0048 (0x0268 - 0x0220)
class AVDSimulationSettingsActor final  : public AInfo
{
public:
	struct FVDSettings                            Settings;                                          // 0x0220(0x0044)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1779[0x4];                                     // 0x0264(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVDSettings GetSettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDSimulationSettingsActor">();
	}
	static class AVDSimulationSettingsActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVDSimulationSettingsActor>();
	}
};
static_assert(alignof(AVDSimulationSettingsActor) == 0x000008, "Wrong alignment on AVDSimulationSettingsActor");
static_assert(sizeof(AVDSimulationSettingsActor) == 0x000268, "Wrong size on AVDSimulationSettingsActor");
static_assert(offsetof(AVDSimulationSettingsActor, Settings) == 0x000220, "Member 'AVDSimulationSettingsActor::Settings' has a wrong offset!");

// Class VICODynamicsPlugin.VDSkinnedRopeComponent
// 0x0030 (0x0730 - 0x0700)
class UVDSkinnedRopeComponent final  : public UVDRopeComponent
{
public:
	struct FComponentReference                    PoseableMeshRef;                                   // 0x06F8(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_177A[0x10];                                    // 0x0720(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDSkinnedRopeComponent">();
	}
	static class UVDSkinnedRopeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDSkinnedRopeComponent>();
	}
};
static_assert(alignof(UVDSkinnedRopeComponent) == 0x000010, "Wrong alignment on UVDSkinnedRopeComponent");
static_assert(sizeof(UVDSkinnedRopeComponent) == 0x000730, "Wrong size on UVDSkinnedRopeComponent");
static_assert(offsetof(UVDSkinnedRopeComponent, PoseableMeshRef) == 0x0006F8, "Member 'UVDSkinnedRopeComponent::PoseableMeshRef' has a wrong offset!");

// Class VICODynamicsPlugin.VDSplineRopeComponent
// 0x0030 (0x0730 - 0x0700)
class UVDSplineRopeComponent final  : public UVDRopeComponent
{
public:
	struct FComponentReference                    SplineRef;                                         // 0x06F8(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         bAutoAttachToSplineEndPoints : 1;                  // 0x0720(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bStretchToSplineLength : 1;                        // 0x0720(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_177B[0x3];                                     // 0x0721(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SplineLength;                                      // 0x0724(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_177C[0x8];                                     // 0x0728(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDSplineRopeComponent">();
	}
	static class UVDSplineRopeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDSplineRopeComponent>();
	}
};
static_assert(alignof(UVDSplineRopeComponent) == 0x000010, "Wrong alignment on UVDSplineRopeComponent");
static_assert(sizeof(UVDSplineRopeComponent) == 0x000730, "Wrong size on UVDSplineRopeComponent");
static_assert(offsetof(UVDSplineRopeComponent, SplineRef) == 0x0006F8, "Member 'UVDSplineRopeComponent::SplineRef' has a wrong offset!");
static_assert(offsetof(UVDSplineRopeComponent, SplineLength) == 0x000724, "Member 'UVDSplineRopeComponent::SplineLength' has a wrong offset!");

// Class VICODynamicsPlugin.VDWindDirectionalSourceActor
// 0x0008 (0x0228 - 0x0220)
class AVDWindDirectionalSourceActor final  : public AInfo
{
public:
	class UVDWindDirectionalSourceComponent*      Component;                                         // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDWindDirectionalSourceActor">();
	}
	static class AVDWindDirectionalSourceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVDWindDirectionalSourceActor>();
	}
};
static_assert(alignof(AVDWindDirectionalSourceActor) == 0x000008, "Wrong alignment on AVDWindDirectionalSourceActor");
static_assert(sizeof(AVDWindDirectionalSourceActor) == 0x000228, "Wrong size on AVDWindDirectionalSourceActor");
static_assert(offsetof(AVDWindDirectionalSourceActor, Component) == 0x000220, "Member 'AVDWindDirectionalSourceActor::Component' has a wrong offset!");

// Class VICODynamicsPlugin.VDWindDirectionalSourceComponent
// 0x0040 (0x0240 - 0x0200)
class UVDWindDirectionalSourceComponent final  : public USceneComponent
{
public:
	float                                         Radius;                                            // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGustAmount;                                     // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGustAmount;                                     // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGustDuration;                                   // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGustDuration;                                   // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGustTransitionSpeed;                            // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGustTransitionSpeed;                            // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSecondsBetweenGusts;                            // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSecondsBetweenGusts;                            // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_177D[0x1C];                                    // 0x0224(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRadius(float InRadius);

	float GetCurrentGust() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VDWindDirectionalSourceComponent">();
	}
	static class UVDWindDirectionalSourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVDWindDirectionalSourceComponent>();
	}
};
static_assert(alignof(UVDWindDirectionalSourceComponent) == 0x000010, "Wrong alignment on UVDWindDirectionalSourceComponent");
static_assert(sizeof(UVDWindDirectionalSourceComponent) == 0x000240, "Wrong size on UVDWindDirectionalSourceComponent");
static_assert(offsetof(UVDWindDirectionalSourceComponent, Radius) == 0x0001F8, "Member 'UVDWindDirectionalSourceComponent::Radius' has a wrong offset!");
static_assert(offsetof(UVDWindDirectionalSourceComponent, Strength) == 0x0001FC, "Member 'UVDWindDirectionalSourceComponent::Strength' has a wrong offset!");
static_assert(offsetof(UVDWindDirectionalSourceComponent, Speed) == 0x000200, "Member 'UVDWindDirectionalSourceComponent::Speed' has a wrong offset!");
static_assert(offsetof(UVDWindDirectionalSourceComponent, MinGustAmount) == 0x000204, "Member 'UVDWindDirectionalSourceComponent::MinGustAmount' has a wrong offset!");
static_assert(offsetof(UVDWindDirectionalSourceComponent, MaxGustAmount) == 0x000208, "Member 'UVDWindDirectionalSourceComponent::MaxGustAmount' has a wrong offset!");
static_assert(offsetof(UVDWindDirectionalSourceComponent, MinGustDuration) == 0x00020C, "Member 'UVDWindDirectionalSourceComponent::MinGustDuration' has a wrong offset!");
static_assert(offsetof(UVDWindDirectionalSourceComponent, MaxGustDuration) == 0x000210, "Member 'UVDWindDirectionalSourceComponent::MaxGustDuration' has a wrong offset!");
static_assert(offsetof(UVDWindDirectionalSourceComponent, MinGustTransitionSpeed) == 0x000214, "Member 'UVDWindDirectionalSourceComponent::MinGustTransitionSpeed' has a wrong offset!");
static_assert(offsetof(UVDWindDirectionalSourceComponent, MaxGustTransitionSpeed) == 0x000218, "Member 'UVDWindDirectionalSourceComponent::MaxGustTransitionSpeed' has a wrong offset!");
static_assert(offsetof(UVDWindDirectionalSourceComponent, MinSecondsBetweenGusts) == 0x00021C, "Member 'UVDWindDirectionalSourceComponent::MinSecondsBetweenGusts' has a wrong offset!");
static_assert(offsetof(UVDWindDirectionalSourceComponent, MaxSecondsBetweenGusts) == 0x000220, "Member 'UVDWindDirectionalSourceComponent::MaxSecondsBetweenGusts' has a wrong offset!");

// Class VICODynamicsPlugin.VICODynamicsSettings
// 0x0040 (0x0068 - 0x0028)
class UVICODynamicsSettings final  : public UObject
{
public:
	int32                                         ReserveParticleBudget;                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfThreadsToUse;                              // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSelfCollision;                               // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnablePhysXSceneCollision;                         // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PerformExtraCollisionResolutionLoop;               // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableExplicitRigidBodyCollision;                  // 0x0033(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimulationFramerate;                               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RunSimulationOnWorkerThread;                       // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_177E[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WorkerThreadCoreAffinity;                          // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimulationIterations;                              // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConstraintIterations;                              // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConstrainSimulationTo2DPlane;                      // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_177F[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlaneOrigin;                                       // 0x004C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneNormal;                                       // 0x0058(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCachePerFrameResults : 1;                         // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCacheOnlyCollisionsWithStaticRigidBodies : 1;     // 0x0064(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCacheNonHitsAlso : 1;                             // 0x0064(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DrawCollisionDebug : 1;                            // 0x0064(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowOnScreenStats : 1;                            // 0x0064(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1780[0x3];                                     // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VICODynamicsSettings">();
	}
	static class UVICODynamicsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVICODynamicsSettings>();
	}
};
static_assert(alignof(UVICODynamicsSettings) == 0x000008, "Wrong alignment on UVICODynamicsSettings");
static_assert(sizeof(UVICODynamicsSettings) == 0x000068, "Wrong size on UVICODynamicsSettings");
static_assert(offsetof(UVICODynamicsSettings, ReserveParticleBudget) == 0x000028, "Member 'UVICODynamicsSettings::ReserveParticleBudget' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, NumberOfThreadsToUse) == 0x00002C, "Member 'UVICODynamicsSettings::NumberOfThreadsToUse' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, EnableSelfCollision) == 0x000030, "Member 'UVICODynamicsSettings::EnableSelfCollision' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, EnablePhysXSceneCollision) == 0x000031, "Member 'UVICODynamicsSettings::EnablePhysXSceneCollision' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, PerformExtraCollisionResolutionLoop) == 0x000032, "Member 'UVICODynamicsSettings::PerformExtraCollisionResolutionLoop' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, EnableExplicitRigidBodyCollision) == 0x000033, "Member 'UVICODynamicsSettings::EnableExplicitRigidBodyCollision' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, SimulationFramerate) == 0x000034, "Member 'UVICODynamicsSettings::SimulationFramerate' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, RunSimulationOnWorkerThread) == 0x000038, "Member 'UVICODynamicsSettings::RunSimulationOnWorkerThread' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, WorkerThreadCoreAffinity) == 0x00003C, "Member 'UVICODynamicsSettings::WorkerThreadCoreAffinity' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, SimulationIterations) == 0x000040, "Member 'UVICODynamicsSettings::SimulationIterations' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, ConstraintIterations) == 0x000044, "Member 'UVICODynamicsSettings::ConstraintIterations' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, ConstrainSimulationTo2DPlane) == 0x000048, "Member 'UVICODynamicsSettings::ConstrainSimulationTo2DPlane' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, PlaneOrigin) == 0x00004C, "Member 'UVICODynamicsSettings::PlaneOrigin' has a wrong offset!");
static_assert(offsetof(UVICODynamicsSettings, PlaneNormal) == 0x000058, "Member 'UVICODynamicsSettings::PlaneNormal' has a wrong offset!");

}

