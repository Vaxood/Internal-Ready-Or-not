#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_Tablet_MapMarker

#include "Basic.hpp"

#include "St_PreMissionMarkers_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.OnPressed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_OnPressed__DelegateSignature final 
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_OnPressed__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_OnPressed__DelegateSignature");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_OnPressed__DelegateSignature) == 0x000008, "Wrong size on W_PreMission_Tablet_MapMarker_C_OnPressed__DelegateSignature");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnPressed__DelegateSignature, TriggeringMarker) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_OnPressed__DelegateSignature::TriggeringMarker' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.OnReleased__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_OnReleased__DelegateSignature final 
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_OnReleased__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_OnReleased__DelegateSignature");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_OnReleased__DelegateSignature) == 0x000008, "Wrong size on W_PreMission_Tablet_MapMarker_C_OnReleased__DelegateSignature");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnReleased__DelegateSignature, TriggeringMarker) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_OnReleased__DelegateSignature::TriggeringMarker' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_OnClicked__DelegateSignature final 
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_OnClicked__DelegateSignature");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_OnClicked__DelegateSignature) == 0x000008, "Wrong size on W_PreMission_Tablet_MapMarker_C_OnClicked__DelegateSignature");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnClicked__DelegateSignature, TriggeringMarker) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_OnClicked__DelegateSignature::TriggeringMarker' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.OnRotated__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_OnRotated__DelegateSignature final 
{
public:
	class UW_PreMission_Tablet_MapMarker_C*       TriggeringMarker;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_Rotation;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_OnRotated__DelegateSignature) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_OnRotated__DelegateSignature");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_OnRotated__DelegateSignature) == 0x000010, "Wrong size on W_PreMission_Tablet_MapMarker_C_OnRotated__DelegateSignature");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnRotated__DelegateSignature, TriggeringMarker) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_OnRotated__DelegateSignature::TriggeringMarker' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnRotated__DelegateSignature, Param_Rotation) == 0x000008, "Member 'W_PreMission_Tablet_MapMarker_C_OnRotated__DelegateSignature::Param_Rotation' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.ExecuteUbergraph_W_PreMission_Tablet_MapMarker
// 0x00E0 (0x00E0 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotPlayerState*                 CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasRotation_Rotates;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321F[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotPlayerState*                 CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue_1; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NewParam;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NewParam2;                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3220[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSt_PreMissionMarkers                  CallFunc_GetDataTableRowFromName_OutRow;           // 0x0030(0x0060)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasRotation_Rotates_1;                    // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3221[0x2];                                     // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0094(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker) == 0x0000E0, "Wrong size on W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, EntryPoint) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue) == 0x000008, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, K2Node_Event_IsDesignTime) == 0x000010, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_HasRotation_Rotates) == 0x000011, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_HasRotation_Rotates' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue_1) == 0x000018, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, K2Node_CustomEvent_NewParam) == 0x000020, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::K2Node_CustomEvent_NewParam' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, K2Node_CustomEvent_NewParam2) == 0x000028, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::K2Node_CustomEvent_NewParam2' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_GetDataTableRowFromName_OutRow) == 0x000030, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000090, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_HasRotation_Rotates_1) == 0x000091, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_HasRotation_Rotates_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, K2Node_Event_MyGeometry) == 0x000094, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, K2Node_Event_InDeltaTime) == 0x0000CC, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_GetOwningPlayer_ReturnValue) == 0x0000D0, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000D8, "Member 'W_PreMission_Tablet_MapMarker_C_ExecuteUbergraph_W_PreMission_Tablet_MapMarker::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_Tick final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_Tick) == 0x000004, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_Tick");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_Tick) == 0x00003C, "Wrong size on W_PreMission_Tablet_MapMarker_C_Tick");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_Tick, MyGeometry) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_Tick, InDeltaTime) == 0x000038, "Member 'W_PreMission_Tablet_MapMarker_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_PreConstruct) == 0x000001, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_PreConstruct");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_PreConstruct) == 0x000001, "Wrong size on W_PreMission_Tablet_MapMarker_C_PreConstruct");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.SetupMarker
// 0x000C (0x000C - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_SetupMarker final 
{
public:
	class FName                                   NewParam;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewParam2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_SetupMarker) == 0x000004, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_SetupMarker");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_SetupMarker) == 0x00000C, "Wrong size on W_PreMission_Tablet_MapMarker_C_SetupMarker");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetupMarker, NewParam) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_SetupMarker::NewParam' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetupMarker, NewParam2) == 0x000008, "Member 'W_PreMission_Tablet_MapMarker_C_SetupMarker::NewParam2' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.SetStyle
// 0x00B0 (0x00B0 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_SetStyle final 
{
public:
	class FName                                   Param_MarkerName;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSt_PreMissionMarkers                  CallFunc_GetDataTableRowFromName_OutRow;           // 0x0008(0x0060)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3222[0x1];                                     // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlanningPlayerNumber_ReturnValue;      // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      CallFunc_Create_ReturnValue;                       // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3223[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3224[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default;                             // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3225[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_SetStyle) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_SetStyle");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_SetStyle) == 0x0000B0, "Wrong size on W_PreMission_Tablet_MapMarker_C_SetStyle");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, Param_MarkerName) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::Param_MarkerName' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_GetDataTableRowFromName_OutRow) == 0x000008, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000068, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_Not_PreBool_ReturnValue) == 0x000069, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_IsValid_ReturnValue) == 0x00006A, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_GetPlanningPlayerNumber_ReturnValue) == 0x00006C, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_GetPlanningPlayerNumber_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_Create_ReturnValue) == 0x000070, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000078, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_IsValid_ReturnValue_1) == 0x000080, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_BooleanAND_ReturnValue) == 0x000081, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_Not_PreBool_ReturnValue_1) == 0x000082, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_IsValid_ReturnValue_2) == 0x000083, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000088, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_BooleanAND_ReturnValue_1) == 0x000090, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_BooleanAND_ReturnValue_2) == 0x000091, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, Temp_bool_Variable) == 0x000092, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, CallFunc_BooleanOR_ReturnValue) == 0x000093, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, K2Node_Select_Default) == 0x000098, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, Temp_bool_Variable_1) == 0x0000A0, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetStyle, K2Node_Select_Default_1) == 0x0000A8, "Member 'W_PreMission_Tablet_MapMarker_C_SetStyle::K2Node_Select_Default_1' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.SetRotation
// 0x0008 (0x0008 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_SetRotation final 
{
public:
	float                                         NewRotation;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_SetRotation) == 0x000004, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_SetRotation");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_SetRotation) == 0x000008, "Wrong size on W_PreMission_Tablet_MapMarker_C_SetRotation");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetRotation, NewRotation) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_SetRotation::NewRotation' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_SetRotation, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'W_PreMission_Tablet_MapMarker_C_SetRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.HasRotation
// 0x0002 (0x0002 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_HasRotation final 
{
public:
	bool                                          Param_Rotates;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_HasRotation) == 0x000001, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_HasRotation");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_HasRotation) == 0x000002, "Wrong size on W_PreMission_Tablet_MapMarker_C_HasRotation");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_HasRotation, Param_Rotates) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_HasRotation::Param_Rotates' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_HasRotation, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'W_PreMission_Tablet_MapMarker_C_HasRotation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.HasAngleChanged
// 0x0002 (0x0002 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_HasAngleChanged final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_HasAngleChanged) == 0x000001, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_HasAngleChanged");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_HasAngleChanged) == 0x000002, "Wrong size on W_PreMission_Tablet_MapMarker_C_HasAngleChanged");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_HasAngleChanged, ReturnValue) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_HasAngleChanged::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_HasAngleChanged, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'W_PreMission_Tablet_MapMarker_C_HasAngleChanged::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.OnMouseButtonUp
// 0x0468 (0x0468 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0160(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3226[0x6];                                     // 0x017A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0180(0x00B8)()
	struct FEventReply                            CallFunc_ReleaseMouseCapture_ReturnValue;          // 0x0238(0x00B8)()
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x02F0(0x00B8)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3227[0x7];                                     // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x03B0(0x00B8)()
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp) == 0x000468, "Wrong size on W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, MouseEvent) == 0x000038, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, ReturnValue) == 0x0000A8, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000160, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000178, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000179, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue) == 0x000180, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_ReleaseMouseCapture_ReturnValue) == 0x000238, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_ReleaseMouseCapture_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_Unhandled_ReturnValue) == 0x0002F0, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_IsValid_ReturnValue) == 0x0003A8, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue_1) == 0x0003B0, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue_1' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.OnMouseMove
// 0x0320 (0x0320 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_OnMouseMove final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector2D                              CallFunc_GetNormalizedClick_ReturnValue;           // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0190(0x00B8)()
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0260(0x00B8)()
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_OnMouseMove) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_OnMouseMove");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_OnMouseMove) == 0x000320, "Wrong size on W_PreMission_Tablet_MapMarker_C_OnMouseMove");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, MouseEvent) == 0x000038, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, ReturnValue) == 0x0000A8, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_GetNormalizedClick_ReturnValue) == 0x000160, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_GetNormalizedClick_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakVector2D_X) == 0x000168, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakVector2D_Y) == 0x00016C, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakVector2D_X_1) == 0x000170, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakVector2D_Y_1) == 0x000174, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_MakeVector_ReturnValue) == 0x000178, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_MakeVector_ReturnValue_1) == 0x000184, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_Unhandled_ReturnValue) == 0x000190, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_FindLookAtRotation_ReturnValue) == 0x000248, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakRotator_Roll) == 0x000254, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakRotator_Pitch) == 0x000258, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_BreakRotator_Yaw) == 0x00025C, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_Handled_ReturnValue) == 0x000260, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseMove, CallFunc_Add_FloatFloat_ReturnValue) == 0x000318, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseMove::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C.OnMouseButtonDown
// 0x0398 (0x0398 - 0x0000)
struct W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue; // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3228[0x7];                                     // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0170(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0228(0x00B8)()
	struct FEventReply                            CallFunc_CaptureMouse_ReturnValue;                 // 0x02E0(0x00B8)()
};
static_assert(alignof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown");
static_assert(sizeof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown) == 0x000398, "Wrong size on W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, ReturnValue) == 0x0000A8, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000160, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue) == 0x000168, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, CallFunc_Unhandled_ReturnValue) == 0x000170, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000228, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown, CallFunc_CaptureMouse_ReturnValue) == 0x0002E0, "Member 'W_PreMission_Tablet_MapMarker_C_OnMouseButtonDown::CallFunc_CaptureMouse_ReturnValue' has a wrong offset!");

}

