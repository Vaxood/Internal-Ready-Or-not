#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WorldMap

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function W_WorldMap.W_WorldMap_C.PanMap__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct W_WorldMap_C_PanMap__DelegateSignature final 
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D54[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CursorPos;                                         // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMap_C_PanMap__DelegateSignature) == 0x000004, "Wrong alignment on W_WorldMap_C_PanMap__DelegateSignature");
static_assert(sizeof(W_WorldMap_C_PanMap__DelegateSignature) == 0x00000C, "Wrong size on W_WorldMap_C_PanMap__DelegateSignature");
static_assert(offsetof(W_WorldMap_C_PanMap__DelegateSignature, Pressed) == 0x000000, "Member 'W_WorldMap_C_PanMap__DelegateSignature::Pressed' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_PanMap__DelegateSignature, CursorPos) == 0x000004, "Member 'W_WorldMap_C_PanMap__DelegateSignature::CursorPos' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.UpdateMapMaterial__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_WorldMap_C_UpdateMapMaterial__DelegateSignature final 
{
public:
	class UTexture2D*                             LayoutTexture;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMap_C_UpdateMapMaterial__DelegateSignature) == 0x000008, "Wrong alignment on W_WorldMap_C_UpdateMapMaterial__DelegateSignature");
static_assert(sizeof(W_WorldMap_C_UpdateMapMaterial__DelegateSignature) == 0x000008, "Wrong size on W_WorldMap_C_UpdateMapMaterial__DelegateSignature");
static_assert(offsetof(W_WorldMap_C_UpdateMapMaterial__DelegateSignature, LayoutTexture) == 0x000000, "Member 'W_WorldMap_C_UpdateMapMaterial__DelegateSignature::LayoutTexture' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.ExecuteUbergraph_W_WorldMap
// 0x11C0 (0x11C0 - 0x0000)
struct W_WorldMap_C_ExecuteUbergraph_W_WorldMap final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D55[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D56[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_WorldMapPin_C*                       CallFunc_Create_ReturnValue;                       // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0048(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D57[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button_1;               // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotPlayerController*            CallFunc_GetReadyOrNotPlayerController_ReturnValue; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button;                 // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLevelUnlocked_OutIsUnlocked;            // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D58[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsLevelUnlocked_OutScoreRequired;         // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_IsLevelUnlocked_OutLockedUrl;             // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLevelUnlocked_ReturnValue;              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D59[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelDataLookupTable                  CallFunc_GetMapDetailsFromName_ReturnValue;        // 0x00E0(0x0788)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0868(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x08A8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x08B8(0x0018)()
	TDelegate<void(class UW_WorldMap_MissionSelect_C* BtnClicked)> K2Node_CreateDelegate_OutputDelegate;              // 0x08D0(0x0010)(ZeroConstructor, NoDestructor)
	TArray<class UW_WorldMap_MissionSelect_C*>    CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x08E0(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UW_WorldMap_MissionSelect_C*            K2Node_CustomEvent_BtnClicked;                     // 0x08F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_WorldMap_MissionSelect_C*            CallFunc_Array_Get_Item;                           // 0x08F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0900(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D5A[0x4];                                     // 0x0904(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotPlayerController*            CallFunc_GetReadyOrNotPlayerController_ReturnValue_1; // 0x0908(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0910(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D5B[0x7];                                     // 0x0911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UReadyOrNotGameInstance*                CallFunc_GetReadyOrNotGameInstance_ReturnValue;    // 0x0918(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         CallFunc_GetBuiltModdedMapList_ReturnValue;        // 0x0920(0x0010)(ReferenceParm)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0930(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item_1;                         // 0x0938(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0948(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x094C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D5C[0x3];                                     // 0x094D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0950(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetSelectedMode_OutMode;                  // 0x0958(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSelectedMode_ReturnValue;              // 0x0968(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D5D[0x7];                                     // 0x0969(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0970(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0980(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D5E[0x7];                                     // 0x0981(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item_2;                         // 0x0988(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_WorldMap_MissionSelect_C*            K2Node_DynamicCast_AsW_World_Map_Mission_Select;   // 0x0990(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0998(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D5F[0x3];                                     // 0x0999(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x099C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x09A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x09A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGameModeSelectable_ReturnValue;         // 0x09A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D60[0x5];                                     // 0x09A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMissionPortal*>                 CallFunc_GetAllActorsOfClass_OutActors;            // 0x09A8(0x0010)(ReferenceParm)
	class AMissionPortal*                         CallFunc_Array_Get_Item_3;                         // 0x09B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName MissionName)>      K2Node_CreateDelegate_OutputDelegate_1;            // 0x09C0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class FName MissionName)>      K2Node_CreateDelegate_OutputDelegate_2;            // 0x09D0(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class FName MissionName)>      K2Node_CreateDelegate_OutputDelegate_3;            // 0x09E0(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_MissionName_2;                  // 0x09F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UW_WorldMapPin_C*>               CallFunc_WidgetGetChildrenOfClass_ChildWidgets;    // 0x09F8(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UW_WorldMapPin_C*                       CallFunc_Array_Get_Item_4;                         // 0x0A08(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0A10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0A14(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D61[0x3];                                     // 0x0A15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_MissionName_1;                  // 0x0A18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_MissionName;                    // 0x0A20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_2;          // 0x0A28(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  CallFunc_GetMapDetailsFromName_ReturnValue_1;      // 0x0A38(0x0788)()
};
static_assert(alignof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap) == 0x000008, "Wrong alignment on W_WorldMap_C_ExecuteUbergraph_W_WorldMap");
static_assert(sizeof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap) == 0x0011C0, "Wrong size on W_WorldMap_C_ExecuteUbergraph_W_WorldMap");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, EntryPoint) == 0x000000, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, Temp_int_Array_Index_Variable) == 0x000004, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, Temp_int_Loop_Counter_Variable_2) == 0x000018, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Add_IntInt_ReturnValue_2) == 0x00001C, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, Temp_bool_True_if_break_was_hit_Variable) == 0x000020, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, Temp_int_Array_Index_Variable_1) == 0x000024, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Create_ReturnValue) == 0x000030, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, Temp_int_Array_Index_Variable_2) == 0x000038, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, Temp_int_Loop_Counter_Variable_3) == 0x00003C, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Add_IntInt_ReturnValue_3) == 0x000040, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, Temp_int_Array_Index_Variable_3) == 0x000044, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_Event_MyGeometry) == 0x000048, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_Event_InDeltaTime) == 0x000080, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_ComponentBoundEvent_Button_1) == 0x000088, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_GetReadyOrNotPlayerController_ReturnValue) == 0x000090, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_GetReadyOrNotPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_ComponentBoundEvent_Button) == 0x000098, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Conv_NameToString_ReturnValue) == 0x0000A0, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Conv_NameToString_ReturnValue_1) == 0x0000B0, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_IsLevelUnlocked_OutIsUnlocked) == 0x0000C0, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_IsLevelUnlocked_OutIsUnlocked' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_IsLevelUnlocked_OutScoreRequired) == 0x0000C4, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_IsLevelUnlocked_OutScoreRequired' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_IsLevelUnlocked_OutLockedUrl) == 0x0000C8, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_IsLevelUnlocked_OutLockedUrl' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_IsLevelUnlocked_ReturnValue) == 0x0000D8, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_IsLevelUnlocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_GetMapDetailsFromName_ReturnValue) == 0x0000E0, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_GetMapDetailsFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_MakeStruct_FormatArgumentData) == 0x000868, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_MakeArray_Array) == 0x0008A8, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Format_ReturnValue) == 0x0008B8, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_CreateDelegate_OutputDelegate) == 0x0008D0, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x0008E0, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_CustomEvent_BtnClicked) == 0x0008F0, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_CustomEvent_BtnClicked' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Array_Get_Item) == 0x0008F8, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Array_Length_ReturnValue) == 0x000900, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_GetReadyOrNotPlayerController_ReturnValue_1) == 0x000908, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_GetReadyOrNotPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Less_IntInt_ReturnValue) == 0x000910, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_GetReadyOrNotGameInstance_ReturnValue) == 0x000918, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_GetReadyOrNotGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_GetBuiltModdedMapList_ReturnValue) == 0x000920, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_GetBuiltModdedMapList_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_AddChild_ReturnValue) == 0x000930, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Array_Get_Item_1) == 0x000938, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Array_Length_ReturnValue_1) == 0x000948, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Less_IntInt_ReturnValue_1) == 0x00094C, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Conv_StringToName_ReturnValue) == 0x000950, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_GetSelectedMode_OutMode) == 0x000958, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_GetSelectedMode_OutMode' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_GetSelectedMode_ReturnValue) == 0x000968, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_GetSelectedMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_GetAllChildren_ReturnValue) == 0x000970, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_IsEmpty_ReturnValue) == 0x000980, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Array_Get_Item_2) == 0x000988, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_DynamicCast_AsW_World_Map_Mission_Select) == 0x000990, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_DynamicCast_AsW_World_Map_Mission_Select' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_DynamicCast_bSuccess) == 0x000998, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Array_Length_ReturnValue_2) == 0x00099C, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Less_IntInt_ReturnValue_2) == 0x0009A0, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_BooleanAND_ReturnValue) == 0x0009A1, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_IsGameModeSelectable_ReturnValue) == 0x0009A2, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_IsGameModeSelectable_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_GetAllActorsOfClass_OutActors) == 0x0009A8, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Array_Get_Item_3) == 0x0009B8, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_CreateDelegate_OutputDelegate_1) == 0x0009C0, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_CreateDelegate_OutputDelegate_2) == 0x0009D0, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_CreateDelegate_OutputDelegate_3) == 0x0009E0, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_CustomEvent_MissionName_2) == 0x0009F0, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_CustomEvent_MissionName_2' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_WidgetGetChildrenOfClass_ChildWidgets) == 0x0009F8, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_WidgetGetChildrenOfClass_ChildWidgets' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Array_Get_Item_4) == 0x000A08, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Array_Length_ReturnValue_3) == 0x000A10, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Less_IntInt_ReturnValue_3) == 0x000A14, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_CustomEvent_MissionName_1) == 0x000A18, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_CustomEvent_MissionName_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, K2Node_CustomEvent_MissionName) == 0x000A20, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::K2Node_CustomEvent_MissionName' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_Conv_NameToString_ReturnValue_2) == 0x000A28, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_Conv_NameToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ExecuteUbergraph_W_WorldMap, CallFunc_GetMapDetailsFromName_ReturnValue_1) == 0x000A38, "Member 'W_WorldMap_C_ExecuteUbergraph_W_WorldMap::CallFunc_GetMapDetailsFromName_ReturnValue_1' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.PinUnhovered
// 0x0008 (0x0008 - 0x0000)
struct W_WorldMap_C_PinUnhovered final 
{
public:
	class FName                                   MissionName;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMap_C_PinUnhovered) == 0x000004, "Wrong alignment on W_WorldMap_C_PinUnhovered");
static_assert(sizeof(W_WorldMap_C_PinUnhovered) == 0x000008, "Wrong size on W_WorldMap_C_PinUnhovered");
static_assert(offsetof(W_WorldMap_C_PinUnhovered, MissionName) == 0x000000, "Member 'W_WorldMap_C_PinUnhovered::MissionName' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.PinHovered
// 0x0008 (0x0008 - 0x0000)
struct W_WorldMap_C_PinHovered final 
{
public:
	class FName                                   MissionName;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMap_C_PinHovered) == 0x000004, "Wrong alignment on W_WorldMap_C_PinHovered");
static_assert(sizeof(W_WorldMap_C_PinHovered) == 0x000008, "Wrong size on W_WorldMap_C_PinHovered");
static_assert(offsetof(W_WorldMap_C_PinHovered, MissionName) == 0x000000, "Member 'W_WorldMap_C_PinHovered::MissionName' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.PinClicked
// 0x0008 (0x0008 - 0x0000)
struct W_WorldMap_C_PinClicked final 
{
public:
	class FName                                   MissionName;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMap_C_PinClicked) == 0x000004, "Wrong alignment on W_WorldMap_C_PinClicked");
static_assert(sizeof(W_WorldMap_C_PinClicked) == 0x000008, "Wrong size on W_WorldMap_C_PinClicked");
static_assert(offsetof(W_WorldMap_C_PinClicked, MissionName) == 0x000000, "Member 'W_WorldMap_C_PinClicked::MissionName' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.OnSetMissionButtonClicked_Event_0
// 0x0008 (0x0008 - 0x0000)
struct W_WorldMap_C_OnSetMissionButtonClicked_Event_0 final 
{
public:
	class UW_WorldMap_MissionSelect_C*            BtnClicked;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMap_C_OnSetMissionButtonClicked_Event_0) == 0x000008, "Wrong alignment on W_WorldMap_C_OnSetMissionButtonClicked_Event_0");
static_assert(sizeof(W_WorldMap_C_OnSetMissionButtonClicked_Event_0) == 0x000008, "Wrong size on W_WorldMap_C_OnSetMissionButtonClicked_Event_0");
static_assert(offsetof(W_WorldMap_C_OnSetMissionButtonClicked_Event_0, BtnClicked) == 0x000000, "Member 'W_WorldMap_C_OnSetMissionButtonClicked_Event_0::BtnClicked' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.BndEvt__W_WorldMap_btn_AcceptMission_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_WorldMap_C_BndEvt__W_WorldMap_btn_AcceptMission_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature final 
{
public:
	class UW_Button_C*                            Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMap_C_BndEvt__W_WorldMap_btn_AcceptMission_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature) == 0x000008, "Wrong alignment on W_WorldMap_C_BndEvt__W_WorldMap_btn_AcceptMission_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature");
static_assert(sizeof(W_WorldMap_C_BndEvt__W_WorldMap_btn_AcceptMission_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature) == 0x000008, "Wrong size on W_WorldMap_C_BndEvt__W_WorldMap_btn_AcceptMission_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature");
static_assert(offsetof(W_WorldMap_C_BndEvt__W_WorldMap_btn_AcceptMission_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature, Button) == 0x000000, "Member 'W_WorldMap_C_BndEvt__W_WorldMap_btn_AcceptMission_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature::Button' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.BndEvt__W_WorldMap_btn_Close_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_WorldMap_C_BndEvt__W_WorldMap_btn_Close_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature final 
{
public:
	class UW_Button_C*                            Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMap_C_BndEvt__W_WorldMap_btn_Close_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature) == 0x000008, "Wrong alignment on W_WorldMap_C_BndEvt__W_WorldMap_btn_Close_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature");
static_assert(sizeof(W_WorldMap_C_BndEvt__W_WorldMap_btn_Close_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature) == 0x000008, "Wrong size on W_WorldMap_C_BndEvt__W_WorldMap_btn_Close_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature");
static_assert(offsetof(W_WorldMap_C_BndEvt__W_WorldMap_btn_Close_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature, Button) == 0x000000, "Member 'W_WorldMap_C_BndEvt__W_WorldMap_btn_Close_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature::Button' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_WorldMap_C_Tick final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMap_C_Tick) == 0x000004, "Wrong alignment on W_WorldMap_C_Tick");
static_assert(sizeof(W_WorldMap_C_Tick) == 0x00003C, "Wrong size on W_WorldMap_C_Tick");
static_assert(offsetof(W_WorldMap_C_Tick, MyGeometry) == 0x000000, "Member 'W_WorldMap_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_Tick, InDeltaTime) == 0x000038, "Member 'W_WorldMap_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.OnMouseMove
// 0x0228 (0x0228 - 0x0000)
struct W_WorldMap_C_OnMouseMove final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0160(0x00B8)()
	struct FVector2D                              CallFunc_PointerEvent_GetCursorDelta_ReturnValue;  // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue;  // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_WorldMap_C_OnMouseMove) == 0x000008, "Wrong alignment on W_WorldMap_C_OnMouseMove");
static_assert(sizeof(W_WorldMap_C_OnMouseMove) == 0x000228, "Wrong size on W_WorldMap_C_OnMouseMove");
static_assert(offsetof(W_WorldMap_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'W_WorldMap_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnMouseMove, MouseEvent) == 0x000038, "Member 'W_WorldMap_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnMouseMove, ReturnValue) == 0x0000A8, "Member 'W_WorldMap_C_OnMouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnMouseMove, CallFunc_Handled_ReturnValue) == 0x000160, "Member 'W_WorldMap_C_OnMouseMove::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnMouseMove, CallFunc_PointerEvent_GetCursorDelta_ReturnValue) == 0x000218, "Member 'W_WorldMap_C_OnMouseMove::CallFunc_PointerEvent_GetCursorDelta_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnMouseMove, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue) == 0x000220, "Member 'W_WorldMap_C_OnMouseMove::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.OnDragDetected
// 0x00B0 (0x00B0 - 0x0000)
struct W_WorldMap_C_OnDragDetected final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMap_C_OnDragDetected) == 0x000008, "Wrong alignment on W_WorldMap_C_OnDragDetected");
static_assert(sizeof(W_WorldMap_C_OnDragDetected) == 0x0000B0, "Wrong size on W_WorldMap_C_OnDragDetected");
static_assert(offsetof(W_WorldMap_C_OnDragDetected, MyGeometry) == 0x000000, "Member 'W_WorldMap_C_OnDragDetected::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnDragDetected, PointerEvent) == 0x000038, "Member 'W_WorldMap_C_OnDragDetected::PointerEvent' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnDragDetected, Operation) == 0x0000A8, "Member 'W_WorldMap_C_OnDragDetected::Operation' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.SetSelectedMission
// 0x0808 (0x0808 - 0x0000)
struct W_WorldMap_C_SetSelectedMission final 
{
public:
	class FName                                   SelectedMission;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  CallFunc_GetMapDetailsFromName_ReturnValue;        // 0x0028(0x0788)()
	class UTexture2D*                             CallFunc_GetLazyLoadedImage_ReturnValue;           // 0x07B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x07B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D62[0x4];                                     // 0x07BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UW_WorldMapPin_C*>               CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x07C0(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UW_WorldMapPin_C*                       CallFunc_Array_Get_Item;                           // 0x07D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x07D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x07DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D63[0x3];                                     // 0x07DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x07E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D64[0x4];                                     // 0x07E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UW_WorldMapPin_C*>               CallFunc_GetAllWidgetsOfClass_FoundWidgets_1;      // 0x07E8(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UW_WorldMapPin_C*                       CallFunc_Array_Get_Item_1;                         // 0x07F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0800(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0804(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0805(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x0806(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_WorldMap_C_SetSelectedMission) == 0x000008, "Wrong alignment on W_WorldMap_C_SetSelectedMission");
static_assert(sizeof(W_WorldMap_C_SetSelectedMission) == 0x000808, "Wrong size on W_WorldMap_C_SetSelectedMission");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, SelectedMission) == 0x000000, "Member 'W_WorldMap_C_SetSelectedMission::SelectedMission' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'W_WorldMap_C_SetSelectedMission::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, Temp_int_Array_Index_Variable) == 0x000010, "Member 'W_WorldMap_C_SetSelectedMission::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'W_WorldMap_C_SetSelectedMission::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_Conv_NameToString_ReturnValue) == 0x000018, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_GetMapDetailsFromName_ReturnValue) == 0x000028, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_GetMapDetailsFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_GetLazyLoadedImage_ReturnValue) == 0x0007B0, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_GetLazyLoadedImage_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, Temp_int_Loop_Counter_Variable_1) == 0x0007B8, "Member 'W_WorldMap_C_SetSelectedMission::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x0007C0, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_Array_Get_Item) == 0x0007D0, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_Array_Length_ReturnValue) == 0x0007D8, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_Less_IntInt_ReturnValue) == 0x0007DC, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_Add_IntInt_ReturnValue_1) == 0x0007E0, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_GetAllWidgetsOfClass_FoundWidgets_1) == 0x0007E8, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_GetAllWidgetsOfClass_FoundWidgets_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_Array_Get_Item_1) == 0x0007F8, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_Array_Length_ReturnValue_1) == 0x000800, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_Less_IntInt_ReturnValue_1) == 0x000804, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000805, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMission, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x000806, "Member 'W_WorldMap_C_SetSelectedMission::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.ShowToolTip
// 0x0798 (0x0798 - 0x0000)
struct W_WorldMap_C_ShowToolTip final 
{
public:
	struct FLevelDataLookupTable                  MissionDetails;                                    // 0x0000(0x0788)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UTexture2D*                             CallFunc_GetLazyLoadedImage_ReturnValue;           // 0x0788(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0790(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_WorldMap_C_ShowToolTip) == 0x000008, "Wrong alignment on W_WorldMap_C_ShowToolTip");
static_assert(sizeof(W_WorldMap_C_ShowToolTip) == 0x000798, "Wrong size on W_WorldMap_C_ShowToolTip");
static_assert(offsetof(W_WorldMap_C_ShowToolTip, MissionDetails) == 0x000000, "Member 'W_WorldMap_C_ShowToolTip::MissionDetails' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ShowToolTip, CallFunc_GetLazyLoadedImage_ReturnValue) == 0x000788, "Member 'W_WorldMap_C_ShowToolTip::CallFunc_GetLazyLoadedImage_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_ShowToolTip, CallFunc_TextIsEmpty_ReturnValue) == 0x000790, "Member 'W_WorldMap_C_ShowToolTip::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.On_MapBlurClickable_MouseButtonDown_0
// 0x0218 (0x0218 - 0x0000)
struct W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0 final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0160(0x00B8)()
};
static_assert(alignof(W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0) == 0x000008, "Wrong alignment on W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0");
static_assert(sizeof(W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0) == 0x000218, "Wrong size on W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0");
static_assert(offsetof(W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0, MyGeometry) == 0x000000, "Member 'W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0, MouseEvent) == 0x000038, "Member 'W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0, ReturnValue) == 0x0000A8, "Member 'W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0, CallFunc_Handled_ReturnValue) == 0x000160, "Member 'W_WorldMap_C_On_MapBlurClickable_MouseButtonDown_0::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.SetSelectedMode
// 0x0068 (0x0068 - 0x0000)
struct W_WorldMap_C_SetSelectedMode final 
{
public:
	class FName                                   Param_SelectedMode;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D65[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UW_WorldMapPin_C*>               CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UW_WorldMapPin_C*                       CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D66[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D67[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UW_WorldMapPin_C*>               CallFunc_GetAllWidgetsOfClass_FoundWidgets_1;      // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UW_WorldMapPin_C*                       CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_WorldMap_C_SetSelectedMode) == 0x000008, "Wrong alignment on W_WorldMap_C_SetSelectedMode");
static_assert(sizeof(W_WorldMap_C_SetSelectedMode) == 0x000068, "Wrong size on W_WorldMap_C_SetSelectedMode");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, Param_SelectedMode) == 0x000000, "Member 'W_WorldMap_C_SetSelectedMode::Param_SelectedMode' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'W_WorldMap_C_SetSelectedMode::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'W_WorldMap_C_SetSelectedMode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, Temp_int_Array_Index_Variable) == 0x000010, "Member 'W_WorldMap_C_SetSelectedMode::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'W_WorldMap_C_SetSelectedMode::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, Temp_int_Loop_Counter_Variable_1) == 0x000018, "Member 'W_WorldMap_C_SetSelectedMode::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000020, "Member 'W_WorldMap_C_SetSelectedMode::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, CallFunc_Array_Get_Item) == 0x000030, "Member 'W_WorldMap_C_SetSelectedMode::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'W_WorldMap_C_SetSelectedMode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'W_WorldMap_C_SetSelectedMode::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'W_WorldMap_C_SetSelectedMode::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, CallFunc_GetAllWidgetsOfClass_FoundWidgets_1) == 0x000048, "Member 'W_WorldMap_C_SetSelectedMode::CallFunc_GetAllWidgetsOfClass_FoundWidgets_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'W_WorldMap_C_SetSelectedMode::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, CallFunc_Array_Length_ReturnValue_1) == 0x000060, "Member 'W_WorldMap_C_SetSelectedMode::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, CallFunc_Less_IntInt_ReturnValue_1) == 0x000064, "Member 'W_WorldMap_C_SetSelectedMode::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000065, "Member 'W_WorldMap_C_SetSelectedMode::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_SetSelectedMode, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x000066, "Member 'W_WorldMap_C_SetSelectedMode::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.OnKeyDown
// 0x02B8 (0x02B8 - 0x0000)
struct W_WorldMap_C_OnKeyDown final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0070(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0128(0x00B8)()
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x01E0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D68[0x7];                                     // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0200(0x00B8)()
};
static_assert(alignof(W_WorldMap_C_OnKeyDown) == 0x000008, "Wrong alignment on W_WorldMap_C_OnKeyDown");
static_assert(sizeof(W_WorldMap_C_OnKeyDown) == 0x0002B8, "Wrong size on W_WorldMap_C_OnKeyDown");
static_assert(offsetof(W_WorldMap_C_OnKeyDown, MyGeometry) == 0x000000, "Member 'W_WorldMap_C_OnKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnKeyDown, InKeyEvent) == 0x000038, "Member 'W_WorldMap_C_OnKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnKeyDown, ReturnValue) == 0x000070, "Member 'W_WorldMap_C_OnKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnKeyDown, CallFunc_Handled_ReturnValue) == 0x000128, "Member 'W_WorldMap_C_OnKeyDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnKeyDown, CallFunc_GetKey_ReturnValue) == 0x0001E0, "Member 'W_WorldMap_C_OnKeyDown::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x0001F8, "Member 'W_WorldMap_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_OnKeyDown, CallFunc_Unhandled_ReturnValue) == 0x000200, "Member 'W_WorldMap_C_OnKeyDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function W_WorldMap.W_WorldMap_C.GoBack
// 0x0010 (0x0010 - 0x0000)
struct W_WorldMap_C_GoBack final 
{
public:
	class AReadyOrNotPlayerController*            CallFunc_GetReadyOrNotPlayerController_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue_1;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_WorldMap_C_GoBack) == 0x000008, "Wrong alignment on W_WorldMap_C_GoBack");
static_assert(sizeof(W_WorldMap_C_GoBack) == 0x000010, "Wrong size on W_WorldMap_C_GoBack");
static_assert(offsetof(W_WorldMap_C_GoBack, CallFunc_GetReadyOrNotPlayerController_ReturnValue) == 0x000000, "Member 'W_WorldMap_C_GoBack::CallFunc_GetReadyOrNotPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_GoBack, CallFunc_IsVisible_ReturnValue) == 0x000008, "Member 'W_WorldMap_C_GoBack::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_GoBack, CallFunc_IsVisible_ReturnValue_1) == 0x000009, "Member 'W_WorldMap_C_GoBack::CallFunc_IsVisible_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMap_C_GoBack, CallFunc_BooleanOR_ReturnValue) == 0x00000A, "Member 'W_WorldMap_C_GoBack::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

