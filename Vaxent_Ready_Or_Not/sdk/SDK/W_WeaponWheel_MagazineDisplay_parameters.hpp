#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WeaponWheel_MagazineDisplay

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C.ExecuteUbergraph_W_WeaponWheel_MagazineDisplay
// 0x0050 (0x0050 - 0x0000)
struct W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4458[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMagazineCount_ReturnValue;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAmmoInMagazine_ReturnValue;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay) == 0x000004, "Wrong alignment on W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay");
static_assert(sizeof(W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay) == 0x000050, "Wrong size on W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay, EntryPoint) == 0x000000, "Member 'W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay, K2Node_Event_IsDesignTime) == 0x000004, "Member 'W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay, K2Node_Event_MyGeometry) == 0x000008, "Member 'W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay, K2Node_Event_InDeltaTime) == 0x000040, "Member 'W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay, CallFunc_GetMagazineCount_ReturnValue) == 0x000044, "Member 'W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay::CallFunc_GetMagazineCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay, CallFunc_GetAmmoInMagazine_ReturnValue) == 0x000048, "Member 'W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay::CallFunc_GetAmmoInMagazine_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay, CallFunc_Subtract_IntInt_ReturnValue) == 0x00004C, "Member 'W_WeaponWheel_MagazineDisplay_C_ExecuteUbergraph_W_WeaponWheel_MagazineDisplay::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_WeaponWheel_MagazineDisplay_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_WeaponWheel_MagazineDisplay_C_PreConstruct) == 0x000001, "Wrong alignment on W_WeaponWheel_MagazineDisplay_C_PreConstruct");
static_assert(sizeof(W_WeaponWheel_MagazineDisplay_C_PreConstruct) == 0x000001, "Wrong size on W_WeaponWheel_MagazineDisplay_C_PreConstruct");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_WeaponWheel_MagazineDisplay_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_WeaponWheel_MagazineDisplay_C_Tick final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponWheel_MagazineDisplay_C_Tick) == 0x000004, "Wrong alignment on W_WeaponWheel_MagazineDisplay_C_Tick");
static_assert(sizeof(W_WeaponWheel_MagazineDisplay_C_Tick) == 0x00003C, "Wrong size on W_WeaponWheel_MagazineDisplay_C_Tick");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_Tick, MyGeometry) == 0x000000, "Member 'W_WeaponWheel_MagazineDisplay_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_Tick, InDeltaTime) == 0x000038, "Member 'W_WeaponWheel_MagazineDisplay_C_Tick::InDeltaTime' has a wrong offset!");

// Function W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C.CreateMag
// 0x0008 (0x0008 - 0x0000)
struct W_WeaponWheel_MagazineDisplay_C_CreateMag final 
{
public:
	class UW_WeaponWheel_MagazineSlot_C*          MagSlot;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponWheel_MagazineDisplay_C_CreateMag) == 0x000008, "Wrong alignment on W_WeaponWheel_MagazineDisplay_C_CreateMag");
static_assert(sizeof(W_WeaponWheel_MagazineDisplay_C_CreateMag) == 0x000008, "Wrong size on W_WeaponWheel_MagazineDisplay_C_CreateMag");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMag, MagSlot) == 0x000000, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMag::MagSlot' has a wrong offset!");

// Function W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C.CreateMagOutline
// 0x0008 (0x0008 - 0x0000)
struct W_WeaponWheel_MagazineDisplay_C_CreateMagOutline final 
{
public:
	class UW_WeaponWheel_MagazineSlot_C*          MagSlot;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponWheel_MagazineDisplay_C_CreateMagOutline) == 0x000008, "Wrong alignment on W_WeaponWheel_MagazineDisplay_C_CreateMagOutline");
static_assert(sizeof(W_WeaponWheel_MagazineDisplay_C_CreateMagOutline) == 0x000008, "Wrong size on W_WeaponWheel_MagazineDisplay_C_CreateMagOutline");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMagOutline, MagSlot) == 0x000000, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMagOutline::MagSlot' has a wrong offset!");

// Function W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C.CreateMags
// 0x00A0 (0x00A0 - 0x0000)
struct W_WeaponWheel_MagazineDisplay_C_CreateMags final 
{
public:
	int32                                         CurrentIndex;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4459[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_WeaponWheel_MagazineSlot_C*          CurrentMagSlot;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_445A[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_445B[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_445C[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_445D[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxSlots_ReturnValue;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_445E[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_445F[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_WeaponWheel_MagazineSlot_C*          CallFunc_CreateMagSlot_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4460[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UImage*                                 CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMagazineCount_ReturnValue;             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AShotgun*                               K2Node_DynamicCast_AsShotgun;                      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4461[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponWheel_MagazineDisplay_C_CreateMags) == 0x000008, "Wrong alignment on W_WeaponWheel_MagazineDisplay_C_CreateMags");
static_assert(sizeof(W_WeaponWheel_MagazineDisplay_C_CreateMags) == 0x0000A0, "Wrong size on W_WeaponWheel_MagazineDisplay_C_CreateMags");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CurrentIndex) == 0x000000, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CurrentIndex' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CurrentMagSlot) == 0x000008, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CurrentMagSlot' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, Temp_bool_Variable) == 0x000010, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, Temp_int_Variable) == 0x000014, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, Temp_bool_Variable_1) == 0x00001D, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Not_PreBool_ReturnValue_1) == 0x000024, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Greater_IntInt_ReturnValue) == 0x000025, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Map_Find_Value) == 0x000028, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Map_Find_ReturnValue) == 0x00002C, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Subtract_IntInt_ReturnValue) == 0x000030, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_GetMaxSlots_ReturnValue) == 0x000034, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_GetMaxSlots_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000038, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00003C, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_BooleanAND_ReturnValue) == 0x000040, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_CreateMagSlot_ReturnValue) == 0x000048, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_CreateMagSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, Temp_int_Variable_1) == 0x000050, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000058, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_BooleanAND_ReturnValue_1) == 0x000059, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Array_LastIndex_ReturnValue) == 0x00005C, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, K2Node_MakeStruct_Margin) == 0x000060, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Array_Get_Item) == 0x000070, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000078, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Array_Add_ReturnValue) == 0x000080, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_GetMagazineCount_ReturnValue) == 0x000084, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_GetMagazineCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, K2Node_DynamicCast_AsShotgun) == 0x000088, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::K2Node_DynamicCast_AsShotgun' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Divide_IntInt_ReturnValue) == 0x000094, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMags, CallFunc_Add_IntInt_ReturnValue_2) == 0x000098, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMags::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C.Initialize
// 0x0010 (0x0010 - 0x0000)
struct W_WeaponWheel_MagazineDisplay_C_Initialize final 
{
public:
	class ABaseMagazineWeapon*                    InMagazineWeapon;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_IconSize;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponWheel_MagazineDisplay_C_Initialize) == 0x000008, "Wrong alignment on W_WeaponWheel_MagazineDisplay_C_Initialize");
static_assert(sizeof(W_WeaponWheel_MagazineDisplay_C_Initialize) == 0x000010, "Wrong size on W_WeaponWheel_MagazineDisplay_C_Initialize");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_Initialize, InMagazineWeapon) == 0x000000, "Member 'W_WeaponWheel_MagazineDisplay_C_Initialize::InMagazineWeapon' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_Initialize, Param_IconSize) == 0x000008, "Member 'W_WeaponWheel_MagazineDisplay_C_Initialize::Param_IconSize' has a wrong offset!");

// Function W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C.UpdateMagIcon
// 0x0038 (0x0038 - 0x0000)
struct W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon final 
{
public:
	int32                                         MagIndex;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentAmmo;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_WeaponWheel_MagazineSlot_C*          CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4462[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 CallFunc_GetMag_Return_Value;                      // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon) == 0x000008, "Wrong alignment on W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon");
static_assert(sizeof(W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon) == 0x000038, "Wrong size on W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon, MagIndex) == 0x000000, "Member 'W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon::MagIndex' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon, CurrentAmmo) == 0x000004, "Member 'W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon::CurrentAmmo' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon, CallFunc_Array_Get_Item) == 0x000008, "Member 'W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon, CallFunc_Clamp_ReturnValue) == 0x000018, "Member 'W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon, CallFunc_GetMag_Return_Value) == 0x000020, "Member 'W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon::CallFunc_GetMag_Return_Value' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000028, "Member 'W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'W_WeaponWheel_MagazineDisplay_C_UpdateMagIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C.CreateMagSlot
// 0x0028 (0x0028 - 0x0000)
struct W_WeaponWheel_MagazineDisplay_C_CreateMagSlot final 
{
public:
	class UW_WeaponWheel_MagazineSlot_C*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize;                  // 0x0008(0x0008)(NoDestructor)
	class UW_WeaponWheel_MagazineSlot_C*          CallFunc_SpawnObject_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponWheel_MagazineDisplay_C_CreateMagSlot) == 0x000008, "Wrong alignment on W_WeaponWheel_MagazineDisplay_C_CreateMagSlot");
static_assert(sizeof(W_WeaponWheel_MagazineDisplay_C_CreateMagSlot) == 0x000028, "Wrong size on W_WeaponWheel_MagazineDisplay_C_CreateMagSlot");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMagSlot, ReturnValue) == 0x000000, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMagSlot::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMagSlot, K2Node_MakeStruct_SlateChildSize) == 0x000008, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMagSlot::K2Node_MakeStruct_SlateChildSize' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMagSlot, CallFunc_SpawnObject_ReturnValue) == 0x000010, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMagSlot::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMagSlot, CallFunc_AddChildToVerticalBox_ReturnValue) == 0x000018, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMagSlot::CallFunc_AddChildToVerticalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_CreateMagSlot, CallFunc_SlotAsVerticalBoxSlot_ReturnValue) == 0x000020, "Member 'W_WeaponWheel_MagazineDisplay_C_CreateMagSlot::CallFunc_SlotAsVerticalBoxSlot_ReturnValue' has a wrong offset!");

// Function W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C.GetMaxSlots
// 0x001C (0x001C - 0x0000)
struct W_WeaponWheel_MagazineDisplay_C_GetMaxSlots final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4463[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4464[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponWheel_MagazineDisplay_C_GetMaxSlots) == 0x000004, "Wrong alignment on W_WeaponWheel_MagazineDisplay_C_GetMaxSlots");
static_assert(sizeof(W_WeaponWheel_MagazineDisplay_C_GetMaxSlots) == 0x00001C, "Wrong size on W_WeaponWheel_MagazineDisplay_C_GetMaxSlots");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_GetMaxSlots, ReturnValue) == 0x000000, "Member 'W_WeaponWheel_MagazineDisplay_C_GetMaxSlots::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_GetMaxSlots, Temp_bool_Variable) == 0x000004, "Member 'W_WeaponWheel_MagazineDisplay_C_GetMaxSlots::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_GetMaxSlots, CallFunc_Percent_IntInt_ReturnValue) == 0x000008, "Member 'W_WeaponWheel_MagazineDisplay_C_GetMaxSlots::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_GetMaxSlots, CallFunc_Divide_IntInt_ReturnValue) == 0x00000C, "Member 'W_WeaponWheel_MagazineDisplay_C_GetMaxSlots::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_GetMaxSlots, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000010, "Member 'W_WeaponWheel_MagazineDisplay_C_GetMaxSlots::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_GetMaxSlots, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'W_WeaponWheel_MagazineDisplay_C_GetMaxSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_GetMaxSlots, K2Node_Select_Default) == 0x000018, "Member 'W_WeaponWheel_MagazineDisplay_C_GetMaxSlots::K2Node_Select_Default' has a wrong offset!");

// Function W_WeaponWheel_MagazineDisplay.W_WeaponWheel_MagazineDisplay_C.PopulateSlotIndexToMagsMap
// 0x0030 (0x0030 - 0x0000)
struct W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap final 
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4465[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4466[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxSlots_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4467[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4468[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0024(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4469[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_1;                           // 0x002C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap) == 0x000004, "Wrong alignment on W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap");
static_assert(sizeof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap) == 0x000030, "Wrong size on W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, Temp_bool_Variable) == 0x000000, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, Temp_bool_Variable_1) == 0x000001, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, Temp_bool_Variable_2) == 0x000002, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, Temp_int_Variable) == 0x000004, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, CallFunc_Percent_IntInt_ReturnValue) == 0x000010, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, CallFunc_GetMaxSlots_ReturnValue) == 0x000014, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::CallFunc_GetMaxSlots_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000018, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, CallFunc_Subtract_IntInt_ReturnValue) == 0x00001C, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000020, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, K2Node_Select_Default) == 0x000024, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, CallFunc_BooleanAND_ReturnValue) == 0x000028, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000029, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap, K2Node_Select_Default_1) == 0x00002C, "Member 'W_WeaponWheel_MagazineDisplay_C_PopulateSlotIndexToMagsMap::K2Node_Select_Default_1' has a wrong offset!");

}

