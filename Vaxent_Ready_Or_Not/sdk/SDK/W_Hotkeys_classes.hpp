#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Hotkeys

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Hotkeys.W_Hotkeys_C
// 0x0008 (0x02D0 - 0x02C8)
class UW_Hotkeys_C final  : public UHotkeysWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)

public:
	void ExecuteUbergraph_W_Hotkeys(int32 EntryPoint, TDelegate<void(class AReadyOrNotCharacter* Character, class ABaseItem* LastItemBeforeQuickThrow, class ABaseItem* QuickThrowGrenade)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void(class ABaseItem* QuickThrowGrenade)> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void(bool bUsingSecondarySight, class ABaseMagazineWeapon* Weapon)> K2Node_CreateDelegate_OutputDelegate_2, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_3, TDelegate<void(class AReadyOrNotCharacter* Character, bool bOn)> K2Node_CreateDelegate_OutputDelegate_4, class AReadyOrNotCharacter* K2Node_CustomEvent_Character_1, class ABaseItem* K2Node_CustomEvent_LastItemBeforeQuickThrow, class ABaseItem* K2Node_CustomEvent_QuickThrowGrenade_1, class ABaseItem* K2Node_CustomEvent_QuickThrowGrenade, bool K2Node_CustomEvent_bUsingSecondarySight, class ABaseMagazineWeapon* K2Node_CustomEvent_Weapon, class AReadyOrNotCharacter* K2Node_CustomEvent_Character, bool K2Node_CustomEvent_bOn, bool CallFunc_EquippedWeaponHasLaserAttachment_ReturnValue, bool CallFunc_EquippedWeaponHasLightAttachment_ReturnValue, class APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, class APlayerCharacter* K2Node_DynamicCast_AsPlayer_Character, bool K2Node_DynamicCast_bSuccess);
	void RefreshHotkeyInput();
	void OnNightVisionGogglesToggled_Event_0(class AReadyOrNotCharacter* Character, bool bOn);
	void OnAttachmentLightToggled_Event_0();
	void OnSecondarySightToggled_Event_0(bool bUsingSecondarySight, class ABaseMagazineWeapon* Weapon);
	void OnQuickThrowEnd_Event_0(class ABaseItem* QuickThrowGrenade);
	void OnQuickThrowStart_Event_0(class AReadyOrNotCharacter* Character, class ABaseItem* LastItemBeforeQuickThrow, class ABaseItem* QuickThrowGrenade);
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Hotkeys_C">();
	}
	static class UW_Hotkeys_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Hotkeys_C>();
	}
};
static_assert(alignof(UW_Hotkeys_C) == 0x000008, "Wrong alignment on UW_Hotkeys_C");
static_assert(sizeof(UW_Hotkeys_C) == 0x0002D0, "Wrong size on UW_Hotkeys_C");
static_assert(offsetof(UW_Hotkeys_C, UberGraphFrame) == 0x0002C8, "Member 'UW_Hotkeys_C::UberGraphFrame' has a wrong offset!");

}

