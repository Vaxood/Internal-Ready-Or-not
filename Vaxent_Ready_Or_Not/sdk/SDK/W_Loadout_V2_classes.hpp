#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Loadout_V2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CommonInput_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Loadout_V2.W_Loadout_V2_C
// 0x02A8 (0x0A20 - 0x0778)
class UW_Loadout_V2_C final  : public ULoadout_V2
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0778(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 BackgroundGradient;                                // 0x0780(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Customization_C*                     CustomizationWidget;                               // 0x0788(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           LoadoutCanvas;                                     // 0x0790(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActivatableWidgetSwitcher*       LoadoutCustomizationSwitcher;                      // 0x0798(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           MainCanvas;                                        // 0x07A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PageWrapper_C*                       PageHeader;                                        // 0x07A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActivatableWidgetStack*          PresetPreviewStack;                                // 0x07B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_LoadoutInformationBox_C*             W_LoadoutInformationBox;                           // 0x07B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UClass*                                 ItemData;                                          // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EItemType                                     EquippingItemType;                                 // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_3A21[0x7];                                     // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPrimaryWeaponEquipped;                           // 0x07D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnSidearmWeaponEquipped;                           // 0x07E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnArmorMaterialEquipped;                           // 0x07F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ACameraActor*                           WorkbenchCamera;                                   // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               DefaultWorkbenchCameraRotation;                    // 0x0808(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FRotator                               CurrentWorkbenchCameraRotation;                    // 0x0814(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FRotator                               TargetWorkbenchCameraRotation;                     // 0x0820(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FRotator                               WorkbenchCameraRotation;                           // 0x082C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bWorkbenchCameraRotating;                          // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bUseGamepad;                                       // 0x0839(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_3A22[0x6];                                     // 0x083A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChangedInput;                                    // 0x0840(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class FName, class UClass*>              PageMap;                                           // 0x0850(0x0050)(Edit, BlueprintVisible)
	TMap<class FName, class UClass*>              PageMap_Gamepad;                                   // 0x08A0(0x0050)(Edit, BlueprintVisible)
	class UCommonActivatableWidget*               CurrentPage;                                       // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class FName                                   CurrentPageID;                                     // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TMap<class FName, class FName>                Page_to_Camera_Tag_Map;                            // 0x0900(0x0050)(Edit, BlueprintVisible)
	TMap<class FName, class FString>              Page_to_Pose_Tag_Map;                              // 0x0950(0x0050)(Edit, BlueprintVisible)
	bool                                          bCustomization;                                    // 0x09A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bOpenedInCustomization;                            // 0x09A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A23[0x6];                                     // 0x09A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FText>                MainNavigationOptions;                             // 0x09A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   MainNavSelection;                                  // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_StandardModal_C*                     PresetModal;                                       // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PresetCharacterLimit;                              // 0x0A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A24[0x4];                                     // 0x0A0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPresetModified;                                  // 0x0A10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnPrimaryWeaponEquipped__DelegateSignature();
	void OnSidearmWeaponEquipped__DelegateSignature();
	void OnArmorMaterialEquipped__DelegateSignature();
	void OnChangedInput__DelegateSignature(bool UsingGamepad);
	void OnPresetModified__DelegateSignature(bool Param_PresetDirty);
	void ExecuteUbergraph_W_Loadout_V2(int32 EntryPoint, bool CallFunc_HolsterPreviewCharacterWeapon_IsHolstering, const struct FGeometry& K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool K2Node_Event_IsDesignTime, class FName K2Node_Event_OptionNameID, class UW_Loadout_C* K2Node_Event_LoadoutWidget, const TMap<EItemCategory, class UClass*>& K2Node_Event_ItemCategory, class UW_LoadoutSlot_C* K2Node_Event_CurrentSlot, const struct FSavedLoadout& K2Node_Event_ActiveLoadout, bool K2Node_Event_IsGamepad, float K2Node_Event_Delay_1, bool K2Node_Event_Collapse, float K2Node_Event_Delay, class UClass* K2Node_CustomEvent_Attaching_Weapon, class UClass* K2Node_CustomEvent_Attachment_Data, int32 Temp_int_Array_Index_Variable, class ABaseItem* CallFunc_GetClassDefaultObject_ReturnValue, class AReadyOrNotGameState* CallFunc_GetReadyOrNotGameState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, class UCommonInputSubsystem* CallFunc_GetLocalPlayerSubsystem_ReturnValue, const struct FSavedLoadout& CallFunc_GetActiveLoadout_ReturnValue, ECommonInputType CallFunc_GetCurrentInputType_ReturnValue, bool CallFunc_IsValid_ReturnValue, ECommonInputType K2Node_CustomEvent_bNewInputType, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, class FName K2Node_CustomEvent_Tag, const class FString& K2Node_CustomEvent_Animation, float K2Node_CustomEvent_BlendTime, bool CallFunc_NotEqual_StrStr_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, const class FString& CallFunc_SelectString_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, class UCommonActivatableWidget* CallFunc_GetActiveWidget_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, TScriptInterface<class IReadyOrNotUI_C> K2Node_DynamicCast_AsReady_or_Not_UI, bool K2Node_DynamicCast_bSuccess, TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate, bool CallFunc_CheckOverviewIsActive_True, bool CallFunc_Not_PreBool_ReturnValue, class FName K2Node_CustomEvent_CurrentPageID, bool CallFunc_BackPage_Handled, class FName K2Node_Event_PageName, bool Temp_bool_Variable, class FName K2Node_Select_Default, class UClass* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, class UCommonActivatableWidget* CallFunc_BP_AddWidget_ReturnValue, class FName K2Node_ComponentBoundEvent_OptionNameID, bool K2Node_SwitchName_CmpSuccess, class FName K2Node_ComponentBoundEvent_CameraTag, const class FString& K2Node_ComponentBoundEvent_CharacterPose, const class FString& K2Node_ComponentBoundEvent_ButtonID, bool CallFunc_EqualEqual_StrStr_ReturnValue, TArray<class UUserWidget*>& CallFunc_GetAllWidgetsWithInterface_FoundWidgets, class UUserWidget* CallFunc_Array_Get_Item, TScriptInterface<class ILoadoutUI_C> K2Node_DynamicCast_AsLoadout_UI, bool K2Node_DynamicCast_bSuccess_1, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
	void BndEvt__W_Loadout_V2_PageHeader_K2Node_ComponentBoundEvent_2_OnFooterButtonClicked__DelegateSignature(const class FString& ButtonID);
	void BndEvt__W_Loadout_V2_CustomizationWidget_K2Node_ComponentBoundEvent_4_OnCategorySelected__DelegateSignature(class FName CameraTag, const class FString& CharacterPose);
	void SwitchToCustomization();
	void SwitchToLoadout();
	void OpenCustomization();
	void BndEvt__W_Loadout_V2_Header_K2Node_ComponentBoundEvent_1_OnNavOptionSelected__DelegateSignature(class FName OptionNameID);
	void ChangePage(class FName PageName);
	void SetCurrentPageID(class FName Param_CurrentPageID);
	void SetPreMissionCamera(class FName Tag, const class FString& Animation, float BlendTime);
	void InputMethodChanged(ECommonInputType bNewInputType);
	void OnAttachmentSlotClicked(class UClass* Attaching_Weapon, class UClass* Attachment_Data);
	void Reveal(float Delay);
	void Hide(float Delay, bool Collapse);
	void SetInputMode(bool IsGamepad);
	void UpdateActiveLoadout(const struct FSavedLoadout& ActiveLoadout);
	void UpdateCurrentSlot(class UW_LoadoutSlot_C* CurrentSlot);
	void UpdateCurrentItemMap(const TMap<EItemCategory, class UClass*>& ItemCategory);
	void SetLoadoutWidget(class UW_Loadout_C* LoadoutWidget);
	void HeaderSubpageNavigation(class FName OptionNameID);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void HolsterPreviewCharacterWeapon(bool* IsHolstering, class AReadyOrNotCharacter* CallFunc_GetDefaultPreviewCharacter_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, const class FString& CallFunc_GetLastTableMontagePlayed_ReturnValue, class UFMODAudioComponent* CallFunc_PlayEventAttached_ReturnValue, float CallFunc_IsTableMontagePlayingWithTimeRemaining_TimeRemaining, bool CallFunc_IsTableMontagePlayingWithTimeRemaining_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue, const class FString& CallFunc_SelectString_ReturnValue, const class FString& CallFunc_SelectString_ReturnValue_1);
	void SetPreMissionCameraBySlot(EItemCategory LoadoutSlot, float BlendTime, class FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const class FString& CallFunc_Map_Find_Value_1, bool CallFunc_Map_Find_ReturnValue_1);
	void OpenItemList(bool VerticalList, EItemCategory LoadoutSlot, TArray<struct LoadoutCategory::FLoadoutCategory>& GearCategoryClasses, class UW_Loadout_ItemList_Vertical_C* ItemList, class FText CallFunc_GetLoadoutCategoryText_Category_Text, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, class FText CallFunc_Format_ReturnValue);
	void EquipItem(class UClass* Param_ItemData, const TArray<EItemCategory>& ItemCategories, EItemClass EquippingItemClass, class UClass* EquippingItem, EItemCategory Temp_byte_Variable, class ABaseItem* CallFunc_GetClassDefaultObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, class UClass* K2Node_ClassDynamicCast_AsBase_Weapon, bool K2Node_ClassDynamicCast_bSuccess, const struct FWeaponData& K2Node_MakeStruct_WeaponData, EItemCategory Temp_byte_Variable_1, EItemCategory Temp_byte_Variable_2, EItemCategory Temp_byte_Variable_3, EItemCategory Temp_byte_Variable_4, class AReadyOrNotGameState* CallFunc_GetReadyOrNotGameState_ReturnValue, class AReadyOrNotGameState* CallFunc_GetReadyOrNotGameState_ReturnValue_1, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Array_Contains_ReturnValue_1, class UW_LoadoutSlot_C* K2Node_DynamicCast_AsW_Loadout_Slot, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Array_Contains_ReturnValue_2, bool CallFunc_Array_Contains_ReturnValue_3, bool CallFunc_Array_Contains_ReturnValue_4);
	void SetPresetModified(bool Param_PresetDirty);
	void EquipArmourMaterial(class UArmourMaterial* ArmourMaterial);
	void UpdateAllPreviewWeaponAttachments(bool IsWorkbench, TSubclassOf<class ABaseItem>& Weapon, bool IsSidearm, const struct FSavedLoadout& ActiveLoadout, const TArray<class UClass*>& Attachments, bool Temp_bool_Variable, const struct FSavedWeaponAttachmentData& K2Node_MakeStruct_SavedWeaponAttachmentData, bool CallFunc_EqualEqual_ClassClass_ReturnValue, const struct FSavedWeaponAttachmentData& K2Node_MakeStruct_SavedWeaponAttachmentData_1, bool CallFunc_EqualEqual_ClassClass_ReturnValue_1, bool Temp_bool_Variable_1, bool CallFunc_BooleanOR_ReturnValue, struct FSavedWeaponAttachmentData& K2Node_Select_Default, bool Temp_bool_Variable_2, int32 Temp_int_Variable, class AReadyOrNotGameState* CallFunc_GetReadyOrNotGameState_ReturnValue, int32 Temp_int_Variable_1, const struct FSavedLoadout& CallFunc_GetActiveLoadout_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, class AReadyOrNotPlayerController* CallFunc_GetReadyOrNotPlayerController_ReturnValue, class UWorld* CallFunc_GetWorldBP_ReturnValue, const struct FSavedWeaponAttachmentData& CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, class UItemData* CallFunc_GetItemData_ReturnValue, const struct FSavedWeaponAttachmentData& K2Node_MakeStruct_SavedWeaponAttachmentData_2, struct FSavedWeaponAttachmentData& K2Node_Select_Default_1, struct FSavedWeaponAttachmentData& K2Node_Select_Default_2, class UClass* K2Node_Select_Default_3);
	void SetCategoryCameraTags(EItemCategory Temp_byte_Variable, class FName Temp_name_Variable, EItemCategory Temp_byte_Variable_1, class FName Temp_name_Variable_1, EItemCategory Temp_byte_Variable_2, class FName Temp_name_Variable_2, EItemCategory Temp_byte_Variable_3, class FName Temp_name_Variable_3, EItemCategory Temp_byte_Variable_4, class FName Temp_name_Variable_4);
	void SetCategoryPoses(EItemCategory Temp_byte_Variable, class FString& Temp_string_Variable, EItemCategory Temp_byte_Variable_1, class FString& Temp_string_Variable_1, EItemCategory Temp_byte_Variable_2, class FString& Temp_string_Variable_2, EItemCategory Temp_byte_Variable_3, class FString& Temp_string_Variable_3);
	void CheckOverviewIsActive(bool* TURR, class UOverview_V2* K2Node_DynamicCast_AsOverview_V2, bool K2Node_DynamicCast_bSuccess);
	bool BP_OnHandleBackAction(bool CallFunc_BackPage_Handled);
	void WeaponHovered(class ABaseWeapon* BaseWeaponItem, bool Secondary, class FText Temp_text_Variable, bool CallFunc_IsValid_ReturnValue, class FText Temp_text_Variable_1, bool Temp_bool_Variable, class FText K2Node_Select_Default, class UClass* CallFunc_GetClassFromObject_ReturnValue, class UClass* K2Node_ClassDynamicCast_AsBase_Weapon, bool K2Node_ClassDynamicCast_bSuccess);
	void ItemHovered(class ABaseItem* BaseItem, class FText CategoryText, bool CallFunc_IsValid_ReturnValue);
	void AttachmentHovered(class UWeaponAttachment* Attachment, EWeaponAttachmentType AttachmentType, class FText CallFunc_GetAttachmentSlotText_SlotText, bool CallFunc_IsValid_ReturnValue);
	void ArmorMaterialHovered(class UArmourMaterial* ArmorMaterial, bool CallFunc_IsValid_ReturnValue);
	void SlotUnhovered();
	void SetCameraAndPoseByPageID(class FName PageNameID, float BlendTime, class FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const class FString& CallFunc_Map_Find_Value_1, bool CallFunc_Map_Find_ReturnValue_1, class AReadyOrNotGameState* CallFunc_GetReadyOrNotGameState_ReturnValue);
	void SetCameraAndPose(class FName CameraTag, const class FString& PoseTag, float BlendTime, class AReadyOrNotGameState* CallFunc_GetReadyOrNotGameState_ReturnValue, bool CallFunc_StringIsEmpty_ReturnValue, class AReadyOrNotGameState* CallFunc_GetReadyOrNotGameState_ReturnValue_1);
	void ShowWeaponClassNav(EItemClass SelectedClass, bool bIsSecondary, bool bShowLessLethal, EItemClass NewCategory, const TSet<EItemClass>& SecondaryClasses, const TMap<class FName, class FText>& TempOptionMap, const TSet<EItemClass>& PrimaryClasses, bool Temp_bool_Variable, const class FString& CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, class FText CallFunc_GetItemClassText_Category_Text, class FName CallFunc_Conv_StringToName_ReturnValue, int32 Temp_int_Variable, int32 Temp_int_Variable_1, uint8 CallFunc_Conv_IntToByte_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, uint8 CallFunc_GetValidValue_ReturnValue, uint8 CallFunc_Conv_IntToByte_ReturnValue_1, uint8 CallFunc_GetEnumeratorValueFromIndex_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, const TSet<EItemClass>& K2Node_MakeVariable_MakeVariableOutput, const TSet<EItemClass>& K2Node_MakeVariable_MakeVariableOutput_1, int32 CallFunc_MakeLiteralInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const class FString& CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1, class FName CallFunc_Conv_StringToName_ReturnValue_1, const TSet<EItemClass>& K2Node_Select_Default, bool CallFunc_Set_Contains_ReturnValue);
	void ShowMainNav();
	void OpenPresetSaveModal(const class FString& CurrentPreset, bool bDelete, class FText Temp_text_Variable, class FText Temp_text_Variable_1, bool Temp_bool_Variable, bool Temp_bool_Variable_1, class FText Temp_text_Variable_2, class FText Temp_text_Variable_3, const struct FAnchors& K2Node_MakeStruct_Anchors, bool Temp_bool_Variable_2, class FText Temp_text_Variable_4, class UW_StandardModal_C* CallFunc_Create_ReturnValue, class AReadyOrNotGameState* CallFunc_GetReadyOrNotGameState_ReturnValue, TArray<class FString>& CallFunc_GetAllPresetNames_ReturnValue, class FText K2Node_Select_Default, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, class FText CallFunc_Conv_StringToText_ReturnValue, class FText K2Node_Select_Default_1, class FText CallFunc_Conv_StringToText_ReturnValue_1, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, TDelegate<void(class UStandardModal* CallingModal)> K2Node_CreateDelegate_OutputDelegate, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, TDelegate<void(class UW_StandardModal_C* CallingModal, class FText TextEntry)> K2Node_CreateDelegate_OutputDelegate_1, class FText CallFunc_Format_ReturnValue, struct FVector2D& Temp_struct_Variable, TDelegate<void(class UW_StandardModal_C* CallingModal, class FText TextEntry)> K2Node_CreateDelegate_OutputDelegate_2, TDelegate<void(class UW_StandardModal_C* CallingModal, class FText TextEntry)> K2Node_Select_Default_2, class UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);
	void SaveLoadoutPreset(class UW_StandardModal_C* TriggeringModal, class FText TextEntry, const struct FSavedLoadout& CurrentLoadout, const class FString& PresetName, bool Overwriting, bool ConfirmOverwrite, const class FString& CallFunc_Conv_TextToString_ReturnValue, class AReadyOrNotGameState* CallFunc_GetReadyOrNotGameState_ReturnValue, class AReadyOrNotGameState* CallFunc_GetReadyOrNotGameState_ReturnValue_1, bool CallFunc_NotEqual_StrStr_ReturnValue, TArray<class FString>& CallFunc_GetAllPresetNames_ReturnValue, class FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, class FText CallFunc_Format_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);
	void DeleteLoadoutPreset(class UW_StandardModal_C* TriggeringModal, class FText TextEntry, const struct FSavedLoadout& CurrentLoadout, const class FString& PresetName, bool Overwriting, bool ConfirmOverwrite, const class FString& CallFunc_Conv_TextToString_ReturnValue, class AReadyOrNotGameState* CallFunc_GetReadyOrNotGameState_ReturnValue, bool CallFunc_StringIsEmpty_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue);
	void CancelSavePreset(class UStandardModal* CallingModal);
	void PresetModified(bool Param_PresetDirty);
	void PreviewPreset(const struct FSavedLoadout& PreviewLoadout, class UW_Loadout_Preset_Preview_C* CallFunc_BP_AddWidget_ReturnValue, class UCommonActivatableWidget* CallFunc_GetActiveWidget_ReturnValue, class UW_Loadout_Preset_Preview_C* K2Node_DynamicCast_AsW_Loadout_Preset_Preview, bool K2Node_DynamicCast_bSuccess);
	void ClosePresetPreview(class UCommonActivatableWidget* CallFunc_GetActiveWidget_ReturnValue, class UW_Loadout_Preset_Preview_C* K2Node_DynamicCast_AsW_Loadout_Preset_Preview, bool K2Node_DynamicCast_bSuccess, TScriptInterface<class IReadyOrNotUI_C> CallFunc_Hide_self_CastInput);
	void AmmoHovered(class FName AmmoName, class FText CategoryText);
	void BackPage(bool* Handled, class UCommonActivatableWidget* CallFunc_GetActiveWidget_ReturnValue, class UW_Overview_V2_C* K2Node_DynamicCast_AsW_Overview_V2, bool K2Node_DynamicCast_bSuccess, TScriptInterface<class IReadyOrNotUI_C> CallFunc_BackPage_self_CastInput, bool CallFunc_BackPage_Handled, TScriptInterface<class IReadyOrNotUI_C> K2Node_DynamicCast_AsReady_or_Not_UI, bool K2Node_DynamicCast_bSuccess_1, bool CallFunc_BackPage_Handled_1, class UCommonActivatableWidget* CallFunc_GetActiveWidget_ReturnValue_1);

	class UWidget* BP_GetDesiredFocusTarget(TScriptInterface<class IReadyOrNotUI_C> CallFunc_GetFocusTarget_self_CastInput, class UWidget* CallFunc_GetFocusTarget_Focus) const;
	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Loadout_V2_C">();
	}
	static class UW_Loadout_V2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Loadout_V2_C>();
	}
};
static_assert(alignof(UW_Loadout_V2_C) == 0x000008, "Wrong alignment on UW_Loadout_V2_C");
static_assert(sizeof(UW_Loadout_V2_C) == 0x000A20, "Wrong size on UW_Loadout_V2_C");
static_assert(offsetof(UW_Loadout_V2_C, UberGraphFrame) == 0x000778, "Member 'UW_Loadout_V2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, BackgroundGradient) == 0x000780, "Member 'UW_Loadout_V2_C::BackgroundGradient' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, CustomizationWidget) == 0x000788, "Member 'UW_Loadout_V2_C::CustomizationWidget' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, LoadoutCanvas) == 0x000790, "Member 'UW_Loadout_V2_C::LoadoutCanvas' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, LoadoutCustomizationSwitcher) == 0x000798, "Member 'UW_Loadout_V2_C::LoadoutCustomizationSwitcher' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, MainCanvas) == 0x0007A0, "Member 'UW_Loadout_V2_C::MainCanvas' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, PageHeader) == 0x0007A8, "Member 'UW_Loadout_V2_C::PageHeader' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, PresetPreviewStack) == 0x0007B0, "Member 'UW_Loadout_V2_C::PresetPreviewStack' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, W_LoadoutInformationBox) == 0x0007B8, "Member 'UW_Loadout_V2_C::W_LoadoutInformationBox' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, ItemData) == 0x0007C0, "Member 'UW_Loadout_V2_C::ItemData' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, EquippingItemType) == 0x0007C8, "Member 'UW_Loadout_V2_C::EquippingItemType' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, OnPrimaryWeaponEquipped) == 0x0007D0, "Member 'UW_Loadout_V2_C::OnPrimaryWeaponEquipped' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, OnSidearmWeaponEquipped) == 0x0007E0, "Member 'UW_Loadout_V2_C::OnSidearmWeaponEquipped' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, OnArmorMaterialEquipped) == 0x0007F0, "Member 'UW_Loadout_V2_C::OnArmorMaterialEquipped' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, WorkbenchCamera) == 0x000800, "Member 'UW_Loadout_V2_C::WorkbenchCamera' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, DefaultWorkbenchCameraRotation) == 0x000808, "Member 'UW_Loadout_V2_C::DefaultWorkbenchCameraRotation' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, CurrentWorkbenchCameraRotation) == 0x000814, "Member 'UW_Loadout_V2_C::CurrentWorkbenchCameraRotation' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, TargetWorkbenchCameraRotation) == 0x000820, "Member 'UW_Loadout_V2_C::TargetWorkbenchCameraRotation' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, WorkbenchCameraRotation) == 0x00082C, "Member 'UW_Loadout_V2_C::WorkbenchCameraRotation' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, bWorkbenchCameraRotating) == 0x000838, "Member 'UW_Loadout_V2_C::bWorkbenchCameraRotating' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, bUseGamepad) == 0x000839, "Member 'UW_Loadout_V2_C::bUseGamepad' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, OnChangedInput) == 0x000840, "Member 'UW_Loadout_V2_C::OnChangedInput' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, PageMap) == 0x000850, "Member 'UW_Loadout_V2_C::PageMap' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, PageMap_Gamepad) == 0x0008A0, "Member 'UW_Loadout_V2_C::PageMap_Gamepad' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, CurrentPage) == 0x0008F0, "Member 'UW_Loadout_V2_C::CurrentPage' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, CurrentPageID) == 0x0008F8, "Member 'UW_Loadout_V2_C::CurrentPageID' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, Page_to_Camera_Tag_Map) == 0x000900, "Member 'UW_Loadout_V2_C::Page_to_Camera_Tag_Map' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, Page_to_Pose_Tag_Map) == 0x000950, "Member 'UW_Loadout_V2_C::Page_to_Pose_Tag_Map' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, bCustomization) == 0x0009A0, "Member 'UW_Loadout_V2_C::bCustomization' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, bOpenedInCustomization) == 0x0009A1, "Member 'UW_Loadout_V2_C::bOpenedInCustomization' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, MainNavigationOptions) == 0x0009A8, "Member 'UW_Loadout_V2_C::MainNavigationOptions' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, MainNavSelection) == 0x0009F8, "Member 'UW_Loadout_V2_C::MainNavSelection' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, PresetModal) == 0x000A00, "Member 'UW_Loadout_V2_C::PresetModal' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, PresetCharacterLimit) == 0x000A08, "Member 'UW_Loadout_V2_C::PresetCharacterLimit' has a wrong offset!");
static_assert(offsetof(UW_Loadout_V2_C, OnPresetModified) == 0x000A10, "Member 'UW_Loadout_V2_C::OnPresetModified' has a wrong offset!");

}

