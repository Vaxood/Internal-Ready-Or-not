#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomAnimNode

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimationCore_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum CustomAnimNode.ESpeedWarpingAxisMode
// NumValues: 0x0007
enum class ESpeedWarpingAxisMode : uint8
{
	IKFootRootLocalX                         = 0,
	IKFootRootLocalY                         = 1,
	IKFootRootLocalZ                         = 2,
	WorldSpaceVectorInput                    = 3,
	ComponentSpaceVectorInput                = 4,
	ActorSpaceVectorInput                    = 5,
	ESpeedWarpingAxisMode_MAX                = 6,
};

// ScriptStruct CustomAnimNode.AnimNode_PivotBone
// 0x0038 (0x0100 - 0x00C8)
struct FAnimNode_PivotBone final  : public FAnimNode_SkeletalControlBase
{
public:
	struct FVector                                Translation;                                       // 0x00C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x00D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ReferenceBone;                                     // 0x00E0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         DrivenBone;                                        // 0x00F0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_PivotBone) == 0x000008, "Wrong alignment on FAnimNode_PivotBone");
static_assert(sizeof(FAnimNode_PivotBone) == 0x000100, "Wrong size on FAnimNode_PivotBone");
static_assert(offsetof(FAnimNode_PivotBone, Translation) == 0x0000C8, "Member 'FAnimNode_PivotBone::Translation' has a wrong offset!");
static_assert(offsetof(FAnimNode_PivotBone, Rotation) == 0x0000D4, "Member 'FAnimNode_PivotBone::Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_PivotBone, ReferenceBone) == 0x0000E0, "Member 'FAnimNode_PivotBone::ReferenceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_PivotBone, DrivenBone) == 0x0000F0, "Member 'FAnimNode_PivotBone::DrivenBone' has a wrong offset!");

// ScriptStruct CustomAnimNode.AnimNode_DistanceMatching
// 0x0058 (0x0090 - 0x0038)
struct FAnimNode_DistanceMatching final  : public FAnimNode_AssetPlayerBase
{
public:
	uint8                                         Pad_2D4A[0x18];                                    // 0x0038(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      PrevSequence;                                      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D4B[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Sequence;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DistanceCurveName;                                 // 0x006C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableDistanceLimit : 1;                          // 0x0074(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D4C[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceLimit;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDistanceMatchFromPoint;                           // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D4D[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D4E[0x8];                                     // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DistanceMatching) == 0x000008, "Wrong alignment on FAnimNode_DistanceMatching");
static_assert(sizeof(FAnimNode_DistanceMatching) == 0x000090, "Wrong size on FAnimNode_DistanceMatching");
static_assert(offsetof(FAnimNode_DistanceMatching, PrevSequence) == 0x000050, "Member 'FAnimNode_DistanceMatching::PrevSequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_DistanceMatching, Sequence) == 0x000060, "Member 'FAnimNode_DistanceMatching::Sequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_DistanceMatching, Distance) == 0x000068, "Member 'FAnimNode_DistanceMatching::Distance' has a wrong offset!");
static_assert(offsetof(FAnimNode_DistanceMatching, DistanceCurveName) == 0x00006C, "Member 'FAnimNode_DistanceMatching::DistanceCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_DistanceMatching, DistanceLimit) == 0x000078, "Member 'FAnimNode_DistanceMatching::DistanceLimit' has a wrong offset!");
static_assert(offsetof(FAnimNode_DistanceMatching, PlayRate) == 0x00007C, "Member 'FAnimNode_DistanceMatching::PlayRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_DistanceMatching, bDistanceMatchFromPoint) == 0x000080, "Member 'FAnimNode_DistanceMatching::bDistanceMatchFromPoint' has a wrong offset!");
static_assert(offsetof(FAnimNode_DistanceMatching, StartTime) == 0x000084, "Member 'FAnimNode_DistanceMatching::StartTime' has a wrong offset!");

// ScriptStruct CustomAnimNode.AnimNode_RSequencePlayer
// 0x0058 (0x0090 - 0x0038)
struct FAnimNode_RSequencePlayer final  : public FAnimNode_AssetPlayerBase
{
public:
	class UAnimSequenceBase*                      Sequence;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRateBasis;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   PlayRateScaleBiasClamp;                            // 0x0048(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopAnimation;                                    // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendAnimation;                                   // 0x007D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D4F[0x2];                                     // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D50[0xC];                                     // 0x0084(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RSequencePlayer) == 0x000008, "Wrong alignment on FAnimNode_RSequencePlayer");
static_assert(sizeof(FAnimNode_RSequencePlayer) == 0x000090, "Wrong size on FAnimNode_RSequencePlayer");
static_assert(offsetof(FAnimNode_RSequencePlayer, Sequence) == 0x000038, "Member 'FAnimNode_RSequencePlayer::Sequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_RSequencePlayer, PlayRateBasis) == 0x000040, "Member 'FAnimNode_RSequencePlayer::PlayRateBasis' has a wrong offset!");
static_assert(offsetof(FAnimNode_RSequencePlayer, PlayRate) == 0x000044, "Member 'FAnimNode_RSequencePlayer::PlayRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_RSequencePlayer, PlayRateScaleBiasClamp) == 0x000048, "Member 'FAnimNode_RSequencePlayer::PlayRateScaleBiasClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_RSequencePlayer, StartPosition) == 0x000078, "Member 'FAnimNode_RSequencePlayer::StartPosition' has a wrong offset!");
static_assert(offsetof(FAnimNode_RSequencePlayer, bLoopAnimation) == 0x00007C, "Member 'FAnimNode_RSequencePlayer::bLoopAnimation' has a wrong offset!");
static_assert(offsetof(FAnimNode_RSequencePlayer, bBlendAnimation) == 0x00007D, "Member 'FAnimNode_RSequencePlayer::bBlendAnimation' has a wrong offset!");
static_assert(offsetof(FAnimNode_RSequencePlayer, BlendTime) == 0x000080, "Member 'FAnimNode_RSequencePlayer::BlendTime' has a wrong offset!");

// ScriptStruct CustomAnimNode.AnimNode_LazySpringBone
// 0x00F0 (0x01B8 - 0x00C8)
struct FAnimNode_LazySpringBone final  : public FAnimNode_SkeletalControlBase
{
public:
	struct FVector                                DrivingForce;                                      // 0x00C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrivingForceStrength;                              // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D51[0x18];                                    // 0x00D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetDistance;                                    // 0x00F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravity;                                           // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxis                                  LookAt_Axis;                                       // 0x010C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          FlipYawWithRoll;                                   // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D52[0x27];                                    // 0x011D(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         ReferenceBone;                                     // 0x0144(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         DrivenBone;                                        // 0x0154(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLimitDisplacement;                                // 0x0164(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D53[0x3];                                     // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDisplacement;                                   // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringStiffness;                                   // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDamping;                                     // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorResetThresh;                                  // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoZSpring;                                        // 0x0178(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTranslateX;                                       // 0x0179(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTranslateY;                                       // 0x017A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTranslateZ;                                       // 0x017B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateX;                                          // 0x017C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateY;                                          // 0x017D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateZ;                                          // 0x017E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D54[0x39];                                    // 0x017F(0x0039)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_LazySpringBone) == 0x000008, "Wrong alignment on FAnimNode_LazySpringBone");
static_assert(sizeof(FAnimNode_LazySpringBone) == 0x0001B8, "Wrong size on FAnimNode_LazySpringBone");
static_assert(offsetof(FAnimNode_LazySpringBone, DrivingForce) == 0x0000C8, "Member 'FAnimNode_LazySpringBone::DrivingForce' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, DrivingForceStrength) == 0x0000D4, "Member 'FAnimNode_LazySpringBone::DrivingForceStrength' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, TargetDistance) == 0x0000F0, "Member 'FAnimNode_LazySpringBone::TargetDistance' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, Stiffness) == 0x0000FC, "Member 'FAnimNode_LazySpringBone::Stiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, Mass) == 0x000100, "Member 'FAnimNode_LazySpringBone::Mass' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, Damping) == 0x000104, "Member 'FAnimNode_LazySpringBone::Damping' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, Gravity) == 0x000108, "Member 'FAnimNode_LazySpringBone::Gravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, LookAt_Axis) == 0x00010C, "Member 'FAnimNode_LazySpringBone::LookAt_Axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, FlipYawWithRoll) == 0x00011C, "Member 'FAnimNode_LazySpringBone::FlipYawWithRoll' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, ReferenceBone) == 0x000144, "Member 'FAnimNode_LazySpringBone::ReferenceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, DrivenBone) == 0x000154, "Member 'FAnimNode_LazySpringBone::DrivenBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, bLimitDisplacement) == 0x000164, "Member 'FAnimNode_LazySpringBone::bLimitDisplacement' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, MaxDisplacement) == 0x000168, "Member 'FAnimNode_LazySpringBone::MaxDisplacement' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, SpringStiffness) == 0x00016C, "Member 'FAnimNode_LazySpringBone::SpringStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, SpringDamping) == 0x000170, "Member 'FAnimNode_LazySpringBone::SpringDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, ErrorResetThresh) == 0x000174, "Member 'FAnimNode_LazySpringBone::ErrorResetThresh' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, bNoZSpring) == 0x000178, "Member 'FAnimNode_LazySpringBone::bNoZSpring' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, bTranslateX) == 0x000179, "Member 'FAnimNode_LazySpringBone::bTranslateX' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, bTranslateY) == 0x00017A, "Member 'FAnimNode_LazySpringBone::bTranslateY' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, bTranslateZ) == 0x00017B, "Member 'FAnimNode_LazySpringBone::bTranslateZ' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, bRotateX) == 0x00017C, "Member 'FAnimNode_LazySpringBone::bRotateX' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, bRotateY) == 0x00017D, "Member 'FAnimNode_LazySpringBone::bRotateY' has a wrong offset!");
static_assert(offsetof(FAnimNode_LazySpringBone, bRotateZ) == 0x00017E, "Member 'FAnimNode_LazySpringBone::bRotateZ' has a wrong offset!");

// ScriptStruct CustomAnimNode.OrientationWarpingSpineBoneSettings
// 0x0010 (0x0010 - 0x0000)
struct FOrientationWarpingSpineBoneSettings final 
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrientationWarpingSpineBoneSettings) == 0x000004, "Wrong alignment on FOrientationWarpingSpineBoneSettings");
static_assert(sizeof(FOrientationWarpingSpineBoneSettings) == 0x000010, "Wrong size on FOrientationWarpingSpineBoneSettings");
static_assert(offsetof(FOrientationWarpingSpineBoneSettings, Bone) == 0x000000, "Member 'FOrientationWarpingSpineBoneSettings::Bone' has a wrong offset!");

// ScriptStruct CustomAnimNode.OrientationWarpingSettings
// 0x0038 (0x0038 - 0x0000)
struct FOrientationWarpingSettings final 
{
public:
	EAxis                                         YawRotationAxis;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D55[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BodyOrientationAlpha;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOrientationWarpingSpineBoneSettings> SpineBones;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         IKFootRootBone;                                    // 0x0018(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 IKFootBones;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrientationWarpingSettings) == 0x000008, "Wrong alignment on FOrientationWarpingSettings");
static_assert(sizeof(FOrientationWarpingSettings) == 0x000038, "Wrong size on FOrientationWarpingSettings");
static_assert(offsetof(FOrientationWarpingSettings, YawRotationAxis) == 0x000000, "Member 'FOrientationWarpingSettings::YawRotationAxis' has a wrong offset!");
static_assert(offsetof(FOrientationWarpingSettings, BodyOrientationAlpha) == 0x000004, "Member 'FOrientationWarpingSettings::BodyOrientationAlpha' has a wrong offset!");
static_assert(offsetof(FOrientationWarpingSettings, SpineBones) == 0x000008, "Member 'FOrientationWarpingSettings::SpineBones' has a wrong offset!");
static_assert(offsetof(FOrientationWarpingSettings, IKFootRootBone) == 0x000018, "Member 'FOrientationWarpingSettings::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FOrientationWarpingSettings, IKFootBones) == 0x000028, "Member 'FOrientationWarpingSettings::IKFootBones' has a wrong offset!");

// ScriptStruct CustomAnimNode.OrientationWarpingSpineBoneData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FOrientationWarpingSpineBoneData final 
{
public:
	uint8                                         Pad_2D56[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrientationWarpingSpineBoneData) == 0x000004, "Wrong alignment on FOrientationWarpingSpineBoneData");
static_assert(sizeof(FOrientationWarpingSpineBoneData) == 0x000008, "Wrong size on FOrientationWarpingSpineBoneData");

// ScriptStruct CustomAnimNode.AnimNode_OrientationWarping
// 0x0098 (0x0160 - 0x00C8)
struct FAnimNode_OrientationWarping final  : public FAnimNode_SkeletalControlBase
{
public:
	float                                         LocomotionAngle;                                   // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutomaticallyCalculateAngleBasedOnCurve;          // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D57[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DirectionCurveName;                                // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DirectionAlphaCurveName;                           // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoDirectionInterpTime;                           // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootYawOffset;                                     // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOrientationWarpingSettings            Settings;                                          // 0x00E8(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FOrientationWarpingSpineBoneData> SpineBoneDataArray;                                // 0x0120(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D58[0x14];                                    // 0x0130(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedDeltaTime;                                   // 0x0144(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D59[0x18];                                    // 0x0148(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_OrientationWarping) == 0x000008, "Wrong alignment on FAnimNode_OrientationWarping");
static_assert(sizeof(FAnimNode_OrientationWarping) == 0x000160, "Wrong size on FAnimNode_OrientationWarping");
static_assert(offsetof(FAnimNode_OrientationWarping, LocomotionAngle) == 0x0000C8, "Member 'FAnimNode_OrientationWarping::LocomotionAngle' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, bAutomaticallyCalculateAngleBasedOnCurve) == 0x0000CC, "Member 'FAnimNode_OrientationWarping::bAutomaticallyCalculateAngleBasedOnCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, DirectionCurveName) == 0x0000D0, "Member 'FAnimNode_OrientationWarping::DirectionCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, DirectionAlphaCurveName) == 0x0000D8, "Member 'FAnimNode_OrientationWarping::DirectionAlphaCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, AutoDirectionInterpTime) == 0x0000E0, "Member 'FAnimNode_OrientationWarping::AutoDirectionInterpTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, RootYawOffset) == 0x0000E4, "Member 'FAnimNode_OrientationWarping::RootYawOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, Settings) == 0x0000E8, "Member 'FAnimNode_OrientationWarping::Settings' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, SpineBoneDataArray) == 0x000120, "Member 'FAnimNode_OrientationWarping::SpineBoneDataArray' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, CachedDeltaTime) == 0x000144, "Member 'FAnimNode_OrientationWarping::CachedDeltaTime' has a wrong offset!");

// ScriptStruct CustomAnimNode.SlopeWarpingFootDefinition
// 0x0038 (0x0038 - 0x0000)
struct FSlopeWarpingFootDefinition final 
{
public:
	struct FBoneReference                         IKFootBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKFootBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToeSocketName;                                     // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeelSocketName;                                    // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootSize;                                          // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlopeWarpingFootDefinition) == 0x000004, "Wrong alignment on FSlopeWarpingFootDefinition");
static_assert(sizeof(FSlopeWarpingFootDefinition) == 0x000038, "Wrong size on FSlopeWarpingFootDefinition");
static_assert(offsetof(FSlopeWarpingFootDefinition, IKFootBone) == 0x000000, "Member 'FSlopeWarpingFootDefinition::IKFootBone' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, FKFootBone) == 0x000010, "Member 'FSlopeWarpingFootDefinition::FKFootBone' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, NumBonesInLimb) == 0x000020, "Member 'FSlopeWarpingFootDefinition::NumBonesInLimb' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, ToeSocketName) == 0x000024, "Member 'FSlopeWarpingFootDefinition::ToeSocketName' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, HeelSocketName) == 0x00002C, "Member 'FSlopeWarpingFootDefinition::HeelSocketName' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, FootSize) == 0x000034, "Member 'FSlopeWarpingFootDefinition::FootSize' has a wrong offset!");

// ScriptStruct CustomAnimNode.SlopeWarpingFootData
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x10) FSlopeWarpingFootData final 
{
public:
	uint8                                         Pad_2D5A[0xA0];                                    // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlopeWarpingFootData) == 0x000010, "Wrong alignment on FSlopeWarpingFootData");
static_assert(sizeof(FSlopeWarpingFootData) == 0x0000A0, "Wrong size on FSlopeWarpingFootData");

// ScriptStruct CustomAnimNode.AnimNode_SlopeWarping
// 0x0160 (0x0228 - 0x00C8)
struct FAnimNode_SlopeWarping final  : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_2D5B[0x18];                                    // 0x00C8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         IKFootRootBone;                                    // 0x00E0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisBone;                                        // 0x00F0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSlopeWarpingFootDefinition>    FeetDefinitions;                                   // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlopeWarpingFootData>          FeetData;                                          // 0x0110(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           PelvisOffsetInterpolator;                          // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D5C[0x34];                                    // 0x0128(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GravityDir;                                        // 0x015C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CustomFloorOffset;                                 // 0x0168(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedDeltaTime;                                   // 0x0174(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetFloorNormalWorldSpace;                       // 0x0178(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           FloorNormalInterpolator;                           // 0x0184(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D5D[0x34];                                    // 0x018C(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetFloorOffsetLocalSpace;                       // 0x01C0(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           FloorOffsetInterpolator;                           // 0x01CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D5E[0x34];                                    // 0x01D4(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxStepHeight;                                     // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bKeepMeshInsideOfCapsule : 1;                      // 0x020C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPullPelvisDown : 1;                               // 0x020C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseCustomFloorOffset : 1;                         // 0x020C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseCapsuleInfoInsteadOfFootTraces : 1;            // 0x020C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWasOnGround : 1;                                  // 0x020C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowDebug : 1;                                    // 0x020C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFloorSmoothingInitialized : 1;                    // 0x020C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D5F[0x3];                                     // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActorLocation;                                     // 0x0210(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GravityDirCompSpace;                               // 0x021C(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAnimNode_SlopeWarping) == 0x000008, "Wrong alignment on FAnimNode_SlopeWarping");
static_assert(sizeof(FAnimNode_SlopeWarping) == 0x000228, "Wrong size on FAnimNode_SlopeWarping");
static_assert(offsetof(FAnimNode_SlopeWarping, IKFootRootBone) == 0x0000E0, "Member 'FAnimNode_SlopeWarping::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, PelvisBone) == 0x0000F0, "Member 'FAnimNode_SlopeWarping::PelvisBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, FeetDefinitions) == 0x000100, "Member 'FAnimNode_SlopeWarping::FeetDefinitions' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, FeetData) == 0x000110, "Member 'FAnimNode_SlopeWarping::FeetData' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, PelvisOffsetInterpolator) == 0x000120, "Member 'FAnimNode_SlopeWarping::PelvisOffsetInterpolator' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, GravityDir) == 0x00015C, "Member 'FAnimNode_SlopeWarping::GravityDir' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, CustomFloorOffset) == 0x000168, "Member 'FAnimNode_SlopeWarping::CustomFloorOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, CachedDeltaTime) == 0x000174, "Member 'FAnimNode_SlopeWarping::CachedDeltaTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, TargetFloorNormalWorldSpace) == 0x000178, "Member 'FAnimNode_SlopeWarping::TargetFloorNormalWorldSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, FloorNormalInterpolator) == 0x000184, "Member 'FAnimNode_SlopeWarping::FloorNormalInterpolator' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, TargetFloorOffsetLocalSpace) == 0x0001C0, "Member 'FAnimNode_SlopeWarping::TargetFloorOffsetLocalSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, FloorOffsetInterpolator) == 0x0001CC, "Member 'FAnimNode_SlopeWarping::FloorOffsetInterpolator' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, MaxStepHeight) == 0x000208, "Member 'FAnimNode_SlopeWarping::MaxStepHeight' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, ActorLocation) == 0x000210, "Member 'FAnimNode_SlopeWarping::ActorLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarping, GravityDirCompSpace) == 0x00021C, "Member 'FAnimNode_SlopeWarping::GravityDirCompSpace' has a wrong offset!");

// ScriptStruct CustomAnimNode.SpeedWarpingFootDefinition
// 0x0024 (0x0024 - 0x0000)
struct FSpeedWarpingFootDefinition final 
{
public:
	struct FBoneReference                         IKFootBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKFootBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpeedWarpingFootDefinition) == 0x000004, "Wrong alignment on FSpeedWarpingFootDefinition");
static_assert(sizeof(FSpeedWarpingFootDefinition) == 0x000024, "Wrong size on FSpeedWarpingFootDefinition");
static_assert(offsetof(FSpeedWarpingFootDefinition, IKFootBone) == 0x000000, "Member 'FSpeedWarpingFootDefinition::IKFootBone' has a wrong offset!");
static_assert(offsetof(FSpeedWarpingFootDefinition, FKFootBone) == 0x000010, "Member 'FSpeedWarpingFootDefinition::FKFootBone' has a wrong offset!");
static_assert(offsetof(FSpeedWarpingFootDefinition, NumBonesInLimb) == 0x000020, "Member 'FSpeedWarpingFootDefinition::NumBonesInLimb' has a wrong offset!");

// ScriptStruct CustomAnimNode.SpeedWarpingFootData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FSpeedWarpingFootData final 
{
public:
	uint8                                         Pad_2D60[0x40];                                    // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpeedWarpingFootData) == 0x000010, "Wrong alignment on FSpeedWarpingFootData");
static_assert(sizeof(FSpeedWarpingFootData) == 0x000040, "Wrong size on FSpeedWarpingFootData");

// ScriptStruct CustomAnimNode.AnimNode_SpeedWarping
// 0x00F0 (0x01B8 - 0x00C8)
struct FAnimNode_SpeedWarping final  : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_2D61[0x8];                                     // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         IKFootRootBone;                                    // 0x00D0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSpeedWarpingFootDefinition>    FeetDefinitions;                                   // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSpeedWarpingFootData>          FeetData;                                          // 0x00F0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisBone;                                        // 0x0100(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ESpeedWarpingAxisMode                         SpeedWarpingAxisMode;                              // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpeedWarpingAxisMode                         FloorNormalAxisMode;                               // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpeedWarpingAxisMode                         GravityDirAxisMode;                                // 0x0112(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D62[0x1];                                     // 0x0113(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedScaling;                                      // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   SpeedScalingScaleBiasClamp;                        // 0x0118(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ManualSpeedWarpingDir;                             // 0x0148(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ManualFloorNormalInput;                            // 0x0154(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ManualGravityDirInput;                             // 0x0160(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisPostAdjustmentAlpha;                         // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PelvisAdjustmentMaxIter;                           // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           PelvisAdjustmentInterp;                            // 0x0174(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D63[0x34];                                    // 0x017C(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAdjustThighBonesRotation : 1;                     // 0x01B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClampIKUsingFKLeg : 1;                            // 0x01B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOrientSpeedWarpingAxisBasedOnFloorNormal : 1;     // 0x01B0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D64[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedDeltaTime;                                   // 0x01B4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_SpeedWarping) == 0x000008, "Wrong alignment on FAnimNode_SpeedWarping");
static_assert(sizeof(FAnimNode_SpeedWarping) == 0x0001B8, "Wrong size on FAnimNode_SpeedWarping");
static_assert(offsetof(FAnimNode_SpeedWarping, IKFootRootBone) == 0x0000D0, "Member 'FAnimNode_SpeedWarping::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, FeetDefinitions) == 0x0000E0, "Member 'FAnimNode_SpeedWarping::FeetDefinitions' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, FeetData) == 0x0000F0, "Member 'FAnimNode_SpeedWarping::FeetData' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, PelvisBone) == 0x000100, "Member 'FAnimNode_SpeedWarping::PelvisBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, SpeedWarpingAxisMode) == 0x000110, "Member 'FAnimNode_SpeedWarping::SpeedWarpingAxisMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, FloorNormalAxisMode) == 0x000111, "Member 'FAnimNode_SpeedWarping::FloorNormalAxisMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, GravityDirAxisMode) == 0x000112, "Member 'FAnimNode_SpeedWarping::GravityDirAxisMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, SpeedScaling) == 0x000114, "Member 'FAnimNode_SpeedWarping::SpeedScaling' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, SpeedScalingScaleBiasClamp) == 0x000118, "Member 'FAnimNode_SpeedWarping::SpeedScalingScaleBiasClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, ManualSpeedWarpingDir) == 0x000148, "Member 'FAnimNode_SpeedWarping::ManualSpeedWarpingDir' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, ManualFloorNormalInput) == 0x000154, "Member 'FAnimNode_SpeedWarping::ManualFloorNormalInput' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, ManualGravityDirInput) == 0x000160, "Member 'FAnimNode_SpeedWarping::ManualGravityDirInput' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, PelvisPostAdjustmentAlpha) == 0x00016C, "Member 'FAnimNode_SpeedWarping::PelvisPostAdjustmentAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, PelvisAdjustmentMaxIter) == 0x000170, "Member 'FAnimNode_SpeedWarping::PelvisAdjustmentMaxIter' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, PelvisAdjustmentInterp) == 0x000174, "Member 'FAnimNode_SpeedWarping::PelvisAdjustmentInterp' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, CachedDeltaTime) == 0x0001B4, "Member 'FAnimNode_SpeedWarping::CachedDeltaTime' has a wrong offset!");

}

