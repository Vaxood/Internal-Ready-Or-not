#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModioUI

#include "Basic.hpp"

#include "Modio_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum ModioUI.EModioUIInputMode
// NumValues: 0x0008
enum class EModioUIInputMode : uint8
{
	Unknown                                  = 0,
	Mouse                                    = 2,
	Keyboard                                 = 4,
	XBox                                     = 8,
	Playstation                              = 16,
	Controller                               = 24,
	NintendoSwitch                           = 64,
	EModioUIInputMode_MAX                    = 65,
};

// Enum ModioUI.EModioUIAsyncOperationWidgetState
// NumValues: 0x0004
enum class EModioUIAsyncOperationWidgetState : uint8
{
	Success                                  = 0,
	Error                                    = 1,
	InProgress                               = 2,
	EModioUIAsyncOperationWidgetState_MAX    = 3,
};

// Enum ModioUI.EModioUIDirection
// NumValues: 0x0005
enum class EModioUIDirection : uint8
{
	MoveLeft                                 = 0,
	MoveRight                                = 1,
	MoveUp                                   = 2,
	MoveDown                                 = 3,
	EModioUIDirection_MAX                    = 4,
};

// Enum ModioUI.EModioTextValidationRule
// NumValues: 0x0008
enum class EModioTextValidationRule : uint8
{
	ETVR_ValidateEmailAddress                = 0,
	ETVR_ValidateAllLetters                  = 1,
	ETVR_ValidateAllNumeric                  = 2,
	ETVR_ValidateAlphanumeric                = 3,
	ETVR_ValidateLength                      = 4,
	ETVR_ValidateNotEmpty                    = 5,
	ETVR_ValidateNoWhitespace                = 6,
	ETVR_MAX                                 = 7,
};

// Enum ModioUI.EModioDialogReply
// NumValues: 0x0004
enum class EModioDialogReply : uint8
{
	Neutral                                  = 0,
	Confirm                                  = 1,
	Cancel                                   = 2,
	EModioDialogReply_MAX                    = 3,
};

// Enum ModioUI.EModioDialogOperationCall
// NumValues: 0x0003
enum class EModioDialogOperationCall : uint8
{
	SetReportEmailAddress                    = 0,
	SetReportDetails                         = 1,
	EModioDialogOperationCall_MAX            = 2,
};

// Enum ModioUI.EModioDialogAsyncCall
// NumValues: 0x0009
enum class EModioDialogAsyncCall : uint8
{
	AuthSubmitEmail                          = 0,
	AuthSubmitCode                           = 1,
	BeginAuthentication                      = 2,
	RetryFetchTerms                          = 3,
	SubmitReport                             = 4,
	UnsubscribeFromMod                       = 5,
	UninstallMod                             = 6,
	Logout                                   = 7,
	EModioDialogAsyncCall_MAX                = 8,
};

// Enum ModioUI.EModioDialogButtonCommand
// NumValues: 0x0007
enum class EModioDialogButtonCommand : uint8
{
	Back                                     = 0,
	Cancel                                   = 1,
	Close                                    = 2,
	PushDialog                               = 3,
	AsyncCallThenPushDialog                  = 4,
	PushDialogWithOperation                  = 5,
	EModioDialogButtonCommand_MAX            = 6,
};

// Enum ModioUI.EModioDrawerControllerSlotEdge
// NumValues: 0x0005
enum class EModioDrawerControllerSlotEdge : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	Left                                     = 2,
	Right                                    = 3,
	EModioDrawerControllerSlotEdge_MAX       = 4,
};

// Enum ModioUI.EModioInputValidationType
// NumValues: 0x0004
enum class EModioInputValidationType : uint8
{
	Email                                    = 0,
	NotEmpty                                 = 1,
	Custom                                   = 2,
	EModioInputValidationType_MAX            = 3,
};

// Enum ModioUI.EModioMenuDrawer
// NumValues: 0x0003
enum class EModioMenuDrawer : uint8
{
	EMMD_RefineSearch                        = 0,
	EMMD_DownloadQueue                       = 1,
	EMMD_MAX                                 = 2,
};

// Enum ModioUI.EModioMenuScreen
// NumValues: 0x0005
enum class EModioMenuScreen : uint8
{
	EMMS_Featured                            = 0,
	EMMS_Collection                          = 1,
	EMMS_SearchResults                       = 2,
	EMMS_ModDetails                          = 3,
	EMMS_MAX                                 = 4,
};

// Enum ModioUI.EModioModInfoPropertyType
// NumValues: 0x0007
enum class EModioModInfoPropertyType : uint8
{
	Name                                     = 0,
	Size                                     = 1,
	LastUpdated                              = 2,
	ReleaseDate                              = 3,
	Subscribers                              = 4,
	CreatorName                              = 5,
	EModioModInfoPropertyType_MAX            = 6,
};

// Enum ModioUI.EModioNotificationControllerSlotEdge
// NumValues: 0x0005
enum class EModioNotificationControllerSlotEdge : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	Left                                     = 2,
	Right                                    = 3,
	EModioNotificationControllerSlotEdge_MAX = 4,
};

// Enum ModioUI.EModioPopupPlacement
// NumValues: 0x0003
enum class EModioPopupPlacement : uint8
{
	AlignBottomLeft                          = 0,
	AlignTopLeft                             = 1,
	EModioPopupPlacement_MAX                 = 2,
};

// Enum ModioUI.EModioScrollBoxBarAlignment
// NumValues: 0x0006
enum class EModioScrollBoxBarAlignment : uint8
{
	Default                                  = 0,
	Left                                     = 1,
	Right                                    = 2,
	Top                                      = 3,
	Bottom                                   = 4,
	EModioScrollBoxBarAlignment_MAX          = 5,
};

// Enum ModioUI.EModioWidgetCarouselSizeOverrideType
// NumValues: 0x0004
enum class EModioWidgetCarouselSizeOverrideType : uint32
{
	AbsoluteDimensions                       = 0,
	RelativeLayoutScale                      = 1,
	NoOverride                               = 2,
	EModioWidgetCarouselSizeOverrideType_MAX = 3,
};

// ScriptStruct ModioUI.ModioUIColorRef
// 0x0008 (0x0008 - 0x0000)
struct FModioUIColorRef final 
{
public:
	class FName                                   ColorName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FModioUIColorRef) == 0x000004, "Wrong alignment on FModioUIColorRef");
static_assert(sizeof(FModioUIColorRef) == 0x000008, "Wrong size on FModioUIColorRef");
static_assert(offsetof(FModioUIColorRef, ColorName) == 0x000000, "Member 'FModioUIColorRef::ColorName' has a wrong offset!");

// ScriptStruct ModioUI.ModioUIMaterialRef
// 0x0008 (0x0008 - 0x0000)
struct FModioUIMaterialRef final 
{
public:
	class FName                                   MaterialName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FModioUIMaterialRef) == 0x000004, "Wrong alignment on FModioUIMaterialRef");
static_assert(sizeof(FModioUIMaterialRef) == 0x000008, "Wrong size on FModioUIMaterialRef");
static_assert(offsetof(FModioUIMaterialRef, MaterialName) == 0x000000, "Member 'FModioUIMaterialRef::MaterialName' has a wrong offset!");

// ScriptStruct ModioUI.ModioCodeInputStyle
// 0x00B0 (0x0320 - 0x0270)
struct FModioCodeInputStyle final  : public FTextBlockStyle
{
public:
	struct FSlateBrush                            CharacterBrush;                                    // 0x0270(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       ColorWhenFocused;                                  // 0x02F8(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIMaterialRef                    FakeCaretMaterial;                                 // 0x0300(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                CharacterSpacing;                                  // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              MinimumCharacterSize;                              // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioCodeInputStyle) == 0x000008, "Wrong alignment on FModioCodeInputStyle");
static_assert(sizeof(FModioCodeInputStyle) == 0x000320, "Wrong size on FModioCodeInputStyle");
static_assert(offsetof(FModioCodeInputStyle, CharacterBrush) == 0x000270, "Member 'FModioCodeInputStyle::CharacterBrush' has a wrong offset!");
static_assert(offsetof(FModioCodeInputStyle, ColorWhenFocused) == 0x0002F8, "Member 'FModioCodeInputStyle::ColorWhenFocused' has a wrong offset!");
static_assert(offsetof(FModioCodeInputStyle, FakeCaretMaterial) == 0x000300, "Member 'FModioCodeInputStyle::FakeCaretMaterial' has a wrong offset!");
static_assert(offsetof(FModioCodeInputStyle, CharacterSpacing) == 0x000308, "Member 'FModioCodeInputStyle::CharacterSpacing' has a wrong offset!");
static_assert(offsetof(FModioCodeInputStyle, MinimumCharacterSize) == 0x000318, "Member 'FModioCodeInputStyle::MinimumCharacterSize' has a wrong offset!");

// ScriptStruct ModioUI.ModioUIAuthenticationProviderInfo
// 0x0020 (0x0020 - 0x0000)
struct FModioUIAuthenticationProviderInfo final 
{
public:
	bool                                          bIsEmailAuthentication;                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioAuthenticationProvider                  ProviderID;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1816[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ProviderUILabel;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioUIAuthenticationProviderInfo) == 0x000008, "Wrong alignment on FModioUIAuthenticationProviderInfo");
static_assert(sizeof(FModioUIAuthenticationProviderInfo) == 0x000020, "Wrong size on FModioUIAuthenticationProviderInfo");
static_assert(offsetof(FModioUIAuthenticationProviderInfo, bIsEmailAuthentication) == 0x000000, "Member 'FModioUIAuthenticationProviderInfo::bIsEmailAuthentication' has a wrong offset!");
static_assert(offsetof(FModioUIAuthenticationProviderInfo, ProviderID) == 0x000001, "Member 'FModioUIAuthenticationProviderInfo::ProviderID' has a wrong offset!");
static_assert(offsetof(FModioUIAuthenticationProviderInfo, ProviderUILabel) == 0x000008, "Member 'FModioUIAuthenticationProviderInfo::ProviderUILabel' has a wrong offset!");

// ScriptStruct ModioUI.ModioTextValidationRule
// 0x0028 (0x0028 - 0x0000)
struct FModioTextValidationRule final 
{
public:
	EModioTextValidationRule                      RuleToUse;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1817[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ValidationMessage;                                 // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MinimumLength;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumLength;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioTextValidationRule) == 0x000008, "Wrong alignment on FModioTextValidationRule");
static_assert(sizeof(FModioTextValidationRule) == 0x000028, "Wrong size on FModioTextValidationRule");
static_assert(offsetof(FModioTextValidationRule, RuleToUse) == 0x000000, "Member 'FModioTextValidationRule::RuleToUse' has a wrong offset!");
static_assert(offsetof(FModioTextValidationRule, ValidationMessage) == 0x000008, "Member 'FModioTextValidationRule::ValidationMessage' has a wrong offset!");
static_assert(offsetof(FModioTextValidationRule, MinimumLength) == 0x000020, "Member 'FModioTextValidationRule::MinimumLength' has a wrong offset!");
static_assert(offsetof(FModioTextValidationRule, MaximumLength) == 0x000024, "Member 'FModioTextValidationRule::MaximumLength' has a wrong offset!");

// ScriptStruct ModioUI.ModioUIStyleRef
// 0x0008 (0x0008 - 0x0000)
struct FModioUIStyleRef final 
{
public:
	class FName                                   StyleName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FModioUIStyleRef) == 0x000004, "Wrong alignment on FModioUIStyleRef");
static_assert(sizeof(FModioUIStyleRef) == 0x000008, "Wrong size on FModioUIStyleRef");
static_assert(offsetof(FModioUIStyleRef, StyleName) == 0x000000, "Member 'FModioUIStyleRef::StyleName' has a wrong offset!");

// ScriptStruct ModioUI.ModioButtonStyle
// 0x0298 (0x02A0 - 0x0008)
struct FModioButtonStyle final  : public FSlateWidgetStyle
{
public:
	struct FButtonStyle                           ButtonStyle;                                       // 0x0008(0x0278)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       RichTextStyle;                                     // 0x0280(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       BorderStyle;                                       // 0x0288(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ContentPadding;                                    // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioButtonStyle) == 0x000008, "Wrong alignment on FModioButtonStyle");
static_assert(sizeof(FModioButtonStyle) == 0x0002A0, "Wrong size on FModioButtonStyle");
static_assert(offsetof(FModioButtonStyle, ButtonStyle) == 0x000008, "Member 'FModioButtonStyle::ButtonStyle' has a wrong offset!");
static_assert(offsetof(FModioButtonStyle, RichTextStyle) == 0x000280, "Member 'FModioButtonStyle::RichTextStyle' has a wrong offset!");
static_assert(offsetof(FModioButtonStyle, BorderStyle) == 0x000288, "Member 'FModioButtonStyle::BorderStyle' has a wrong offset!");
static_assert(offsetof(FModioButtonStyle, ContentPadding) == 0x000290, "Member 'FModioButtonStyle::ContentPadding' has a wrong offset!");

// ScriptStruct ModioUI.ModioWidgetBorderStyle
// 0x0078 (0x0080 - 0x0008)
struct FModioWidgetBorderStyle final  : public FSlateWidgetStyle
{
public:
	bool                                          bMaskWithMaterial;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1818[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      MaskMaterial;                                      // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativeRadius;                                   // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1819[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CornerRadius;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBorder;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181A[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioUIColorRef                       BorderColor;                                       // 0x0044(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       HoverColor;                                        // 0x004C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       ActiveColor;                                       // 0x0054(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       NewInnerColor;                                     // 0x005C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BorderThickness;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BorderOpacity;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWidgetTexture;                                 // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181B[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           InnerColor;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioWidgetBorderStyle) == 0x000008, "Wrong alignment on FModioWidgetBorderStyle");
static_assert(sizeof(FModioWidgetBorderStyle) == 0x000080, "Wrong size on FModioWidgetBorderStyle");
static_assert(offsetof(FModioWidgetBorderStyle, bMaskWithMaterial) == 0x000008, "Member 'FModioWidgetBorderStyle::bMaskWithMaterial' has a wrong offset!");
static_assert(offsetof(FModioWidgetBorderStyle, MaskMaterial) == 0x000010, "Member 'FModioWidgetBorderStyle::MaskMaterial' has a wrong offset!");
static_assert(offsetof(FModioWidgetBorderStyle, bRelativeRadius) == 0x000038, "Member 'FModioWidgetBorderStyle::bRelativeRadius' has a wrong offset!");
static_assert(offsetof(FModioWidgetBorderStyle, CornerRadius) == 0x00003C, "Member 'FModioWidgetBorderStyle::CornerRadius' has a wrong offset!");
static_assert(offsetof(FModioWidgetBorderStyle, bEnableBorder) == 0x000040, "Member 'FModioWidgetBorderStyle::bEnableBorder' has a wrong offset!");
static_assert(offsetof(FModioWidgetBorderStyle, BorderColor) == 0x000044, "Member 'FModioWidgetBorderStyle::BorderColor' has a wrong offset!");
static_assert(offsetof(FModioWidgetBorderStyle, HoverColor) == 0x00004C, "Member 'FModioWidgetBorderStyle::HoverColor' has a wrong offset!");
static_assert(offsetof(FModioWidgetBorderStyle, ActiveColor) == 0x000054, "Member 'FModioWidgetBorderStyle::ActiveColor' has a wrong offset!");
static_assert(offsetof(FModioWidgetBorderStyle, NewInnerColor) == 0x00005C, "Member 'FModioWidgetBorderStyle::NewInnerColor' has a wrong offset!");
static_assert(offsetof(FModioWidgetBorderStyle, BorderThickness) == 0x000064, "Member 'FModioWidgetBorderStyle::BorderThickness' has a wrong offset!");
static_assert(offsetof(FModioWidgetBorderStyle, BorderOpacity) == 0x000068, "Member 'FModioWidgetBorderStyle::BorderOpacity' has a wrong offset!");
static_assert(offsetof(FModioWidgetBorderStyle, bUseWidgetTexture) == 0x00006C, "Member 'FModioWidgetBorderStyle::bUseWidgetTexture' has a wrong offset!");
static_assert(offsetof(FModioWidgetBorderStyle, InnerColor) == 0x000070, "Member 'FModioWidgetBorderStyle::InnerColor' has a wrong offset!");

// ScriptStruct ModioUI.ModioCheckBoxStyle
// 0x08B8 (0x08C0 - 0x0008)
struct FModioCheckBoxStyle final  : public FSlateWidgetStyle
{
public:
	struct FCheckBoxStyle                         CheckBoxStyle;                                     // 0x0008(0x0580)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                ContentPadding;                                    // 0x0588(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextStyle;                                         // 0x0598(0x0270)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       TextStyleNew;                                      // 0x0808(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioWidgetBorderStyle                CheckBoxBorderStyle;                               // 0x0810(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSlateSound;                                 // 0x0890(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSlateSound;                                 // 0x08A8(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioCheckBoxStyle) == 0x000008, "Wrong alignment on FModioCheckBoxStyle");
static_assert(sizeof(FModioCheckBoxStyle) == 0x0008C0, "Wrong size on FModioCheckBoxStyle");
static_assert(offsetof(FModioCheckBoxStyle, CheckBoxStyle) == 0x000008, "Member 'FModioCheckBoxStyle::CheckBoxStyle' has a wrong offset!");
static_assert(offsetof(FModioCheckBoxStyle, ContentPadding) == 0x000588, "Member 'FModioCheckBoxStyle::ContentPadding' has a wrong offset!");
static_assert(offsetof(FModioCheckBoxStyle, TextStyle) == 0x000598, "Member 'FModioCheckBoxStyle::TextStyle' has a wrong offset!");
static_assert(offsetof(FModioCheckBoxStyle, TextStyleNew) == 0x000808, "Member 'FModioCheckBoxStyle::TextStyleNew' has a wrong offset!");
static_assert(offsetof(FModioCheckBoxStyle, CheckBoxBorderStyle) == 0x000810, "Member 'FModioCheckBoxStyle::CheckBoxBorderStyle' has a wrong offset!");
static_assert(offsetof(FModioCheckBoxStyle, PressedSlateSound) == 0x000890, "Member 'FModioCheckBoxStyle::PressedSlateSound' has a wrong offset!");
static_assert(offsetof(FModioCheckBoxStyle, HoveredSlateSound) == 0x0008A8, "Member 'FModioCheckBoxStyle::HoveredSlateSound' has a wrong offset!");

// ScriptStruct ModioUI.ModioComboBoxStyle
// 0x0CB8 (0x0CC0 - 0x0008)
struct FModioComboBoxStyle final  : public FSlateWidgetStyle
{
public:
	struct FComboBoxStyle                         ComboBoxStyle;                                     // 0x0008(0x03F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioWidgetBorderStyle                MenuBorderStyle;                                   // 0x03F8(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioWidgetBorderStyle                ButtonBorderStyle;                                 // 0x0478(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTableRowStyle                         DropdownItemStyle;                                 // 0x04F8(0x07C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioComboBoxStyle) == 0x000008, "Wrong alignment on FModioComboBoxStyle");
static_assert(sizeof(FModioComboBoxStyle) == 0x000CC0, "Wrong size on FModioComboBoxStyle");
static_assert(offsetof(FModioComboBoxStyle, ComboBoxStyle) == 0x000008, "Member 'FModioComboBoxStyle::ComboBoxStyle' has a wrong offset!");
static_assert(offsetof(FModioComboBoxStyle, MenuBorderStyle) == 0x0003F8, "Member 'FModioComboBoxStyle::MenuBorderStyle' has a wrong offset!");
static_assert(offsetof(FModioComboBoxStyle, ButtonBorderStyle) == 0x000478, "Member 'FModioComboBoxStyle::ButtonBorderStyle' has a wrong offset!");
static_assert(offsetof(FModioComboBoxStyle, DropdownItemStyle) == 0x0004F8, "Member 'FModioComboBoxStyle::DropdownItemStyle' has a wrong offset!");

// ScriptStruct ModioUI.ModioCustomComboBoxStyle
// 0x0050 (0x0058 - 0x0008)
struct FModioCustomComboBoxStyle final  : public FSlateWidgetStyle
{
public:
	struct FModioUIStyleRef                       BorderStyle;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       RowStyle;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       TextStyle;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       BackgroundColor;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSound;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSound;                                      // 0x0040(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioCustomComboBoxStyle) == 0x000008, "Wrong alignment on FModioCustomComboBoxStyle");
static_assert(sizeof(FModioCustomComboBoxStyle) == 0x000058, "Wrong size on FModioCustomComboBoxStyle");
static_assert(offsetof(FModioCustomComboBoxStyle, BorderStyle) == 0x000008, "Member 'FModioCustomComboBoxStyle::BorderStyle' has a wrong offset!");
static_assert(offsetof(FModioCustomComboBoxStyle, RowStyle) == 0x000010, "Member 'FModioCustomComboBoxStyle::RowStyle' has a wrong offset!");
static_assert(offsetof(FModioCustomComboBoxStyle, TextStyle) == 0x000018, "Member 'FModioCustomComboBoxStyle::TextStyle' has a wrong offset!");
static_assert(offsetof(FModioCustomComboBoxStyle, BackgroundColor) == 0x000020, "Member 'FModioCustomComboBoxStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FModioCustomComboBoxStyle, PressedSound) == 0x000028, "Member 'FModioCustomComboBoxStyle::PressedSound' has a wrong offset!");
static_assert(offsetof(FModioCustomComboBoxStyle, HoveredSound) == 0x000040, "Member 'FModioCustomComboBoxStyle::HoveredSound' has a wrong offset!");

// ScriptStruct ModioUI.ModioDialogButtonInfo
// 0x0038 (0x0038 - 0x0000)
struct FModioDialogButtonInfo final 
{
public:
	class FText                                   ButtonLabel;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EModioDialogButtonCommand                     ButtonCommand;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioDialogAsyncCall                         AsyncCallType;                                     // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioDialogOperationCall                     OperationCallType;                                 // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181C[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UModioDialogInfo*                       Destination;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181D[0x10];                                    // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioDialogButtonInfo) == 0x000008, "Wrong alignment on FModioDialogButtonInfo");
static_assert(sizeof(FModioDialogButtonInfo) == 0x000038, "Wrong size on FModioDialogButtonInfo");
static_assert(offsetof(FModioDialogButtonInfo, ButtonLabel) == 0x000000, "Member 'FModioDialogButtonInfo::ButtonLabel' has a wrong offset!");
static_assert(offsetof(FModioDialogButtonInfo, ButtonCommand) == 0x000018, "Member 'FModioDialogButtonInfo::ButtonCommand' has a wrong offset!");
static_assert(offsetof(FModioDialogButtonInfo, AsyncCallType) == 0x000019, "Member 'FModioDialogButtonInfo::AsyncCallType' has a wrong offset!");
static_assert(offsetof(FModioDialogButtonInfo, OperationCallType) == 0x00001A, "Member 'FModioDialogButtonInfo::OperationCallType' has a wrong offset!");
static_assert(offsetof(FModioDialogButtonInfo, Destination) == 0x000020, "Member 'FModioDialogButtonInfo::Destination' has a wrong offset!");

// ScriptStruct ModioUI.ModioDialogStyle
// 0x00B0 (0x00B8 - 0x0008)
struct FModioDialogStyle final  : public FSlateWidgetStyle
{
public:
	struct FMargin                                ContentPadding;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0018(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       TitleTextStyle;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       ContentTextStyle;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       ButtonStyle;                                       // 0x00B0(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioDialogStyle) == 0x000008, "Wrong alignment on FModioDialogStyle");
static_assert(sizeof(FModioDialogStyle) == 0x0000B8, "Wrong size on FModioDialogStyle");
static_assert(offsetof(FModioDialogStyle, ContentPadding) == 0x000008, "Member 'FModioDialogStyle::ContentPadding' has a wrong offset!");
static_assert(offsetof(FModioDialogStyle, BackgroundBrush) == 0x000018, "Member 'FModioDialogStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FModioDialogStyle, TitleTextStyle) == 0x0000A0, "Member 'FModioDialogStyle::TitleTextStyle' has a wrong offset!");
static_assert(offsetof(FModioDialogStyle, ContentTextStyle) == 0x0000A8, "Member 'FModioDialogStyle::ContentTextStyle' has a wrong offset!");
static_assert(offsetof(FModioDialogStyle, ButtonStyle) == 0x0000B0, "Member 'FModioDialogStyle::ButtonStyle' has a wrong offset!");

// ScriptStruct ModioUI.ModioDownloadQueueEntryStyle
// 0x00C8 (0x00D0 - 0x0008)
struct FModioDownloadQueueEntryStyle final  : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            HighlightedBorderBrush;                            // 0x0008(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       UnsubscribeButtonStyle;                            // 0x0090(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       TextStyle;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSound;                                      // 0x00A0(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSound;                                      // 0x00B8(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioDownloadQueueEntryStyle) == 0x000008, "Wrong alignment on FModioDownloadQueueEntryStyle");
static_assert(sizeof(FModioDownloadQueueEntryStyle) == 0x0000D0, "Wrong size on FModioDownloadQueueEntryStyle");
static_assert(offsetof(FModioDownloadQueueEntryStyle, HighlightedBorderBrush) == 0x000008, "Member 'FModioDownloadQueueEntryStyle::HighlightedBorderBrush' has a wrong offset!");
static_assert(offsetof(FModioDownloadQueueEntryStyle, UnsubscribeButtonStyle) == 0x000090, "Member 'FModioDownloadQueueEntryStyle::UnsubscribeButtonStyle' has a wrong offset!");
static_assert(offsetof(FModioDownloadQueueEntryStyle, TextStyle) == 0x000098, "Member 'FModioDownloadQueueEntryStyle::TextStyle' has a wrong offset!");
static_assert(offsetof(FModioDownloadQueueEntryStyle, HoveredSound) == 0x0000A0, "Member 'FModioDownloadQueueEntryStyle::HoveredSound' has a wrong offset!");
static_assert(offsetof(FModioDownloadQueueEntryStyle, PressedSound) == 0x0000B8, "Member 'FModioDownloadQueueEntryStyle::PressedSound' has a wrong offset!");

// ScriptStruct ModioUI.ModioDrawerWidgetStyle
// 0x0198 (0x01A0 - 0x0008)
struct FModioDrawerWidgetStyle final  : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            HeadingBackgroundBrush;                            // 0x0008(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ContentBackgroundBrush;                            // 0x0090(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            FooterBackgroundBrush;                             // 0x0118(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioDrawerWidgetStyle) == 0x000008, "Wrong alignment on FModioDrawerWidgetStyle");
static_assert(sizeof(FModioDrawerWidgetStyle) == 0x0001A0, "Wrong size on FModioDrawerWidgetStyle");
static_assert(offsetof(FModioDrawerWidgetStyle, HeadingBackgroundBrush) == 0x000008, "Member 'FModioDrawerWidgetStyle::HeadingBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FModioDrawerWidgetStyle, ContentBackgroundBrush) == 0x000090, "Member 'FModioDrawerWidgetStyle::ContentBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FModioDrawerWidgetStyle, FooterBackgroundBrush) == 0x000118, "Member 'FModioDrawerWidgetStyle::FooterBackgroundBrush' has a wrong offset!");

// ScriptStruct ModioUI.ModioDynamicImageStyle
// 0x0128 (0x0130 - 0x0008)
struct FModioDynamicImageStyle final  : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            ImageLoadingBrush;                                 // 0x0008(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ImageUnavailableBrush;                             // 0x0090(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSound;                                      // 0x0118(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioDynamicImageStyle) == 0x000008, "Wrong alignment on FModioDynamicImageStyle");
static_assert(sizeof(FModioDynamicImageStyle) == 0x000130, "Wrong size on FModioDynamicImageStyle");
static_assert(offsetof(FModioDynamicImageStyle, ImageLoadingBrush) == 0x000008, "Member 'FModioDynamicImageStyle::ImageLoadingBrush' has a wrong offset!");
static_assert(offsetof(FModioDynamicImageStyle, ImageUnavailableBrush) == 0x000090, "Member 'FModioDynamicImageStyle::ImageUnavailableBrush' has a wrong offset!");
static_assert(offsetof(FModioDynamicImageStyle, HoveredSound) == 0x000118, "Member 'FModioDynamicImageStyle::HoveredSound' has a wrong offset!");

// ScriptStruct ModioUI.ModioEditableTextBoxStyle
// 0x0228 (0x0A20 - 0x07F8)
struct FModioEditableTextBoxStyle final  : public FEditableTextBoxStyle
{
public:
	bool                                          bShowHintIcon;                                     // 0x07F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181E[0x7];                                     // 0x07F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            HintIcon;                                          // 0x0800(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalBorderBrush;                                 // 0x0888(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredBorderBrush;                                // 0x0910(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ErrorBorderBrush;                                  // 0x0998(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioEditableTextBoxStyle) == 0x000008, "Wrong alignment on FModioEditableTextBoxStyle");
static_assert(sizeof(FModioEditableTextBoxStyle) == 0x000A20, "Wrong size on FModioEditableTextBoxStyle");
static_assert(offsetof(FModioEditableTextBoxStyle, bShowHintIcon) == 0x0007F8, "Member 'FModioEditableTextBoxStyle::bShowHintIcon' has a wrong offset!");
static_assert(offsetof(FModioEditableTextBoxStyle, HintIcon) == 0x000800, "Member 'FModioEditableTextBoxStyle::HintIcon' has a wrong offset!");
static_assert(offsetof(FModioEditableTextBoxStyle, NormalBorderBrush) == 0x000888, "Member 'FModioEditableTextBoxStyle::NormalBorderBrush' has a wrong offset!");
static_assert(offsetof(FModioEditableTextBoxStyle, HoveredBorderBrush) == 0x000910, "Member 'FModioEditableTextBoxStyle::HoveredBorderBrush' has a wrong offset!");
static_assert(offsetof(FModioEditableTextBoxStyle, ErrorBorderBrush) == 0x000998, "Member 'FModioEditableTextBoxStyle::ErrorBorderBrush' has a wrong offset!");

// ScriptStruct ModioUI.ModioInputMappingGlyph
// 0x00C8 (0x00C8 - 0x0000)
struct FModioInputMappingGlyph final 
{
public:
	TSoftObjectPtr<class UTexture2D>              MouseGlyph;                                        // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              KeyboardGlyph;                                     // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              XBoxControllerGlyph;                               // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              PSControllerGlyph;                                 // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FallbackControllerGlyph;                           // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioInputMappingGlyph) == 0x000008, "Wrong alignment on FModioInputMappingGlyph");
static_assert(sizeof(FModioInputMappingGlyph) == 0x0000C8, "Wrong size on FModioInputMappingGlyph");
static_assert(offsetof(FModioInputMappingGlyph, MouseGlyph) == 0x000000, "Member 'FModioInputMappingGlyph::MouseGlyph' has a wrong offset!");
static_assert(offsetof(FModioInputMappingGlyph, KeyboardGlyph) == 0x000028, "Member 'FModioInputMappingGlyph::KeyboardGlyph' has a wrong offset!");
static_assert(offsetof(FModioInputMappingGlyph, XBoxControllerGlyph) == 0x000050, "Member 'FModioInputMappingGlyph::XBoxControllerGlyph' has a wrong offset!");
static_assert(offsetof(FModioInputMappingGlyph, PSControllerGlyph) == 0x000078, "Member 'FModioInputMappingGlyph::PSControllerGlyph' has a wrong offset!");
static_assert(offsetof(FModioInputMappingGlyph, FallbackControllerGlyph) == 0x0000A0, "Member 'FModioInputMappingGlyph::FallbackControllerGlyph' has a wrong offset!");

// ScriptStruct ModioUI.ModioModDetailsGalleryImageInfo
// 0x0030 (0x0030 - 0x0000)
struct FModioModDetailsGalleryImageInfo final 
{
public:
	uint8                                         Pad_181F[0x28];                                    // 0x0000(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2DDynamic*                      LoadedImage;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModDetailsGalleryImageInfo) == 0x000008, "Wrong alignment on FModioModDetailsGalleryImageInfo");
static_assert(sizeof(FModioModDetailsGalleryImageInfo) == 0x000030, "Wrong size on FModioModDetailsGalleryImageInfo");
static_assert(offsetof(FModioModDetailsGalleryImageInfo, LoadedImage) == 0x000028, "Member 'FModioModDetailsGalleryImageInfo::LoadedImage' has a wrong offset!");

// ScriptStruct ModioUI.ModioModInfoPropertyDescriptor
// 0x0020 (0x0020 - 0x0000)
struct FModioModInfoPropertyDescriptor final 
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EModioModInfoPropertyType                     Property;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1820[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioModInfoPropertyDescriptor) == 0x000008, "Wrong alignment on FModioModInfoPropertyDescriptor");
static_assert(sizeof(FModioModInfoPropertyDescriptor) == 0x000020, "Wrong size on FModioModInfoPropertyDescriptor");
static_assert(offsetof(FModioModInfoPropertyDescriptor, Label) == 0x000000, "Member 'FModioModInfoPropertyDescriptor::Label' has a wrong offset!");
static_assert(offsetof(FModioModInfoPropertyDescriptor, Property) == 0x000018, "Member 'FModioModInfoPropertyDescriptor::Property' has a wrong offset!");

// ScriptStruct ModioUI.ModioModTileStyle
// 0x0030 (0x0038 - 0x0008)
struct FModioModTileStyle final  : public FSlateWidgetStyle
{
public:
	struct FSlateSound                            HoveredSound;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSound;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModTileStyle) == 0x000008, "Wrong alignment on FModioModTileStyle");
static_assert(sizeof(FModioModTileStyle) == 0x000038, "Wrong size on FModioModTileStyle");
static_assert(offsetof(FModioModTileStyle, HoveredSound) == 0x000008, "Member 'FModioModTileStyle::HoveredSound' has a wrong offset!");
static_assert(offsetof(FModioModTileStyle, PressedSound) == 0x000020, "Member 'FModioModTileStyle::PressedSound' has a wrong offset!");

// ScriptStruct ModioUI.ModioMultiLineEditableTextBoxStyle
// 0x0008 (0x0800 - 0x07F8)
struct FModioMultiLineEditableTextBoxStyle final  : public FEditableTextBoxStyle
{
public:
	struct FModioUIStyleRef                       ModioTextStyle;                                    // 0x07F8(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioMultiLineEditableTextBoxStyle) == 0x000008, "Wrong alignment on FModioMultiLineEditableTextBoxStyle");
static_assert(sizeof(FModioMultiLineEditableTextBoxStyle) == 0x000800, "Wrong size on FModioMultiLineEditableTextBoxStyle");
static_assert(offsetof(FModioMultiLineEditableTextBoxStyle, ModioTextStyle) == 0x0007F8, "Member 'FModioMultiLineEditableTextBoxStyle::ModioTextStyle' has a wrong offset!");

// ScriptStruct ModioUI.ModioNotificationStyle
// 0x0050 (0x0058 - 0x0008)
struct FModioNotificationStyle final  : public FSlateWidgetStyle
{
public:
	struct FModioUIStyleRef                       TextStyleSet;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PrimaryTextStyleName;                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondaryTextStyleName;                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioUIMaterialRef                    ErrorSuccessGlyph;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIMaterialRef                    ErrorFailureGlyph;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIMaterialRef                    BackgroundMaterial;                                // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       SuccessColor;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       ErrorColor;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ContentPadding;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioNotificationStyle) == 0x000008, "Wrong alignment on FModioNotificationStyle");
static_assert(sizeof(FModioNotificationStyle) == 0x000058, "Wrong size on FModioNotificationStyle");
static_assert(offsetof(FModioNotificationStyle, TextStyleSet) == 0x000008, "Member 'FModioNotificationStyle::TextStyleSet' has a wrong offset!");
static_assert(offsetof(FModioNotificationStyle, PrimaryTextStyleName) == 0x000010, "Member 'FModioNotificationStyle::PrimaryTextStyleName' has a wrong offset!");
static_assert(offsetof(FModioNotificationStyle, SecondaryTextStyleName) == 0x000018, "Member 'FModioNotificationStyle::SecondaryTextStyleName' has a wrong offset!");
static_assert(offsetof(FModioNotificationStyle, ErrorSuccessGlyph) == 0x000020, "Member 'FModioNotificationStyle::ErrorSuccessGlyph' has a wrong offset!");
static_assert(offsetof(FModioNotificationStyle, ErrorFailureGlyph) == 0x000028, "Member 'FModioNotificationStyle::ErrorFailureGlyph' has a wrong offset!");
static_assert(offsetof(FModioNotificationStyle, BackgroundMaterial) == 0x000030, "Member 'FModioNotificationStyle::BackgroundMaterial' has a wrong offset!");
static_assert(offsetof(FModioNotificationStyle, SuccessColor) == 0x000038, "Member 'FModioNotificationStyle::SuccessColor' has a wrong offset!");
static_assert(offsetof(FModioNotificationStyle, ErrorColor) == 0x000040, "Member 'FModioNotificationStyle::ErrorColor' has a wrong offset!");
static_assert(offsetof(FModioNotificationStyle, ContentPadding) == 0x000048, "Member 'FModioNotificationStyle::ContentPadding' has a wrong offset!");

// ScriptStruct ModioUI.ModioPopupMenuStyle
// 0x0030 (0x0038 - 0x0008)
struct FModioPopupMenuStyle final  : public FSlateWidgetStyle
{
public:
	struct FSlateSound                            HoveredSound;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSound;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioPopupMenuStyle) == 0x000008, "Wrong alignment on FModioPopupMenuStyle");
static_assert(sizeof(FModioPopupMenuStyle) == 0x000038, "Wrong size on FModioPopupMenuStyle");
static_assert(offsetof(FModioPopupMenuStyle, HoveredSound) == 0x000008, "Member 'FModioPopupMenuStyle::HoveredSound' has a wrong offset!");
static_assert(offsetof(FModioPopupMenuStyle, PressedSound) == 0x000020, "Member 'FModioPopupMenuStyle::PressedSound' has a wrong offset!");

// ScriptStruct ModioUI.ModioProgressBarStyle
// 0x0000 (0x01A0 - 0x01A0)
struct FModioProgressBarStyle final  : public FProgressBarStyle
{
};
static_assert(alignof(FModioProgressBarStyle) == 0x000008, "Wrong alignment on FModioProgressBarStyle");
static_assert(sizeof(FModioProgressBarStyle) == 0x0001A0, "Wrong size on FModioProgressBarStyle");

// ScriptStruct ModioUI.ModioTextBlockStyleOverride
// 0x02C0 (0x02C8 - 0x0008)
struct FModioTextBlockStyleOverride final  : public FSlateWidgetStyle
{
public:
	struct FTextBlockStyle                        StyleProperties;                                   // 0x0008(0x0270)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       OverriddenProperties;                              // 0x0278(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioTextBlockStyleOverride) == 0x000008, "Wrong alignment on FModioTextBlockStyleOverride");
static_assert(sizeof(FModioTextBlockStyleOverride) == 0x0002C8, "Wrong size on FModioTextBlockStyleOverride");
static_assert(offsetof(FModioTextBlockStyleOverride, StyleProperties) == 0x000008, "Member 'FModioTextBlockStyleOverride::StyleProperties' has a wrong offset!");
static_assert(offsetof(FModioTextBlockStyleOverride, OverriddenProperties) == 0x000278, "Member 'FModioTextBlockStyleOverride::OverriddenProperties' has a wrong offset!");

// ScriptStruct ModioUI.ModioRichTextStyle
// 0x00A0 (0x00A8 - 0x0008)
struct FModioRichTextStyle final  : public FSlateWidgetStyle
{
public:
	TMap<class FName, struct FTextBlockStyle>     Styles;                                            // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FModioTextBlockStyleOverride> InlineStyleOverrides;                              // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioRichTextStyle) == 0x000008, "Wrong alignment on FModioRichTextStyle");
static_assert(sizeof(FModioRichTextStyle) == 0x0000A8, "Wrong size on FModioRichTextStyle");
static_assert(offsetof(FModioRichTextStyle, Styles) == 0x000008, "Member 'FModioRichTextStyle::Styles' has a wrong offset!");
static_assert(offsetof(FModioRichTextStyle, InlineStyleOverrides) == 0x000058, "Member 'FModioRichTextStyle::InlineStyleOverrides' has a wrong offset!");

// ScriptStruct ModioUI.ModioSlateMaterialBrush
// 0x0000 (0x0088 - 0x0088)
struct FModioSlateMaterialBrush final  : public FSlateBrush
{
};
static_assert(alignof(FModioSlateMaterialBrush) == 0x000008, "Wrong alignment on FModioSlateMaterialBrush");
static_assert(sizeof(FModioSlateMaterialBrush) == 0x000088, "Wrong size on FModioSlateMaterialBrush");

// ScriptStruct ModioUI.ModioSubscriptionBadgeStyle
// 0x0300 (0x0308 - 0x0008)
struct FModioSubscriptionBadgeStyle final  : public FSlateWidgetStyle
{
public:
	struct FTextBlockStyle                        LabelStyle;                                        // 0x0008(0x0270)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       LabelStyleNew;                                     // 0x0278(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIStyleRef                       ProgressBarStyle;                                  // 0x0280(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioWidgetBorderStyle                BadgeBorderStyle;                                  // 0x0288(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioSubscriptionBadgeStyle) == 0x000008, "Wrong alignment on FModioSubscriptionBadgeStyle");
static_assert(sizeof(FModioSubscriptionBadgeStyle) == 0x000308, "Wrong size on FModioSubscriptionBadgeStyle");
static_assert(offsetof(FModioSubscriptionBadgeStyle, LabelStyle) == 0x000008, "Member 'FModioSubscriptionBadgeStyle::LabelStyle' has a wrong offset!");
static_assert(offsetof(FModioSubscriptionBadgeStyle, LabelStyleNew) == 0x000278, "Member 'FModioSubscriptionBadgeStyle::LabelStyleNew' has a wrong offset!");
static_assert(offsetof(FModioSubscriptionBadgeStyle, ProgressBarStyle) == 0x000280, "Member 'FModioSubscriptionBadgeStyle::ProgressBarStyle' has a wrong offset!");
static_assert(offsetof(FModioSubscriptionBadgeStyle, BadgeBorderStyle) == 0x000288, "Member 'FModioSubscriptionBadgeStyle::BadgeBorderStyle' has a wrong offset!");

// ScriptStruct ModioUI.ModioTableRowStyle
// 0x0030 (0x0038 - 0x0008)
struct FModioTableRowStyle final  : public FSlateWidgetStyle
{
public:
	struct FModioUIColorRef                       BackgroundHoverColor;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       BackgroundSelectedColor;                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       BackgroundColor;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       TextHoverColor;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       TextSelectedColor;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FModioUIColorRef                       TextColor;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioTableRowStyle) == 0x000008, "Wrong alignment on FModioTableRowStyle");
static_assert(sizeof(FModioTableRowStyle) == 0x000038, "Wrong size on FModioTableRowStyle");
static_assert(offsetof(FModioTableRowStyle, BackgroundHoverColor) == 0x000008, "Member 'FModioTableRowStyle::BackgroundHoverColor' has a wrong offset!");
static_assert(offsetof(FModioTableRowStyle, BackgroundSelectedColor) == 0x000010, "Member 'FModioTableRowStyle::BackgroundSelectedColor' has a wrong offset!");
static_assert(offsetof(FModioTableRowStyle, BackgroundColor) == 0x000018, "Member 'FModioTableRowStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FModioTableRowStyle, TextHoverColor) == 0x000020, "Member 'FModioTableRowStyle::TextHoverColor' has a wrong offset!");
static_assert(offsetof(FModioTableRowStyle, TextSelectedColor) == 0x000028, "Member 'FModioTableRowStyle::TextSelectedColor' has a wrong offset!");
static_assert(offsetof(FModioTableRowStyle, TextColor) == 0x000030, "Member 'FModioTableRowStyle::TextColor' has a wrong offset!");

// ScriptStruct ModioUI.ModioTagWidgetStyle
// 0x01C8 (0x01D0 - 0x0008)
struct FModioTagWidgetStyle final  : public FSlateWidgetStyle
{
public:
	struct FModioUIStyleRef                       TextStyleNew;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            TagBackgroundBrush;                                // 0x0010(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioRichTextStyle                    TextStyle;                                         // 0x0098(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioWidgetBorderStyle                TagBackgroundStyle;                                // 0x0140(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                ContentPadding;                                    // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioTagWidgetStyle) == 0x000008, "Wrong alignment on FModioTagWidgetStyle");
static_assert(sizeof(FModioTagWidgetStyle) == 0x0001D0, "Wrong size on FModioTagWidgetStyle");
static_assert(offsetof(FModioTagWidgetStyle, TextStyleNew) == 0x000008, "Member 'FModioTagWidgetStyle::TextStyleNew' has a wrong offset!");
static_assert(offsetof(FModioTagWidgetStyle, TagBackgroundBrush) == 0x000010, "Member 'FModioTagWidgetStyle::TagBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FModioTagWidgetStyle, TextStyle) == 0x000098, "Member 'FModioTagWidgetStyle::TextStyle' has a wrong offset!");
static_assert(offsetof(FModioTagWidgetStyle, TagBackgroundStyle) == 0x000140, "Member 'FModioTagWidgetStyle::TagBackgroundStyle' has a wrong offset!");
static_assert(offsetof(FModioTagWidgetStyle, ContentPadding) == 0x0001C0, "Member 'FModioTagWidgetStyle::ContentPadding' has a wrong offset!");

// ScriptStruct ModioUI.ModioUIAction
// 0x0030 (0x0030 - 0x0000)
struct FModioUIAction final 
{
public:
	TDelegate<void()>                             ExecuteAction;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             CanExecuteAction;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             IsActionVisible;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioUIAction) == 0x000004, "Wrong alignment on FModioUIAction");
static_assert(sizeof(FModioUIAction) == 0x000030, "Wrong size on FModioUIAction");
static_assert(offsetof(FModioUIAction, ExecuteAction) == 0x000000, "Member 'FModioUIAction::ExecuteAction' has a wrong offset!");
static_assert(offsetof(FModioUIAction, CanExecuteAction) == 0x000010, "Member 'FModioUIAction::CanExecuteAction' has a wrong offset!");
static_assert(offsetof(FModioUIAction, IsActionVisible) == 0x000020, "Member 'FModioUIAction::IsActionVisible' has a wrong offset!");

// ScriptStruct ModioUI.ModioUIColor
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FModioUIColor final 
{
public:
	uint8                                         Pad_1821[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModioUIColor) == 0x000008, "Wrong alignment on FModioUIColor");
static_assert(sizeof(FModioUIColor) == 0x000020, "Wrong size on FModioUIColor");

// ScriptStruct ModioUI.ModioUIMenuEntry
// 0x0018 (0x0018 - 0x0000)
struct FModioUIMenuEntry final 
{
public:
	class FText                                   MenuEntryLabel;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioUIMenuEntry) == 0x000008, "Wrong alignment on FModioUIMenuEntry");
static_assert(sizeof(FModioUIMenuEntry) == 0x000018, "Wrong size on FModioUIMenuEntry");
static_assert(offsetof(FModioUIMenuEntry, MenuEntryLabel) == 0x000000, "Member 'FModioUIMenuEntry::MenuEntryLabel' has a wrong offset!");

// ScriptStruct ModioUI.ModioUIMenuCommandList
// 0x0050 (0x0050 - 0x0000)
struct FModioUIMenuCommandList final 
{
public:
	TMap<struct FModioUIMenuEntry, struct FModioUIAction> MappedActions;                                     // 0x0000(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioUIMenuCommandList) == 0x000008, "Wrong alignment on FModioUIMenuCommandList");
static_assert(sizeof(FModioUIMenuCommandList) == 0x000050, "Wrong size on FModioUIMenuCommandList");
static_assert(offsetof(FModioUIMenuCommandList, MappedActions) == 0x000000, "Member 'FModioUIMenuCommandList::MappedActions' has a wrong offset!");

// ScriptStruct ModioUI.ModioInputMapping
// 0x0028 (0x0028 - 0x0000)
struct FModioInputMapping final 
{
public:
	struct FKey                                   VirtualKey;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MappedProjectInputs;                               // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioInputMapping) == 0x000008, "Wrong alignment on FModioInputMapping");
static_assert(sizeof(FModioInputMapping) == 0x000028, "Wrong size on FModioInputMapping");
static_assert(offsetof(FModioInputMapping, VirtualKey) == 0x000000, "Member 'FModioInputMapping::VirtualKey' has a wrong offset!");
static_assert(offsetof(FModioInputMapping, MappedProjectInputs) == 0x000018, "Member 'FModioInputMapping::MappedProjectInputs' has a wrong offset!");

// ScriptStruct ModioUI.ModioLinearColor
// 0x0000 (0x0010 - 0x0010)
struct FModioLinearColor final  : public FLinearColor
{
};
static_assert(alignof(FModioLinearColor) == 0x000004, "Wrong alignment on FModioLinearColor");
static_assert(sizeof(FModioLinearColor) == 0x000010, "Wrong size on FModioLinearColor");

// ScriptStruct ModioUI.ModioSlateColorInspector
// 0x0000 (0x0028 - 0x0028)
struct FModioSlateColorInspector final  : public FSlateColor
{
};
static_assert(alignof(FModioSlateColorInspector) == 0x000008, "Wrong alignment on FModioSlateColorInspector");
static_assert(sizeof(FModioSlateColorInspector) == 0x000028, "Wrong size on FModioSlateColorInspector");

}

