#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_PlanningMap_Level

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_PreMission_PlanningMap_Level.W_PreMission_PlanningMap_Level_C
// 0x0180 (0x03E0 - 0x0260)
class UW_PreMission_PlanningMap_Level_C final  : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Img_Map;                                           // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           MainCanvas;                                        // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           MarkerCanvas;                                      // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMissionPlanLinesWidget*                PlanLineRenderer;                                  // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         Level;                                             // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3259[0x4];                                     // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelFloor                            FloorData;                                         // 0x0290(0x0068)(Edit, BlueprintVisible, ExposeOnSpawn)
	TMap<int32, class UCanvasPanel*>              Lines;                                             // 0x02F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<int32, class UW_PreMission_Tablet_MapMarker_C*> Markers;                                           // 0x0348(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UW_PreMission_PlanningMap_C*            PlanningMapWidget;                                 // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnMarkerDrawn;                                     // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnLineDrawn;                                       // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FEntryPoint>                    LevelEntryPoints;                                  // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnMarkerRotated;                                   // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnMarkerDrawn__DelegateSignature(int32 MarkerID, class UW_PreMission_Tablet_MapMarker_C* Marker);
	void OnLineDrawn__DelegateSignature(int32 LineID, class UCanvasPanel* LineCanvas);
	void OnMarkerRotated__DelegateSignature(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, int32 FloorLevel, float Rotation);
	void ExecuteUbergraph_W_PreMission_PlanningMap_Level(int32 EntryPoint);
	void Construct();
	void GetLineLength(const struct FVector2D& PointA, const struct FVector2D& PointB, float* Length, const struct FVector2D& CallFunc_GetWidgetSize_Absolute_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DVector2D_ReturnValue, const struct FVector2D& CallFunc_Multiply_Vector2DVector2D_ReturnValue_1, float CallFunc_Distance2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);
	void GetLineAngle(const struct FVector2D& PointA, const struct FVector2D& PointB, float PointA_X, float PointA_Y, float PointB_X, float PointB_Y, float* Angle, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X_1, float CallFunc_BreakVector2D_Y_1, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue_1, const struct FRotator& CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw);
	void DrawLine(int32 LineID, const struct FPlanningLine& LineData, class AReadyOrNotPlayerState* LineOwner, class UCanvasPanel* Canvas, class UW_PreMission_PlanningMap_Line_C* Line, bool LastNode, float EndOffset, float StartOffset, const struct FVector2D& PreviousPoint, const struct FVector2D& Coordinates, class UWidget* NodeWidget, bool FirstNode, class UW_PreMission_PlanningMap_Line_C* CallFunc_Create_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_LastIndex_ReturnValue, class AReadyOrNotPlayerState* CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue, class UW_OfficerMarker_C* CallFunc_Create_ReturnValue_1, class UW_PreMission_Tablet_PlayerNode_C* CallFunc_Create_ReturnValue_2, int32 Temp_int_Array_Index_Variable, const struct FVector2D& CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue_1, const struct FLinearColor& CallFunc_GetPlayerTeamColor_LinearColor, const struct FSlateColor& CallFunc_GetPlayerTeamColor_SlateColor, TDelegate<void(class UW_OfficerMarker_C* TriggeringMarker)> K2Node_CreateDelegate_OutputDelegate, class UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, const struct FAnchors& K2Node_MakeStruct_Anchors, int32 Temp_int_Loop_Counter_Variable, const struct FAnchorData& K2Node_MakeStruct_AnchorData, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetLineAngle_Angle, float CallFunc_GetLineLength_Length, const struct FAnchors& K2Node_MakeStruct_Anchors_1, const struct FAnchorData& K2Node_MakeStruct_AnchorData_1, class UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue_1, class UCanvasPanel* CallFunc_SpawnObject_ReturnValue, const struct FAnchors& K2Node_MakeStruct_Anchors_2, class UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue_2, const struct FAnchorData& K2Node_MakeStruct_AnchorData_2);
	void EraseLine(int32 LineID, bool CallFunc_Map_Remove_ReturnValue, class UCanvasPanel* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
	void DrawMarker(int32& MarkerID, struct FPlanningMarker& MarkerData, class UW_PreMission_Tablet_MapMarker_C* Marker, class UW_PreMission_Tablet_MapMarker_C* CallFunc_Create_ReturnValue, const struct FAnchors& K2Node_MakeStruct_Anchors, class UCanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, TDelegate<void(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, float Rotation)> K2Node_CreateDelegate_OutputDelegate);
	void LineStartNodeSelected(class UW_OfficerMarker_C* OfficerMarker);
	void MarkerRotated(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, float Rotation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_PreMission_PlanningMap_Level_C">();
	}
	static class UW_PreMission_PlanningMap_Level_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_PreMission_PlanningMap_Level_C>();
	}
};
static_assert(alignof(UW_PreMission_PlanningMap_Level_C) == 0x000008, "Wrong alignment on UW_PreMission_PlanningMap_Level_C");
static_assert(sizeof(UW_PreMission_PlanningMap_Level_C) == 0x0003E0, "Wrong size on UW_PreMission_PlanningMap_Level_C");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, UberGraphFrame) == 0x000260, "Member 'UW_PreMission_PlanningMap_Level_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, Img_Map) == 0x000268, "Member 'UW_PreMission_PlanningMap_Level_C::Img_Map' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, MainCanvas) == 0x000270, "Member 'UW_PreMission_PlanningMap_Level_C::MainCanvas' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, MarkerCanvas) == 0x000278, "Member 'UW_PreMission_PlanningMap_Level_C::MarkerCanvas' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, PlanLineRenderer) == 0x000280, "Member 'UW_PreMission_PlanningMap_Level_C::PlanLineRenderer' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, Level) == 0x000288, "Member 'UW_PreMission_PlanningMap_Level_C::Level' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, FloorData) == 0x000290, "Member 'UW_PreMission_PlanningMap_Level_C::FloorData' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, Lines) == 0x0002F8, "Member 'UW_PreMission_PlanningMap_Level_C::Lines' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, Markers) == 0x000348, "Member 'UW_PreMission_PlanningMap_Level_C::Markers' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, PlanningMapWidget) == 0x000398, "Member 'UW_PreMission_PlanningMap_Level_C::PlanningMapWidget' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, OnMarkerDrawn) == 0x0003A0, "Member 'UW_PreMission_PlanningMap_Level_C::OnMarkerDrawn' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, OnLineDrawn) == 0x0003B0, "Member 'UW_PreMission_PlanningMap_Level_C::OnLineDrawn' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, LevelEntryPoints) == 0x0003C0, "Member 'UW_PreMission_PlanningMap_Level_C::LevelEntryPoints' has a wrong offset!");
static_assert(offsetof(UW_PreMission_PlanningMap_Level_C, OnMarkerRotated) == 0x0003D0, "Member 'UW_PreMission_PlanningMap_Level_C::OnMarkerRotated' has a wrong offset!");

}

