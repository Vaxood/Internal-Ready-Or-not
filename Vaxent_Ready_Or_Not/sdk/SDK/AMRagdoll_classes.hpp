#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AMRagdoll

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class AMRagdoll.AnimNotify_EnableRagdoll
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_EnableRagdoll final  : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_EnableRagdoll">();
	}
	static class UAnimNotify_EnableRagdoll* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_EnableRagdoll>();
	}
};
static_assert(alignof(UAnimNotify_EnableRagdoll) == 0x000008, "Wrong alignment on UAnimNotify_EnableRagdoll");
static_assert(sizeof(UAnimNotify_EnableRagdoll) == 0x000038, "Wrong size on UAnimNotify_EnableRagdoll");

// Class AMRagdoll.AnimNotify_EnableRagdollChecks
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_EnableRagdollChecks final  : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_EnableRagdollChecks">();
	}
	static class UAnimNotify_EnableRagdollChecks* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_EnableRagdollChecks>();
	}
};
static_assert(alignof(UAnimNotify_EnableRagdollChecks) == 0x000008, "Wrong alignment on UAnimNotify_EnableRagdollChecks");
static_assert(sizeof(UAnimNotify_EnableRagdollChecks) == 0x000038, "Wrong size on UAnimNotify_EnableRagdollChecks");

// Class AMRagdoll.AnimNotify_TogglePhysAnim
// 0x0010 (0x0048 - 0x0038)
class UAnimNotify_TogglePhysAnim final  : public UAnimNotify
{
public:
	bool                                          bEnablePhysicalAnimation;                          // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B36[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PhysicalAnimProfileName;                           // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopCurrentMontage;                               // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B37[0x3];                                     // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_TogglePhysAnim">();
	}
	static class UAnimNotify_TogglePhysAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_TogglePhysAnim>();
	}
};
static_assert(alignof(UAnimNotify_TogglePhysAnim) == 0x000008, "Wrong alignment on UAnimNotify_TogglePhysAnim");
static_assert(sizeof(UAnimNotify_TogglePhysAnim) == 0x000048, "Wrong size on UAnimNotify_TogglePhysAnim");
static_assert(offsetof(UAnimNotify_TogglePhysAnim, bEnablePhysicalAnimation) == 0x000038, "Member 'UAnimNotify_TogglePhysAnim::bEnablePhysicalAnimation' has a wrong offset!");
static_assert(offsetof(UAnimNotify_TogglePhysAnim, PhysicalAnimProfileName) == 0x00003C, "Member 'UAnimNotify_TogglePhysAnim::PhysicalAnimProfileName' has a wrong offset!");
static_assert(offsetof(UAnimNotify_TogglePhysAnim, bStopCurrentMontage) == 0x000044, "Member 'UAnimNotify_TogglePhysAnim::bStopCurrentMontage' has a wrong offset!");

// Class AMRagdoll.RagdollComponent
// 0x0098 (0x0148 - 0x00B0)
class URagdollComponent final  : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnRagdollStart;                                    // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRagdollBlendStop;                                // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRagdollPhysBodyHit;                              // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B38[0x2];                                     // 0x00E0(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStartRunningRagdollChecks;                        // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePhysBodyCollision;                             // 0x00E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCapsuleCollision;                              // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFreezeRagdoll;                                    // 0x00E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendingAnim2Ragdoll;                             // 0x00E6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B39[0x19];                                    // 0x00E7(0x0019)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCapsuleCollisionRagdolled;                        // 0x0100(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPhysBodyCollisionRagdolled;                       // 0x0101(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapsuleFloorAngleRagdolled;                       // 0x0102(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapsuleInAirRagdolled;                            // 0x0103(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapsuleCollisionRagdollTriggerThreshold;           // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleFloorAngleRagdollTriggerThreshold;          // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleFloorAngleRagdollDelayThreshold;            // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleInAirRagdollDelayThreshold;                 // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollVelocityFreezeThreshold;                    // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollBlendTime;                                  // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollFreezeDelay;                                // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRagdollIsFrozen;                                  // 0x0120(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B3A[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PelvisBoneName;                                    // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeadBoneName;                                      // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RagdollCollisionProfileName;                       // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalAnimationComponent*            PhysicalAnimationComponent;                        // 0x0140(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnCapsuleHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void OnPhysBodyHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void OnRagdollEvent__DelegateSignature(class URagdollComponent* Component);
	void OnRagdollHitEvent__DelegateSignature(class URagdollComponent* Component, const struct FVector& Impulse, struct FHitResult& Hit);
	void RequestAnim2RagdollBlend(float Duration);

	bool IsInRagdoll() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RagdollComponent">();
	}
	static class URagdollComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URagdollComponent>();
	}
};
static_assert(alignof(URagdollComponent) == 0x000008, "Wrong alignment on URagdollComponent");
static_assert(sizeof(URagdollComponent) == 0x000148, "Wrong size on URagdollComponent");
static_assert(offsetof(URagdollComponent, OnRagdollStart) == 0x0000B0, "Member 'URagdollComponent::OnRagdollStart' has a wrong offset!");
static_assert(offsetof(URagdollComponent, OnRagdollBlendStop) == 0x0000C0, "Member 'URagdollComponent::OnRagdollBlendStop' has a wrong offset!");
static_assert(offsetof(URagdollComponent, OnRagdollPhysBodyHit) == 0x0000D0, "Member 'URagdollComponent::OnRagdollPhysBodyHit' has a wrong offset!");
static_assert(offsetof(URagdollComponent, bStartRunningRagdollChecks) == 0x0000E2, "Member 'URagdollComponent::bStartRunningRagdollChecks' has a wrong offset!");
static_assert(offsetof(URagdollComponent, bUsePhysBodyCollision) == 0x0000E3, "Member 'URagdollComponent::bUsePhysBodyCollision' has a wrong offset!");
static_assert(offsetof(URagdollComponent, bUseCapsuleCollision) == 0x0000E4, "Member 'URagdollComponent::bUseCapsuleCollision' has a wrong offset!");
static_assert(offsetof(URagdollComponent, bFreezeRagdoll) == 0x0000E5, "Member 'URagdollComponent::bFreezeRagdoll' has a wrong offset!");
static_assert(offsetof(URagdollComponent, bBlendingAnim2Ragdoll) == 0x0000E6, "Member 'URagdollComponent::bBlendingAnim2Ragdoll' has a wrong offset!");
static_assert(offsetof(URagdollComponent, bCapsuleCollisionRagdolled) == 0x000100, "Member 'URagdollComponent::bCapsuleCollisionRagdolled' has a wrong offset!");
static_assert(offsetof(URagdollComponent, bPhysBodyCollisionRagdolled) == 0x000101, "Member 'URagdollComponent::bPhysBodyCollisionRagdolled' has a wrong offset!");
static_assert(offsetof(URagdollComponent, bCapsuleFloorAngleRagdolled) == 0x000102, "Member 'URagdollComponent::bCapsuleFloorAngleRagdolled' has a wrong offset!");
static_assert(offsetof(URagdollComponent, bCapsuleInAirRagdolled) == 0x000103, "Member 'URagdollComponent::bCapsuleInAirRagdolled' has a wrong offset!");
static_assert(offsetof(URagdollComponent, CapsuleCollisionRagdollTriggerThreshold) == 0x000104, "Member 'URagdollComponent::CapsuleCollisionRagdollTriggerThreshold' has a wrong offset!");
static_assert(offsetof(URagdollComponent, CapsuleFloorAngleRagdollTriggerThreshold) == 0x000108, "Member 'URagdollComponent::CapsuleFloorAngleRagdollTriggerThreshold' has a wrong offset!");
static_assert(offsetof(URagdollComponent, CapsuleFloorAngleRagdollDelayThreshold) == 0x00010C, "Member 'URagdollComponent::CapsuleFloorAngleRagdollDelayThreshold' has a wrong offset!");
static_assert(offsetof(URagdollComponent, CapsuleInAirRagdollDelayThreshold) == 0x000110, "Member 'URagdollComponent::CapsuleInAirRagdollDelayThreshold' has a wrong offset!");
static_assert(offsetof(URagdollComponent, RagdollVelocityFreezeThreshold) == 0x000114, "Member 'URagdollComponent::RagdollVelocityFreezeThreshold' has a wrong offset!");
static_assert(offsetof(URagdollComponent, RagdollBlendTime) == 0x000118, "Member 'URagdollComponent::RagdollBlendTime' has a wrong offset!");
static_assert(offsetof(URagdollComponent, RagdollFreezeDelay) == 0x00011C, "Member 'URagdollComponent::RagdollFreezeDelay' has a wrong offset!");
static_assert(offsetof(URagdollComponent, bRagdollIsFrozen) == 0x000120, "Member 'URagdollComponent::bRagdollIsFrozen' has a wrong offset!");
static_assert(offsetof(URagdollComponent, PelvisBoneName) == 0x000128, "Member 'URagdollComponent::PelvisBoneName' has a wrong offset!");
static_assert(offsetof(URagdollComponent, HeadBoneName) == 0x000130, "Member 'URagdollComponent::HeadBoneName' has a wrong offset!");
static_assert(offsetof(URagdollComponent, RagdollCollisionProfileName) == 0x000138, "Member 'URagdollComponent::RagdollCollisionProfileName' has a wrong offset!");
static_assert(offsetof(URagdollComponent, PhysicalAnimationComponent) == 0x000140, "Member 'URagdollComponent::PhysicalAnimationComponent' has a wrong offset!");

}

