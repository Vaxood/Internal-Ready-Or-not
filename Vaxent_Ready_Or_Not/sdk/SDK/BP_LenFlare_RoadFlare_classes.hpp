#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LenFlare_RoadFlare

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LenFlare_RoadFlare.BP_LenFlare_RoadFlare_C
// 0x02F8 (0x0518 - 0x0220)
class ABP_LenFlare_RoadFlare_C final  : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMaterialBillboardComponent*            LensFlare;                                         // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4178[0x4];                                     // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               FlareDynamicMI;                                    // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     FlareMat;                                          // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlobalBrightness;                                  // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GhostsBrightness;                                  // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFadeDistance;                                   // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4179[0x3];                                     // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeDistance;                                      // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDistanceBloom;                                  // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_417A[0x3];                                     // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IncreasingBloomByDistance;                         // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           GlobalColor;                                       // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeOutSpeed;                                      // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeInSpeed;                                       // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseSizeY;                                         // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseSizeX;                                         // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlickerIntensity;                                  // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlickerTime;                                       // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Luminosity;                                        // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_417B[0x4];                                     // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Actors_for_ignore_lens_flare_;                     // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	float                                         HaloBrightness;                                    // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HaloContrast;                                      // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HaloOpacity;                                       // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HaloInnerRadius;                                   // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HaloOuterColor;                                    // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HaloInnerColor;                                    // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               HaloTexture;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CentreFlareBrightness;                             // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CentreFlareContrast;                               // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CentreFlareColor;                                  // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CentreFlareTexture;                                // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainFlareBrightness;                               // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainFlareContrast;                                 // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainFlareInnerRadius;                              // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainFlareSize;                                     // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MainLensInnerColor;                                // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MainOuterColor;                                    // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MainFlare;                                         // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HaloTextureSize;                                   // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CentreFlareSize;                                   // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectionBrightness;                              // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectionContrast;                                // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ReflectionColor;                                   // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ReflectionCentreTexture;                           // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectionSize;                                    // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareOpposite1_Brightness;                         // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareOpposite1_Contrast;                           // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareOppositeSize01;                               // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FlareOppositeColor01;                              // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FlareOpposite01;                                   // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareOpposite2_Brightness;                         // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareOpposite2_Contrast;                           // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareOppositeSize02;                               // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_417C[0x4];                                     // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               FlareOpposite02;                                   // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FlareOppositeColor02;                              // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OppositeFlaresAxisProjection;                      // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareFrontBrightness01;                            // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareFrontContrast01;                              // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareFrontSize01;                                  // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareFrontProximityCentre01;                       // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FlareFrontColor01;                                 // 0x03C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_417D[0x4];                                     // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               FlareFront01;                                      // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareFrontBrightness02;                            // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareFrontContrast02;                              // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareFrontSize02;                                  // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareFrontProximityCentre02;                       // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FlareFrontColor02;                                 // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FlareFront02;                                      // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FrontFlaresAxisProjection;                         // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectedFlareBrightness01;                        // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectedFlareContrast01;                          // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectedFlareSize01;                              // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectedFlareProximityCentre01;                   // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ReflectedFlareColor01;                             // 0x041C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_417E[0x4];                                     // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ReflectedFlare01;                                  // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectedFlareBrightness02;                        // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectedFlareContrast02;                          // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectedFlareSize02;                              // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectedFlareProximityCentre02;                   // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ReflectedFlareColor02;                             // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ReflectedFlare02;                                  // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinorFlareBrightness01;                            // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinorFlareContrast01;                              // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinorFlareSize01;                                  // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinorFlareSizeRandom01;                            // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinorFlareProximityCentre01;                       // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MinorFlareColor01;                                 // 0x0474(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_417F[0x4];                                     // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               MinorFlare01;                                      // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinorFlareBrightness02;                            // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinorFlareContrast02;                              // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinorFlareSize02;                                  // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinorFlareSizeRandom02;                            // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinorFlareProximityCentre02;                       // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MinorFlareColor02;                                 // 0x04A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4180[0x4];                                     // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               MinorFlare02;                                      // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdditionalFlareBrightness;                         // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdditionalFlareContrast;                           // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdditionalFlareSize;                               // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AdditionalFlareColor;                              // 0x04CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4181[0x4];                                     // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               AdditionalFlare;                                   // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IrisBrightness;                                    // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IrisContrast;                                      // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IrisSize;                                          // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IrisProximityCentre;                               // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           IrisColor;                                         // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Iris;                                              // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_LensFlare;                                     // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LenFlare_RoadFlare(int32 EntryPoint, int32 Temp_int_Array_Index_Variable, float K2Node_Event_DeltaSeconds, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, class APlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, class USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue_1, const struct FHitResult& CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, float CallFunc_FInterpTo_ReturnValue, float CallFunc_FInterpTo_ReturnValue_1, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue_2, class APlayerController* CallFunc_GetPlayerController_ReturnValue, const struct FVector2D& CallFunc_GetViewportSize_ReturnValue, const struct FVector2D& CallFunc_ProjectWorldToScreen_ScreenPosition, bool CallFunc_ProjectWorldToScreen_ReturnValue, const struct FVector2D& CallFunc_GetViewportSize_ReturnValue_1, const struct FVector2D& CallFunc_Divide_Vector2DVector2D_ReturnValue, const struct FVector2D& CallFunc_Divide_Vector2DVector2D_ReturnValue_1, const struct FVector& CallFunc_Conv_Vector2DToVector_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, const struct FVector2D& CallFunc_GetViewportSize_ReturnValue_2, const struct FVector2D& CallFunc_Divide_Vector2DVector2D_ReturnValue_2, const struct FVector& CallFunc_Conv_Vector2DToVector_ReturnValue_1, int32 Temp_int_Loop_Counter_Variable, const struct FRotator& CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int32 CallFunc_Add_IntInt_ReturnValue, class ACharacter* CallFunc_GetPlayerCharacter_ReturnValue, class APlayerCharacter* K2Node_DynamicCast_AsPlayer_Character, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_AddUnique_ReturnValue, TArray<class ABaseItem*>& CallFunc_GetInventoryItems_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, class ABaseItem* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Array_AddUnique_ReturnValue_1);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript(const struct FMaterialSpriteElement& K2Node_MakeStruct_MaterialSpriteElement, TArray<struct FMaterialSpriteElement>& K2Node_MakeArray_Array);
	void InitFlare(float CallFunc_Conv_BoolToFloat_ReturnValue, float CallFunc_Conv_BoolToFloat_ReturnValue_1, class UMaterialInterface* CallFunc_GetMaterial_ReturnValue, class UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, class UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue_1);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LenFlare_RoadFlare_C">();
	}
	static class ABP_LenFlare_RoadFlare_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LenFlare_RoadFlare_C>();
	}
};
static_assert(alignof(ABP_LenFlare_RoadFlare_C) == 0x000008, "Wrong alignment on ABP_LenFlare_RoadFlare_C");
static_assert(sizeof(ABP_LenFlare_RoadFlare_C) == 0x000518, "Wrong size on ABP_LenFlare_RoadFlare_C");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, UberGraphFrame) == 0x000220, "Member 'ABP_LenFlare_RoadFlare_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, LensFlare) == 0x000228, "Member 'ABP_LenFlare_RoadFlare_C::LensFlare' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, Scene) == 0x000230, "Member 'ABP_LenFlare_RoadFlare_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, DeltaTime) == 0x000238, "Member 'ABP_LenFlare_RoadFlare_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareDynamicMI) == 0x000240, "Member 'ABP_LenFlare_RoadFlare_C::FlareDynamicMI' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareMat) == 0x000248, "Member 'ABP_LenFlare_RoadFlare_C::FlareMat' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, GlobalBrightness) == 0x000250, "Member 'ABP_LenFlare_RoadFlare_C::GlobalBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, GhostsBrightness) == 0x000254, "Member 'ABP_LenFlare_RoadFlare_C::GhostsBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, UseFadeDistance) == 0x000258, "Member 'ABP_LenFlare_RoadFlare_C::UseFadeDistance' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FadeDistance) == 0x00025C, "Member 'ABP_LenFlare_RoadFlare_C::FadeDistance' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, UseDistanceBloom) == 0x000260, "Member 'ABP_LenFlare_RoadFlare_C::UseDistanceBloom' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, IncreasingBloomByDistance) == 0x000264, "Member 'ABP_LenFlare_RoadFlare_C::IncreasingBloomByDistance' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, GlobalColor) == 0x000268, "Member 'ABP_LenFlare_RoadFlare_C::GlobalColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FadeOutSpeed) == 0x000278, "Member 'ABP_LenFlare_RoadFlare_C::FadeOutSpeed' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FadeInSpeed) == 0x00027C, "Member 'ABP_LenFlare_RoadFlare_C::FadeInSpeed' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, BaseSizeY) == 0x000280, "Member 'ABP_LenFlare_RoadFlare_C::BaseSizeY' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, BaseSizeX) == 0x000284, "Member 'ABP_LenFlare_RoadFlare_C::BaseSizeX' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlickerIntensity) == 0x000288, "Member 'ABP_LenFlare_RoadFlare_C::FlickerIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlickerTime) == 0x00028C, "Member 'ABP_LenFlare_RoadFlare_C::FlickerTime' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, Luminosity) == 0x000290, "Member 'ABP_LenFlare_RoadFlare_C::Luminosity' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, Actors_for_ignore_lens_flare_) == 0x000298, "Member 'ABP_LenFlare_RoadFlare_C::Actors_for_ignore_lens_flare_' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloBrightness) == 0x0002A8, "Member 'ABP_LenFlare_RoadFlare_C::HaloBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloContrast) == 0x0002AC, "Member 'ABP_LenFlare_RoadFlare_C::HaloContrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloOpacity) == 0x0002B0, "Member 'ABP_LenFlare_RoadFlare_C::HaloOpacity' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloInnerRadius) == 0x0002B4, "Member 'ABP_LenFlare_RoadFlare_C::HaloInnerRadius' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloOuterColor) == 0x0002B8, "Member 'ABP_LenFlare_RoadFlare_C::HaloOuterColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloInnerColor) == 0x0002C8, "Member 'ABP_LenFlare_RoadFlare_C::HaloInnerColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloTexture) == 0x0002D8, "Member 'ABP_LenFlare_RoadFlare_C::HaloTexture' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, CentreFlareBrightness) == 0x0002E0, "Member 'ABP_LenFlare_RoadFlare_C::CentreFlareBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, CentreFlareContrast) == 0x0002E4, "Member 'ABP_LenFlare_RoadFlare_C::CentreFlareContrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, CentreFlareColor) == 0x0002E8, "Member 'ABP_LenFlare_RoadFlare_C::CentreFlareColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, CentreFlareTexture) == 0x0002F8, "Member 'ABP_LenFlare_RoadFlare_C::CentreFlareTexture' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainFlareBrightness) == 0x000300, "Member 'ABP_LenFlare_RoadFlare_C::MainFlareBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainFlareContrast) == 0x000304, "Member 'ABP_LenFlare_RoadFlare_C::MainFlareContrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainFlareInnerRadius) == 0x000308, "Member 'ABP_LenFlare_RoadFlare_C::MainFlareInnerRadius' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainFlareSize) == 0x00030C, "Member 'ABP_LenFlare_RoadFlare_C::MainFlareSize' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainLensInnerColor) == 0x000310, "Member 'ABP_LenFlare_RoadFlare_C::MainLensInnerColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainOuterColor) == 0x000320, "Member 'ABP_LenFlare_RoadFlare_C::MainOuterColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainFlare) == 0x000330, "Member 'ABP_LenFlare_RoadFlare_C::MainFlare' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloTextureSize) == 0x000338, "Member 'ABP_LenFlare_RoadFlare_C::HaloTextureSize' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, CentreFlareSize) == 0x00033C, "Member 'ABP_LenFlare_RoadFlare_C::CentreFlareSize' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectionBrightness) == 0x000340, "Member 'ABP_LenFlare_RoadFlare_C::ReflectionBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectionContrast) == 0x000344, "Member 'ABP_LenFlare_RoadFlare_C::ReflectionContrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectionColor) == 0x000348, "Member 'ABP_LenFlare_RoadFlare_C::ReflectionColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectionCentreTexture) == 0x000358, "Member 'ABP_LenFlare_RoadFlare_C::ReflectionCentreTexture' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectionSize) == 0x000360, "Member 'ABP_LenFlare_RoadFlare_C::ReflectionSize' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOpposite1_Brightness) == 0x000364, "Member 'ABP_LenFlare_RoadFlare_C::FlareOpposite1_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOpposite1_Contrast) == 0x000368, "Member 'ABP_LenFlare_RoadFlare_C::FlareOpposite1_Contrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOppositeSize01) == 0x00036C, "Member 'ABP_LenFlare_RoadFlare_C::FlareOppositeSize01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOppositeColor01) == 0x000370, "Member 'ABP_LenFlare_RoadFlare_C::FlareOppositeColor01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOpposite01) == 0x000380, "Member 'ABP_LenFlare_RoadFlare_C::FlareOpposite01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOpposite2_Brightness) == 0x000388, "Member 'ABP_LenFlare_RoadFlare_C::FlareOpposite2_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOpposite2_Contrast) == 0x00038C, "Member 'ABP_LenFlare_RoadFlare_C::FlareOpposite2_Contrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOppositeSize02) == 0x000390, "Member 'ABP_LenFlare_RoadFlare_C::FlareOppositeSize02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOpposite02) == 0x000398, "Member 'ABP_LenFlare_RoadFlare_C::FlareOpposite02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOppositeColor02) == 0x0003A0, "Member 'ABP_LenFlare_RoadFlare_C::FlareOppositeColor02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, OppositeFlaresAxisProjection) == 0x0003B0, "Member 'ABP_LenFlare_RoadFlare_C::OppositeFlaresAxisProjection' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontBrightness01) == 0x0003B4, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontBrightness01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontContrast01) == 0x0003B8, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontContrast01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontSize01) == 0x0003BC, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontSize01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontProximityCentre01) == 0x0003C0, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontProximityCentre01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontColor01) == 0x0003C4, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontColor01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFront01) == 0x0003D8, "Member 'ABP_LenFlare_RoadFlare_C::FlareFront01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontBrightness02) == 0x0003E0, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontBrightness02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontContrast02) == 0x0003E4, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontContrast02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontSize02) == 0x0003E8, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontSize02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontProximityCentre02) == 0x0003EC, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontProximityCentre02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontColor02) == 0x0003F0, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontColor02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFront02) == 0x000400, "Member 'ABP_LenFlare_RoadFlare_C::FlareFront02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FrontFlaresAxisProjection) == 0x000408, "Member 'ABP_LenFlare_RoadFlare_C::FrontFlaresAxisProjection' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareBrightness01) == 0x00040C, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareBrightness01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareContrast01) == 0x000410, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareContrast01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareSize01) == 0x000414, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareSize01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareProximityCentre01) == 0x000418, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareProximityCentre01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareColor01) == 0x00041C, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareColor01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlare01) == 0x000430, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlare01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareBrightness02) == 0x000438, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareBrightness02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareContrast02) == 0x00043C, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareContrast02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareSize02) == 0x000440, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareSize02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareProximityCentre02) == 0x000444, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareProximityCentre02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareColor02) == 0x000448, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareColor02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlare02) == 0x000458, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlare02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareBrightness01) == 0x000460, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareBrightness01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareContrast01) == 0x000464, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareContrast01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareSize01) == 0x000468, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareSize01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareSizeRandom01) == 0x00046C, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareSizeRandom01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareProximityCentre01) == 0x000470, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareProximityCentre01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareColor01) == 0x000474, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareColor01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlare01) == 0x000488, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlare01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareBrightness02) == 0x000490, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareBrightness02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareContrast02) == 0x000494, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareContrast02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareSize02) == 0x000498, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareSize02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareSizeRandom02) == 0x00049C, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareSizeRandom02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareProximityCentre02) == 0x0004A0, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareProximityCentre02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareColor02) == 0x0004A4, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareColor02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlare02) == 0x0004B8, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlare02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, AdditionalFlareBrightness) == 0x0004C0, "Member 'ABP_LenFlare_RoadFlare_C::AdditionalFlareBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, AdditionalFlareContrast) == 0x0004C4, "Member 'ABP_LenFlare_RoadFlare_C::AdditionalFlareContrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, AdditionalFlareSize) == 0x0004C8, "Member 'ABP_LenFlare_RoadFlare_C::AdditionalFlareSize' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, AdditionalFlareColor) == 0x0004CC, "Member 'ABP_LenFlare_RoadFlare_C::AdditionalFlareColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, AdditionalFlare) == 0x0004E0, "Member 'ABP_LenFlare_RoadFlare_C::AdditionalFlare' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, IrisBrightness) == 0x0004E8, "Member 'ABP_LenFlare_RoadFlare_C::IrisBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, IrisContrast) == 0x0004EC, "Member 'ABP_LenFlare_RoadFlare_C::IrisContrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, IrisSize) == 0x0004F0, "Member 'ABP_LenFlare_RoadFlare_C::IrisSize' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, IrisProximityCentre) == 0x0004F4, "Member 'ABP_LenFlare_RoadFlare_C::IrisProximityCentre' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, IrisColor) == 0x0004F8, "Member 'ABP_LenFlare_RoadFlare_C::IrisColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, Iris) == 0x000508, "Member 'ABP_LenFlare_RoadFlare_C::Iris' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, DMI_LensFlare) == 0x000510, "Member 'ABP_LenFlare_RoadFlare_C::DMI_LensFlare' has a wrong offset!");

}

