#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RosterReview_EventCard

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_RosterReview_EventCard.W_RosterReview_EventCard_C.ExecuteUbergraph_W_RosterReview_EventCard
// 0x0370 (0x0370 - 0x0000)
struct W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterCharacterState                         Temp_byte_Variable_3;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4271[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0050(0x0018)()
	ERosterRemovalReason                          Temp_byte_Variable_4;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4272[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_3;                              // 0x0070(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0088(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A0(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00B8(0x0018)()
	ERosterCharacterState                         Temp_byte_Variable_5;                              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4273[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_7;                              // 0x00D8(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x00F0(0x0018)()
	ERosterCharacterState                         Temp_byte_Variable_6;                              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x010B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_10;                             // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4274[0x3];                                     // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0110(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0150(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0160(0x0018)()
	class FText                                   CallFunc_StressPercentageAsStatus_StatusText;      // 0x0178(0x0018)()
	struct FSlateColor                            CallFunc_StressPercentageAsStatus_StatusColor;     // 0x0190(0x0028)()
	float                                         K2Node_Event_Delay_1;                              // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Delay;                                // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4275[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4276[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URosterCharacter*                       K2Node_CustomEvent_Character;                      // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4277[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PageName;                             // 0x01E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsGamepad;                            // 0x01ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4278[0x2];                                     // 0x01EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0200(0x0028)()
	class UUMGSequencePlayer*                     CallFunc_CreatePlayAnimationProxyObject_Result;    // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimationPlayCallbackProxy*      CallFunc_CreatePlayAnimationProxyObject_ReturnValue; // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4279[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_CreatePlayAnimationProxyObject_Result_1;  // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimationPlayCallbackProxy*      CallFunc_CreatePlayAnimationProxyObject_ReturnValue_1; // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_427A[0x7];                                     // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_1;       // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0260(0x0010)(ZeroConstructor, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_427B[0x6];                                     // 0x0272(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0278(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_2;                           // 0x02B8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x02D0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0310(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0320(0x0018)()
	class FText                                   K2Node_Select_Default_3;                           // 0x0338(0x0018)()
	class FText                                   K2Node_Select_Default_4;                           // 0x0350(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_5;                           // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard) == 0x000008, "Wrong alignment on W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard");
static_assert(sizeof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard) == 0x000370, "Wrong size on W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, EntryPoint) == 0x000000, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_bool_Variable) == 0x000014, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_byte_Variable) == 0x000015, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_bool_Variable_1) == 0x000016, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_byte_Variable_1) == 0x000017, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_byte_Variable_2) == 0x000018, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_byte_Variable_3) == 0x000019, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_text_Variable) == 0x000020, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_text_Variable_1) == 0x000038, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_text_Variable_2) == 0x000050, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_byte_Variable_4) == 0x000068, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_text_Variable_3) == 0x000070, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_text_Variable_4) == 0x000088, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_text_Variable_5) == 0x0000A0, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_text_Variable_6) == 0x0000B8, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_byte_Variable_5) == 0x0000D0, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_text_Variable_7) == 0x0000D8, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_text_Variable_8) == 0x0000F0, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_byte_Variable_6) == 0x000108, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_byte_Variable_7) == 0x000109, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_byte_Variable_8) == 0x00010A, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_byte_Variable_9) == 0x00010B, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, Temp_byte_Variable_10) == 0x00010C, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_MakeStruct_FormatArgumentData) == 0x000110, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_MakeArray_Array) == 0x000150, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_Format_ReturnValue) == 0x000160, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_StressPercentageAsStatus_StatusText) == 0x000178, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_StressPercentageAsStatus_StatusText' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_StressPercentageAsStatus_StatusColor) == 0x000190, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_StressPercentageAsStatus_StatusColor' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_Event_Delay_1) == 0x0001B8, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_Event_Delay) == 0x0001BC, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_Event_Collapse) == 0x0001C0, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x0001C4, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_PlayAnimationReverse_ReturnValue) == 0x0001C8, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001D0, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_CustomEvent_Character) == 0x0001D8, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_CustomEvent_Character' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_Event_IsDesignTime) == 0x0001E0, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_Event_PageName) == 0x0001E4, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_Select_Default) == 0x0001EC, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_Event_IsGamepad) == 0x0001ED, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0001F0, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_PlayAnimationForward_ReturnValue) == 0x0001F8, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_MakeStruct_SlateColor) == 0x000200, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_CreatePlayAnimationProxyObject_Result) == 0x000228, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_CreatePlayAnimationProxyObject_Result' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_CreatePlayAnimationProxyObject_ReturnValue) == 0x000230, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_CreatePlayAnimationProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_IsValid_ReturnValue) == 0x000238, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_CreatePlayAnimationProxyObject_Result_1) == 0x000240, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_CreatePlayAnimationProxyObject_Result_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_CreatePlayAnimationProxyObject_ReturnValue_1) == 0x000248, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_CreatePlayAnimationProxyObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_IsValid_ReturnValue_1) == 0x000250, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_PlayAnimationReverse_ReturnValue_1) == 0x000258, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_PlayAnimationReverse_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_CreateDelegate_OutputDelegate_1) == 0x000260, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_Select_Default_1) == 0x000270, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_IsValid_ReturnValue_2) == 0x000271, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_MakeStruct_FormatArgumentData_1) == 0x000278, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_Select_Default_2) == 0x0002B8, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_MakeStruct_FormatArgumentData_2) == 0x0002D0, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_MakeArray_Array_1) == 0x000310, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, CallFunc_Format_ReturnValue_1) == 0x000320, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_Select_Default_3) == 0x000338, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_Select_Default_4) == 0x000350, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard, K2Node_Select_Default_5) == 0x000368, "Member 'W_RosterReview_EventCard_C_ExecuteUbergraph_W_RosterReview_EventCard::K2Node_Select_Default_5' has a wrong offset!");

// Function W_RosterReview_EventCard.W_RosterReview_EventCard_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_RosterReview_EventCard_C_SetInputMode final 
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RosterReview_EventCard_C_SetInputMode) == 0x000001, "Wrong alignment on W_RosterReview_EventCard_C_SetInputMode");
static_assert(sizeof(W_RosterReview_EventCard_C_SetInputMode) == 0x000001, "Wrong size on W_RosterReview_EventCard_C_SetInputMode");
static_assert(offsetof(W_RosterReview_EventCard_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_RosterReview_EventCard_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_RosterReview_EventCard.W_RosterReview_EventCard_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_RosterReview_EventCard_C_ChangePage final 
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterReview_EventCard_C_ChangePage) == 0x000004, "Wrong alignment on W_RosterReview_EventCard_C_ChangePage");
static_assert(sizeof(W_RosterReview_EventCard_C_ChangePage) == 0x000008, "Wrong size on W_RosterReview_EventCard_C_ChangePage");
static_assert(offsetof(W_RosterReview_EventCard_C_ChangePage, PageName) == 0x000000, "Member 'W_RosterReview_EventCard_C_ChangePage::PageName' has a wrong offset!");

// Function W_RosterReview_EventCard.W_RosterReview_EventCard_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_RosterReview_EventCard_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RosterReview_EventCard_C_PreConstruct) == 0x000001, "Wrong alignment on W_RosterReview_EventCard_C_PreConstruct");
static_assert(sizeof(W_RosterReview_EventCard_C_PreConstruct) == 0x000001, "Wrong size on W_RosterReview_EventCard_C_PreConstruct");
static_assert(offsetof(W_RosterReview_EventCard_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_RosterReview_EventCard_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_RosterReview_EventCard.W_RosterReview_EventCard_C.SetCharacter
// 0x0008 (0x0008 - 0x0000)
struct W_RosterReview_EventCard_C_SetCharacter final 
{
public:
	class URosterCharacter*                       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterReview_EventCard_C_SetCharacter) == 0x000008, "Wrong alignment on W_RosterReview_EventCard_C_SetCharacter");
static_assert(sizeof(W_RosterReview_EventCard_C_SetCharacter) == 0x000008, "Wrong size on W_RosterReview_EventCard_C_SetCharacter");
static_assert(offsetof(W_RosterReview_EventCard_C_SetCharacter, Character) == 0x000000, "Member 'W_RosterReview_EventCard_C_SetCharacter::Character' has a wrong offset!");

// Function W_RosterReview_EventCard.W_RosterReview_EventCard_C.Hide
// 0x0008 (0x0008 - 0x0000)
struct W_RosterReview_EventCard_C_Hide final 
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RosterReview_EventCard_C_Hide) == 0x000004, "Wrong alignment on W_RosterReview_EventCard_C_Hide");
static_assert(sizeof(W_RosterReview_EventCard_C_Hide) == 0x000008, "Wrong size on W_RosterReview_EventCard_C_Hide");
static_assert(offsetof(W_RosterReview_EventCard_C_Hide, Delay) == 0x000000, "Member 'W_RosterReview_EventCard_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_Hide, Collapse) == 0x000004, "Member 'W_RosterReview_EventCard_C_Hide::Collapse' has a wrong offset!");

// Function W_RosterReview_EventCard.W_RosterReview_EventCard_C.Reveal
// 0x0004 (0x0004 - 0x0000)
struct W_RosterReview_EventCard_C_Reveal final 
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterReview_EventCard_C_Reveal) == 0x000004, "Wrong alignment on W_RosterReview_EventCard_C_Reveal");
static_assert(sizeof(W_RosterReview_EventCard_C_Reveal) == 0x000004, "Wrong size on W_RosterReview_EventCard_C_Reveal");
static_assert(offsetof(W_RosterReview_EventCard_C_Reveal, Delay) == 0x000000, "Member 'W_RosterReview_EventCard_C_Reveal::Delay' has a wrong offset!");

// Function W_RosterReview_EventCard.W_RosterReview_EventCard_C.SetPosition
// 0x0108 (0x0108 - 0x0000)
struct W_RosterReview_EventCard_C_SetPosition final 
{
public:
	ERosterSquadPosition                          Param_Position;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterSquadPosition                          Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_427C[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_427D[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterSquadPosition                          Temp_byte_Variable_3;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_427E[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_5;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_8;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterSquadPosition                          Temp_byte_Variable_4;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_5;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_6;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_7;                              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_8;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_9;                              // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterSquadPosition                          Temp_byte_Variable_10;                             // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_427F[0x1];                                     // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0040(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0058(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0070(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0088(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x00A0(0x0018)()
	float                                         K2Node_Select_Default_1;                           // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          K2Node_Select_Default_3;                           // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4280[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_4;                           // 0x00D8(0x0018)()
	struct FLinearColor                           CallFunc_SquadPositionToColor_OutColor;            // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterReview_EventCard_C_SetPosition) == 0x000008, "Wrong alignment on W_RosterReview_EventCard_C_SetPosition");
static_assert(sizeof(W_RosterReview_EventCard_C_SetPosition) == 0x000108, "Wrong size on W_RosterReview_EventCard_C_SetPosition");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Param_Position) == 0x000000, "Member 'W_RosterReview_EventCard_C_SetPosition::Param_Position' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_bool_Variable) == 0x000001, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'W_RosterReview_EventCard_C_SetPosition::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_byte_Variable) == 0x000003, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_byte_Variable_1) == 0x000004, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_byte_Variable_2) == 0x000005, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_float_Variable) == 0x000008, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, K2Node_Select_Default) == 0x00000C, "Member 'W_RosterReview_EventCard_C_SetPosition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_float_Variable_1) == 0x000010, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_float_Variable_2) == 0x000014, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_float_Variable_3) == 0x000018, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_float_Variable_4) == 0x00001C, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_byte_Variable_3) == 0x000020, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_float_Variable_5) == 0x000024, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_float_Variable_6) == 0x000028, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_float_Variable_7) == 0x00002C, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_float_Variable_8) == 0x000030, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_float_Variable_9) == 0x000034, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_byte_Variable_4) == 0x000038, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_byte_Variable_5) == 0x000039, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_byte_Variable_6) == 0x00003A, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_byte_Variable_7) == 0x00003B, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_byte_Variable_8) == 0x00003C, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_byte_Variable_9) == 0x00003D, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_byte_Variable_10) == 0x00003E, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_text_Variable) == 0x000040, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_text_Variable_1) == 0x000058, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_text_Variable_2) == 0x000070, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_text_Variable_3) == 0x000088, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, Temp_text_Variable_4) == 0x0000A0, "Member 'W_RosterReview_EventCard_C_SetPosition::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, K2Node_Select_Default_1) == 0x0000B8, "Member 'W_RosterReview_EventCard_C_SetPosition::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, K2Node_Select_Default_2) == 0x0000BC, "Member 'W_RosterReview_EventCard_C_SetPosition::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, CallFunc_MakeVector2D_ReturnValue) == 0x0000C0, "Member 'W_RosterReview_EventCard_C_SetPosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, CallFunc_MakeVector2D_ReturnValue_1) == 0x0000C8, "Member 'W_RosterReview_EventCard_C_SetPosition::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, K2Node_Select_Default_3) == 0x0000D0, "Member 'W_RosterReview_EventCard_C_SetPosition::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, K2Node_Select_Default_4) == 0x0000D8, "Member 'W_RosterReview_EventCard_C_SetPosition::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, CallFunc_SquadPositionToColor_OutColor) == 0x0000F0, "Member 'W_RosterReview_EventCard_C_SetPosition::CallFunc_SquadPositionToColor_OutColor' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_SetPosition, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000100, "Member 'W_RosterReview_EventCard_C_SetPosition::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");

// Function W_RosterReview_EventCard.W_RosterReview_EventCard_C.UpdateStyleByState
// 0x03E8 (0x03E8 - 0x0000)
struct W_RosterReview_EventCard_C_UpdateStyleByState final 
{
public:
	ERosterCharacterState                         State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterCharacterState                         Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4281[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0050(0x0018)()
	ERosterCharacterState                         Temp_byte_Variable_2;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4282[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_4;                              // 0x0070(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x0088(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00A0(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00B8(0x0018)()
	ERosterCharacterState                         Temp_byte_Variable_3;                              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4283[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x00D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x00E4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterCharacterState                         Temp_byte_Variable_4;                              // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4284[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERosterCharacterState                         Temp_byte_Variable_5;                              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x012B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4285[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0130(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0170(0x0010)(ReferenceParm)
	class FText                                   CallFunc_StressPercentageAsStatus_StatusText;      // 0x0180(0x0018)()
	struct FSlateColor                            CallFunc_StressPercentageAsStatus_StatusColor;     // 0x0198(0x0028)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01C0(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x01D8(0x0018)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4286[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_2;                           // 0x01F8(0x0018)()
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor;               // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor;                // 0x0220(0x0028)()
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4287[0x3];                                     // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x024C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_1;             // 0x025C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4288[0x4];                                     // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_1;              // 0x0270(0x0028)()
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_2;             // 0x0298(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_2;              // 0x02A8(0x0028)()
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_3;             // 0x02D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_3;              // 0x02E0(0x0028)()
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_4;             // 0x0308(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_4;              // 0x0318(0x0028)()
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4289[0x2];                                     // 0x0342(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0344(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor_5;             // 0x0358(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor_5;              // 0x0368(0x0028)()
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_428A[0x3];                                     // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_4;                           // 0x039C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_5;                           // 0x03AC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_428B[0x4];                                     // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x03C0(0x0028)()
};
static_assert(alignof(W_RosterReview_EventCard_C_UpdateStyleByState) == 0x000008, "Wrong alignment on W_RosterReview_EventCard_C_UpdateStyleByState");
static_assert(sizeof(W_RosterReview_EventCard_C_UpdateStyleByState) == 0x0003E8, "Wrong size on W_RosterReview_EventCard_C_UpdateStyleByState");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, State) == 0x000000, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::State' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_byte_Variable) == 0x000001, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_byte_Variable_1) == 0x000002, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_text_Variable) == 0x000008, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_text_Variable_1) == 0x000020, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_text_Variable_2) == 0x000038, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_text_Variable_3) == 0x000050, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_byte_Variable_2) == 0x000068, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_text_Variable_4) == 0x000070, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_text_Variable_5) == 0x000088, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_text_Variable_6) == 0x0000A0, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_text_Variable_7) == 0x0000B8, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_byte_Variable_3) == 0x0000D0, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_struct_Variable) == 0x0000D4, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_struct_Variable_1) == 0x0000E4, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_byte_Variable_4) == 0x0000F4, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_struct_Variable_2) == 0x0000F8, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_struct_Variable_3) == 0x000108, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_struct_Variable_4) == 0x000118, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_byte_Variable_5) == 0x000128, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_byte_Variable_6) == 0x000129, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, Temp_bool_Variable) == 0x00012A, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_IsValid_ReturnValue) == 0x00012B, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, K2Node_Select_Default) == 0x00012C, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, K2Node_MakeStruct_FormatArgumentData) == 0x000130, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, K2Node_MakeArray_Array) == 0x000170, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_StressPercentageAsStatus_StatusText) == 0x000180, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_StressPercentageAsStatus_StatusText' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_StressPercentageAsStatus_StatusColor) == 0x000198, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_StressPercentageAsStatus_StatusColor' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_Format_ReturnValue) == 0x0001C0, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, K2Node_Select_Default_1) == 0x0001D8, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_Not_PreBool_ReturnValue) == 0x0001F0, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, K2Node_Select_Default_2) == 0x0001F8, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GetColorByName_LinearColor) == 0x000210, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GetColorByName_LinearColor' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GetColorByName_SlateColor) == 0x000220, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GetColorByName_SlateColor' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000248, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, K2Node_Select_Default_3) == 0x00024C, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GetColorByName_LinearColor_1) == 0x00025C, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GetColorByName_LinearColor_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GetColorByName_SlateColor_1) == 0x000270, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GetColorByName_SlateColor_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GetColorByName_LinearColor_2) == 0x000298, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GetColorByName_LinearColor_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GetColorByName_SlateColor_2) == 0x0002A8, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GetColorByName_SlateColor_2' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GetColorByName_LinearColor_3) == 0x0002D0, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GetColorByName_LinearColor_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GetColorByName_SlateColor_3) == 0x0002E0, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GetColorByName_SlateColor_3' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GetColorByName_LinearColor_4) == 0x000308, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GetColorByName_LinearColor_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GetColorByName_SlateColor_4) == 0x000318, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GetColorByName_SlateColor_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000340, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000341, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_SelectColor_ReturnValue) == 0x000344, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_SelectFloat_ReturnValue) == 0x000354, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GetColorByName_LinearColor_5) == 0x000358, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GetColorByName_LinearColor_5' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_GetColorByName_SlateColor_5) == 0x000368, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_GetColorByName_SlateColor_5' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_MakeVector2D_ReturnValue) == 0x000390, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000398, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, K2Node_Select_Default_4) == 0x00039C, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, K2Node_Select_Default_5) == 0x0003AC, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_UpdateStyleByState, K2Node_MakeStruct_SlateColor) == 0x0003C0, "Member 'W_RosterReview_EventCard_C_UpdateStyleByState::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function W_RosterReview_EventCard.W_RosterReview_EventCard_C.GetInvisibleDuringShowDetails
// 0x0005 (0x0005 - 0x0000)
struct W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails final 
{
public:
	ESlateVisibility                              Param_Visibility;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails) == 0x000001, "Wrong alignment on W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails");
static_assert(sizeof(W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails) == 0x000005, "Wrong size on W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails");
static_assert(offsetof(W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails, Param_Visibility) == 0x000000, "Member 'W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails::Param_Visibility' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails, Temp_bool_Variable) == 0x000001, "Member 'W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails, Temp_byte_Variable) == 0x000002, "Member 'W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails, Temp_byte_Variable_1) == 0x000003, "Member 'W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails, K2Node_Select_Default) == 0x000004, "Member 'W_RosterReview_EventCard_C_GetInvisibleDuringShowDetails::K2Node_Select_Default' has a wrong offset!");

// Function W_RosterReview_EventCard.W_RosterReview_EventCard_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_RosterReview_EventCard_C_BackPage final 
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RosterReview_EventCard_C_BackPage) == 0x000001, "Wrong alignment on W_RosterReview_EventCard_C_BackPage");
static_assert(sizeof(W_RosterReview_EventCard_C_BackPage) == 0x000001, "Wrong size on W_RosterReview_EventCard_C_BackPage");
static_assert(offsetof(W_RosterReview_EventCard_C_BackPage, Handled) == 0x000000, "Member 'W_RosterReview_EventCard_C_BackPage::Handled' has a wrong offset!");

// Function W_RosterReview_EventCard.W_RosterReview_EventCard_C.GetFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct W_RosterReview_EventCard_C_GetFocusTarget final 
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RosterReview_EventCard_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_RosterReview_EventCard_C_GetFocusTarget");
static_assert(sizeof(W_RosterReview_EventCard_C_GetFocusTarget) == 0x000008, "Wrong size on W_RosterReview_EventCard_C_GetFocusTarget");
static_assert(offsetof(W_RosterReview_EventCard_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_RosterReview_EventCard_C_GetFocusTarget::Focus' has a wrong offset!");

}

