#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicCoverSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum DynamicCoverSystem.ECoverStance
// NumValues: 0x0004
enum class ECoverStance : uint8
{
	Both                                     = 0,
	StandOnly                                = 1,
	CrouchOnly                               = 2,
	ECoverStance_MAX                         = 3,
};

// Enum DynamicCoverSystem.ECoverSearchMode
// NumValues: 0x0004
enum class ECoverSearchMode : uint8
{
	NonWallOnly                              = 0,
	WallOnly                                 = 1,
	Both                                     = 2,
	ECoverSearchMode_MAX                     = 3,
};

// Enum DynamicCoverSystem.ECoverFireType
// NumValues: 0x0004
enum class ECoverFireType : uint8
{
	None                                     = 0,
	Blind                                    = 1,
	Exposed                                  = 2,
	ECoverFireType_MAX                       = 3,
};

// Enum DynamicCoverSystem.ECoverAimType
// NumValues: 0x0003
enum class ECoverAimType : uint8
{
	LeftOrRight                              = 0,
	Up                                       = 1,
	ECoverAimType_MAX                        = 2,
};

// Enum DynamicCoverSystem.ECoverDirection
// NumValues: 0x0003
enum class ECoverDirection : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	ECoverDirection_MAX                      = 2,
};

// Enum DynamicCoverSystem.EStandCoverType
// NumValues: 0x0005
enum class EStandCoverType : uint8
{
	Wall                                     = 0,
	LeftOnly                                 = 1,
	RightOnly                                = 2,
	LeftAndRight                             = 3,
	EStandCoverType_MAX                      = 4,
};

// Enum DynamicCoverSystem.ECrouchCoverType
// NumValues: 0x0009
enum class ECrouchCoverType : uint8
{
	Wall                                     = 0,
	LeftOnly                                 = 1,
	RightOnly                                = 2,
	LeftAndRight                             = 3,
	UpOnly                                   = 4,
	LeftAndUp                                = 5,
	RightAndUp                               = 6,
	LeftRightAndUp                           = 7,
	ECrouchCoverType_MAX                     = 8,
};

// ScriptStruct DynamicCoverSystem.CoverGenResult
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FCoverGenResult final 
{
public:
	uint8                                         Pad_1620[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCoverGenResult) == 0x000008, "Wrong alignment on FCoverGenResult");
static_assert(sizeof(FCoverGenResult) == 0x000018, "Wrong size on FCoverGenResult");

// ScriptStruct DynamicCoverSystem.CoverDirection
// 0x0018 (0x0018 - 0x0000)
struct FCoverDirection final 
{
public:
	struct FVector                                Left;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Right;                                             // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCoverDirection) == 0x000004, "Wrong alignment on FCoverDirection");
static_assert(sizeof(FCoverDirection) == 0x000018, "Wrong size on FCoverDirection");
static_assert(offsetof(FCoverDirection, Left) == 0x000000, "Member 'FCoverDirection::Left' has a wrong offset!");
static_assert(offsetof(FCoverDirection, Right) == 0x00000C, "Member 'FCoverDirection::Right' has a wrong offset!");

// ScriptStruct DynamicCoverSystem.CoverPointIndex
// 0x0010 (0x0010 - 0x0000)
struct FCoverPointIndex final 
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCoverPointIndex) == 0x000004, "Wrong alignment on FCoverPointIndex");
static_assert(sizeof(FCoverPointIndex) == 0x000010, "Wrong size on FCoverPointIndex");
static_assert(offsetof(FCoverPointIndex, Location) == 0x000000, "Member 'FCoverPointIndex::Location' has a wrong offset!");
static_assert(offsetof(FCoverPointIndex, Index) == 0x00000C, "Member 'FCoverPointIndex::Index' has a wrong offset!");

// ScriptStruct DynamicCoverSystem.CoverRail
// 0x0038 (0x0038 - 0x0000)
struct FCoverRail final 
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1621[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCoverPointIndex>               CoverPoints;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCoverRail) == 0x000008, "Wrong alignment on FCoverRail");
static_assert(sizeof(FCoverRail) == 0x000038, "Wrong size on FCoverRail");
static_assert(offsetof(FCoverRail, Start) == 0x000000, "Member 'FCoverRail::Start' has a wrong offset!");
static_assert(offsetof(FCoverRail, End) == 0x00000C, "Member 'FCoverRail::End' has a wrong offset!");
static_assert(offsetof(FCoverRail, Direction) == 0x000018, "Member 'FCoverRail::Direction' has a wrong offset!");
static_assert(offsetof(FCoverRail, CoverPoints) == 0x000028, "Member 'FCoverRail::CoverPoints' has a wrong offset!");

// ScriptStruct DynamicCoverSystem.CoverGenSettings
// 0x0030 (0x0030 - 0x0000)
struct FCoverGenSettings final 
{
public:
	float                                         MaxCrouchCoverHeight;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStandCoverHeight;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchEdgeTestHeightOffset;                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchUpEdgeOffset;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandHeightOffset;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthThreshold;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftRightEdgeExtent;                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpEdgeExtent;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftRightEdgeAngle;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCoverTestDistance;                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VertexZOffset;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndentOffset;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCoverGenSettings) == 0x000004, "Wrong alignment on FCoverGenSettings");
static_assert(sizeof(FCoverGenSettings) == 0x000030, "Wrong size on FCoverGenSettings");
static_assert(offsetof(FCoverGenSettings, MaxCrouchCoverHeight) == 0x000000, "Member 'FCoverGenSettings::MaxCrouchCoverHeight' has a wrong offset!");
static_assert(offsetof(FCoverGenSettings, MaxStandCoverHeight) == 0x000004, "Member 'FCoverGenSettings::MaxStandCoverHeight' has a wrong offset!");
static_assert(offsetof(FCoverGenSettings, CrouchEdgeTestHeightOffset) == 0x000008, "Member 'FCoverGenSettings::CrouchEdgeTestHeightOffset' has a wrong offset!");
static_assert(offsetof(FCoverGenSettings, CrouchUpEdgeOffset) == 0x00000C, "Member 'FCoverGenSettings::CrouchUpEdgeOffset' has a wrong offset!");
static_assert(offsetof(FCoverGenSettings, StandHeightOffset) == 0x000010, "Member 'FCoverGenSettings::StandHeightOffset' has a wrong offset!");
static_assert(offsetof(FCoverGenSettings, DepthThreshold) == 0x000014, "Member 'FCoverGenSettings::DepthThreshold' has a wrong offset!");
static_assert(offsetof(FCoverGenSettings, LeftRightEdgeExtent) == 0x000018, "Member 'FCoverGenSettings::LeftRightEdgeExtent' has a wrong offset!");
static_assert(offsetof(FCoverGenSettings, UpEdgeExtent) == 0x00001C, "Member 'FCoverGenSettings::UpEdgeExtent' has a wrong offset!");
static_assert(offsetof(FCoverGenSettings, LeftRightEdgeAngle) == 0x000020, "Member 'FCoverGenSettings::LeftRightEdgeAngle' has a wrong offset!");
static_assert(offsetof(FCoverGenSettings, MaxCoverTestDistance) == 0x000024, "Member 'FCoverGenSettings::MaxCoverTestDistance' has a wrong offset!");
static_assert(offsetof(FCoverGenSettings, VertexZOffset) == 0x000028, "Member 'FCoverGenSettings::VertexZOffset' has a wrong offset!");
static_assert(offsetof(FCoverGenSettings, IndentOffset) == 0x00002C, "Member 'FCoverGenSettings::IndentOffset' has a wrong offset!");

}

