#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PreMission_Tablet_MapMarker

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "St_PreMissionPlayerNode_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "St_PreMissionMarkers_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_PreMission_Tablet_MapMarker.W_PreMission_Tablet_MapMarker_C
// 0x01F8 (0x0458 - 0x0260)
class UW_PreMission_Tablet_MapMarker_C final  : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHorizontalBox*                         HB_PlayerNodes;                                    // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               IconOverlay;                                       // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_icon;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_SecondaryIcon;                                 // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridPanel*                             NodeGrid;                                          // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode;                    // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_1;                  // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_2;                  // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_3;                  // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_4;                  // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_5;                  // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_6;                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_7;                  // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PreMission_Tablet_PlayerNode_C*      W_PreMission_Tablet_PlayerNode_8;                  // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             Icon;                                              // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             OutlineIcon;                                       // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             SecondaryIcon;                                     // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation;                                          // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RotationPivot;                                     // 0x02F4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Size;                                              // 0x02FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotates;                                           // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RotateSecondaryIcon;                               // 0x0305(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3218[0x2];                                     // 0x0306(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSt_PreMissionPlayerNode>       PlayerNodes;                                       // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   MarkerName;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSt_PreMissionMarkers                  MarkerStyle;                                       // 0x0330(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          HasPlayerNodes;                                    // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3219[0x3];                                     // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnchors                               NodeAnchor;                                        // 0x0394(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_321A[0x4];                                     // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                RotatingIcon;                                      // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentAngle;                                      // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HidePlayerNodes;                                   // 0x03B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          UseOutline;                                        // 0x03B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_321B[0x2];                                     // 0x03B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PreMission_PlanningMap_C*            Parent;                                            // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ID;                                                // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotating;                                          // 0x03C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321C[0x3];                                     // 0x03C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPressed;                                         // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnReleased;                                        // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnClicked;                                         // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector2D                              Coordinates;                                       // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlanningMarker                        MarkerData;                                        // 0x0400(0x0028)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	class AReadyOrNotPlayerState*                 MarkerOwner;                                       // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnRotated;                                         // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector2D                              InitialClick;                                      // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CenterPivotOnly;                                   // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_321D[0x7];                                     // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotPlayerState*                 AssignedPlayerState;                               // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void OnPressed__DelegateSignature(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker);
	void OnReleased__DelegateSignature(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker);
	void OnClicked__DelegateSignature(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker);
	void OnRotated__DelegateSignature(class UW_PreMission_Tablet_MapMarker_C* TriggeringMarker, float Param_Rotation);
	void ExecuteUbergraph_W_PreMission_Tablet_MapMarker(int32 EntryPoint, class AReadyOrNotPlayerState* CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue, bool K2Node_Event_IsDesignTime, bool CallFunc_HasRotation_Rotates, class AReadyOrNotPlayerState* CallFunc_GetPlayerStateFromPlanningNumber_ReturnValue_1, class FName K2Node_CustomEvent_NewParam, float K2Node_CustomEvent_NewParam2, bool CallFunc_IsValid_ReturnValue, const struct FSt_PreMissionMarkers& CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_HasRotation_Rotates_1, const struct FGeometry& K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, class APlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);
	void Released();
	void Pressed();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void SetupMarker(class FName NewParam, float NewParam2);
	void SetStyle(class FName Param_MarkerName, const struct FSt_PreMissionMarkers& CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_GetPlanningPlayerNumber_ReturnValue, class UW_PreMission_Tablet_PlayerNode_C* CallFunc_Create_ReturnValue, class UHorizontalBoxSlot* CallFunc_AddChildToHorizontalBox_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_2, class UCanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_2, bool Temp_bool_Variable, bool CallFunc_BooleanOR_ReturnValue, class UWidget* K2Node_Select_Default, bool Temp_bool_Variable_1, class UTexture2D* K2Node_Select_Default_1);
	void SetRotation(float NewRotation, bool CallFunc_IsValid_ReturnValue);
	void HasRotation(bool* Param_Rotates, bool CallFunc_BooleanOR_ReturnValue);
	bool HasAngleChanged(bool CallFunc_NotEqual_FloatFloat_ReturnValue);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FKey& CallFunc_PointerEvent_GetEffectingButton_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue_1, const struct FEventReply& CallFunc_Handled_ReturnValue, const struct FEventReply& CallFunc_ReleaseMouseCapture_ReturnValue, const struct FEventReply& CallFunc_Unhandled_ReturnValue, bool CallFunc_IsValid_ReturnValue, const struct FEventReply& CallFunc_Handled_ReturnValue_1);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FVector2D& CallFunc_GetNormalizedClick_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X_1, float CallFunc_BreakVector2D_Y_1, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue_1, const struct FEventReply& CallFunc_Unhandled_ReturnValue, const struct FRotator& CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, const struct FEventReply& CallFunc_Handled_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FVector2D& CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, bool CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue, const struct FEventReply& CallFunc_Unhandled_ReturnValue, const struct FEventReply& CallFunc_Handled_ReturnValue, const struct FEventReply& CallFunc_CaptureMouse_ReturnValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_PreMission_Tablet_MapMarker_C">();
	}
	static class UW_PreMission_Tablet_MapMarker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_PreMission_Tablet_MapMarker_C>();
	}
};
static_assert(alignof(UW_PreMission_Tablet_MapMarker_C) == 0x000008, "Wrong alignment on UW_PreMission_Tablet_MapMarker_C");
static_assert(sizeof(UW_PreMission_Tablet_MapMarker_C) == 0x000458, "Wrong size on UW_PreMission_Tablet_MapMarker_C");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, UberGraphFrame) == 0x000260, "Member 'UW_PreMission_Tablet_MapMarker_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, HB_PlayerNodes) == 0x000268, "Member 'UW_PreMission_Tablet_MapMarker_C::HB_PlayerNodes' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, IconOverlay) == 0x000270, "Member 'UW_PreMission_Tablet_MapMarker_C::IconOverlay' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Img_icon) == 0x000278, "Member 'UW_PreMission_Tablet_MapMarker_C::Img_icon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Img_SecondaryIcon) == 0x000280, "Member 'UW_PreMission_Tablet_MapMarker_C::Img_SecondaryIcon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, NodeGrid) == 0x000288, "Member 'UW_PreMission_Tablet_MapMarker_C::NodeGrid' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode) == 0x000290, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_1) == 0x000298, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_1' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_2) == 0x0002A0, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_2' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_3) == 0x0002A8, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_3' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_4) == 0x0002B0, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_4' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_5) == 0x0002B8, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_5' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_6) == 0x0002C0, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_6' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_7) == 0x0002C8, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_7' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, W_PreMission_Tablet_PlayerNode_8) == 0x0002D0, "Member 'UW_PreMission_Tablet_MapMarker_C::W_PreMission_Tablet_PlayerNode_8' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Icon) == 0x0002D8, "Member 'UW_PreMission_Tablet_MapMarker_C::Icon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, OutlineIcon) == 0x0002E0, "Member 'UW_PreMission_Tablet_MapMarker_C::OutlineIcon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, SecondaryIcon) == 0x0002E8, "Member 'UW_PreMission_Tablet_MapMarker_C::SecondaryIcon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Rotation) == 0x0002F0, "Member 'UW_PreMission_Tablet_MapMarker_C::Rotation' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, RotationPivot) == 0x0002F4, "Member 'UW_PreMission_Tablet_MapMarker_C::RotationPivot' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Size) == 0x0002FC, "Member 'UW_PreMission_Tablet_MapMarker_C::Size' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Rotates) == 0x000304, "Member 'UW_PreMission_Tablet_MapMarker_C::Rotates' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, RotateSecondaryIcon) == 0x000305, "Member 'UW_PreMission_Tablet_MapMarker_C::RotateSecondaryIcon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, PlayerNodes) == 0x000308, "Member 'UW_PreMission_Tablet_MapMarker_C::PlayerNodes' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, MarkerName) == 0x000318, "Member 'UW_PreMission_Tablet_MapMarker_C::MarkerName' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Color) == 0x000320, "Member 'UW_PreMission_Tablet_MapMarker_C::Color' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, MarkerStyle) == 0x000330, "Member 'UW_PreMission_Tablet_MapMarker_C::MarkerStyle' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, HasPlayerNodes) == 0x000390, "Member 'UW_PreMission_Tablet_MapMarker_C::HasPlayerNodes' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, NodeAnchor) == 0x000394, "Member 'UW_PreMission_Tablet_MapMarker_C::NodeAnchor' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, RotatingIcon) == 0x0003A8, "Member 'UW_PreMission_Tablet_MapMarker_C::RotatingIcon' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, CurrentAngle) == 0x0003B0, "Member 'UW_PreMission_Tablet_MapMarker_C::CurrentAngle' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, HidePlayerNodes) == 0x0003B4, "Member 'UW_PreMission_Tablet_MapMarker_C::HidePlayerNodes' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, UseOutline) == 0x0003B5, "Member 'UW_PreMission_Tablet_MapMarker_C::UseOutline' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Parent) == 0x0003B8, "Member 'UW_PreMission_Tablet_MapMarker_C::Parent' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, ID) == 0x0003C0, "Member 'UW_PreMission_Tablet_MapMarker_C::ID' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Rotating) == 0x0003C4, "Member 'UW_PreMission_Tablet_MapMarker_C::Rotating' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, OnPressed) == 0x0003C8, "Member 'UW_PreMission_Tablet_MapMarker_C::OnPressed' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, OnReleased) == 0x0003D8, "Member 'UW_PreMission_Tablet_MapMarker_C::OnReleased' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, OnClicked) == 0x0003E8, "Member 'UW_PreMission_Tablet_MapMarker_C::OnClicked' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, Coordinates) == 0x0003F8, "Member 'UW_PreMission_Tablet_MapMarker_C::Coordinates' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, MarkerData) == 0x000400, "Member 'UW_PreMission_Tablet_MapMarker_C::MarkerData' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, MarkerOwner) == 0x000428, "Member 'UW_PreMission_Tablet_MapMarker_C::MarkerOwner' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, OnRotated) == 0x000430, "Member 'UW_PreMission_Tablet_MapMarker_C::OnRotated' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, InitialClick) == 0x000440, "Member 'UW_PreMission_Tablet_MapMarker_C::InitialClick' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, CenterPivotOnly) == 0x000448, "Member 'UW_PreMission_Tablet_MapMarker_C::CenterPivotOnly' has a wrong offset!");
static_assert(offsetof(UW_PreMission_Tablet_MapMarker_C, AssignedPlayerState) == 0x000450, "Member 'UW_PreMission_Tablet_MapMarker_C::AssignedPlayerState' has a wrong offset!");

}

