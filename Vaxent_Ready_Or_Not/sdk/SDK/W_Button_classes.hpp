#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Button

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "E_Style_Buttons_structs.hpp"
#include "SlateCore_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Button.W_Button_C
// 0x0428 (0x0FF8 - 0x0BD0)
class UW_Button_C final  : public UCommonButtonImplementation
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetSwitcher*                        ContentSwitcher;                                   // 0x0BD8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             CustomContents;                                    // 0x0BE0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_ButtonLabel;                                   // 0x0BE8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   ButtonLabelText;                                   // 0x0BF0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	E_Style_Buttons                               SelectButtonStyle;                                 // 0x0C08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FF9[0x7];                                     // 0x0C09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             StyleGuide;                                        // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHovered;                                          // 0x0C18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FFA[0x7];                                     // 0x0C19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Clicked;                                           // 0x0C20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Hovered;                                           // 0x0C30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Unhovered;                                         // 0x0C40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Pressed;                                           // 0x0C50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DoubleClicked;                                     // 0x0C60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         FontSizeOverride;                                  // 0x0C70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FFB[0x4];                                     // 0x0C74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             DescriptionWidget;                                 // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceUppercaseDescription;                         // 0x0C80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FFC[0x7];                                     // 0x0C81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DescriptionText;                                   // 0x0C88(0x0018)(Edit, BlueprintVisible)
	bool                                          StartActive;                                       // 0x0CA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StartActiveDisabled;                               // 0x0CA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FFD[0x2];                                     // 0x0CA2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterLimit;                                    // 0x0CA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FTextBlockStyle                        Widget_Style;                                      // 0x0CA8(0x0270)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateBrush                            HoveredButtonStyle;                                // 0x0F18(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             Released;                                          // 0x0FA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Selected;                                          // 0x0FB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Deselected;                                        // 0x0FC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EHorizontalAlignment                          ContentHorizontalAlignment;                        // 0x0FD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            ContentVerticalAlignment;                          // 0x0FD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FFE[0x6];                                     // 0x0FD2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnRightMousePressed;                               // 0x0FD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnRightMouseReleased;                              // 0x0FE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Clicked__DelegateSignature(class UW_Button_C* Button);
	void Hovered__DelegateSignature(class UW_Button_C* Button);
	void Unhovered__DelegateSignature();
	void Pressed__DelegateSignature();
	void DoubleClicked__DelegateSignature(class UW_Button_C* Button);
	void Released__DelegateSignature();
	void Selected__DelegateSignature(class UW_Button_C* Button);
	void Deselected__DelegateSignature(class UW_Button_C* Button);
	void OnRightMousePressed__DelegateSignature(class UW_Button_C* Button);
	void OnRightMouseReleased__DelegateSignature();
	void ExecuteUbergraph_W_Button(int32 EntryPoint, bool K2Node_Event_IsDesignTime, class FText Temp_text_Variable, bool CallFunc_IsValid_ReturnValue, const struct FFMODEventInstance& CallFunc_PlayEvent2D_ReturnValue, bool Temp_bool_Variable, const class FString& CallFunc_Conv_TextToString_ReturnValue, const class FString& CallFunc_ToUpper_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, class FText CallFunc_Conv_StringToText_ReturnValue, bool Temp_bool_Variable_1, class FText K2Node_Select_Default, float K2Node_Event_HeldPercent, class UCommonButtonStyle* CallFunc_GetStyle_ReturnValue, class UBaseButtonStyle_C* K2Node_DynamicCast_AsBase_Button_Style, bool K2Node_DynamicCast_bSuccess, class UCommonButtonStyle* CallFunc_GetStyle_ReturnValue_1, const struct FMargin& CallFunc_GetCustomPadding_OutCustomPadding, class UBaseButtonStyle_C* K2Node_DynamicCast_AsBase_Button_Style_1, bool K2Node_DynamicCast_bSuccess_1, const struct FMargin& CallFunc_GetButtonPadding_OutButtonPadding, bool CallFunc_TextIsEmpty_ReturnValue, class UCommonButtonStyle* CallFunc_GetStyle_ReturnValue_2, class UBaseButtonStyle_C* K2Node_DynamicCast_AsBase_Button_Style_2, bool K2Node_DynamicCast_bSuccess_2, class FText K2Node_Select_Default_1, class UCommonButtonBase* K2Node_CustomEvent_Button_1, class UCommonButtonBase* K2Node_CustomEvent_Button, class UCommonButtonStyle* CallFunc_GetStyle_ReturnValue_3, class USoundBase* K2Node_DynamicCast_AsSound_Base, bool K2Node_DynamicCast_bSuccess_3);
	void RightMouseReleased();
	void RightMousePressed();
	void EventOnPressed(class UCommonButtonBase* Button);
	void EventOnReleased(class UCommonButtonBase* Button);
	void OnPressed();
	void BP_OnDeselected();
	void BP_OnSelected();
	void OnCurrentTextStyleChanged();
	void OnActionComplete();
	void OnActionProgress(float HeldPercent);
	void BP_OnClicked();
	void BP_OnDoubleClicked();
	void BP_OnUnhovered();
	void BP_OnHovered();
	void ForceDoubleClick();
	void ForceClick();
	void PreConstruct(bool IsDesignTime);
	void InitContent(bool CallFunc_HasAnyChildren_ReturnValue);
	void SetButtonText(class FText Text, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue);
	void SetBackgroundTint(const struct FLinearColor& InBackgroundColor);
	void Enable(bool Param_Enable);
	void Initialize(TDelegate<void(class UCommonButtonBase* Button)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void(class UCommonButtonBase* Button)> K2Node_CreateDelegate_OutputDelegate_1, class UWidgetSwitcherSlot* CallFunc_SlotAsWidgetSwitcherSlot_ReturnValue, class UWidgetSwitcherSlot* CallFunc_SlotAsWidgetSwitcherSlot_ReturnValue_1);
	void DisableInteraction(bool Disable, bool CallFunc_Not_PreBool_ReturnValue);
	void TruncateText(bool Truncate, int32 Param_CharacterLimit, const class FString& TruncationCharacters, class FText CallFunc_TruncateText_TruncatedText);
	void Select();
	void Deselect();
	void IgnoreInteraction(bool Ignore, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, ESlateVisibility K2Node_Select_Default);
	void PassthroughInteraction(bool PassThrough, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, ESlateVisibility K2Node_Select_Default);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FKey& CallFunc_PointerEvent_GetEffectingButton_ReturnValue, const struct FEventReply& CallFunc_Unhandled_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, const struct FEventReply& CallFunc_Unhandled_ReturnValue, const struct FKey& CallFunc_PointerEvent_GetEffectingButton_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue);

	class UCommonTextBlock* BP_GetButtonLabel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Button_C">();
	}
	static class UW_Button_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Button_C>();
	}
};
static_assert(alignof(UW_Button_C) == 0x000008, "Wrong alignment on UW_Button_C");
static_assert(sizeof(UW_Button_C) == 0x000FF8, "Wrong size on UW_Button_C");
static_assert(offsetof(UW_Button_C, UberGraphFrame) == 0x000BD0, "Member 'UW_Button_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Button_C, ContentSwitcher) == 0x000BD8, "Member 'UW_Button_C::ContentSwitcher' has a wrong offset!");
static_assert(offsetof(UW_Button_C, CustomContents) == 0x000BE0, "Member 'UW_Button_C::CustomContents' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Txt_ButtonLabel) == 0x000BE8, "Member 'UW_Button_C::Txt_ButtonLabel' has a wrong offset!");
static_assert(offsetof(UW_Button_C, ButtonLabelText) == 0x000BF0, "Member 'UW_Button_C::ButtonLabelText' has a wrong offset!");
static_assert(offsetof(UW_Button_C, SelectButtonStyle) == 0x000C08, "Member 'UW_Button_C::SelectButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_Button_C, StyleGuide) == 0x000C10, "Member 'UW_Button_C::StyleGuide' has a wrong offset!");
static_assert(offsetof(UW_Button_C, bHovered) == 0x000C18, "Member 'UW_Button_C::bHovered' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Clicked) == 0x000C20, "Member 'UW_Button_C::Clicked' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Hovered) == 0x000C30, "Member 'UW_Button_C::Hovered' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Unhovered) == 0x000C40, "Member 'UW_Button_C::Unhovered' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Pressed) == 0x000C50, "Member 'UW_Button_C::Pressed' has a wrong offset!");
static_assert(offsetof(UW_Button_C, DoubleClicked) == 0x000C60, "Member 'UW_Button_C::DoubleClicked' has a wrong offset!");
static_assert(offsetof(UW_Button_C, FontSizeOverride) == 0x000C70, "Member 'UW_Button_C::FontSizeOverride' has a wrong offset!");
static_assert(offsetof(UW_Button_C, DescriptionWidget) == 0x000C78, "Member 'UW_Button_C::DescriptionWidget' has a wrong offset!");
static_assert(offsetof(UW_Button_C, ForceUppercaseDescription) == 0x000C80, "Member 'UW_Button_C::ForceUppercaseDescription' has a wrong offset!");
static_assert(offsetof(UW_Button_C, DescriptionText) == 0x000C88, "Member 'UW_Button_C::DescriptionText' has a wrong offset!");
static_assert(offsetof(UW_Button_C, StartActive) == 0x000CA0, "Member 'UW_Button_C::StartActive' has a wrong offset!");
static_assert(offsetof(UW_Button_C, StartActiveDisabled) == 0x000CA1, "Member 'UW_Button_C::StartActiveDisabled' has a wrong offset!");
static_assert(offsetof(UW_Button_C, CharacterLimit) == 0x000CA4, "Member 'UW_Button_C::CharacterLimit' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Widget_Style) == 0x000CA8, "Member 'UW_Button_C::Widget_Style' has a wrong offset!");
static_assert(offsetof(UW_Button_C, HoveredButtonStyle) == 0x000F18, "Member 'UW_Button_C::HoveredButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Released) == 0x000FA0, "Member 'UW_Button_C::Released' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Selected) == 0x000FB0, "Member 'UW_Button_C::Selected' has a wrong offset!");
static_assert(offsetof(UW_Button_C, Deselected) == 0x000FC0, "Member 'UW_Button_C::Deselected' has a wrong offset!");
static_assert(offsetof(UW_Button_C, ContentHorizontalAlignment) == 0x000FD0, "Member 'UW_Button_C::ContentHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UW_Button_C, ContentVerticalAlignment) == 0x000FD1, "Member 'UW_Button_C::ContentVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UW_Button_C, OnRightMousePressed) == 0x000FD8, "Member 'UW_Button_C::OnRightMousePressed' has a wrong offset!");
static_assert(offsetof(UW_Button_C, OnRightMouseReleased) == 0x000FE8, "Member 'UW_Button_C::OnRightMouseReleased' has a wrong offset!");

}

