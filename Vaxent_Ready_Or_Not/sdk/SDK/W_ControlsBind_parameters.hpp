#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ControlsBind

#include "Basic.hpp"

#include "InputRemapping_structs.hpp"
#include "SKeybinding_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function W_ControlsBind.W_ControlsBind_C.OnHovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ControlsBind_C_OnHovered__DelegateSignature final 
{
public:
	class UW_ControlsBind_C*                      CallingWidget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ControlsBind_C_OnHovered__DelegateSignature) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnHovered__DelegateSignature");
static_assert(sizeof(W_ControlsBind_C_OnHovered__DelegateSignature) == 0x000008, "Wrong size on W_ControlsBind_C_OnHovered__DelegateSignature");
static_assert(offsetof(W_ControlsBind_C_OnHovered__DelegateSignature, CallingWidget) == 0x000000, "Member 'W_ControlsBind_C_OnHovered__DelegateSignature::CallingWidget' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnUnhovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ControlsBind_C_OnUnhovered__DelegateSignature final 
{
public:
	class UW_ControlsBind_C*                      CallingWidget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ControlsBind_C_OnUnhovered__DelegateSignature) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnUnhovered__DelegateSignature");
static_assert(sizeof(W_ControlsBind_C_OnUnhovered__DelegateSignature) == 0x000008, "Wrong size on W_ControlsBind_C_OnUnhovered__DelegateSignature");
static_assert(offsetof(W_ControlsBind_C_OnUnhovered__DelegateSignature, CallingWidget) == 0x000000, "Member 'W_ControlsBind_C_OnUnhovered__DelegateSignature::CallingWidget' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnPressed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ControlsBind_C_OnPressed__DelegateSignature final 
{
public:
	class UW_ControlsBind_C*                      CallingWidget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ControlsBind_C_OnPressed__DelegateSignature) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnPressed__DelegateSignature");
static_assert(sizeof(W_ControlsBind_C_OnPressed__DelegateSignature) == 0x000008, "Wrong size on W_ControlsBind_C_OnPressed__DelegateSignature");
static_assert(offsetof(W_ControlsBind_C_OnPressed__DelegateSignature, CallingWidget) == 0x000000, "Member 'W_ControlsBind_C_OnPressed__DelegateSignature::CallingWidget' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnReleased__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ControlsBind_C_OnReleased__DelegateSignature final 
{
public:
	class UW_ControlsBind_C*                      CallingWidget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ControlsBind_C_OnReleased__DelegateSignature) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnReleased__DelegateSignature");
static_assert(sizeof(W_ControlsBind_C_OnReleased__DelegateSignature) == 0x000008, "Wrong size on W_ControlsBind_C_OnReleased__DelegateSignature");
static_assert(offsetof(W_ControlsBind_C_OnReleased__DelegateSignature, CallingWidget) == 0x000000, "Member 'W_ControlsBind_C_OnReleased__DelegateSignature::CallingWidget' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnBindingStarted__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ControlsBind_C_OnBindingStarted__DelegateSignature final 
{
public:
	class UW_ControlsBind_C*                      CallingWidget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ControlsBind_C_OnBindingStarted__DelegateSignature) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnBindingStarted__DelegateSignature");
static_assert(sizeof(W_ControlsBind_C_OnBindingStarted__DelegateSignature) == 0x000008, "Wrong size on W_ControlsBind_C_OnBindingStarted__DelegateSignature");
static_assert(offsetof(W_ControlsBind_C_OnBindingStarted__DelegateSignature, CallingWidget) == 0x000000, "Member 'W_ControlsBind_C_OnBindingStarted__DelegateSignature::CallingWidget' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnBindingCanceled__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ControlsBind_C_OnBindingCanceled__DelegateSignature final 
{
public:
	class UW_ControlsBind_C*                      CallingWidget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ControlsBind_C_OnBindingCanceled__DelegateSignature) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnBindingCanceled__DelegateSignature");
static_assert(sizeof(W_ControlsBind_C_OnBindingCanceled__DelegateSignature) == 0x000008, "Wrong size on W_ControlsBind_C_OnBindingCanceled__DelegateSignature");
static_assert(offsetof(W_ControlsBind_C_OnBindingCanceled__DelegateSignature, CallingWidget) == 0x000000, "Member 'W_ControlsBind_C_OnBindingCanceled__DelegateSignature::CallingWidget' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnBindingCommitted__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct W_ControlsBind_C_OnBindingCommitted__DelegateSignature final 
{
public:
	class UW_ControlsBind_C*                      CallingWidget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   NewKey;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(W_ControlsBind_C_OnBindingCommitted__DelegateSignature) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnBindingCommitted__DelegateSignature");
static_assert(sizeof(W_ControlsBind_C_OnBindingCommitted__DelegateSignature) == 0x000020, "Wrong size on W_ControlsBind_C_OnBindingCommitted__DelegateSignature");
static_assert(offsetof(W_ControlsBind_C_OnBindingCommitted__DelegateSignature, CallingWidget) == 0x000000, "Member 'W_ControlsBind_C_OnBindingCommitted__DelegateSignature::CallingWidget' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnBindingCommitted__DelegateSignature, NewKey) == 0x000008, "Member 'W_ControlsBind_C_OnBindingCommitted__DelegateSignature::NewKey' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnConflictingBindDetected__DelegateSignature
// 0x0050 (0x0050 - 0x0000)
struct W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature final 
{
public:
	class UW_ControlsBind_C*                      CallingBind;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FActionMappingStruct>           ActionMappings;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FAxisMappingStruct>             AxisMappings;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FKey                                   Param_Key;                                         // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	TArray<class FText>                           ConflictBindsText;                                 // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature");
static_assert(sizeof(W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature) == 0x000050, "Wrong size on W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature");
static_assert(offsetof(W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature, CallingBind) == 0x000000, "Member 'W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature::CallingBind' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature, ActionMappings) == 0x000008, "Member 'W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature::ActionMappings' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature, AxisMappings) == 0x000018, "Member 'W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature::AxisMappings' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature, Param_Key) == 0x000028, "Member 'W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature::Param_Key' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature, ConflictBindsText) == 0x000040, "Member 'W_ControlsBind_C_OnConflictingBindDetected__DelegateSignature::ConflictBindsText' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnUnbindableKeyReboundAttempted__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct W_ControlsBind_C_OnUnbindableKeyReboundAttempted__DelegateSignature final 
{
public:
	class FText                                   Param_BindFriendlyName;                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_ControlsBind_C_OnUnbindableKeyReboundAttempted__DelegateSignature) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnUnbindableKeyReboundAttempted__DelegateSignature");
static_assert(sizeof(W_ControlsBind_C_OnUnbindableKeyReboundAttempted__DelegateSignature) == 0x000018, "Wrong size on W_ControlsBind_C_OnUnbindableKeyReboundAttempted__DelegateSignature");
static_assert(offsetof(W_ControlsBind_C_OnUnbindableKeyReboundAttempted__DelegateSignature, Param_BindFriendlyName) == 0x000000, "Member 'W_ControlsBind_C_OnUnbindableKeyReboundAttempted__DelegateSignature::Param_BindFriendlyName' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.ExecuteUbergraph_W_ControlsBind
// 0x0258 (0x0258 - 0x0000)
struct W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E72[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_PlayEvent2D_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FKey                                   K2Node_CustomEvent_KeyIn;                          // 0x0020(0x0018)(HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_PlayEvent2D_ReturnValue_1;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FAxisMappingStruct                     K2Node_MakeStruct_AxisMappingStruct;               // 0x0040(0x0028)()
	struct FActionMappingStruct                   K2Node_MakeStruct_ActionMappingStruct;             // 0x0068(0x0028)()
	TArray<EActionMappingFilter>                  K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ReferenceParm)
	TArray<EAxisMappingFilter>                    K2Node_MakeArray_Array_1;                          // 0x00A0(0x0010)(ReferenceParm)
	bool                                          CallFunc_GetAllActionMappings_ReturnValue;         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E73[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActionMappingStruct>           CallFunc_GetAllActionMappings_ActionMappings;      // 0x00B8(0x0010)(ReferenceParm)
	bool                                          CallFunc_GetAllAxisMappings_ReturnValue;           // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E74[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAxisMappingStruct>             CallFunc_GetAllAxisMappings_AxisMappings;          // 0x00D0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConflictingKeybindsWhenValid_HasConflict; // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E75[0x3];                                     // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAxisMappingStruct>             CallFunc_GetConflictingKeybindsWhenValid_ConflictingAxes; // 0x00E8(0x0010)(ReferenceParm)
	TArray<struct FActionMappingStruct>           CallFunc_GetConflictingKeybindsWhenValid_ConflictingActions; // 0x00F8(0x0010)(ReferenceParm)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E76[0x6];                                     // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_CheckConflictingKeybindsAreUnbindable_ReturnValue; // 0x0110(0x0018)()
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E77[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0133(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E78[0x4];                                     // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_BindFriendlyName;               // 0x0138(0x0018)()
	class FText                                   CallFunc_GetConflictingKeybindText_ReturnValue;    // 0x0150(0x0018)()
	TDelegate<void(class FText BindFriendlyName)> K2Node_CreateDelegate_OutputDelegate;              // 0x0168(0x0010)(ZeroConstructor, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RebindKey_ReturnValue;                    // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x017B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E79[0x2];                                     // 0x017E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Replace_ReturnValue;                      // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x01A0(0x0018)()
	struct FAxisMappingStruct                     CallFunc_GetInputBindingData_AxisMapping;          // 0x01B8(0x0028)()
	struct FActionMappingStruct                   CallFunc_GetInputBindingData_ActionMapping;        // 0x01E0(0x0028)()
	struct FActionMappingStruct                   K2Node_MakeStruct_ActionMappingStruct_1;           // 0x0208(0x0028)()
	struct FAxisMappingStruct                     K2Node_MakeStruct_AxisMappingStruct_1;             // 0x0230(0x0028)()
};
static_assert(alignof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind) == 0x000008, "Wrong alignment on W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind");
static_assert(sizeof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind) == 0x000258, "Wrong size on W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, EntryPoint) == 0x000000, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, Temp_byte_Variable) == 0x000004, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, K2Node_Event_IsDesignTime) == 0x000005, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_Conv_TextToString_ReturnValue) == 0x000008, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_PlayEvent2D_ReturnValue) == 0x000018, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_PlayEvent2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, K2Node_CustomEvent_KeyIn) == 0x000020, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::K2Node_CustomEvent_KeyIn' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_PlayEvent2D_ReturnValue_1) == 0x000038, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_PlayEvent2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, K2Node_MakeStruct_AxisMappingStruct) == 0x000040, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::K2Node_MakeStruct_AxisMappingStruct' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, K2Node_MakeStruct_ActionMappingStruct) == 0x000068, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::K2Node_MakeStruct_ActionMappingStruct' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, K2Node_MakeArray_Array) == 0x000090, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, K2Node_MakeArray_Array_1) == 0x0000A0, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_GetAllActionMappings_ReturnValue) == 0x0000B0, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_GetAllActionMappings_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_GetAllActionMappings_ActionMappings) == 0x0000B8, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_GetAllActionMappings_ActionMappings' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_GetAllAxisMappings_ReturnValue) == 0x0000C8, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_GetAllAxisMappings_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_GetAllAxisMappings_AxisMappings) == 0x0000D0, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_GetAllAxisMappings_AxisMappings' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_Array_Length_ReturnValue) == 0x0000E0, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_GetConflictingKeybindsWhenValid_HasConflict) == 0x0000E4, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_GetConflictingKeybindsWhenValid_HasConflict' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_GetConflictingKeybindsWhenValid_ConflictingAxes) == 0x0000E8, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_GetConflictingKeybindsWhenValid_ConflictingAxes' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_GetConflictingKeybindsWhenValid_ConflictingActions) == 0x0000F8, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_GetConflictingKeybindsWhenValid_ConflictingActions' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000108, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_Not_PreBool_ReturnValue) == 0x000109, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_CheckConflictingKeybindsAreUnbindable_ReturnValue) == 0x000110, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_CheckConflictingKeybindsAreUnbindable_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_TextIsEmpty_ReturnValue) == 0x000128, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_Array_Length_ReturnValue_1) == 0x00012C, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000130, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_BooleanAND_ReturnValue) == 0x000131, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, Temp_byte_Variable_1) == 0x000132, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, Temp_bool_Variable) == 0x000133, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, K2Node_CustomEvent_BindFriendlyName) == 0x000138, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::K2Node_CustomEvent_BindFriendlyName' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_GetConflictingKeybindText_ReturnValue) == 0x000150, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_GetConflictingKeybindText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, K2Node_CreateDelegate_OutputDelegate) == 0x000168, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, K2Node_Select_Default) == 0x000178, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_RebindKey_ReturnValue) == 0x000179, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_RebindKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_Array_Contains_ReturnValue) == 0x00017A, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_Array_Contains_ReturnValue_1) == 0x00017B, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_BooleanOR_ReturnValue) == 0x00017C, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_BooleanOR_ReturnValue_1) == 0x00017D, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000180, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_Replace_ReturnValue) == 0x000190, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_Replace_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_Conv_StringToText_ReturnValue) == 0x0001A0, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_GetInputBindingData_AxisMapping) == 0x0001B8, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_GetInputBindingData_AxisMapping' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, CallFunc_GetInputBindingData_ActionMapping) == 0x0001E0, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::CallFunc_GetInputBindingData_ActionMapping' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, K2Node_MakeStruct_ActionMappingStruct_1) == 0x000208, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::K2Node_MakeStruct_ActionMappingStruct_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind, K2Node_MakeStruct_AxisMappingStruct_1) == 0x000230, "Member 'W_ControlsBind_C_ExecuteUbergraph_W_ControlsBind::K2Node_MakeStruct_AxisMappingStruct_1' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnIllegalBindAttempted
// 0x0018 (0x0018 - 0x0000)
struct W_ControlsBind_C_OnIllegalBindAttempted final 
{
public:
	class FText                                   Param_BindFriendlyName;                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_ControlsBind_C_OnIllegalBindAttempted) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnIllegalBindAttempted");
static_assert(sizeof(W_ControlsBind_C_OnIllegalBindAttempted) == 0x000018, "Wrong size on W_ControlsBind_C_OnIllegalBindAttempted");
static_assert(offsetof(W_ControlsBind_C_OnIllegalBindAttempted, Param_BindFriendlyName) == 0x000000, "Member 'W_ControlsBind_C_OnIllegalBindAttempted::Param_BindFriendlyName' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.Key Event Received
// 0x0018 (0x0018 - 0x0000)
struct W_ControlsBind_C_Key_Event_Received final 
{
public:
	struct FKey                                   KeyIn;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(W_ControlsBind_C_Key_Event_Received) == 0x000008, "Wrong alignment on W_ControlsBind_C_Key_Event_Received");
static_assert(sizeof(W_ControlsBind_C_Key_Event_Received) == 0x000018, "Wrong size on W_ControlsBind_C_Key_Event_Received");
static_assert(offsetof(W_ControlsBind_C_Key_Event_Received, KeyIn) == 0x000000, "Member 'W_ControlsBind_C_Key_Event_Received::KeyIn' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_ControlsBind_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ControlsBind_C_PreConstruct) == 0x000001, "Wrong alignment on W_ControlsBind_C_PreConstruct");
static_assert(sizeof(W_ControlsBind_C_PreConstruct) == 0x000001, "Wrong size on W_ControlsBind_C_PreConstruct");
static_assert(offsetof(W_ControlsBind_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_ControlsBind_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.Get Input Binding Data OLD
// 0x0058 (0x0058 - 0x0000)
struct W_ControlsBind_C_Get_Input_Binding_Data_OLD final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E7A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActionMappingStruct                   ActionMapping;                                     // 0x0008(0x0028)(Parm, OutParm)
	struct FAxisMappingStruct                     AxisMapping;                                       // 0x0030(0x0028)(Parm, OutParm)
};
static_assert(alignof(W_ControlsBind_C_Get_Input_Binding_Data_OLD) == 0x000008, "Wrong alignment on W_ControlsBind_C_Get_Input_Binding_Data_OLD");
static_assert(sizeof(W_ControlsBind_C_Get_Input_Binding_Data_OLD) == 0x000058, "Wrong size on W_ControlsBind_C_Get_Input_Binding_Data_OLD");
static_assert(offsetof(W_ControlsBind_C_Get_Input_Binding_Data_OLD, Param_Index) == 0x000000, "Member 'W_ControlsBind_C_Get_Input_Binding_Data_OLD::Param_Index' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Get_Input_Binding_Data_OLD, ActionMapping) == 0x000008, "Member 'W_ControlsBind_C_Get_Input_Binding_Data_OLD::ActionMapping' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Get_Input_Binding_Data_OLD, AxisMapping) == 0x000030, "Member 'W_ControlsBind_C_Get_Input_Binding_Data_OLD::AxisMapping' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnKeyDown
// 0x01E0 (0x01E0 - 0x0000)
struct W_ControlsBind_C_OnKeyDown final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0070(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_HandleKeyDown_ReturnValue;                // 0x0128(0x00B8)()
};
static_assert(alignof(W_ControlsBind_C_OnKeyDown) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnKeyDown");
static_assert(sizeof(W_ControlsBind_C_OnKeyDown) == 0x0001E0, "Wrong size on W_ControlsBind_C_OnKeyDown");
static_assert(offsetof(W_ControlsBind_C_OnKeyDown, MyGeometry) == 0x000000, "Member 'W_ControlsBind_C_OnKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnKeyDown, InKeyEvent) == 0x000038, "Member 'W_ControlsBind_C_OnKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnKeyDown, ReturnValue) == 0x000070, "Member 'W_ControlsBind_C_OnKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnKeyDown, CallFunc_HandleKeyDown_ReturnValue) == 0x000128, "Member 'W_ControlsBind_C_OnKeyDown::CallFunc_HandleKeyDown_ReturnValue' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnMouseButtonDown
// 0x0218 (0x0218 - 0x0000)
struct W_ControlsBind_C_OnMouseButtonDown final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_HandleMouseButtonDown_Reply;              // 0x0160(0x00B8)()
};
static_assert(alignof(W_ControlsBind_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnMouseButtonDown");
static_assert(sizeof(W_ControlsBind_C_OnMouseButtonDown) == 0x000218, "Wrong size on W_ControlsBind_C_OnMouseButtonDown");
static_assert(offsetof(W_ControlsBind_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'W_ControlsBind_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'W_ControlsBind_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnMouseButtonDown, ReturnValue) == 0x0000A8, "Member 'W_ControlsBind_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnMouseButtonDown, CallFunc_HandleMouseButtonDown_Reply) == 0x000160, "Member 'W_ControlsBind_C_OnMouseButtonDown::CallFunc_HandleMouseButtonDown_Reply' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.Rebind Key OLD
// 0x0070 (0x0070 - 0x0000)
struct W_ControlsBind_C_Rebind_Key_OLD final 
{
public:
	struct FKey                                   NewKey;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Key_Rebound;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E7B[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActionMappingStruct                   NewActionMapping;                                  // 0x0020(0x0028)(Edit, BlueprintVisible)
	struct FAxisMappingStruct                     NewAxisMapping;                                    // 0x0048(0x0028)(Edit, BlueprintVisible)
};
static_assert(alignof(W_ControlsBind_C_Rebind_Key_OLD) == 0x000008, "Wrong alignment on W_ControlsBind_C_Rebind_Key_OLD");
static_assert(sizeof(W_ControlsBind_C_Rebind_Key_OLD) == 0x000070, "Wrong size on W_ControlsBind_C_Rebind_Key_OLD");
static_assert(offsetof(W_ControlsBind_C_Rebind_Key_OLD, NewKey) == 0x000000, "Member 'W_ControlsBind_C_Rebind_Key_OLD::NewKey' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Rebind_Key_OLD, Key_Rebound) == 0x000018, "Member 'W_ControlsBind_C_Rebind_Key_OLD::Key_Rebound' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Rebind_Key_OLD, NewActionMapping) == 0x000020, "Member 'W_ControlsBind_C_Rebind_Key_OLD::NewActionMapping' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Rebind_Key_OLD, NewAxisMapping) == 0x000048, "Member 'W_ControlsBind_C_Rebind_Key_OLD::NewAxisMapping' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.SetDisabled
// 0x0002 (0x0002 - 0x0000)
struct W_ControlsBind_C_SetDisabled final 
{
public:
	bool                                          Disabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ControlsBind_C_SetDisabled) == 0x000001, "Wrong alignment on W_ControlsBind_C_SetDisabled");
static_assert(sizeof(W_ControlsBind_C_SetDisabled) == 0x000002, "Wrong size on W_ControlsBind_C_SetDisabled");
static_assert(offsetof(W_ControlsBind_C_SetDisabled, Disabled) == 0x000000, "Member 'W_ControlsBind_C_SetDisabled::Disabled' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_SetDisabled, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'W_ControlsBind_C_SetDisabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnMouseWheel
// 0x0218 (0x0218 - 0x0000)
struct W_ControlsBind_C_OnMouseWheel final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_HandleMouseWheel_ReturnValue;             // 0x0160(0x00B8)()
};
static_assert(alignof(W_ControlsBind_C_OnMouseWheel) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnMouseWheel");
static_assert(sizeof(W_ControlsBind_C_OnMouseWheel) == 0x000218, "Wrong size on W_ControlsBind_C_OnMouseWheel");
static_assert(offsetof(W_ControlsBind_C_OnMouseWheel, MyGeometry) == 0x000000, "Member 'W_ControlsBind_C_OnMouseWheel::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnMouseWheel, MouseEvent) == 0x000038, "Member 'W_ControlsBind_C_OnMouseWheel::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnMouseWheel, ReturnValue) == 0x0000A8, "Member 'W_ControlsBind_C_OnMouseWheel::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnMouseWheel, CallFunc_HandleMouseWheel_ReturnValue) == 0x000160, "Member 'W_ControlsBind_C_OnMouseWheel::CallFunc_HandleMouseWheel_ReturnValue' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.HandleMouseButtonDown
// 0x02B0 (0x02B0 - 0x0000)
struct W_ControlsBind_C_HandleMouseButtonDown final 
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            Reply;                                             // 0x0070(0x00B8)(Parm, OutParm)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0128(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0140(0x00B8)()
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x01F8(0x00B8)()
};
static_assert(alignof(W_ControlsBind_C_HandleMouseButtonDown) == 0x000008, "Wrong alignment on W_ControlsBind_C_HandleMouseButtonDown");
static_assert(sizeof(W_ControlsBind_C_HandleMouseButtonDown) == 0x0002B0, "Wrong size on W_ControlsBind_C_HandleMouseButtonDown");
static_assert(offsetof(W_ControlsBind_C_HandleMouseButtonDown, PointerEvent) == 0x000000, "Member 'W_ControlsBind_C_HandleMouseButtonDown::PointerEvent' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseButtonDown, Reply) == 0x000070, "Member 'W_ControlsBind_C_HandleMouseButtonDown::Reply' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseButtonDown, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000128, "Member 'W_ControlsBind_C_HandleMouseButtonDown::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000140, "Member 'W_ControlsBind_C_HandleMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseButtonDown, CallFunc_Unhandled_ReturnValue) == 0x0001F8, "Member 'W_ControlsBind_C_HandleMouseButtonDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.GetOtherBindingIndex
// 0x0014 (0x0014 - 0x0000)
struct W_ControlsBind_C_GetOtherBindingIndex final 
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ControlsBind_C_GetOtherBindingIndex) == 0x000004, "Wrong alignment on W_ControlsBind_C_GetOtherBindingIndex");
static_assert(sizeof(W_ControlsBind_C_GetOtherBindingIndex) == 0x000014, "Wrong size on W_ControlsBind_C_GetOtherBindingIndex");
static_assert(offsetof(W_ControlsBind_C_GetOtherBindingIndex, Value) == 0x000000, "Member 'W_ControlsBind_C_GetOtherBindingIndex::Value' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_GetOtherBindingIndex, Temp_int_Variable) == 0x000004, "Member 'W_ControlsBind_C_GetOtherBindingIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_GetOtherBindingIndex, Temp_int_Variable_1) == 0x000008, "Member 'W_ControlsBind_C_GetOtherBindingIndex::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_GetOtherBindingIndex, Temp_int_Variable_2) == 0x00000C, "Member 'W_ControlsBind_C_GetOtherBindingIndex::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_GetOtherBindingIndex, K2Node_Select_Default) == 0x000010, "Member 'W_ControlsBind_C_GetOtherBindingIndex::K2Node_Select_Default' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.OnPreviewKeyDown
// 0x01E0 (0x01E0 - 0x0000)
struct W_ControlsBind_C_OnPreviewKeyDown final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0070(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_HandleKeyDown_ReturnValue;                // 0x0128(0x00B8)()
};
static_assert(alignof(W_ControlsBind_C_OnPreviewKeyDown) == 0x000008, "Wrong alignment on W_ControlsBind_C_OnPreviewKeyDown");
static_assert(sizeof(W_ControlsBind_C_OnPreviewKeyDown) == 0x0001E0, "Wrong size on W_ControlsBind_C_OnPreviewKeyDown");
static_assert(offsetof(W_ControlsBind_C_OnPreviewKeyDown, MyGeometry) == 0x000000, "Member 'W_ControlsBind_C_OnPreviewKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnPreviewKeyDown, InKeyEvent) == 0x000038, "Member 'W_ControlsBind_C_OnPreviewKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnPreviewKeyDown, ReturnValue) == 0x000070, "Member 'W_ControlsBind_C_OnPreviewKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_OnPreviewKeyDown, CallFunc_HandleKeyDown_ReturnValue) == 0x000128, "Member 'W_ControlsBind_C_OnPreviewKeyDown::CallFunc_HandleKeyDown_ReturnValue' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.HandleKeyDown
// 0x02B0 (0x02B0 - 0x0000)
struct W_ControlsBind_C_HandleKeyDown final 
{
public:
	struct FGeometry                              My_Geometry;                                       // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              In_Key_Event;                                      // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0070(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x0128(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0140(0x00B8)()
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x01F8(0x00B8)()
};
static_assert(alignof(W_ControlsBind_C_HandleKeyDown) == 0x000008, "Wrong alignment on W_ControlsBind_C_HandleKeyDown");
static_assert(sizeof(W_ControlsBind_C_HandleKeyDown) == 0x0002B0, "Wrong size on W_ControlsBind_C_HandleKeyDown");
static_assert(offsetof(W_ControlsBind_C_HandleKeyDown, My_Geometry) == 0x000000, "Member 'W_ControlsBind_C_HandleKeyDown::My_Geometry' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleKeyDown, In_Key_Event) == 0x000038, "Member 'W_ControlsBind_C_HandleKeyDown::In_Key_Event' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleKeyDown, ReturnValue) == 0x000070, "Member 'W_ControlsBind_C_HandleKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleKeyDown, CallFunc_GetKey_ReturnValue) == 0x000128, "Member 'W_ControlsBind_C_HandleKeyDown::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleKeyDown, CallFunc_Handled_ReturnValue) == 0x000140, "Member 'W_ControlsBind_C_HandleKeyDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleKeyDown, CallFunc_Unhandled_ReturnValue) == 0x0001F8, "Member 'W_ControlsBind_C_HandleKeyDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.Get Conflicting Keybinds when Valid OLD
// 0x0078 (0x0078 - 0x0000)
struct W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD final 
{
public:
	TArray<struct FAxisMappingStruct>             Axes;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FActionMappingStruct>           Actions;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bHasConflict;                                      // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E7C[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAxisMappingStruct>             Param_ConflictingAxes;                             // 0x0028(0x0010)(Parm, OutParm)
	TArray<struct FActionMappingStruct>           Param_ConflictingActions;                          // 0x0038(0x0010)(Parm, OutParm)
	TArray<struct FActionMappingStruct>           OutputAction;                                      // 0x0048(0x0010)(Edit, BlueprintVisible)
	TArray<struct FAxisMappingStruct>             OutputAxes;                                        // 0x0058(0x0010)(Edit, BlueprintVisible)
	TArray<class FText>                           LocalizedActions;                                  // 0x0068(0x0010)(Edit, BlueprintVisible)
};
static_assert(alignof(W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD) == 0x000008, "Wrong alignment on W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD");
static_assert(sizeof(W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD) == 0x000078, "Wrong size on W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD");
static_assert(offsetof(W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD, Axes) == 0x000000, "Member 'W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD::Axes' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD, Actions) == 0x000010, "Member 'W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD::Actions' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD, bHasConflict) == 0x000020, "Member 'W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD::bHasConflict' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD, Param_ConflictingAxes) == 0x000028, "Member 'W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD::Param_ConflictingAxes' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD, Param_ConflictingActions) == 0x000038, "Member 'W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD::Param_ConflictingActions' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD, OutputAction) == 0x000048, "Member 'W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD::OutputAction' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD, OutputAxes) == 0x000058, "Member 'W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD::OutputAxes' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD, LocalizedActions) == 0x000068, "Member 'W_ControlsBind_C_Get_Conflicting_Keybinds_when_Valid_OLD::LocalizedActions' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.HandleMouseWheel
// 0x0358 (0x0358 - 0x0000)
struct W_ControlsBind_C_HandleMouseWheel final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	bool                                          Temp_bool_Variable;                                // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E7D[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_PointerEvent_GetWheelDelta_ReturnValue;   // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x0168(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E7E[0x6];                                     // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_1;                            // 0x0188(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_2;                            // 0x01A0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_Select_Default;                             // 0x01B8(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x01D0(0x00B8)()
	struct FKey                                   K2Node_Select_Default_1;                           // 0x0288(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x02A0(0x00B8)()
};
static_assert(alignof(W_ControlsBind_C_HandleMouseWheel) == 0x000008, "Wrong alignment on W_ControlsBind_C_HandleMouseWheel");
static_assert(sizeof(W_ControlsBind_C_HandleMouseWheel) == 0x000358, "Wrong size on W_ControlsBind_C_HandleMouseWheel");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, MyGeometry) == 0x000000, "Member 'W_ControlsBind_C_HandleMouseWheel::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, PointerEvent) == 0x000038, "Member 'W_ControlsBind_C_HandleMouseWheel::PointerEvent' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, ReturnValue) == 0x0000A8, "Member 'W_ControlsBind_C_HandleMouseWheel::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, Temp_bool_Variable) == 0x000160, "Member 'W_ControlsBind_C_HandleMouseWheel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, CallFunc_PointerEvent_GetWheelDelta_ReturnValue) == 0x000164, "Member 'W_ControlsBind_C_HandleMouseWheel::CallFunc_PointerEvent_GetWheelDelta_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, Temp_struct_Variable) == 0x000168, "Member 'W_ControlsBind_C_HandleMouseWheel::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000180, "Member 'W_ControlsBind_C_HandleMouseWheel::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, Temp_bool_Variable_1) == 0x000181, "Member 'W_ControlsBind_C_HandleMouseWheel::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, Temp_struct_Variable_1) == 0x000188, "Member 'W_ControlsBind_C_HandleMouseWheel::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, Temp_struct_Variable_2) == 0x0001A0, "Member 'W_ControlsBind_C_HandleMouseWheel::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, K2Node_Select_Default) == 0x0001B8, "Member 'W_ControlsBind_C_HandleMouseWheel::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, CallFunc_Handled_ReturnValue) == 0x0001D0, "Member 'W_ControlsBind_C_HandleMouseWheel::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, K2Node_Select_Default_1) == 0x000288, "Member 'W_ControlsBind_C_HandleMouseWheel::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_HandleMouseWheel, CallFunc_Unhandled_ReturnValue) == 0x0002A0, "Member 'W_ControlsBind_C_HandleMouseWheel::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.Add Conflicting Keybinds to List OLD
// 0x0040 (0x0040 - 0x0000)
struct W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD final 
{
public:
	class FName                                   MappingName;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E7F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAxisMappingStruct>             Axes;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FActionMappingStruct>           Actions;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         ControlsScale;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TempMappingName;                                   // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD) == 0x000008, "Wrong alignment on W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD");
static_assert(sizeof(W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD) == 0x000040, "Wrong size on W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD");
static_assert(offsetof(W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD, MappingName) == 0x000000, "Member 'W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD::MappingName' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD, Scale) == 0x000008, "Member 'W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD::Scale' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD, Axes) == 0x000010, "Member 'W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD::Axes' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD, Actions) == 0x000020, "Member 'W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD::Actions' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD, ControlsScale) == 0x000030, "Member 'W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD::ControlsScale' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD, TempMappingName) == 0x000034, "Member 'W_ControlsBind_C_Add_Conflicting_Keybinds_to_List_OLD::TempMappingName' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.Add Keybinds to List OLD
// 0x0048 (0x0048 - 0x0000)
struct W_ControlsBind_C_Add_Keybinds_to_List_OLD final 
{
public:
	TArray<struct FSKeybinding>                   Keybinds;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FName                                   AxisMapping;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E80[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAxisMappingStruct>             AxesList;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FActionMappingStruct>           ActionsList;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         TempScale;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ControlsBind_C_Add_Keybinds_to_List_OLD) == 0x000008, "Wrong alignment on W_ControlsBind_C_Add_Keybinds_to_List_OLD");
static_assert(sizeof(W_ControlsBind_C_Add_Keybinds_to_List_OLD) == 0x000048, "Wrong size on W_ControlsBind_C_Add_Keybinds_to_List_OLD");
static_assert(offsetof(W_ControlsBind_C_Add_Keybinds_to_List_OLD, Keybinds) == 0x000000, "Member 'W_ControlsBind_C_Add_Keybinds_to_List_OLD::Keybinds' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Add_Keybinds_to_List_OLD, AxisMapping) == 0x000010, "Member 'W_ControlsBind_C_Add_Keybinds_to_List_OLD::AxisMapping' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Add_Keybinds_to_List_OLD, Scale) == 0x000018, "Member 'W_ControlsBind_C_Add_Keybinds_to_List_OLD::Scale' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Add_Keybinds_to_List_OLD, AxesList) == 0x000020, "Member 'W_ControlsBind_C_Add_Keybinds_to_List_OLD::AxesList' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Add_Keybinds_to_List_OLD, ActionsList) == 0x000030, "Member 'W_ControlsBind_C_Add_Keybinds_to_List_OLD::ActionsList' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Add_Keybinds_to_List_OLD, TempScale) == 0x000040, "Member 'W_ControlsBind_C_Add_Keybinds_to_List_OLD::TempScale' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.Remove Conflict Keybinds OLD
// 0x0080 (0x0080 - 0x0000)
struct W_ControlsBind_C_Remove_Conflict_Keybinds_OLD final 
{
public:
	TArray<struct FAxisMappingStruct>             Axes;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FActionMappingStruct>           Actions;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UW_ControlsBind_C*                      TempActionToRemove;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_ControlsBind_C*                      TempAxisToRemove;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActionMappingStruct                   TempActionMapping;                                 // 0x0030(0x0028)(Edit, BlueprintVisible)
	struct FAxisMappingStruct                     TempAxisMapping;                                   // 0x0058(0x0028)(Edit, BlueprintVisible)
};
static_assert(alignof(W_ControlsBind_C_Remove_Conflict_Keybinds_OLD) == 0x000008, "Wrong alignment on W_ControlsBind_C_Remove_Conflict_Keybinds_OLD");
static_assert(sizeof(W_ControlsBind_C_Remove_Conflict_Keybinds_OLD) == 0x000080, "Wrong size on W_ControlsBind_C_Remove_Conflict_Keybinds_OLD");
static_assert(offsetof(W_ControlsBind_C_Remove_Conflict_Keybinds_OLD, Axes) == 0x000000, "Member 'W_ControlsBind_C_Remove_Conflict_Keybinds_OLD::Axes' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Remove_Conflict_Keybinds_OLD, Actions) == 0x000010, "Member 'W_ControlsBind_C_Remove_Conflict_Keybinds_OLD::Actions' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Remove_Conflict_Keybinds_OLD, TempActionToRemove) == 0x000020, "Member 'W_ControlsBind_C_Remove_Conflict_Keybinds_OLD::TempActionToRemove' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Remove_Conflict_Keybinds_OLD, TempAxisToRemove) == 0x000028, "Member 'W_ControlsBind_C_Remove_Conflict_Keybinds_OLD::TempAxisToRemove' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Remove_Conflict_Keybinds_OLD, TempActionMapping) == 0x000030, "Member 'W_ControlsBind_C_Remove_Conflict_Keybinds_OLD::TempActionMapping' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Remove_Conflict_Keybinds_OLD, TempAxisMapping) == 0x000058, "Member 'W_ControlsBind_C_Remove_Conflict_Keybinds_OLD::TempAxisMapping' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.Check Conflicting Keybinds Are Unbindable OLD
// 0x0088 (0x0088 - 0x0000)
struct W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD final 
{
public:
	TArray<struct FAxisMappingStruct>             Axes;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FActionMappingStruct>           Actions;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   Param_BindFriendlyName;                            // 0x0020(0x0018)(Parm, OutParm)
	struct FActionMappingStruct                   TempActionBind;                                    // 0x0038(0x0028)(Edit, BlueprintVisible)
	struct FAxisMappingStruct                     TempAxisBind;                                      // 0x0060(0x0028)(Edit, BlueprintVisible)
};
static_assert(alignof(W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD) == 0x000008, "Wrong alignment on W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD");
static_assert(sizeof(W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD) == 0x000088, "Wrong size on W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD");
static_assert(offsetof(W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD, Axes) == 0x000000, "Member 'W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD::Axes' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD, Actions) == 0x000010, "Member 'W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD::Actions' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD, Param_BindFriendlyName) == 0x000020, "Member 'W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD::Param_BindFriendlyName' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD, TempActionBind) == 0x000038, "Member 'W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD::TempActionBind' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD, TempAxisBind) == 0x000060, "Member 'W_ControlsBind_C_Check_Conflicting_Keybinds_Are_Unbindable_OLD::TempAxisBind' has a wrong offset!");

// Function W_ControlsBind.W_ControlsBind_C.Get Conflicting Keybind Text OLD
// 0x0048 (0x0048 - 0x0000)
struct W_ControlsBind_C_Get_Conflicting_Keybind_Text_OLD final 
{
public:
	class FText                                   RequiredKeybindName;                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Text;                                              // 0x0018(0x0018)(Parm, OutParm)
	class FText                                   ConflictingBindFormat;                             // 0x0030(0x0018)(Edit, BlueprintVisible)
};
static_assert(alignof(W_ControlsBind_C_Get_Conflicting_Keybind_Text_OLD) == 0x000008, "Wrong alignment on W_ControlsBind_C_Get_Conflicting_Keybind_Text_OLD");
static_assert(sizeof(W_ControlsBind_C_Get_Conflicting_Keybind_Text_OLD) == 0x000048, "Wrong size on W_ControlsBind_C_Get_Conflicting_Keybind_Text_OLD");
static_assert(offsetof(W_ControlsBind_C_Get_Conflicting_Keybind_Text_OLD, RequiredKeybindName) == 0x000000, "Member 'W_ControlsBind_C_Get_Conflicting_Keybind_Text_OLD::RequiredKeybindName' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Get_Conflicting_Keybind_Text_OLD, Text) == 0x000018, "Member 'W_ControlsBind_C_Get_Conflicting_Keybind_Text_OLD::Text' has a wrong offset!");
static_assert(offsetof(W_ControlsBind_C_Get_Conflicting_Keybind_Text_OLD, ConflictingBindFormat) == 0x000030, "Member 'W_ControlsBind_C_Get_Conflicting_Keybind_Text_OLD::ConflictingBindFormat' has a wrong offset!");

}

