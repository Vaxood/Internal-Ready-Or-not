#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Text2LipSync

#include "Basic.hpp"

#include "Text2LipSync_structs.hpp"


namespace SDK::Params
{

// Function Text2LipSync.PhrasesList.LoadFromDataTable
// 0x0010 (0x0010 - 0x0000)
struct PhrasesList_LoadFromDataTable final 
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1689[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhrasesList_LoadFromDataTable) == 0x000008, "Wrong alignment on PhrasesList_LoadFromDataTable");
static_assert(sizeof(PhrasesList_LoadFromDataTable) == 0x000010, "Wrong size on PhrasesList_LoadFromDataTable");
static_assert(offsetof(PhrasesList_LoadFromDataTable, DataTable) == 0x000000, "Member 'PhrasesList_LoadFromDataTable::DataTable' has a wrong offset!");
static_assert(offsetof(PhrasesList_LoadFromDataTable, ReturnValue) == 0x000008, "Member 'PhrasesList_LoadFromDataTable::ReturnValue' has a wrong offset!");

// Function Text2LipSync.PhrasesList.GetPhraseFromList
// 0x0038 (0x0038 - 0x0000)
struct PhrasesList_GetPhraseFromList final 
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLipSync_Phrase                        ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhrasesList_GetPhraseFromList) == 0x000008, "Wrong alignment on PhrasesList_GetPhraseFromList");
static_assert(sizeof(PhrasesList_GetPhraseFromList) == 0x000038, "Wrong size on PhrasesList_GetPhraseFromList");
static_assert(offsetof(PhrasesList_GetPhraseFromList, Key) == 0x000000, "Member 'PhrasesList_GetPhraseFromList::Key' has a wrong offset!");
static_assert(offsetof(PhrasesList_GetPhraseFromList, ReturnValue) == 0x000008, "Member 'PhrasesList_GetPhraseFromList::ReturnValue' has a wrong offset!");

// Function Text2LipSync.SubtitlesCache.AddAsset
// 0x0030 (0x0030 - 0x0000)
struct SubtitlesCache_AddAsset final 
{
public:
	class USoundBase*                             SoundAsset;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLipSync_TimedPhrase>           PhraseData;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 PauseIndexes;                                      // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PhraseDuration;                                    // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168A[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitlesCache_AddAsset) == 0x000008, "Wrong alignment on SubtitlesCache_AddAsset");
static_assert(sizeof(SubtitlesCache_AddAsset) == 0x000030, "Wrong size on SubtitlesCache_AddAsset");
static_assert(offsetof(SubtitlesCache_AddAsset, SoundAsset) == 0x000000, "Member 'SubtitlesCache_AddAsset::SoundAsset' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_AddAsset, PhraseData) == 0x000008, "Member 'SubtitlesCache_AddAsset::PhraseData' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_AddAsset, PauseIndexes) == 0x000018, "Member 'SubtitlesCache_AddAsset::PauseIndexes' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_AddAsset, PhraseDuration) == 0x000028, "Member 'SubtitlesCache_AddAsset::PhraseDuration' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_AddAsset, ReturnValue) == 0x00002C, "Member 'SubtitlesCache_AddAsset::ReturnValue' has a wrong offset!");

// Function Text2LipSync.SubtitlesCache.LoadFromBinaryFile
// 0x0018 (0x0018 - 0x0000)
struct SubtitlesCache_LoadFromBinaryFile final 
{
public:
	class FString                                 FullFileName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitlesCache_LoadFromBinaryFile) == 0x000008, "Wrong alignment on SubtitlesCache_LoadFromBinaryFile");
static_assert(sizeof(SubtitlesCache_LoadFromBinaryFile) == 0x000018, "Wrong size on SubtitlesCache_LoadFromBinaryFile");
static_assert(offsetof(SubtitlesCache_LoadFromBinaryFile, FullFileName) == 0x000000, "Member 'SubtitlesCache_LoadFromBinaryFile::FullFileName' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_LoadFromBinaryFile, ReturnValue) == 0x000010, "Member 'SubtitlesCache_LoadFromBinaryFile::ReturnValue' has a wrong offset!");

// Function Text2LipSync.SubtitlesCache.LoadFromDisk
// 0x0018 (0x0018 - 0x0000)
struct SubtitlesCache_LoadFromDisk final 
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168C[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitlesCache_LoadFromDisk) == 0x000008, "Wrong alignment on SubtitlesCache_LoadFromDisk");
static_assert(sizeof(SubtitlesCache_LoadFromDisk) == 0x000018, "Wrong size on SubtitlesCache_LoadFromDisk");
static_assert(offsetof(SubtitlesCache_LoadFromDisk, Filename) == 0x000000, "Member 'SubtitlesCache_LoadFromDisk::Filename' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_LoadFromDisk, ReturnValue) == 0x000010, "Member 'SubtitlesCache_LoadFromDisk::ReturnValue' has a wrong offset!");

// Function Text2LipSync.SubtitlesCache.RemoveAsset
// 0x0010 (0x0010 - 0x0000)
struct SubtitlesCache_RemoveAsset final 
{
public:
	class USoundBase*                             SoundAsset;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitlesCache_RemoveAsset) == 0x000008, "Wrong alignment on SubtitlesCache_RemoveAsset");
static_assert(sizeof(SubtitlesCache_RemoveAsset) == 0x000010, "Wrong size on SubtitlesCache_RemoveAsset");
static_assert(offsetof(SubtitlesCache_RemoveAsset, SoundAsset) == 0x000000, "Member 'SubtitlesCache_RemoveAsset::SoundAsset' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_RemoveAsset, ReturnValue) == 0x000008, "Member 'SubtitlesCache_RemoveAsset::ReturnValue' has a wrong offset!");

// Function Text2LipSync.SubtitlesCache.RenameAsset
// 0x0028 (0x0028 - 0x0000)
struct SubtitlesCache_RenameAsset final 
{
public:
	class FString                                 CurrentName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168E[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitlesCache_RenameAsset) == 0x000008, "Wrong alignment on SubtitlesCache_RenameAsset");
static_assert(sizeof(SubtitlesCache_RenameAsset) == 0x000028, "Wrong size on SubtitlesCache_RenameAsset");
static_assert(offsetof(SubtitlesCache_RenameAsset, CurrentName) == 0x000000, "Member 'SubtitlesCache_RenameAsset::CurrentName' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_RenameAsset, NewName) == 0x000010, "Member 'SubtitlesCache_RenameAsset::NewName' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_RenameAsset, ReturnValue) == 0x000020, "Member 'SubtitlesCache_RenameAsset::ReturnValue' has a wrong offset!");

// Function Text2LipSync.SubtitlesCache.GetCachedKeys
// 0x0010 (0x0010 - 0x0000)
struct SubtitlesCache_GetCachedKeys final 
{
public:
	TArray<class FString>                         CachedKeys;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesCache_GetCachedKeys) == 0x000008, "Wrong alignment on SubtitlesCache_GetCachedKeys");
static_assert(sizeof(SubtitlesCache_GetCachedKeys) == 0x000010, "Wrong size on SubtitlesCache_GetCachedKeys");
static_assert(offsetof(SubtitlesCache_GetCachedKeys, CachedKeys) == 0x000000, "Member 'SubtitlesCache_GetCachedKeys::CachedKeys' has a wrong offset!");

// Function Text2LipSync.SubtitlesCache.GetPausesForVoiceAsset
// 0x0020 (0x0020 - 0x0000)
struct SubtitlesCache_GetPausesForVoiceAsset final 
{
public:
	class USoundBase*                             SoundAsset;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLipSync_Interval>              Pauses;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168F[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitlesCache_GetPausesForVoiceAsset) == 0x000008, "Wrong alignment on SubtitlesCache_GetPausesForVoiceAsset");
static_assert(sizeof(SubtitlesCache_GetPausesForVoiceAsset) == 0x000020, "Wrong size on SubtitlesCache_GetPausesForVoiceAsset");
static_assert(offsetof(SubtitlesCache_GetPausesForVoiceAsset, SoundAsset) == 0x000000, "Member 'SubtitlesCache_GetPausesForVoiceAsset::SoundAsset' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_GetPausesForVoiceAsset, Pauses) == 0x000008, "Member 'SubtitlesCache_GetPausesForVoiceAsset::Pauses' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_GetPausesForVoiceAsset, ReturnValue) == 0x000018, "Member 'SubtitlesCache_GetPausesForVoiceAsset::ReturnValue' has a wrong offset!");

// Function Text2LipSync.SubtitlesCache.SaveToBinaryFile
// 0x0018 (0x0018 - 0x0000)
struct SubtitlesCache_SaveToBinaryFile final 
{
public:
	class FString                                 FullFileName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1690[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitlesCache_SaveToBinaryFile) == 0x000008, "Wrong alignment on SubtitlesCache_SaveToBinaryFile");
static_assert(sizeof(SubtitlesCache_SaveToBinaryFile) == 0x000018, "Wrong size on SubtitlesCache_SaveToBinaryFile");
static_assert(offsetof(SubtitlesCache_SaveToBinaryFile, FullFileName) == 0x000000, "Member 'SubtitlesCache_SaveToBinaryFile::FullFileName' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_SaveToBinaryFile, ReturnValue) == 0x000010, "Member 'SubtitlesCache_SaveToBinaryFile::ReturnValue' has a wrong offset!");

// Function Text2LipSync.SubtitlesCache.SaveToDisk
// 0x0018 (0x0018 - 0x0000)
struct SubtitlesCache_SaveToDisk final 
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1691[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitlesCache_SaveToDisk) == 0x000008, "Wrong alignment on SubtitlesCache_SaveToDisk");
static_assert(sizeof(SubtitlesCache_SaveToDisk) == 0x000018, "Wrong size on SubtitlesCache_SaveToDisk");
static_assert(offsetof(SubtitlesCache_SaveToDisk, Filename) == 0x000000, "Member 'SubtitlesCache_SaveToDisk::Filename' has a wrong offset!");
static_assert(offsetof(SubtitlesCache_SaveToDisk, ReturnValue) == 0x000010, "Member 'SubtitlesCache_SaveToDisk::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.BuildPhraseData
// 0x0010 (0x0010 - 0x0000)
struct TextLipSync_BuildPhraseData final 
{
public:
	TArray<struct FLipSync_TimedData>             Subtitles;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_BuildPhraseData) == 0x000008, "Wrong alignment on TextLipSync_BuildPhraseData");
static_assert(sizeof(TextLipSync_BuildPhraseData) == 0x000010, "Wrong size on TextLipSync_BuildPhraseData");
static_assert(offsetof(TextLipSync_BuildPhraseData, Subtitles) == 0x000000, "Member 'TextLipSync_BuildPhraseData::Subtitles' has a wrong offset!");

// Function Text2LipSync.TextLipSync.GetListOfCachedAssets
// 0x0010 (0x0010 - 0x0000)
struct TextLipSync_GetListOfCachedAssets final 
{
public:
	TArray<class FString>                         VoiceAssetNames;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_GetListOfCachedAssets) == 0x000008, "Wrong alignment on TextLipSync_GetListOfCachedAssets");
static_assert(sizeof(TextLipSync_GetListOfCachedAssets) == 0x000010, "Wrong size on TextLipSync_GetListOfCachedAssets");
static_assert(offsetof(TextLipSync_GetListOfCachedAssets, VoiceAssetNames) == 0x000000, "Member 'TextLipSync_GetListOfCachedAssets::VoiceAssetNames' has a wrong offset!");

// Function Text2LipSync.TextLipSync.Initialize
// 0x0010 (0x0010 - 0x0000)
struct TextLipSync_Initialize final 
{
public:
	class UAudioComponent*                        SpeakingAudioComp;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1697[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextLipSync_Initialize) == 0x000008, "Wrong alignment on TextLipSync_Initialize");
static_assert(sizeof(TextLipSync_Initialize) == 0x000010, "Wrong size on TextLipSync_Initialize");
static_assert(offsetof(TextLipSync_Initialize, SpeakingAudioComp) == 0x000000, "Member 'TextLipSync_Initialize::SpeakingAudioComp' has a wrong offset!");
static_assert(offsetof(TextLipSync_Initialize, ReturnValue) == 0x000008, "Member 'TextLipSync_Initialize::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.LoadCacheFromDisk
// 0x0018 (0x0018 - 0x0000)
struct TextLipSync_LoadCacheFromDisk final 
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBinaryFormat;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1698[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_LoadCacheFromDisk) == 0x000008, "Wrong alignment on TextLipSync_LoadCacheFromDisk");
static_assert(sizeof(TextLipSync_LoadCacheFromDisk) == 0x000018, "Wrong size on TextLipSync_LoadCacheFromDisk");
static_assert(offsetof(TextLipSync_LoadCacheFromDisk, Filename) == 0x000000, "Member 'TextLipSync_LoadCacheFromDisk::Filename' has a wrong offset!");
static_assert(offsetof(TextLipSync_LoadCacheFromDisk, bUseBinaryFormat) == 0x000010, "Member 'TextLipSync_LoadCacheFromDisk::bUseBinaryFormat' has a wrong offset!");
static_assert(offsetof(TextLipSync_LoadCacheFromDisk, ReturnValue) == 0x000014, "Member 'TextLipSync_LoadCacheFromDisk::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.LoadPhrasesSetFromDataTable
// 0x0010 (0x0010 - 0x0000)
struct TextLipSync_LoadPhrasesSetFromDataTable final 
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1699[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextLipSync_LoadPhrasesSetFromDataTable) == 0x000008, "Wrong alignment on TextLipSync_LoadPhrasesSetFromDataTable");
static_assert(sizeof(TextLipSync_LoadPhrasesSetFromDataTable) == 0x000010, "Wrong size on TextLipSync_LoadPhrasesSetFromDataTable");
static_assert(offsetof(TextLipSync_LoadPhrasesSetFromDataTable, Table) == 0x000000, "Member 'TextLipSync_LoadPhrasesSetFromDataTable::Table' has a wrong offset!");
static_assert(offsetof(TextLipSync_LoadPhrasesSetFromDataTable, ReturnValue) == 0x000008, "Member 'TextLipSync_LoadPhrasesSetFromDataTable::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.OnSpeaker_AudioPlaybackPercent
// 0x0010 (0x0010 - 0x0000)
struct TextLipSync_OnSpeaker_AudioPlaybackPercent final 
{
public:
	class USoundWave*                             PlayingSoundWave;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaybackPercent;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169A[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextLipSync_OnSpeaker_AudioPlaybackPercent) == 0x000008, "Wrong alignment on TextLipSync_OnSpeaker_AudioPlaybackPercent");
static_assert(sizeof(TextLipSync_OnSpeaker_AudioPlaybackPercent) == 0x000010, "Wrong size on TextLipSync_OnSpeaker_AudioPlaybackPercent");
static_assert(offsetof(TextLipSync_OnSpeaker_AudioPlaybackPercent, PlayingSoundWave) == 0x000000, "Member 'TextLipSync_OnSpeaker_AudioPlaybackPercent::PlayingSoundWave' has a wrong offset!");
static_assert(offsetof(TextLipSync_OnSpeaker_AudioPlaybackPercent, PlaybackPercent) == 0x000008, "Member 'TextLipSync_OnSpeaker_AudioPlaybackPercent::PlaybackPercent' has a wrong offset!");

// Function Text2LipSync.TextLipSync.OnSpeaker_AudioSingleEnvelopeValue
// 0x0010 (0x0010 - 0x0000)
struct TextLipSync_OnSpeaker_AudioSingleEnvelopeValue final 
{
public:
	class USoundWave*                             PlayingSoundWave;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnvelopeValue;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169B[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextLipSync_OnSpeaker_AudioSingleEnvelopeValue) == 0x000008, "Wrong alignment on TextLipSync_OnSpeaker_AudioSingleEnvelopeValue");
static_assert(sizeof(TextLipSync_OnSpeaker_AudioSingleEnvelopeValue) == 0x000010, "Wrong size on TextLipSync_OnSpeaker_AudioSingleEnvelopeValue");
static_assert(offsetof(TextLipSync_OnSpeaker_AudioSingleEnvelopeValue, PlayingSoundWave) == 0x000000, "Member 'TextLipSync_OnSpeaker_AudioSingleEnvelopeValue::PlayingSoundWave' has a wrong offset!");
static_assert(offsetof(TextLipSync_OnSpeaker_AudioSingleEnvelopeValue, EnvelopeValue) == 0x000008, "Member 'TextLipSync_OnSpeaker_AudioSingleEnvelopeValue::EnvelopeValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.RemovePhraseFromCache
// 0x0010 (0x0010 - 0x0000)
struct TextLipSync_RemovePhraseFromCache final 
{
public:
	class USoundWave*                             VoiceAsset;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextLipSync_RemovePhraseFromCache) == 0x000008, "Wrong alignment on TextLipSync_RemovePhraseFromCache");
static_assert(sizeof(TextLipSync_RemovePhraseFromCache) == 0x000010, "Wrong size on TextLipSync_RemovePhraseFromCache");
static_assert(offsetof(TextLipSync_RemovePhraseFromCache, VoiceAsset) == 0x000000, "Member 'TextLipSync_RemovePhraseFromCache::VoiceAsset' has a wrong offset!");
static_assert(offsetof(TextLipSync_RemovePhraseFromCache, ReturnValue) == 0x000008, "Member 'TextLipSync_RemovePhraseFromCache::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.SaveCacheToDisk
// 0x0018 (0x0018 - 0x0000)
struct TextLipSync_SaveCacheToDisk final 
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBinaryFormat;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169D[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_SaveCacheToDisk) == 0x000008, "Wrong alignment on TextLipSync_SaveCacheToDisk");
static_assert(sizeof(TextLipSync_SaveCacheToDisk) == 0x000018, "Wrong size on TextLipSync_SaveCacheToDisk");
static_assert(offsetof(TextLipSync_SaveCacheToDisk, Filename) == 0x000000, "Member 'TextLipSync_SaveCacheToDisk::Filename' has a wrong offset!");
static_assert(offsetof(TextLipSync_SaveCacheToDisk, bUseBinaryFormat) == 0x000010, "Member 'TextLipSync_SaveCacheToDisk::bUseBinaryFormat' has a wrong offset!");
static_assert(offsetof(TextLipSync_SaveCacheToDisk, ReturnValue) == 0x000014, "Member 'TextLipSync_SaveCacheToDisk::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.SaveLastPhraseToCache
// 0x0001 (0x0001 - 0x0000)
struct TextLipSync_SaveLastPhraseToCache final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_SaveLastPhraseToCache) == 0x000001, "Wrong alignment on TextLipSync_SaveLastPhraseToCache");
static_assert(sizeof(TextLipSync_SaveLastPhraseToCache) == 0x000001, "Wrong size on TextLipSync_SaveLastPhraseToCache");
static_assert(offsetof(TextLipSync_SaveLastPhraseToCache, ReturnValue) == 0x000000, "Member 'TextLipSync_SaveLastPhraseToCache::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.Speak
// 0x0038 (0x0038 - 0x0000)
struct TextLipSync_Speak final 
{
public:
	struct FLipSync_Phrase                        Phrase;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bStartPlayingSound;                                // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169E[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextLipSync_Speak) == 0x000008, "Wrong alignment on TextLipSync_Speak");
static_assert(sizeof(TextLipSync_Speak) == 0x000038, "Wrong size on TextLipSync_Speak");
static_assert(offsetof(TextLipSync_Speak, Phrase) == 0x000000, "Member 'TextLipSync_Speak::Phrase' has a wrong offset!");
static_assert(offsetof(TextLipSync_Speak, bStartPlayingSound) == 0x000030, "Member 'TextLipSync_Speak::bStartPlayingSound' has a wrong offset!");
static_assert(offsetof(TextLipSync_Speak, ReturnValue) == 0x000031, "Member 'TextLipSync_Speak::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.SpeakAgain
// 0x0001 (0x0001 - 0x0000)
struct TextLipSync_SpeakAgain final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_SpeakAgain) == 0x000001, "Wrong alignment on TextLipSync_SpeakAgain");
static_assert(sizeof(TextLipSync_SpeakAgain) == 0x000001, "Wrong size on TextLipSync_SpeakAgain");
static_assert(offsetof(TextLipSync_SpeakAgain, ReturnValue) == 0x000000, "Member 'TextLipSync_SpeakAgain::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.SpeakByKey
// 0x000C (0x000C - 0x0000)
struct TextLipSync_SpeakByKey final 
{
public:
	class FName                                   PhraseKey;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartPlayingSound;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169F[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextLipSync_SpeakByKey) == 0x000004, "Wrong alignment on TextLipSync_SpeakByKey");
static_assert(sizeof(TextLipSync_SpeakByKey) == 0x00000C, "Wrong size on TextLipSync_SpeakByKey");
static_assert(offsetof(TextLipSync_SpeakByKey, PhraseKey) == 0x000000, "Member 'TextLipSync_SpeakByKey::PhraseKey' has a wrong offset!");
static_assert(offsetof(TextLipSync_SpeakByKey, bStartPlayingSound) == 0x000008, "Member 'TextLipSync_SpeakByKey::bStartPlayingSound' has a wrong offset!");
static_assert(offsetof(TextLipSync_SpeakByKey, ReturnValue) == 0x000009, "Member 'TextLipSync_SpeakByKey::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.StopSpeaking
// 0x0002 (0x0002 - 0x0000)
struct TextLipSync_StopSpeaking final 
{
public:
	bool                                          bStopPlayingSound;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_StopSpeaking) == 0x000001, "Wrong alignment on TextLipSync_StopSpeaking");
static_assert(sizeof(TextLipSync_StopSpeaking) == 0x000002, "Wrong size on TextLipSync_StopSpeaking");
static_assert(offsetof(TextLipSync_StopSpeaking, bStopPlayingSound) == 0x000000, "Member 'TextLipSync_StopSpeaking::bStopPlayingSound' has a wrong offset!");
static_assert(offsetof(TextLipSync_StopSpeaking, ReturnValue) == 0x000001, "Member 'TextLipSync_StopSpeaking::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.StretchDataInterval
// 0x0010 (0x0010 - 0x0000)
struct TextLipSync_StretchDataInterval final 
{
public:
	int32                                         StartIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewStartTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewEndTime;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_StretchDataInterval) == 0x000004, "Wrong alignment on TextLipSync_StretchDataInterval");
static_assert(sizeof(TextLipSync_StretchDataInterval) == 0x000010, "Wrong size on TextLipSync_StretchDataInterval");
static_assert(offsetof(TextLipSync_StretchDataInterval, StartIndex) == 0x000000, "Member 'TextLipSync_StretchDataInterval::StartIndex' has a wrong offset!");
static_assert(offsetof(TextLipSync_StretchDataInterval, EndIndex) == 0x000004, "Member 'TextLipSync_StretchDataInterval::EndIndex' has a wrong offset!");
static_assert(offsetof(TextLipSync_StretchDataInterval, NewStartTime) == 0x000008, "Member 'TextLipSync_StretchDataInterval::NewStartTime' has a wrong offset!");
static_assert(offsetof(TextLipSync_StretchDataInterval, NewEndTime) == 0x00000C, "Member 'TextLipSync_StretchDataInterval::NewEndTime' has a wrong offset!");

// Function Text2LipSync.TextLipSync.StretchPhraseData
// 0x0008 (0x0008 - 0x0000)
struct TextLipSync_StretchPhraseData final 
{
public:
	float                                         ErrorForPunctuation;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorForWord;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_StretchPhraseData) == 0x000004, "Wrong alignment on TextLipSync_StretchPhraseData");
static_assert(sizeof(TextLipSync_StretchPhraseData) == 0x000008, "Wrong size on TextLipSync_StretchPhraseData");
static_assert(offsetof(TextLipSync_StretchPhraseData, ErrorForPunctuation) == 0x000000, "Member 'TextLipSync_StretchPhraseData::ErrorForPunctuation' has a wrong offset!");
static_assert(offsetof(TextLipSync_StretchPhraseData, ErrorForWord) == 0x000004, "Member 'TextLipSync_StretchPhraseData::ErrorForWord' has a wrong offset!");

// Function Text2LipSync.TextLipSync.TextToPhonemes
// 0x0030 (0x0030 - 0x0000)
struct TextLipSync_TextToPhonemes final 
{
public:
	class FText                                   Line;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FLipSync_PhonemeInPhrase>       OutputArray;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         VowelsCount;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PunctuationMarksCount;                             // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_TextToPhonemes) == 0x000008, "Wrong alignment on TextLipSync_TextToPhonemes");
static_assert(sizeof(TextLipSync_TextToPhonemes) == 0x000030, "Wrong size on TextLipSync_TextToPhonemes");
static_assert(offsetof(TextLipSync_TextToPhonemes, Line) == 0x000000, "Member 'TextLipSync_TextToPhonemes::Line' has a wrong offset!");
static_assert(offsetof(TextLipSync_TextToPhonemes, OutputArray) == 0x000018, "Member 'TextLipSync_TextToPhonemes::OutputArray' has a wrong offset!");
static_assert(offsetof(TextLipSync_TextToPhonemes, VowelsCount) == 0x000028, "Member 'TextLipSync_TextToPhonemes::VowelsCount' has a wrong offset!");
static_assert(offsetof(TextLipSync_TextToPhonemes, PunctuationMarksCount) == 0x00002C, "Member 'TextLipSync_TextToPhonemes::PunctuationMarksCount' has a wrong offset!");

// Function Text2LipSync.TextLipSync.GetActiveMorphTargets
// 0x0010 (0x0010 - 0x0000)
struct TextLipSync_GetActiveMorphTargets final 
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_GetActiveMorphTargets) == 0x000008, "Wrong alignment on TextLipSync_GetActiveMorphTargets");
static_assert(sizeof(TextLipSync_GetActiveMorphTargets) == 0x000010, "Wrong size on TextLipSync_GetActiveMorphTargets");
static_assert(offsetof(TextLipSync_GetActiveMorphTargets, ReturnValue) == 0x000000, "Member 'TextLipSync_GetActiveMorphTargets::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.GetCurrentPhonemesLine
// 0x0010 (0x0010 - 0x0000)
struct TextLipSync_GetCurrentPhonemesLine final 
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_GetCurrentPhonemesLine) == 0x000008, "Wrong alignment on TextLipSync_GetCurrentPhonemesLine");
static_assert(sizeof(TextLipSync_GetCurrentPhonemesLine) == 0x000010, "Wrong size on TextLipSync_GetCurrentPhonemesLine");
static_assert(offsetof(TextLipSync_GetCurrentPhonemesLine, ReturnValue) == 0x000000, "Member 'TextLipSync_GetCurrentPhonemesLine::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.GetCurrentPhrase
// 0x0050 (0x0050 - 0x0000)
struct TextLipSync_GetCurrentPhrase final 
{
public:
	TMap<float, EPhoneme>                         ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_GetCurrentPhrase) == 0x000008, "Wrong alignment on TextLipSync_GetCurrentPhrase");
static_assert(sizeof(TextLipSync_GetCurrentPhrase) == 0x000050, "Wrong size on TextLipSync_GetCurrentPhrase");
static_assert(offsetof(TextLipSync_GetCurrentPhrase, ReturnValue) == 0x000000, "Member 'TextLipSync_GetCurrentPhrase::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.GetCurveValue
// 0x000C (0x000C - 0x0000)
struct TextLipSync_GetCurveValue final 
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_GetCurveValue) == 0x000004, "Wrong alignment on TextLipSync_GetCurveValue");
static_assert(sizeof(TextLipSync_GetCurveValue) == 0x00000C, "Wrong size on TextLipSync_GetCurveValue");
static_assert(offsetof(TextLipSync_GetCurveValue, CurveName) == 0x000000, "Member 'TextLipSync_GetCurveValue::CurveName' has a wrong offset!");
static_assert(offsetof(TextLipSync_GetCurveValue, ReturnValue) == 0x000008, "Member 'TextLipSync_GetCurveValue::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.GetLastPhraseDuration
// 0x0004 (0x0004 - 0x0000)
struct TextLipSync_GetLastPhraseDuration final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_GetLastPhraseDuration) == 0x000004, "Wrong alignment on TextLipSync_GetLastPhraseDuration");
static_assert(sizeof(TextLipSync_GetLastPhraseDuration) == 0x000004, "Wrong size on TextLipSync_GetLastPhraseDuration");
static_assert(offsetof(TextLipSync_GetLastPhraseDuration, ReturnValue) == 0x000000, "Member 'TextLipSync_GetLastPhraseDuration::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.GetSpeakingTime
// 0x0004 (0x0004 - 0x0000)
struct TextLipSync_GetSpeakingTime final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_GetSpeakingTime) == 0x000004, "Wrong alignment on TextLipSync_GetSpeakingTime");
static_assert(sizeof(TextLipSync_GetSpeakingTime) == 0x000004, "Wrong size on TextLipSync_GetSpeakingTime");
static_assert(offsetof(TextLipSync_GetSpeakingTime, ReturnValue) == 0x000000, "Member 'TextLipSync_GetSpeakingTime::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct TextLipSync_IsInitialized final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_IsInitialized) == 0x000001, "Wrong alignment on TextLipSync_IsInitialized");
static_assert(sizeof(TextLipSync_IsInitialized) == 0x000001, "Wrong size on TextLipSync_IsInitialized");
static_assert(offsetof(TextLipSync_IsInitialized, ReturnValue) == 0x000000, "Member 'TextLipSync_IsInitialized::ReturnValue' has a wrong offset!");

// Function Text2LipSync.TextLipSync.IsSpeaking
// 0x0001 (0x0001 - 0x0000)
struct TextLipSync_IsSpeaking final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextLipSync_IsSpeaking) == 0x000001, "Wrong alignment on TextLipSync_IsSpeaking");
static_assert(sizeof(TextLipSync_IsSpeaking) == 0x000001, "Wrong size on TextLipSync_IsSpeaking");
static_assert(offsetof(TextLipSync_IsSpeaking, ReturnValue) == 0x000000, "Member 'TextLipSync_IsSpeaking::ReturnValue' has a wrong offset!");

}

