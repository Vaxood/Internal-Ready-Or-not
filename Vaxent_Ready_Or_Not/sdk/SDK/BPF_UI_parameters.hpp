#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_UI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "E_CustomizationGroups_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPF_UI.BPF_UI_C.RemoveSpacesFromString
// 0x0078 (0x0078 - 0x0000)
struct BPF_UI_C_RemoveSpacesFromString final 
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ReturnString;                                      // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   ReturnText;                                        // 0x0028(0x0018)(Parm, OutParm)
	class FName                                   ReturnName;                                        // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Replace_ReturnValue;                      // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0060(0x0018)()
};
static_assert(alignof(BPF_UI_C_RemoveSpacesFromString) == 0x000008, "Wrong alignment on BPF_UI_C_RemoveSpacesFromString");
static_assert(sizeof(BPF_UI_C_RemoveSpacesFromString) == 0x000078, "Wrong size on BPF_UI_C_RemoveSpacesFromString");
static_assert(offsetof(BPF_UI_C_RemoveSpacesFromString, String) == 0x000000, "Member 'BPF_UI_C_RemoveSpacesFromString::String' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_RemoveSpacesFromString, __WorldContext) == 0x000010, "Member 'BPF_UI_C_RemoveSpacesFromString::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_RemoveSpacesFromString, ReturnString) == 0x000018, "Member 'BPF_UI_C_RemoveSpacesFromString::ReturnString' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_RemoveSpacesFromString, ReturnText) == 0x000028, "Member 'BPF_UI_C_RemoveSpacesFromString::ReturnText' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_RemoveSpacesFromString, ReturnName) == 0x000040, "Member 'BPF_UI_C_RemoveSpacesFromString::ReturnName' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_RemoveSpacesFromString, CallFunc_Replace_ReturnValue) == 0x000048, "Member 'BPF_UI_C_RemoveSpacesFromString::CallFunc_Replace_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_RemoveSpacesFromString, CallFunc_Conv_StringToName_ReturnValue) == 0x000058, "Member 'BPF_UI_C_RemoveSpacesFromString::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_RemoveSpacesFromString, CallFunc_Conv_StringToText_ReturnValue) == 0x000060, "Member 'BPF_UI_C_RemoveSpacesFromString::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetLoadoutCategoryText
// 0x0030 (0x0030 - 0x0000)
struct BPF_UI_C_GetLoadoutCategoryText final 
{
public:
	EItemCategory                                 ItemCategory;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E03[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Category_Text;                                     // 0x0010(0x0018)(Parm, OutParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_UI_C_GetLoadoutCategoryText) == 0x000008, "Wrong alignment on BPF_UI_C_GetLoadoutCategoryText");
static_assert(sizeof(BPF_UI_C_GetLoadoutCategoryText) == 0x000030, "Wrong size on BPF_UI_C_GetLoadoutCategoryText");
static_assert(offsetof(BPF_UI_C_GetLoadoutCategoryText, ItemCategory) == 0x000000, "Member 'BPF_UI_C_GetLoadoutCategoryText::ItemCategory' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLoadoutCategoryText, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetLoadoutCategoryText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLoadoutCategoryText, Category_Text) == 0x000010, "Member 'BPF_UI_C_GetLoadoutCategoryText::Category_Text' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLoadoutCategoryText, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'BPF_UI_C_GetLoadoutCategoryText::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetCustomizationCategoryText
// 0x01C8 (0x01C8 - 0x0000)
struct BPF_UI_C_GetCustomizationCategoryText final 
{
public:
	ECustomizationType                            ItemCategory;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E04[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Category_Text;                                     // 0x0010(0x0018)(Parm, OutParm)
	ECustomizationType                            Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E05[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00C0(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00D8(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x00F0(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x0108(0x0018)()
	class FText                                   Temp_text_Variable_10;                             // 0x0120(0x0018)()
	class FText                                   Temp_text_Variable_11;                             // 0x0138(0x0018)()
	class FText                                   Temp_text_Variable_12;                             // 0x0150(0x0018)()
	class FText                                   Temp_text_Variable_13;                             // 0x0168(0x0018)()
	class FText                                   Temp_text_Variable_14;                             // 0x0180(0x0018)()
	class FText                                   Temp_text_Variable_15;                             // 0x0198(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x01B0(0x0018)()
};
static_assert(alignof(BPF_UI_C_GetCustomizationCategoryText) == 0x000008, "Wrong alignment on BPF_UI_C_GetCustomizationCategoryText");
static_assert(sizeof(BPF_UI_C_GetCustomizationCategoryText) == 0x0001C8, "Wrong size on BPF_UI_C_GetCustomizationCategoryText");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, ItemCategory) == 0x000000, "Member 'BPF_UI_C_GetCustomizationCategoryText::ItemCategory' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetCustomizationCategoryText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Category_Text) == 0x000010, "Member 'BPF_UI_C_GetCustomizationCategoryText::Category_Text' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_byte_Variable) == 0x000028, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable) == 0x000030, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_1) == 0x000048, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_2) == 0x000060, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_3) == 0x000078, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_4) == 0x000090, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_5) == 0x0000A8, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_6) == 0x0000C0, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_7) == 0x0000D8, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_8) == 0x0000F0, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_9) == 0x000108, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_10) == 0x000120, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_11) == 0x000138, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_12) == 0x000150, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_13) == 0x000168, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_14) == 0x000180, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, Temp_text_Variable_15) == 0x000198, "Member 'BPF_UI_C_GetCustomizationCategoryText::Temp_text_Variable_15' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationCategoryText, K2Node_Select_Default) == 0x0001B0, "Member 'BPF_UI_C_GetCustomizationCategoryText::K2Node_Select_Default' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetItemClassText
// 0x0228 (0x0228 - 0x0000)
struct BPF_UI_C_GetItemClassText final 
{
public:
	EItemClass                                    ItemCategory;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E06[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Category_Text;                                     // 0x0010(0x0018)(Parm, OutParm)
	EItemClass                                    Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E07[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00C0(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00D8(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x00F0(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x0108(0x0018)()
	class FText                                   Temp_text_Variable_10;                             // 0x0120(0x0018)()
	class FText                                   Temp_text_Variable_11;                             // 0x0138(0x0018)()
	class FText                                   Temp_text_Variable_12;                             // 0x0150(0x0018)()
	class FText                                   Temp_text_Variable_13;                             // 0x0168(0x0018)()
	class FText                                   Temp_text_Variable_14;                             // 0x0180(0x0018)()
	class FText                                   Temp_text_Variable_15;                             // 0x0198(0x0018)()
	class FText                                   Temp_text_Variable_16;                             // 0x01B0(0x0018)()
	class FText                                   Temp_text_Variable_17;                             // 0x01C8(0x0018)()
	class FText                                   Temp_text_Variable_18;                             // 0x01E0(0x0018)()
	class FText                                   Temp_text_Variable_19;                             // 0x01F8(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0210(0x0018)()
};
static_assert(alignof(BPF_UI_C_GetItemClassText) == 0x000008, "Wrong alignment on BPF_UI_C_GetItemClassText");
static_assert(sizeof(BPF_UI_C_GetItemClassText) == 0x000228, "Wrong size on BPF_UI_C_GetItemClassText");
static_assert(offsetof(BPF_UI_C_GetItemClassText, ItemCategory) == 0x000000, "Member 'BPF_UI_C_GetItemClassText::ItemCategory' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetItemClassText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Category_Text) == 0x000010, "Member 'BPF_UI_C_GetItemClassText::Category_Text' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_byte_Variable) == 0x000028, "Member 'BPF_UI_C_GetItemClassText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable) == 0x000030, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_1) == 0x000048, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_2) == 0x000060, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_3) == 0x000078, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_4) == 0x000090, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_5) == 0x0000A8, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_6) == 0x0000C0, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_7) == 0x0000D8, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_8) == 0x0000F0, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_9) == 0x000108, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_10) == 0x000120, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_11) == 0x000138, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_12) == 0x000150, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_13) == 0x000168, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_14) == 0x000180, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_15) == 0x000198, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_15' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_16) == 0x0001B0, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_16' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_17) == 0x0001C8, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_17' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_18) == 0x0001E0, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_18' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, Temp_text_Variable_19) == 0x0001F8, "Member 'BPF_UI_C_GetItemClassText::Temp_text_Variable_19' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemClassText, K2Node_Select_Default) == 0x000210, "Member 'BPF_UI_C_GetItemClassText::K2Node_Select_Default' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetAttachmentSlotText
// 0x0120 (0x0120 - 0x0000)
struct BPF_UI_C_GetAttachmentSlotText final 
{
public:
	EWeaponAttachmentType                         AttachmentType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E08[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   SlotText;                                          // 0x0010(0x0018)(Parm, OutParm)
	EWeaponAttachmentType                         Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E09[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00C0(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00D8(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x00F0(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0108(0x0018)()
};
static_assert(alignof(BPF_UI_C_GetAttachmentSlotText) == 0x000008, "Wrong alignment on BPF_UI_C_GetAttachmentSlotText");
static_assert(sizeof(BPF_UI_C_GetAttachmentSlotText) == 0x000120, "Wrong size on BPF_UI_C_GetAttachmentSlotText");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, AttachmentType) == 0x000000, "Member 'BPF_UI_C_GetAttachmentSlotText::AttachmentType' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetAttachmentSlotText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, SlotText) == 0x000010, "Member 'BPF_UI_C_GetAttachmentSlotText::SlotText' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, Temp_byte_Variable) == 0x000028, "Member 'BPF_UI_C_GetAttachmentSlotText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, Temp_text_Variable) == 0x000030, "Member 'BPF_UI_C_GetAttachmentSlotText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, Temp_text_Variable_1) == 0x000048, "Member 'BPF_UI_C_GetAttachmentSlotText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, Temp_text_Variable_2) == 0x000060, "Member 'BPF_UI_C_GetAttachmentSlotText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, Temp_text_Variable_3) == 0x000078, "Member 'BPF_UI_C_GetAttachmentSlotText::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, Temp_text_Variable_4) == 0x000090, "Member 'BPF_UI_C_GetAttachmentSlotText::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, Temp_text_Variable_5) == 0x0000A8, "Member 'BPF_UI_C_GetAttachmentSlotText::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, Temp_text_Variable_6) == 0x0000C0, "Member 'BPF_UI_C_GetAttachmentSlotText::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, Temp_text_Variable_7) == 0x0000D8, "Member 'BPF_UI_C_GetAttachmentSlotText::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, Temp_text_Variable_8) == 0x0000F0, "Member 'BPF_UI_C_GetAttachmentSlotText::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAttachmentSlotText, K2Node_Select_Default) == 0x000108, "Member 'BPF_UI_C_GetAttachmentSlotText::K2Node_Select_Default' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetItemType
// 0x0028 (0x0028 - 0x0000)
struct BPF_UI_C_GetItemType final 
{
public:
	class UClass*                                 BaseItemClass;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemType                                     Item_Type;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E0A[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseItem*                              CallFunc_GetClassDefaultObject_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_UI_C_GetItemType) == 0x000008, "Wrong alignment on BPF_UI_C_GetItemType");
static_assert(sizeof(BPF_UI_C_GetItemType) == 0x000028, "Wrong size on BPF_UI_C_GetItemType");
static_assert(offsetof(BPF_UI_C_GetItemType, BaseItemClass) == 0x000000, "Member 'BPF_UI_C_GetItemType::BaseItemClass' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemType, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetItemType::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemType, Item_Type) == 0x000010, "Member 'BPF_UI_C_GetItemType::Item_Type' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemType, CallFunc_GetClassDefaultObject_ReturnValue) == 0x000018, "Member 'BPF_UI_C_GetItemType::CallFunc_GetClassDefaultObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetItemType, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BPF_UI_C_GetItemType::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.UpdateCurrent_LoadoutUI_Slot
// 0x0058 (0x0058 - 0x0000)
struct BPF_UI_C_UpdateCurrent_LoadoutUI_Slot final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_LoadoutSlot_C*                       CurrentSlot;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UUserWidget*>                    CallFunc_GetAllWidgetsWithInterface_FoundWidgets;  // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ILoadoutUI_C>          K2Node_DynamicCast_AsLoadout_UI;                   // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E0B[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E0C[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot) == 0x000008, "Wrong alignment on BPF_UI_C_UpdateCurrent_LoadoutUI_Slot");
static_assert(sizeof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot) == 0x000058, "Wrong size on BPF_UI_C_UpdateCurrent_LoadoutUI_Slot");
static_assert(offsetof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot, WorldContextObject) == 0x000000, "Member 'BPF_UI_C_UpdateCurrent_LoadoutUI_Slot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot, CurrentSlot) == 0x000008, "Member 'BPF_UI_C_UpdateCurrent_LoadoutUI_Slot::CurrentSlot' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot, __WorldContext) == 0x000010, "Member 'BPF_UI_C_UpdateCurrent_LoadoutUI_Slot::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot, CallFunc_GetAllWidgetsWithInterface_FoundWidgets) == 0x000018, "Member 'BPF_UI_C_UpdateCurrent_LoadoutUI_Slot::CallFunc_GetAllWidgetsWithInterface_FoundWidgets' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BPF_UI_C_UpdateCurrent_LoadoutUI_Slot::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BPF_UI_C_UpdateCurrent_LoadoutUI_Slot::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot, CallFunc_Array_Get_Item) == 0x000030, "Member 'BPF_UI_C_UpdateCurrent_LoadoutUI_Slot::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot, K2Node_DynamicCast_AsLoadout_UI) == 0x000038, "Member 'BPF_UI_C_UpdateCurrent_LoadoutUI_Slot::K2Node_DynamicCast_AsLoadout_UI' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BPF_UI_C_UpdateCurrent_LoadoutUI_Slot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BPF_UI_C_UpdateCurrent_LoadoutUI_Slot::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BPF_UI_C_UpdateCurrent_LoadoutUI_Slot::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_UpdateCurrent_LoadoutUI_Slot, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BPF_UI_C_UpdateCurrent_LoadoutUI_Slot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetLinearColorScheme
// 0x00D8 (0x00D8 - 0x0000)
struct BPF_UI_C_GetLinearColorScheme final 
{
public:
	float                                         Opacity;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E0D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           White;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dark;                                              // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Red;                                               // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Yellow;                                            // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Blue;                                              // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Green;                                             // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPDA_UI_Styleguide_C*                   StyleGuide;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_White;                       // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Dark;                        // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Red;                         // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Yellow;                      // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Blue;                        // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Green;                       // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_UI_C_GetLinearColorScheme) == 0x000008, "Wrong alignment on BPF_UI_C_GetLinearColorScheme");
static_assert(sizeof(BPF_UI_C_GetLinearColorScheme) == 0x0000D8, "Wrong size on BPF_UI_C_GetLinearColorScheme");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, Opacity) == 0x000000, "Member 'BPF_UI_C_GetLinearColorScheme::Opacity' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetLinearColorScheme::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, White) == 0x000010, "Member 'BPF_UI_C_GetLinearColorScheme::White' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, Dark) == 0x000020, "Member 'BPF_UI_C_GetLinearColorScheme::Dark' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, Red) == 0x000030, "Member 'BPF_UI_C_GetLinearColorScheme::Red' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, Yellow) == 0x000040, "Member 'BPF_UI_C_GetLinearColorScheme::Yellow' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, Blue) == 0x000050, "Member 'BPF_UI_C_GetLinearColorScheme::Blue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, Green) == 0x000060, "Member 'BPF_UI_C_GetLinearColorScheme::Green' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, StyleGuide) == 0x000070, "Member 'BPF_UI_C_GetLinearColorScheme::StyleGuide' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, CallFunc_GetAllColors_White) == 0x000078, "Member 'BPF_UI_C_GetLinearColorScheme::CallFunc_GetAllColors_White' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, CallFunc_GetAllColors_Dark) == 0x000088, "Member 'BPF_UI_C_GetLinearColorScheme::CallFunc_GetAllColors_Dark' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, CallFunc_GetAllColors_Red) == 0x000098, "Member 'BPF_UI_C_GetLinearColorScheme::CallFunc_GetAllColors_Red' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, CallFunc_GetAllColors_Yellow) == 0x0000A8, "Member 'BPF_UI_C_GetLinearColorScheme::CallFunc_GetAllColors_Yellow' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, CallFunc_GetAllColors_Blue) == 0x0000B8, "Member 'BPF_UI_C_GetLinearColorScheme::CallFunc_GetAllColors_Blue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLinearColorScheme, CallFunc_GetAllColors_Green) == 0x0000C8, "Member 'BPF_UI_C_GetLinearColorScheme::CallFunc_GetAllColors_Green' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetSlateColorScheme
// 0x0258 (0x0258 - 0x0000)
struct BPF_UI_C_GetSlateColorScheme final 
{
public:
	float                                         Opacity;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E0E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            White;                                             // 0x0010(0x0028)(Parm, OutParm)
	struct FSlateColor                            Dark;                                              // 0x0038(0x0028)(Parm, OutParm)
	struct FSlateColor                            Red;                                               // 0x0060(0x0028)(Parm, OutParm)
	struct FSlateColor                            Yellow;                                            // 0x0088(0x0028)(Parm, OutParm)
	struct FSlateColor                            Blue;                                              // 0x00B0(0x0028)(Parm, OutParm)
	struct FSlateColor                            Green;                                             // 0x00D8(0x0028)(Parm, OutParm)
	class UPDA_UI_Styleguide_C*                   StyleGuide;                                        // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_White;                       // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Dark;                        // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Red;                         // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Yellow;                      // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Blue;                        // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Green;                       // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0168(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0190(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x01B8(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_3;                    // 0x01E0(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_4;                    // 0x0208(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_5;                    // 0x0230(0x0028)()
};
static_assert(alignof(BPF_UI_C_GetSlateColorScheme) == 0x000008, "Wrong alignment on BPF_UI_C_GetSlateColorScheme");
static_assert(sizeof(BPF_UI_C_GetSlateColorScheme) == 0x000258, "Wrong size on BPF_UI_C_GetSlateColorScheme");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, Opacity) == 0x000000, "Member 'BPF_UI_C_GetSlateColorScheme::Opacity' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetSlateColorScheme::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, White) == 0x000010, "Member 'BPF_UI_C_GetSlateColorScheme::White' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, Dark) == 0x000038, "Member 'BPF_UI_C_GetSlateColorScheme::Dark' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, Red) == 0x000060, "Member 'BPF_UI_C_GetSlateColorScheme::Red' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, Yellow) == 0x000088, "Member 'BPF_UI_C_GetSlateColorScheme::Yellow' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, Blue) == 0x0000B0, "Member 'BPF_UI_C_GetSlateColorScheme::Blue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, Green) == 0x0000D8, "Member 'BPF_UI_C_GetSlateColorScheme::Green' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, StyleGuide) == 0x000100, "Member 'BPF_UI_C_GetSlateColorScheme::StyleGuide' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, CallFunc_GetAllColors_White) == 0x000108, "Member 'BPF_UI_C_GetSlateColorScheme::CallFunc_GetAllColors_White' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, CallFunc_GetAllColors_Dark) == 0x000118, "Member 'BPF_UI_C_GetSlateColorScheme::CallFunc_GetAllColors_Dark' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, CallFunc_GetAllColors_Red) == 0x000128, "Member 'BPF_UI_C_GetSlateColorScheme::CallFunc_GetAllColors_Red' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, CallFunc_GetAllColors_Yellow) == 0x000138, "Member 'BPF_UI_C_GetSlateColorScheme::CallFunc_GetAllColors_Yellow' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, CallFunc_GetAllColors_Blue) == 0x000148, "Member 'BPF_UI_C_GetSlateColorScheme::CallFunc_GetAllColors_Blue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, CallFunc_GetAllColors_Green) == 0x000158, "Member 'BPF_UI_C_GetSlateColorScheme::CallFunc_GetAllColors_Green' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, K2Node_MakeStruct_SlateColor) == 0x000168, "Member 'BPF_UI_C_GetSlateColorScheme::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, K2Node_MakeStruct_SlateColor_1) == 0x000190, "Member 'BPF_UI_C_GetSlateColorScheme::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, K2Node_MakeStruct_SlateColor_2) == 0x0001B8, "Member 'BPF_UI_C_GetSlateColorScheme::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, K2Node_MakeStruct_SlateColor_3) == 0x0001E0, "Member 'BPF_UI_C_GetSlateColorScheme::K2Node_MakeStruct_SlateColor_3' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, K2Node_MakeStruct_SlateColor_4) == 0x000208, "Member 'BPF_UI_C_GetSlateColorScheme::K2Node_MakeStruct_SlateColor_4' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSlateColorScheme, K2Node_MakeStruct_SlateColor_5) == 0x000230, "Member 'BPF_UI_C_GetSlateColorScheme::K2Node_MakeStruct_SlateColor_5' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetPlayerTeamColor
// 0x0120 (0x0120 - 0x0000)
struct BPF_UI_C_GetPlayerTeamColor final 
{
public:
	ETeamType                                     Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E0F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Opacity;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LinearColor;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            SlateColor;                                        // 0x0020(0x0028)(Parm, OutParm)
	class UPDA_UI_Styleguide_C*                   StyleGuide;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamType                                     Temp_byte_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E10[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetBlueTeamColor_BlueTeam;                // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_White;                       // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Dark;                        // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Red;                         // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Yellow;                      // 0x0094(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Blue;                        // 0x00A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Green;                       // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGoldTeamColor_RedTeam;                 // 0x00C4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetRedTeamColor_RedTeam;                  // 0x00D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x00E4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E11[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x00F8(0x0028)()
};
static_assert(alignof(BPF_UI_C_GetPlayerTeamColor) == 0x000008, "Wrong alignment on BPF_UI_C_GetPlayerTeamColor");
static_assert(sizeof(BPF_UI_C_GetPlayerTeamColor) == 0x000120, "Wrong size on BPF_UI_C_GetPlayerTeamColor");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, Team) == 0x000000, "Member 'BPF_UI_C_GetPlayerTeamColor::Team' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, Opacity) == 0x000004, "Member 'BPF_UI_C_GetPlayerTeamColor::Opacity' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetPlayerTeamColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, LinearColor) == 0x000010, "Member 'BPF_UI_C_GetPlayerTeamColor::LinearColor' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, SlateColor) == 0x000020, "Member 'BPF_UI_C_GetPlayerTeamColor::SlateColor' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, StyleGuide) == 0x000048, "Member 'BPF_UI_C_GetPlayerTeamColor::StyleGuide' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, Temp_byte_Variable) == 0x000050, "Member 'BPF_UI_C_GetPlayerTeamColor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, CallFunc_GetBlueTeamColor_BlueTeam) == 0x000054, "Member 'BPF_UI_C_GetPlayerTeamColor::CallFunc_GetBlueTeamColor_BlueTeam' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, CallFunc_GetAllColors_White) == 0x000064, "Member 'BPF_UI_C_GetPlayerTeamColor::CallFunc_GetAllColors_White' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, CallFunc_GetAllColors_Dark) == 0x000074, "Member 'BPF_UI_C_GetPlayerTeamColor::CallFunc_GetAllColors_Dark' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, CallFunc_GetAllColors_Red) == 0x000084, "Member 'BPF_UI_C_GetPlayerTeamColor::CallFunc_GetAllColors_Red' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, CallFunc_GetAllColors_Yellow) == 0x000094, "Member 'BPF_UI_C_GetPlayerTeamColor::CallFunc_GetAllColors_Yellow' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, CallFunc_GetAllColors_Blue) == 0x0000A4, "Member 'BPF_UI_C_GetPlayerTeamColor::CallFunc_GetAllColors_Blue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, CallFunc_GetAllColors_Green) == 0x0000B4, "Member 'BPF_UI_C_GetPlayerTeamColor::CallFunc_GetAllColors_Green' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, CallFunc_GetGoldTeamColor_RedTeam) == 0x0000C4, "Member 'BPF_UI_C_GetPlayerTeamColor::CallFunc_GetGoldTeamColor_RedTeam' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, CallFunc_GetRedTeamColor_RedTeam) == 0x0000D4, "Member 'BPF_UI_C_GetPlayerTeamColor::CallFunc_GetRedTeamColor_RedTeam' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, K2Node_Select_Default) == 0x0000E4, "Member 'BPF_UI_C_GetPlayerTeamColor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetPlayerTeamColor, K2Node_MakeStruct_SlateColor) == 0x0000F8, "Member 'BPF_UI_C_GetPlayerTeamColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetArmorCoverageText
// 0x00A8 (0x00A8 - 0x0000)
struct BPF_UI_C_GetArmorCoverageText final 
{
public:
	EArmourCoverage                               Coverage;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E12[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CoverageText;                                      // 0x0010(0x0018)(Parm, OutParm)
	EArmourCoverage                               Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E13[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0090(0x0018)()
};
static_assert(alignof(BPF_UI_C_GetArmorCoverageText) == 0x000008, "Wrong alignment on BPF_UI_C_GetArmorCoverageText");
static_assert(sizeof(BPF_UI_C_GetArmorCoverageText) == 0x0000A8, "Wrong size on BPF_UI_C_GetArmorCoverageText");
static_assert(offsetof(BPF_UI_C_GetArmorCoverageText, Coverage) == 0x000000, "Member 'BPF_UI_C_GetArmorCoverageText::Coverage' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetArmorCoverageText, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetArmorCoverageText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetArmorCoverageText, CoverageText) == 0x000010, "Member 'BPF_UI_C_GetArmorCoverageText::CoverageText' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetArmorCoverageText, Temp_byte_Variable) == 0x000028, "Member 'BPF_UI_C_GetArmorCoverageText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetArmorCoverageText, Temp_text_Variable) == 0x000030, "Member 'BPF_UI_C_GetArmorCoverageText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetArmorCoverageText, Temp_text_Variable_1) == 0x000048, "Member 'BPF_UI_C_GetArmorCoverageText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetArmorCoverageText, Temp_text_Variable_2) == 0x000060, "Member 'BPF_UI_C_GetArmorCoverageText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetArmorCoverageText, Temp_text_Variable_3) == 0x000078, "Member 'BPF_UI_C_GetArmorCoverageText::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetArmorCoverageText, K2Node_Select_Default) == 0x000090, "Member 'BPF_UI_C_GetArmorCoverageText::K2Node_Select_Default' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetLoadoutWidget
// 0x0028 (0x0028 - 0x0000)
struct BPF_UI_C_GetLoadoutWidget final 
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Loadout_V2_C*                        AsW_Loadout_V2;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotGameState*                   CallFunc_GetReadyOrNotGameState_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Loadout_V2_C*                        K2Node_DynamicCast_AsW_Loadout_V2;                 // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_UI_C_GetLoadoutWidget) == 0x000008, "Wrong alignment on BPF_UI_C_GetLoadoutWidget");
static_assert(sizeof(BPF_UI_C_GetLoadoutWidget) == 0x000028, "Wrong size on BPF_UI_C_GetLoadoutWidget");
static_assert(offsetof(BPF_UI_C_GetLoadoutWidget, __WorldContext) == 0x000000, "Member 'BPF_UI_C_GetLoadoutWidget::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLoadoutWidget, AsW_Loadout_V2) == 0x000008, "Member 'BPF_UI_C_GetLoadoutWidget::AsW_Loadout_V2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLoadoutWidget, CallFunc_GetReadyOrNotGameState_ReturnValue) == 0x000010, "Member 'BPF_UI_C_GetLoadoutWidget::CallFunc_GetReadyOrNotGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLoadoutWidget, K2Node_DynamicCast_AsW_Loadout_V2) == 0x000018, "Member 'BPF_UI_C_GetLoadoutWidget::K2Node_DynamicCast_AsW_Loadout_V2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLoadoutWidget, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPF_UI_C_GetLoadoutWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetLoadoutWidget, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BPF_UI_C_GetLoadoutWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetMunitionTypeText
// 0x00A8 (0x00A8 - 0x0000)
struct BPF_UI_C_GetMunitionTypeText final 
{
public:
	ELoadoutMunitionSlotType                      MunitionType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E14[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   MunitionText;                                      // 0x0010(0x0018)(Parm, OutParm)
	ELoadoutMunitionSlotType                      Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E15[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0090(0x0018)()
};
static_assert(alignof(BPF_UI_C_GetMunitionTypeText) == 0x000008, "Wrong alignment on BPF_UI_C_GetMunitionTypeText");
static_assert(sizeof(BPF_UI_C_GetMunitionTypeText) == 0x0000A8, "Wrong size on BPF_UI_C_GetMunitionTypeText");
static_assert(offsetof(BPF_UI_C_GetMunitionTypeText, MunitionType) == 0x000000, "Member 'BPF_UI_C_GetMunitionTypeText::MunitionType' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetMunitionTypeText, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetMunitionTypeText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetMunitionTypeText, MunitionText) == 0x000010, "Member 'BPF_UI_C_GetMunitionTypeText::MunitionText' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetMunitionTypeText, Temp_byte_Variable) == 0x000028, "Member 'BPF_UI_C_GetMunitionTypeText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetMunitionTypeText, Temp_text_Variable) == 0x000030, "Member 'BPF_UI_C_GetMunitionTypeText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetMunitionTypeText, Temp_text_Variable_1) == 0x000048, "Member 'BPF_UI_C_GetMunitionTypeText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetMunitionTypeText, Temp_text_Variable_2) == 0x000060, "Member 'BPF_UI_C_GetMunitionTypeText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetMunitionTypeText, Temp_text_Variable_3) == 0x000078, "Member 'BPF_UI_C_GetMunitionTypeText::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetMunitionTypeText, K2Node_Select_Default) == 0x000090, "Member 'BPF_UI_C_GetMunitionTypeText::K2Node_Select_Default' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetTeamColorByEquippingSwatEnum
// 0x0110 (0x0110 - 0x0000)
struct BPF_UI_C_GetTeamColorByEquippingSwatEnum final 
{
public:
	EEquippingSwat                                EquippingSwat;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E16[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Opacity;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LinearColor;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            SlateColor;                                        // 0x0020(0x0028)(Parm, OutParm)
	class UPDA_UI_Styleguide_C*                   StyleGuide;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEquippingSwat                                Temp_byte_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E17[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetAllColors_White;                       // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Dark;                        // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Red;                         // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Yellow;                      // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Blue;                        // 0x0094(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetAllColors_Green;                       // 0x00A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetRedTeamColor_RedTeam;                  // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetBlueTeamColor_BlueTeam;                // 0x00C4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x00D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E18[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x00E8(0x0028)()
};
static_assert(alignof(BPF_UI_C_GetTeamColorByEquippingSwatEnum) == 0x000008, "Wrong alignment on BPF_UI_C_GetTeamColorByEquippingSwatEnum");
static_assert(sizeof(BPF_UI_C_GetTeamColorByEquippingSwatEnum) == 0x000110, "Wrong size on BPF_UI_C_GetTeamColorByEquippingSwatEnum");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, EquippingSwat) == 0x000000, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::EquippingSwat' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, Opacity) == 0x000004, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::Opacity' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, LinearColor) == 0x000010, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::LinearColor' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, SlateColor) == 0x000020, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::SlateColor' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, StyleGuide) == 0x000048, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::StyleGuide' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, Temp_byte_Variable) == 0x000050, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, CallFunc_GetAllColors_White) == 0x000054, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::CallFunc_GetAllColors_White' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, CallFunc_GetAllColors_Dark) == 0x000064, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::CallFunc_GetAllColors_Dark' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, CallFunc_GetAllColors_Red) == 0x000074, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::CallFunc_GetAllColors_Red' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, CallFunc_GetAllColors_Yellow) == 0x000084, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::CallFunc_GetAllColors_Yellow' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, CallFunc_GetAllColors_Blue) == 0x000094, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::CallFunc_GetAllColors_Blue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, CallFunc_GetAllColors_Green) == 0x0000A4, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::CallFunc_GetAllColors_Green' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, CallFunc_GetRedTeamColor_RedTeam) == 0x0000B4, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::CallFunc_GetRedTeamColor_RedTeam' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, CallFunc_GetBlueTeamColor_BlueTeam) == 0x0000C4, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::CallFunc_GetBlueTeamColor_BlueTeam' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, K2Node_Select_Default) == 0x0000D4, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetTeamColorByEquippingSwatEnum, K2Node_MakeStruct_SlateColor) == 0x0000E8, "Member 'BPF_UI_C_GetTeamColorByEquippingSwatEnum::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetSyleGuide
// 0x0010 (0x0010 - 0x0000)
struct BPF_UI_C_GetSyleGuide final 
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPDA_UI_Styleguide_C*                   StyleGuide;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_UI_C_GetSyleGuide) == 0x000008, "Wrong alignment on BPF_UI_C_GetSyleGuide");
static_assert(sizeof(BPF_UI_C_GetSyleGuide) == 0x000010, "Wrong size on BPF_UI_C_GetSyleGuide");
static_assert(offsetof(BPF_UI_C_GetSyleGuide, __WorldContext) == 0x000000, "Member 'BPF_UI_C_GetSyleGuide::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetSyleGuide, StyleGuide) == 0x000008, "Member 'BPF_UI_C_GetSyleGuide::StyleGuide' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetColorByName
// 0x0090 (0x0090 - 0x0000)
struct BPF_UI_C_GetColorByName final 
{
public:
	class FName                                   ColorName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Opacity;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E19[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LinearColor;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            SlateColor;                                        // 0x0028(0x0028)(Parm, OutParm)
	class UPDA_UI_Styleguide_C*                   StyleGuide;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetColorByName_LinearColor;               // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            CallFunc_GetColorByName_SlateColor;                // 0x0068(0x0028)()
};
static_assert(alignof(BPF_UI_C_GetColorByName) == 0x000008, "Wrong alignment on BPF_UI_C_GetColorByName");
static_assert(sizeof(BPF_UI_C_GetColorByName) == 0x000090, "Wrong size on BPF_UI_C_GetColorByName");
static_assert(offsetof(BPF_UI_C_GetColorByName, ColorName) == 0x000000, "Member 'BPF_UI_C_GetColorByName::ColorName' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetColorByName, Opacity) == 0x000008, "Member 'BPF_UI_C_GetColorByName::Opacity' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetColorByName, __WorldContext) == 0x000010, "Member 'BPF_UI_C_GetColorByName::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetColorByName, LinearColor) == 0x000018, "Member 'BPF_UI_C_GetColorByName::LinearColor' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetColorByName, SlateColor) == 0x000028, "Member 'BPF_UI_C_GetColorByName::SlateColor' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetColorByName, StyleGuide) == 0x000050, "Member 'BPF_UI_C_GetColorByName::StyleGuide' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetColorByName, CallFunc_GetColorByName_LinearColor) == 0x000058, "Member 'BPF_UI_C_GetColorByName::CallFunc_GetColorByName_LinearColor' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetColorByName, CallFunc_GetColorByName_SlateColor) == 0x000068, "Member 'BPF_UI_C_GetColorByName::CallFunc_GetColorByName_SlateColor' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.TextIsNotEmpty
// 0x0028 (0x0028 - 0x0000)
struct BPF_UI_C_TextIsNotEmpty final 
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotEmpty;                                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_UI_C_TextIsNotEmpty) == 0x000008, "Wrong alignment on BPF_UI_C_TextIsNotEmpty");
static_assert(sizeof(BPF_UI_C_TextIsNotEmpty) == 0x000028, "Wrong size on BPF_UI_C_TextIsNotEmpty");
static_assert(offsetof(BPF_UI_C_TextIsNotEmpty, InText) == 0x000000, "Member 'BPF_UI_C_TextIsNotEmpty::InText' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_TextIsNotEmpty, __WorldContext) == 0x000018, "Member 'BPF_UI_C_TextIsNotEmpty::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_TextIsNotEmpty, NotEmpty) == 0x000020, "Member 'BPF_UI_C_TextIsNotEmpty::NotEmpty' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_TextIsNotEmpty, CallFunc_TextIsEmpty_ReturnValue) == 0x000021, "Member 'BPF_UI_C_TextIsNotEmpty::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_TextIsNotEmpty, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'BPF_UI_C_TextIsNotEmpty::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.TextToName
// 0x0060 (0x0060 - 0x0000)
struct BPF_UI_C_TextToName final 
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OutName;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1A[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StringIsEmpty_ReturnValue;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1B[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_UI_C_TextToName) == 0x000008, "Wrong alignment on BPF_UI_C_TextToName");
static_assert(sizeof(BPF_UI_C_TextToName) == 0x000060, "Wrong size on BPF_UI_C_TextToName");
static_assert(offsetof(BPF_UI_C_TextToName, InText) == 0x000000, "Member 'BPF_UI_C_TextToName::InText' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_TextToName, __WorldContext) == 0x000018, "Member 'BPF_UI_C_TextToName::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_TextToName, OutName) == 0x000020, "Member 'BPF_UI_C_TextToName::OutName' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_TextToName, Temp_bool_Variable) == 0x000028, "Member 'BPF_UI_C_TextToName::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_TextToName, CallFunc_Conv_TextToString_ReturnValue) == 0x000030, "Member 'BPF_UI_C_TextToName::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_TextToName, Temp_name_Variable) == 0x000040, "Member 'BPF_UI_C_TextToName::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_TextToName, CallFunc_Conv_StringToName_ReturnValue) == 0x000048, "Member 'BPF_UI_C_TextToName::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_TextToName, CallFunc_StringIsEmpty_ReturnValue) == 0x000050, "Member 'BPF_UI_C_TextToName::CallFunc_StringIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_TextToName, K2Node_Select_Default) == 0x000054, "Member 'BPF_UI_C_TextToName::K2Node_Select_Default' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetCustomizationGroupByCategory
// 0x0028 (0x0028 - 0x0000)
struct BPF_UI_C_GetCustomizationGroupByCategory final 
{
public:
	ECustomizationType                            Category;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Group;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECustomizationType                            Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_3;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_4;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_5;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_6;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_7;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_8;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_9;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_10;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_11;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_12;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_13;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_14;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_15;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         Temp_byte_Variable_16;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationGroups                         K2Node_Select_Default;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_UI_C_GetCustomizationGroupByCategory) == 0x000008, "Wrong alignment on BPF_UI_C_GetCustomizationGroupByCategory");
static_assert(sizeof(BPF_UI_C_GetCustomizationGroupByCategory) == 0x000028, "Wrong size on BPF_UI_C_GetCustomizationGroupByCategory");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Category) == 0x000000, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Category' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Group) == 0x000010, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Group' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable) == 0x000011, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_1) == 0x000012, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_2) == 0x000013, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_3) == 0x000014, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_4) == 0x000015, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_5) == 0x000016, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_6) == 0x000017, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_7) == 0x000018, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_8) == 0x000019, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_9) == 0x00001A, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_10) == 0x00001B, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_11) == 0x00001C, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_12) == 0x00001D, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_13) == 0x00001E, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_14) == 0x00001F, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_15) == 0x000020, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, Temp_byte_Variable_16) == 0x000021, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupByCategory, K2Node_Select_Default) == 0x000022, "Member 'BPF_UI_C_GetCustomizationGroupByCategory::K2Node_Select_Default' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetCustomizationGroupText
// 0x00D8 (0x00D8 - 0x0000)
struct BPF_UI_C_GetCustomizationGroupText final 
{
public:
	E_CustomizationGroups                         Group;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0010(0x0018)(Parm, OutParm)
	E_CustomizationGroups                         Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1E[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A8(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x00C0(0x0018)()
};
static_assert(alignof(BPF_UI_C_GetCustomizationGroupText) == 0x000008, "Wrong alignment on BPF_UI_C_GetCustomizationGroupText");
static_assert(sizeof(BPF_UI_C_GetCustomizationGroupText) == 0x0000D8, "Wrong size on BPF_UI_C_GetCustomizationGroupText");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupText, Group) == 0x000000, "Member 'BPF_UI_C_GetCustomizationGroupText::Group' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupText, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetCustomizationGroupText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupText, Text) == 0x000010, "Member 'BPF_UI_C_GetCustomizationGroupText::Text' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupText, Temp_byte_Variable) == 0x000028, "Member 'BPF_UI_C_GetCustomizationGroupText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupText, Temp_text_Variable) == 0x000030, "Member 'BPF_UI_C_GetCustomizationGroupText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupText, Temp_text_Variable_1) == 0x000048, "Member 'BPF_UI_C_GetCustomizationGroupText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupText, Temp_text_Variable_2) == 0x000060, "Member 'BPF_UI_C_GetCustomizationGroupText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupText, Temp_text_Variable_3) == 0x000078, "Member 'BPF_UI_C_GetCustomizationGroupText::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupText, Temp_text_Variable_4) == 0x000090, "Member 'BPF_UI_C_GetCustomizationGroupText::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupText, Temp_text_Variable_5) == 0x0000A8, "Member 'BPF_UI_C_GetCustomizationGroupText::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetCustomizationGroupText, K2Node_Select_Default) == 0x0000C0, "Member 'BPF_UI_C_GetCustomizationGroupText::K2Node_Select_Default' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.IsCurrentPresetDirty
// 0x0370 (0x0370 - 0x0000)
struct BPF_UI_C_IsCurrentPresetDirty final 
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDirty;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1F[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotGameState*                   CallFunc_GetReadyOrNotGameState_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetCurrentPresetDisplayName_ReturnValue;  // 0x0018(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E20[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSavedLoadout                          CallFunc_GetPreset_ReturnValue;                    // 0x0048(0x0188)()
	struct FSavedLoadout                          CallFunc_GetActiveLoadout_ReturnValue;             // 0x01D0(0x0188)()
	TArray<struct FSavedLoadout>                  K2Node_MakeArray_Array;                            // 0x0358(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0369(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_UI_C_IsCurrentPresetDirty) == 0x000008, "Wrong alignment on BPF_UI_C_IsCurrentPresetDirty");
static_assert(sizeof(BPF_UI_C_IsCurrentPresetDirty) == 0x000370, "Wrong size on BPF_UI_C_IsCurrentPresetDirty");
static_assert(offsetof(BPF_UI_C_IsCurrentPresetDirty, __WorldContext) == 0x000000, "Member 'BPF_UI_C_IsCurrentPresetDirty::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_IsCurrentPresetDirty, IsDirty) == 0x000008, "Member 'BPF_UI_C_IsCurrentPresetDirty::IsDirty' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_IsCurrentPresetDirty, CallFunc_GetReadyOrNotGameState_ReturnValue) == 0x000010, "Member 'BPF_UI_C_IsCurrentPresetDirty::CallFunc_GetReadyOrNotGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_IsCurrentPresetDirty, CallFunc_GetCurrentPresetDisplayName_ReturnValue) == 0x000018, "Member 'BPF_UI_C_IsCurrentPresetDirty::CallFunc_GetCurrentPresetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_IsCurrentPresetDirty, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BPF_UI_C_IsCurrentPresetDirty::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_IsCurrentPresetDirty, CallFunc_Conv_TextToString_ReturnValue) == 0x000038, "Member 'BPF_UI_C_IsCurrentPresetDirty::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_IsCurrentPresetDirty, CallFunc_GetPreset_ReturnValue) == 0x000048, "Member 'BPF_UI_C_IsCurrentPresetDirty::CallFunc_GetPreset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_IsCurrentPresetDirty, CallFunc_GetActiveLoadout_ReturnValue) == 0x0001D0, "Member 'BPF_UI_C_IsCurrentPresetDirty::CallFunc_GetActiveLoadout_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_IsCurrentPresetDirty, K2Node_MakeArray_Array) == 0x000358, "Member 'BPF_UI_C_IsCurrentPresetDirty::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_IsCurrentPresetDirty, CallFunc_Array_Contains_ReturnValue) == 0x000368, "Member 'BPF_UI_C_IsCurrentPresetDirty::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_IsCurrentPresetDirty, CallFunc_Not_PreBool_ReturnValue) == 0x000369, "Member 'BPF_UI_C_IsCurrentPresetDirty::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BPF_UI.BPF_UI_C.GetAmmoCategoryText
// 0x01C8 (0x01C8 - 0x0000)
struct BPF_UI_C_GetAmmoCategoryText final 
{
public:
	class UClass*                                 ItemData;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Text;                                              // 0x0010(0x0018)(Parm, OutParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ReferenceParm)
	class UClass*                                 K2Node_ClassDynamicCast_AsPepperball_Gun;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E21[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0048(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0060(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x00A0(0x0010)(ReferenceParm)
	class UClass*                                 K2Node_ClassDynamicCast_AsBase_Magazine_Weapon;    // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E22[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x00C0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00D8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0118(0x0010)(ReferenceParm)
	class UClass*                                 K2Node_ClassDynamicCast_AsShotgun;                 // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_2;                // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E23[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x0138(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0150(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_3;                          // 0x0190(0x0010)(ReferenceParm)
	class UClass*                                 K2Node_ClassDynamicCast_AsTaser;                   // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_3;                // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E24[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_3;                     // 0x01B0(0x0018)()
};
static_assert(alignof(BPF_UI_C_GetAmmoCategoryText) == 0x000008, "Wrong alignment on BPF_UI_C_GetAmmoCategoryText");
static_assert(sizeof(BPF_UI_C_GetAmmoCategoryText) == 0x0001C8, "Wrong size on BPF_UI_C_GetAmmoCategoryText");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, ItemData) == 0x000000, "Member 'BPF_UI_C_GetAmmoCategoryText::ItemData' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, __WorldContext) == 0x000008, "Member 'BPF_UI_C_GetAmmoCategoryText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, Text) == 0x000010, "Member 'BPF_UI_C_GetAmmoCategoryText::Text' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_MakeArray_Array) == 0x000028, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_ClassDynamicCast_AsPepperball_Gun) == 0x000038, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_ClassDynamicCast_AsPepperball_Gun' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_ClassDynamicCast_bSuccess) == 0x000040, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, CallFunc_Format_ReturnValue) == 0x000048, "Member 'BPF_UI_C_GetAmmoCategoryText::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_MakeStruct_FormatArgumentData) == 0x000060, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_MakeArray_Array_1) == 0x0000A0, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_ClassDynamicCast_AsBase_Magazine_Weapon) == 0x0000B0, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_ClassDynamicCast_AsBase_Magazine_Weapon' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_ClassDynamicCast_bSuccess_1) == 0x0000B8, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, CallFunc_Format_ReturnValue_1) == 0x0000C0, "Member 'BPF_UI_C_GetAmmoCategoryText::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000D8, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_MakeArray_Array_2) == 0x000118, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_ClassDynamicCast_AsShotgun) == 0x000128, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_ClassDynamicCast_AsShotgun' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_ClassDynamicCast_bSuccess_2) == 0x000130, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_ClassDynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, CallFunc_Format_ReturnValue_2) == 0x000138, "Member 'BPF_UI_C_GetAmmoCategoryText::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_MakeStruct_FormatArgumentData_2) == 0x000150, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_MakeArray_Array_3) == 0x000190, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_ClassDynamicCast_AsTaser) == 0x0001A0, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_ClassDynamicCast_AsTaser' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, K2Node_ClassDynamicCast_bSuccess_3) == 0x0001A8, "Member 'BPF_UI_C_GetAmmoCategoryText::K2Node_ClassDynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BPF_UI_C_GetAmmoCategoryText, CallFunc_Format_ReturnValue_3) == 0x0001B0, "Member 'BPF_UI_C_GetAmmoCategoryText::CallFunc_Format_ReturnValue_3' has a wrong offset!");

}

