#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VICODynamicsPlugin

#include "Basic.hpp"

#include "VICODynamicsPlugin_classes.hpp"
#include "VICODynamicsPlugin_parameters.hpp"


namespace SDK
{

// Function VICODynamicsPlugin.BaseVDComponent.AttachToOverlappingRigidBodies
// (Native, Public, BlueprintCallable)

void UBaseVDComponent::AttachToOverlappingRigidBodies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseVDComponent", "AttachToOverlappingRigidBodies");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.BaseVDComponent.OnSync
// (Event, Protected, BlueprintEvent)

void UBaseVDComponent::OnSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseVDComponent", "OnSync");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VICODynamicsPlugin.BaseVDComponent.SetAffectedByGlobalWind
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsAffected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseVDComponent::SetAffectedByGlobalWind(bool IsAffected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseVDComponent", "SetAffectedByGlobalWind");

	Params::BaseVDComponent_SetAffectedByGlobalWind Parms{};

	Parms.IsAffected = IsAffected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.BaseVDComponent.SetUseExplicitRigidBodyCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    UseExplicitCollision                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseVDComponent::SetUseExplicitRigidBodyCollision(bool UseExplicitCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseVDComponent", "SetUseExplicitRigidBodyCollision");

	Params::BaseVDComponent_SetUseExplicitRigidBodyCollision Parms{};

	Parms.UseExplicitCollision = UseExplicitCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.BaseVDComponent.GetLastAppliedForceFromTensionConstraint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TensionConstraintIndex                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBaseVDComponent::GetLastAppliedForceFromTensionConstraint(int32 TensionConstraintIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseVDComponent", "GetLastAppliedForceFromTensionConstraint");

	Params::BaseVDComponent_GetLastAppliedForceFromTensionConstraint Parms{};

	Parms.TensionConstraintIndex = TensionConstraintIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.BaseVDComponent.GetParticleBuildInfo
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FVDParticleInfo>    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FVDParticleInfo> UBaseVDComponent::GetParticleBuildInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseVDComponent", "GetParticleBuildInfo");

	Params::BaseVDComponent_GetParticleBuildInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.BaseVDComponent.GetTensionConstraintCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBaseVDComponent::GetTensionConstraintCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseVDComponent", "GetTensionConstraintCount");

	Params::BaseVDComponent_GetTensionConstraintCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDBlueprintFunctionLibrary.GetVICODynamicsSimulationInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVDSimulation*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVDSimulation* UVDBlueprintFunctionLibrary::GetVICODynamicsSimulationInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VDBlueprintFunctionLibrary", "GetVICODynamicsSimulationInstance");

	Params::VDBlueprintFunctionLibrary_GetVICODynamicsSimulationInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDRopeComponent.BreakAtSegment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SegmentIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDRopeComponent::BreakAtSegment(int32 SegmentIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDRopeComponent", "BreakAtSegment");

	Params::VDRopeComponent_BreakAtSegment Parms{};

	Parms.SegmentIndex = SegmentIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDRopeComponent.CreateRopeGeometry_BP
// (Final, Native, Public, BlueprintCallable)

void UVDRopeComponent::CreateRopeGeometry_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDRopeComponent", "CreateRopeGeometry_BP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDRopeComponent.ResetRope
// (Native, Public, BlueprintCallable)

void UVDRopeComponent::ResetRope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDRopeComponent", "ResetRope");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDRopeComponent.SetNewRestLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewLength                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PieceIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDRopeComponent::SetNewRestLength(float NewLength, int32 PieceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDRopeComponent", "SetNewRestLength");

	Params::VDRopeComponent_SetNewRestLength Parms{};

	Parms.NewLength = NewLength;
	Parms.PieceIndex = PieceIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDRopeComponent.SetNewRestLengthStartingAtParticle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ParticleIndexStart                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewLength                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDRopeComponent::SetNewRestLengthStartingAtParticle(int32 ParticleIndexStart, float NewLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDRopeComponent", "SetNewRestLengthStartingAtParticle");

	Params::VDRopeComponent_SetNewRestLengthStartingAtParticle Parms{};

	Parms.ParticleIndexStart = ParticleIndexStart;
	Parms.NewLength = NewLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDRopeComponent.GetPieces
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FRopePiece>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FRopePiece> UVDRopeComponent::GetPieces() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDRopeComponent", "GetPieces");

	Params::VDRopeComponent_GetPieces Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDRopeComponent.GetTrueLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PieceIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDRopeComponent::GetTrueLength(int32 PieceIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDRopeComponent", "GetTrueLength");

	Params::VDRopeComponent_GetTrueLength Parms{};

	Parms.PieceIndex = PieceIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDDynamicRopeComponent.RebuildRope
// (Native, Public, BlueprintCallable)

void UVDDynamicRopeComponent::RebuildRope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDDynamicRopeComponent", "RebuildRope");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDDynamicRopeComponent.RebuildRopeAtPoints
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   DistancePerSegment                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRelativeLocations                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDDynamicRopeComponent::RebuildRopeAtPoints(float DistancePerSegment, struct FVector& StartLocation, struct FVector& EndLocation, bool bRelativeLocations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDDynamicRopeComponent", "RebuildRopeAtPoints");

	Params::VDDynamicRopeComponent_RebuildRopeAtPoints Parms{};

	Parms.DistancePerSegment = DistancePerSegment;
	Parms.StartLocation = std::move(StartLocation);
	Parms.EndLocation = std::move(EndLocation);
	Parms.bRelativeLocations = bRelativeLocations;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDDynamicRopeComponent.RebuildRopeAttached
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DistancePerSegment                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  StartAttachedTo                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartSocket                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    StartSimulateTension                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  EndAttachedTo                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EndSocket                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EndSimulateTension                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDDynamicRopeComponent::RebuildRopeAttached(float DistancePerSegment, class USceneComponent* StartAttachedTo, class FName StartSocket, bool StartSimulateTension, class USceneComponent* EndAttachedTo, class FName EndSocket, bool EndSimulateTension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDDynamicRopeComponent", "RebuildRopeAttached");

	Params::VDDynamicRopeComponent_RebuildRopeAttached Parms{};

	Parms.DistancePerSegment = DistancePerSegment;
	Parms.StartAttachedTo = StartAttachedTo;
	Parms.StartSocket = StartSocket;
	Parms.StartSimulateTension = StartSimulateTension;
	Parms.EndAttachedTo = EndAttachedTo;
	Parms.EndSocket = EndSocket;
	Parms.EndSimulateTension = EndSimulateTension;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDMeshClothComponent.GetBendConstraintsArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UVDParticleSpringConstraint*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UVDParticleSpringConstraint*> UVDMeshClothComponent::GetBendConstraintsArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDMeshClothComponent", "GetBendConstraintsArray");

	Params::VDMeshClothComponent_GetBendConstraintsArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDMeshClothComponent.GetStretchConstraintsArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UVDParticleSpringConstraint*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UVDParticleSpringConstraint*> UVDMeshClothComponent::GetStretchConstraintsArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDMeshClothComponent", "GetStretchConstraintsArray");

	Params::VDMeshClothComponent_GetStretchConstraintsArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDMeshClothComponent.GetVolumeConstraint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVDMeshVolumeConstraint*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVDMeshVolumeConstraint* UVDMeshClothComponent::GetVolumeConstraint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDMeshClothComponent", "GetVolumeConstraint");

	Params::VDMeshClothComponent_GetVolumeConstraint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDMeshVolumeConstraint.SetRestVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewVolume                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDMeshVolumeConstraint::SetRestVolume(float NewVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDMeshVolumeConstraint", "SetRestVolume");

	Params::VDMeshVolumeConstraint_SetRestVolume Parms{};

	Parms.NewVolume = NewVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDMeshVolumeConstraint.GetCurrentVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDMeshVolumeConstraint::GetCurrentVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDMeshVolumeConstraint", "GetCurrentVolume");

	Params::VDMeshVolumeConstraint_GetCurrentVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDMeshVolumeConstraint.GetRestVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDMeshVolumeConstraint::GetRestVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDMeshVolumeConstraint", "GetRestVolume");

	Params::VDMeshVolumeConstraint_GetRestVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDParticleSpringConstraint.SetRestDistance
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   NewRestDistance                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDParticleSpringConstraint::SetRestDistance(float& NewRestDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDParticleSpringConstraint", "SetRestDistance");

	Params::VDParticleSpringConstraint_SetRestDistance Parms{};

	Parms.NewRestDistance = NewRestDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDParticleSpringConstraint.SetStiffness
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   NewStiffness                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDParticleSpringConstraint::SetStiffness(float& NewStiffness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDParticleSpringConstraint", "SetStiffness");

	Params::VDParticleSpringConstraint_SetStiffness Parms{};

	Parms.NewStiffness = NewStiffness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDParticleSpringConstraint.GetParticle1
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVDSimulatedParticle*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVDSimulatedParticle* UVDParticleSpringConstraint::GetParticle1() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDParticleSpringConstraint", "GetParticle1");

	Params::VDParticleSpringConstraint_GetParticle1 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDParticleSpringConstraint.GetParticle2
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVDSimulatedParticle*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVDSimulatedParticle* UVDParticleSpringConstraint::GetParticle2() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDParticleSpringConstraint", "GetParticle2");

	Params::VDParticleSpringConstraint_GetParticle2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDParticleSpringConstraint.GetRestDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDParticleSpringConstraint::GetRestDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDParticleSpringConstraint", "GetRestDistance");

	Params::VDParticleSpringConstraint_GetRestDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDParticleSpringConstraint.GetStifffness
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDParticleSpringConstraint::GetStifffness() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDParticleSpringConstraint", "GetStifffness");

	Params::VDParticleSpringConstraint_GetStifffness Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDParticleSpringConstraint.IsConstraining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVDSimulatedParticle*             Particle1                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVDSimulatedParticle*             Particle2                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDParticleSpringConstraint::IsConstraining(class UVDSimulatedParticle* Particle1, class UVDSimulatedParticle* Particle2) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDParticleSpringConstraint", "IsConstraining");

	Params::VDParticleSpringConstraint_IsConstraining Parms{};

	Parms.Particle1 = Particle1;
	Parms.Particle2 = Particle2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedObject.CreateParticle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FVDParticleInfo                  ParticleInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UVDSimulatedParticle*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVDSimulatedParticle* UVDSimulatedObject::CreateParticle(struct FVDParticleInfo& ParticleInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "CreateParticle");

	Params::VDSimulatedObject_CreateParticle Parms{};

	Parms.ParticleInfo = std::move(ParticleInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedObject.CreateSpringConstraint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVDSimulatedParticle*             Particle1                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVDSimulatedParticle*             Particle2                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RestDistance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Stiffness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVDParticleSpringConstraint*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVDParticleSpringConstraint* UVDSimulatedObject::CreateSpringConstraint(class UVDSimulatedParticle* Particle1, class UVDSimulatedParticle* Particle2, float RestDistance, float Stiffness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "CreateSpringConstraint");

	Params::VDSimulatedObject_CreateSpringConstraint Parms{};

	Parms.Particle1 = Particle1;
	Parms.Particle2 = Particle2;
	Parms.RestDistance = RestDistance;
	Parms.Stiffness = Stiffness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedObject.CreateVolumeConstraint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<int32>                           IndexList                                              (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RestVolume                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVDMeshVolumeConstraint*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVDMeshVolumeConstraint* UVDSimulatedObject::CreateVolumeConstraint(TArray<int32>& IndexList, float Alpha, float RestVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "CreateVolumeConstraint");

	Params::VDSimulatedObject_CreateVolumeConstraint Parms{};

	Parms.IndexList = std::move(IndexList);
	Parms.Alpha = Alpha;
	Parms.RestVolume = RestVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedObject.DestroyConstraint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVDParticleSpringConstraint*      Constraint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedObject::DestroyConstraint(class UVDParticleSpringConstraint* Constraint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "DestroyConstraint");

	Params::VDSimulatedObject_DestroyConstraint Parms{};

	Parms.Constraint = Constraint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedObject.DestroyParticle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVDSimulatedParticle*             Particle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedObject::DestroyParticle(class UVDSimulatedParticle* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "DestroyParticle");

	Params::VDSimulatedObject_DestroyParticle Parms{};

	Parms.Particle = Particle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedObject.DestroyVolumeConstraint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVDMeshVolumeConstraint*          Constraint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedObject::DestroyVolumeConstraint(class UVDMeshVolumeConstraint* Constraint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "DestroyVolumeConstraint");

	Params::VDSimulatedObject_DestroyVolumeConstraint Parms{};

	Parms.Constraint = Constraint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedObject.GetParticles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UVDSimulatedParticle*>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UVDSimulatedParticle*> UVDSimulatedObject::GetParticles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "GetParticles");

	Params::VDSimulatedObject_GetParticles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedObject.GetSpringConstraints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UVDParticleSpringConstraint*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UVDParticleSpringConstraint*> UVDSimulatedObject::GetSpringConstraints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "GetSpringConstraints");

	Params::VDSimulatedObject_GetSpringConstraints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedObject.SetAffectiveWindVector
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewWindVector                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedObject::SetAffectiveWindVector(const struct FVector& NewWindVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "SetAffectiveWindVector");

	Params::VDSimulatedObject_SetAffectiveWindVector Parms{};

	Parms.NewWindVector = std::move(NewWindVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedObject.SetCollisionChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECollisionChannel                       Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedObject::SetCollisionChannel(ECollisionChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "SetCollisionChannel");

	Params::VDSimulatedObject_SetCollisionChannel Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedObject.SetCollisionEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedObject::SetCollisionEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "SetCollisionEnabled");

	Params::VDSimulatedObject_SetCollisionEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedObject.SetCollisionResponseToObjectType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECollisionChannel                       ObjectType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionResponse                      Response                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedObject::SetCollisionResponseToObjectType(ECollisionChannel ObjectType, ECollisionResponse Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "SetCollisionResponseToObjectType");

	Params::VDSimulatedObject_SetCollisionResponseToObjectType Parms{};

	Parms.ObjectType = ObjectType;
	Parms.Response = Response;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedObject.SetGravityScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedObject::SetGravityScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "SetGravityScale");

	Params::VDSimulatedObject_SetGravityScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedObject.SetMinimumConstraintSatisfactionDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   MinDistance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedObject::SetMinimumConstraintSatisfactionDistance(float MinDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "SetMinimumConstraintSatisfactionDistance");

	Params::VDSimulatedObject_SetMinimumConstraintSatisfactionDistance Parms{};

	Parms.MinDistance = MinDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedObject.SetObjectType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECollisionChannel                       ObjectType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedObject::SetObjectType(ECollisionChannel ObjectType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "SetObjectType");

	Params::VDSimulatedObject_SetObjectType Parms{};

	Parms.ObjectType = ObjectType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedObject.SetSkipRelativeVelocityCheckDuringCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Skip                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedObject::SetSkipRelativeVelocityCheckDuringCollision(bool Skip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "SetSkipRelativeVelocityCheckDuringCollision");

	Params::VDSimulatedObject_SetSkipRelativeVelocityCheckDuringCollision Parms{};

	Parms.Skip = Skip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedObject.GetAffectiveWindVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVDSimulatedObject::GetAffectiveWindVector() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "GetAffectiveWindVector");

	Params::VDSimulatedObject_GetAffectiveWindVector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedObject.GetCollisionEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulatedObject::GetCollisionEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "GetCollisionEnabled");

	Params::VDSimulatedObject_GetCollisionEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedObject.GetCollisionSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVDCollisionSettings             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FVDCollisionSettings UVDSimulatedObject::GetCollisionSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "GetCollisionSettings");

	Params::VDSimulatedObject_GetCollisionSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedObject.GetGravityScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDSimulatedObject::GetGravityScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "GetGravityScale");

	Params::VDSimulatedObject_GetGravityScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedObject.GetMinimumConstraintSatisfactionDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDSimulatedObject::GetMinimumConstraintSatisfactionDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "GetMinimumConstraintSatisfactionDistance");

	Params::VDSimulatedObject_GetMinimumConstraintSatisfactionDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedObject.GetSkipRelativeVelocityCheckDuringCollision
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulatedObject::GetSkipRelativeVelocityCheckDuringCollision() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedObject", "GetSkipRelativeVelocityCheckDuringCollision");

	Params::VDSimulatedObject_GetSkipRelativeVelocityCheckDuringCollision Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.AddForce
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Force                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::AddForce(struct FVector& Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "AddForce");

	Params::VDSimulatedParticle_AddForce Parms{};

	Parms.Force = std::move(Force);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.AttachToActor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SimulateTension                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Socket                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulatedParticle::AttachToActor(class AActor* Actor, const struct FVector& Location, bool SimulateTension, class FName Socket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "AttachToActor");

	Params::VDSimulatedParticle_AttachToActor Parms{};

	Parms.Actor = Actor;
	Parms.Location = std::move(Location);
	Parms.SimulateTension = SimulateTension;
	Parms.Socket = Socket;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.AttachToComponent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SimulateTension                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Socket                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulatedParticle::AttachToComponent(class UPrimitiveComponent* Component, const struct FVector& Location, bool SimulateTension, class FName Socket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "AttachToComponent");

	Params::VDSimulatedParticle_AttachToComponent Parms{};

	Parms.Component = Component;
	Parms.Location = std::move(Location);
	Parms.SimulateTension = SimulateTension;
	Parms.Socket = Socket;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.AttachToLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsRelative                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulatedParticle::AttachToLocation(const struct FVector& Location, bool IsRelative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "AttachToLocation");

	Params::VDSimulatedParticle_AttachToLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.IsRelative = IsRelative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.CopyAttachment
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FVDParticleAttachment            Param_Attachment                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    UseCurrentMass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::CopyAttachment(struct FVDParticleAttachment& Param_Attachment, bool UseCurrentMass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "CopyAttachment");

	Params::VDSimulatedParticle_CopyAttachment Parms{};

	Parms.Param_Attachment = std::move(Param_Attachment);
	Parms.UseCurrentMass = UseCurrentMass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.Detach
// (Final, Native, Public, BlueprintCallable)

void UVDSimulatedParticle::Detach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "Detach");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.GetAttachment
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVDParticleAttachment            OutAttachment                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulatedParticle::GetAttachment(struct FVDParticleAttachment* OutAttachment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "GetAttachment");

	Params::VDSimulatedParticle_GetAttachment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAttachment != nullptr)
		*OutAttachment = Parms.OutAttachment;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.SetDragCoefficient
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewDragCoefficient                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::SetDragCoefficient(float NewDragCoefficient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "SetDragCoefficient");

	Params::VDSimulatedParticle_SetDragCoefficient Parms{};

	Parms.NewDragCoefficient = NewDragCoefficient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.SetFrictionCoefficient
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewFrictionCoefficient                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::SetFrictionCoefficient(float NewFrictionCoefficient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "SetFrictionCoefficient");

	Params::VDSimulatedParticle_SetFrictionCoefficient Parms{};

	Parms.NewFrictionCoefficient = NewFrictionCoefficient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.SetIsFree
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsFree                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::SetIsFree(bool IsFree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "SetIsFree");

	Params::VDSimulatedParticle_SetIsFree Parms{};

	Parms.IsFree = IsFree;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.SetIsParticleCollisionEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::SetIsParticleCollisionEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "SetIsParticleCollisionEnabled");

	Params::VDSimulatedParticle_SetIsParticleCollisionEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.SetIsRigidBodyCollisionEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::SetIsRigidBodyCollisionEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "SetIsRigidBodyCollisionEnabled");

	Params::VDSimulatedParticle_SetIsRigidBodyCollisionEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.SetIsWindOccluded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsOccluded                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::SetIsWindOccluded(bool IsOccluded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "SetIsWindOccluded");

	Params::VDSimulatedParticle_SetIsWindOccluded Parms{};

	Parms.IsOccluded = IsOccluded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.SetLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::SetLocation(struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "SetLocation");

	Params::VDSimulatedParticle_SetLocation Parms{};

	Parms.NewLocation = std::move(NewLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.SetMass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMass                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::SetMass(float NewMass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "SetMass");

	Params::VDSimulatedParticle_SetMass Parms{};

	Parms.NewMass = NewMass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.SetRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewRadius                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::SetRadius(float NewRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "SetRadius");

	Params::VDSimulatedParticle_SetRadius Parms{};

	Parms.NewRadius = NewRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.SetRestitutionCoefficient
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewRestitutionCoefficient                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::SetRestitutionCoefficient(float NewRestitutionCoefficient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "SetRestitutionCoefficient");

	Params::VDSimulatedParticle_SetRestitutionCoefficient Parms{};

	Parms.NewRestitutionCoefficient = NewRestitutionCoefficient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.SetVelocity
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewVelocity                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulatedParticle::SetVelocity(struct FVector& NewVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "SetVelocity");

	Params::VDSimulatedParticle_SetVelocity Parms{};

	Parms.NewVelocity = std::move(NewVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.GetDragCoefficient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDSimulatedParticle::GetDragCoefficient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "GetDragCoefficient");

	Params::VDSimulatedParticle_GetDragCoefficient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.GetFrictionCoefficient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDSimulatedParticle::GetFrictionCoefficient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "GetFrictionCoefficient");

	Params::VDSimulatedParticle_GetFrictionCoefficient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.GetIsFree
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulatedParticle::GetIsFree() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "GetIsFree");

	Params::VDSimulatedParticle_GetIsFree Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.GetIsParticleCollisionEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulatedParticle::GetIsParticleCollisionEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "GetIsParticleCollisionEnabled");

	Params::VDSimulatedParticle_GetIsParticleCollisionEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.GetIsRigidBodyCollisionEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulatedParticle::GetIsRigidBodyCollisionEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "GetIsRigidBodyCollisionEnabled");

	Params::VDSimulatedParticle_GetIsRigidBodyCollisionEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.GetIsWindOccluded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulatedParticle::GetIsWindOccluded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "GetIsWindOccluded");

	Params::VDSimulatedParticle_GetIsWindOccluded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.GetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVDSimulatedParticle::GetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "GetLocation");

	Params::VDSimulatedParticle_GetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.GetMass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDSimulatedParticle::GetMass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "GetMass");

	Params::VDSimulatedParticle_GetMass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.GetRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDSimulatedParticle::GetRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "GetRadius");

	Params::VDSimulatedParticle_GetRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.GetRestitutionCoefficient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDSimulatedParticle::GetRestitutionCoefficient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "GetRestitutionCoefficient");

	Params::VDSimulatedParticle_GetRestitutionCoefficient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulatedParticle.GetVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVDSimulatedParticle::GetVelocity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulatedParticle", "GetVelocity");

	Params::VDSimulatedParticle_GetVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulation.AddExplicitColliderMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBaseVDComponent*                 VDComponent                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              Collider                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IgnoreConvexShapes                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::AddExplicitColliderMapping(class UBaseVDComponent* VDComponent, class UPrimitiveComponent* Collider, bool IgnoreConvexShapes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "AddExplicitColliderMapping");

	Params::VDSimulation_AddExplicitColliderMapping Parms{};

	Parms.VDComponent = VDComponent;
	Parms.Collider = Collider;
	Parms.IgnoreConvexShapes = IgnoreConvexShapes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.GetSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVDSettings                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FVDSettings UVDSimulation::GetSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "GetSettings");

	Params::VDSimulation_GetSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulation.k2QueryBoxOverlaps
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HalfExtents                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UVDSimulatedParticle*>     Overlaps                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class UVDSimulatedObject*>       SimObjectsToIgnore                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   MaxOverlaps                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulation::K2QueryBoxOverlaps(const struct FVector& Location, const struct FVector& HalfExtents, TArray<class UVDSimulatedParticle*>* Overlaps, TArray<class UVDSimulatedObject*>& SimObjectsToIgnore, int32 MaxOverlaps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "k2QueryBoxOverlaps");

	Params::VDSimulation_K2QueryBoxOverlaps Parms{};

	Parms.Location = std::move(Location);
	Parms.HalfExtents = std::move(HalfExtents);
	Parms.SimObjectsToIgnore = std::move(SimObjectsToIgnore);
	Parms.MaxOverlaps = MaxOverlaps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Overlaps != nullptr)
		*Overlaps = Parms.Overlaps;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulation.k2QuerySphereOverlaps
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UVDSimulatedParticle*>     Overlaps                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class UVDSimulatedObject*>       SimObjectsToIgnore                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   MaxOverlaps                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulation::K2QuerySphereOverlaps(const struct FVector& Location, float Radius, TArray<class UVDSimulatedParticle*>* Overlaps, TArray<class UVDSimulatedObject*>& SimObjectsToIgnore, int32 MaxOverlaps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "k2QuerySphereOverlaps");

	Params::VDSimulation_K2QuerySphereOverlaps Parms{};

	Parms.Location = std::move(Location);
	Parms.Radius = Radius;
	Parms.SimObjectsToIgnore = std::move(SimObjectsToIgnore);
	Parms.MaxOverlaps = MaxOverlaps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Overlaps != nullptr)
		*Overlaps = Parms.Overlaps;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulation.RemoveAllExplicitColliderMappings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBaseVDComponent*                 VDComponent                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::RemoveAllExplicitColliderMappings(class UBaseVDComponent* VDComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "RemoveAllExplicitColliderMappings");

	Params::VDSimulation_RemoveAllExplicitColliderMappings Parms{};

	Parms.VDComponent = VDComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.RemoveExplicitColliderMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBaseVDComponent*                 VDComponent                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              Collider                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::RemoveExplicitColliderMapping(class UBaseVDComponent* VDComponent, class UPrimitiveComponent* Collider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "RemoveExplicitColliderMapping");

	Params::VDSimulation_RemoveExplicitColliderMapping Parms{};

	Parms.VDComponent = VDComponent;
	Parms.Collider = Collider;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.SetConstrainPlaneNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Normal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::SetConstrainPlaneNormal(const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "SetConstrainPlaneNormal");

	Params::VDSimulation_SetConstrainPlaneNormal Parms{};

	Parms.Normal = std::move(Normal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.SetConstrainPlaneOrigin
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Origin                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::SetConstrainPlaneOrigin(const struct FVector& Origin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "SetConstrainPlaneOrigin");

	Params::VDSimulation_SetConstrainPlaneOrigin Parms{};

	Parms.Origin = std::move(Origin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.SetConstrainSimulationTo2DPlane
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::SetConstrainSimulationTo2DPlane(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "SetConstrainSimulationTo2DPlane");

	Params::VDSimulation_SetConstrainSimulationTo2DPlane Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.SetConstraintIterationCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ConstraintIterationCount                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::SetConstraintIterationCount(int32 ConstraintIterationCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "SetConstraintIterationCount");

	Params::VDSimulation_SetConstraintIterationCount Parms{};

	Parms.ConstraintIterationCount = ConstraintIterationCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.SetFrameRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FrameRate                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::SetFrameRate(int32 FrameRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "SetFrameRate");

	Params::VDSimulation_SetFrameRate Parms{};

	Parms.FrameRate = FrameRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.SetIsExplicitRigidBodyCollisionEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::SetIsExplicitRigidBodyCollisionEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "SetIsExplicitRigidBodyCollisionEnabled");

	Params::VDSimulation_SetIsExplicitRigidBodyCollisionEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.SetPerformExtraCollisionResolutionLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::SetPerformExtraCollisionResolutionLoop(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "SetPerformExtraCollisionResolutionLoop");

	Params::VDSimulation_SetPerformExtraCollisionResolutionLoop Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.SetPerFrameCollisionCacheEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::SetPerFrameCollisionCacheEnable(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "SetPerFrameCollisionCacheEnable");

	Params::VDSimulation_SetPerFrameCollisionCacheEnable Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.SetPhysXSceneCollisionEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::SetPhysXSceneCollisionEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "SetPhysXSceneCollisionEnabled");

	Params::VDSimulation_SetPhysXSceneCollisionEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.SetSelfCollisionEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::SetSelfCollisionEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "SetSelfCollisionEnabled");

	Params::VDSimulation_SetSelfCollisionEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.SetSubstepCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SubstepCount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::SetSubstepCount(int32 SubstepCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "SetSubstepCount");

	Params::VDSimulation_SetSubstepCount Parms{};

	Parms.SubstepCount = SubstepCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDSimulation.GetDirectionalWindParameters
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBaseVDComponent*                 VDComponent                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutGust                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDSimulation::GetDirectionalWindParameters(class UBaseVDComponent* VDComponent, struct FVector* OutDirection, float* OutSpeed, float* OutGust) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "GetDirectionalWindParameters");

	Params::VDSimulation_GetDirectionalWindParameters Parms{};

	Parms.VDComponent = VDComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDirection != nullptr)
		*OutDirection = Parms.OutDirection;

	if (OutSpeed != nullptr)
		*OutSpeed = std::move(Parms.OutSpeed);

	if (OutGust != nullptr)
		*OutGust = std::move(Parms.OutGust);
}


// Function VICODynamicsPlugin.VDSimulation.GetIsExplicitRigidBodyCollisionEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulation::GetIsExplicitRigidBodyCollisionEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "GetIsExplicitRigidBodyCollisionEnabled");

	Params::VDSimulation_GetIsExplicitRigidBodyCollisionEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulation.GetIsRunningOnWorkerThread
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDSimulation::GetIsRunningOnWorkerThread() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulation", "GetIsRunningOnWorkerThread");

	Params::VDSimulation_GetIsRunningOnWorkerThread Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDSimulationSettingsActor.GetSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVDSettings                      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FVDSettings AVDSimulationSettingsActor::GetSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDSimulationSettingsActor", "GetSettings");

	Params::VDSimulationSettingsActor_GetSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VICODynamicsPlugin.VDWindDirectionalSourceComponent.SetRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InRadius                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDWindDirectionalSourceComponent::SetRadius(float InRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDWindDirectionalSourceComponent", "SetRadius");

	Params::VDWindDirectionalSourceComponent_SetRadius Parms{};

	Parms.InRadius = InRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VICODynamicsPlugin.VDWindDirectionalSourceComponent.GetCurrentGust
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVDWindDirectionalSourceComponent::GetCurrentGust() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDWindDirectionalSourceComponent", "GetCurrentGust");

	Params::VDWindDirectionalSourceComponent_GetCurrentGust Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

