#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Debug

#include "Basic.hpp"

#include "Debug_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Debug.Log.Angle
// 0x0040 (0x0040 - 0x0000)
struct Log_Angle final 
{
public:
	float                                         InAngleValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogAngularUnit                          AngleUnit;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertValueToInt;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113A[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113B[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Angle) == 0x000008, "Wrong alignment on Log_Angle");
static_assert(sizeof(Log_Angle) == 0x000040, "Wrong size on Log_Angle");
static_assert(offsetof(Log_Angle, InAngleValue) == 0x000000, "Member 'Log_Angle::InAngleValue' has a wrong offset!");
static_assert(offsetof(Log_Angle, AngleUnit) == 0x000004, "Member 'Log_Angle::AngleUnit' has a wrong offset!");
static_assert(offsetof(Log_Angle, bConvertValueToInt) == 0x000005, "Member 'Log_Angle::bConvertValueToInt' has a wrong offset!");
static_assert(offsetof(Log_Angle, Prefix) == 0x000008, "Member 'Log_Angle::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Angle, Suffix) == 0x000018, "Member 'Log_Angle::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Angle, LoggingOption) == 0x000028, "Member 'Log_Angle::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Angle, TimeToDisplay) == 0x00002C, "Member 'Log_Angle::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Angle, ViewportKeyName) == 0x000030, "Member 'Log_Angle::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Angle, ContextObject) == 0x000038, "Member 'Log_Angle::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Bool
// 0x0040 (0x0040 - 0x0000)
struct Log_Array_Bool final 
{
public:
	TArray<bool>                                  InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113C[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Bool) == 0x000008, "Wrong alignment on Log_Array_Bool");
static_assert(sizeof(Log_Array_Bool) == 0x000040, "Wrong size on Log_Array_Bool");
static_assert(offsetof(Log_Array_Bool, InArray) == 0x000000, "Member 'Log_Array_Bool::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Bool, Prefix) == 0x000010, "Member 'Log_Array_Bool::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Bool, Suffix) == 0x000020, "Member 'Log_Array_Bool::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Bool, LoggingOption) == 0x000030, "Member 'Log_Array_Bool::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Bool, TimeToDisplay) == 0x000034, "Member 'Log_Array_Bool::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Bool, ContextObject) == 0x000038, "Member 'Log_Array_Bool::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Color
// 0x0048 (0x0048 - 0x0000)
struct Log_Array_Color final 
{
public:
	TArray<struct FLinearColor>                   InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCompact;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113D[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113E[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Color) == 0x000008, "Wrong alignment on Log_Array_Color");
static_assert(sizeof(Log_Array_Color) == 0x000048, "Wrong size on Log_Array_Color");
static_assert(offsetof(Log_Array_Color, InArray) == 0x000000, "Member 'Log_Array_Color::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Color, bCompact) == 0x000010, "Member 'Log_Array_Color::bCompact' has a wrong offset!");
static_assert(offsetof(Log_Array_Color, Prefix) == 0x000018, "Member 'Log_Array_Color::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Color, Suffix) == 0x000028, "Member 'Log_Array_Color::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Color, LoggingOption) == 0x000038, "Member 'Log_Array_Color::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Color, TimeToDisplay) == 0x00003C, "Member 'Log_Array_Color::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Color, ContextObject) == 0x000040, "Member 'Log_Array_Color::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_DateTime
// 0x0040 (0x0040 - 0x0000)
struct Log_Array_DateTime final 
{
public:
	TArray<struct FDateTime>                      InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113F[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_DateTime) == 0x000008, "Wrong alignment on Log_Array_DateTime");
static_assert(sizeof(Log_Array_DateTime) == 0x000040, "Wrong size on Log_Array_DateTime");
static_assert(offsetof(Log_Array_DateTime, InArray) == 0x000000, "Member 'Log_Array_DateTime::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_DateTime, Prefix) == 0x000010, "Member 'Log_Array_DateTime::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_DateTime, Suffix) == 0x000020, "Member 'Log_Array_DateTime::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_DateTime, LoggingOption) == 0x000030, "Member 'Log_Array_DateTime::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_DateTime, TimeToDisplay) == 0x000034, "Member 'Log_Array_DateTime::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_DateTime, ContextObject) == 0x000038, "Member 'Log_Array_DateTime::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Float
// 0x0040 (0x0040 - 0x0000)
struct Log_Array_Float final 
{
public:
	TArray<float>                                 InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1140[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Float) == 0x000008, "Wrong alignment on Log_Array_Float");
static_assert(sizeof(Log_Array_Float) == 0x000040, "Wrong size on Log_Array_Float");
static_assert(offsetof(Log_Array_Float, InArray) == 0x000000, "Member 'Log_Array_Float::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Float, Prefix) == 0x000010, "Member 'Log_Array_Float::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Float, Suffix) == 0x000020, "Member 'Log_Array_Float::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Float, LoggingOption) == 0x000030, "Member 'Log_Array_Float::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Float, TimeToDisplay) == 0x000034, "Member 'Log_Array_Float::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Float, ContextObject) == 0x000038, "Member 'Log_Array_Float::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Int32
// 0x0040 (0x0040 - 0x0000)
struct Log_Array_Int32 final 
{
public:
	TArray<int32>                                 InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1141[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Int32) == 0x000008, "Wrong alignment on Log_Array_Int32");
static_assert(sizeof(Log_Array_Int32) == 0x000040, "Wrong size on Log_Array_Int32");
static_assert(offsetof(Log_Array_Int32, InArray) == 0x000000, "Member 'Log_Array_Int32::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Int32, Prefix) == 0x000010, "Member 'Log_Array_Int32::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Int32, Suffix) == 0x000020, "Member 'Log_Array_Int32::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Int32, LoggingOption) == 0x000030, "Member 'Log_Array_Int32::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Int32, TimeToDisplay) == 0x000034, "Member 'Log_Array_Int32::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Int32, ContextObject) == 0x000038, "Member 'Log_Array_Int32::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Int64
// 0x0040 (0x0040 - 0x0000)
struct Log_Array_Int64 final 
{
public:
	TArray<int64>                                 InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1142[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Int64) == 0x000008, "Wrong alignment on Log_Array_Int64");
static_assert(sizeof(Log_Array_Int64) == 0x000040, "Wrong size on Log_Array_Int64");
static_assert(offsetof(Log_Array_Int64, InArray) == 0x000000, "Member 'Log_Array_Int64::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Int64, Prefix) == 0x000010, "Member 'Log_Array_Int64::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Int64, Suffix) == 0x000020, "Member 'Log_Array_Int64::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Int64, LoggingOption) == 0x000030, "Member 'Log_Array_Int64::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Int64, TimeToDisplay) == 0x000034, "Member 'Log_Array_Int64::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Int64, ContextObject) == 0x000038, "Member 'Log_Array_Int64::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Matrix
// 0x0040 (0x0040 - 0x0000)
struct Log_Array_Matrix final 
{
public:
	TArray<struct FMatrix>                        InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1143[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Matrix) == 0x000008, "Wrong alignment on Log_Array_Matrix");
static_assert(sizeof(Log_Array_Matrix) == 0x000040, "Wrong size on Log_Array_Matrix");
static_assert(offsetof(Log_Array_Matrix, InArray) == 0x000000, "Member 'Log_Array_Matrix::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Matrix, Prefix) == 0x000010, "Member 'Log_Array_Matrix::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Matrix, Suffix) == 0x000020, "Member 'Log_Array_Matrix::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Matrix, LoggingOption) == 0x000030, "Member 'Log_Array_Matrix::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Matrix, TimeToDisplay) == 0x000034, "Member 'Log_Array_Matrix::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Matrix, ContextObject) == 0x000038, "Member 'Log_Array_Matrix::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Name
// 0x0040 (0x0040 - 0x0000)
struct Log_Array_Name final 
{
public:
	TArray<class FName>                           InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1144[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Name) == 0x000008, "Wrong alignment on Log_Array_Name");
static_assert(sizeof(Log_Array_Name) == 0x000040, "Wrong size on Log_Array_Name");
static_assert(offsetof(Log_Array_Name, InArray) == 0x000000, "Member 'Log_Array_Name::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Name, Prefix) == 0x000010, "Member 'Log_Array_Name::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Name, Suffix) == 0x000020, "Member 'Log_Array_Name::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Name, LoggingOption) == 0x000030, "Member 'Log_Array_Name::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Name, TimeToDisplay) == 0x000034, "Member 'Log_Array_Name::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Name, ContextObject) == 0x000038, "Member 'Log_Array_Name::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Object
// 0x0040 (0x0040 - 0x0000)
struct Log_Array_Object final 
{
public:
	TArray<class UObject*>                        InArray;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1145[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Object) == 0x000008, "Wrong alignment on Log_Array_Object");
static_assert(sizeof(Log_Array_Object) == 0x000040, "Wrong size on Log_Array_Object");
static_assert(offsetof(Log_Array_Object, InArray) == 0x000000, "Member 'Log_Array_Object::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Object, Prefix) == 0x000010, "Member 'Log_Array_Object::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Object, Suffix) == 0x000020, "Member 'Log_Array_Object::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Object, LoggingOption) == 0x000030, "Member 'Log_Array_Object::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Object, TimeToDisplay) == 0x000034, "Member 'Log_Array_Object::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Object, ContextObject) == 0x000038, "Member 'Log_Array_Object::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Quat
// 0x0048 (0x0048 - 0x0000)
struct Log_Array_Quat final 
{
public:
	TArray<struct FQuat>                          InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCompact;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1146[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1147[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Quat) == 0x000008, "Wrong alignment on Log_Array_Quat");
static_assert(sizeof(Log_Array_Quat) == 0x000048, "Wrong size on Log_Array_Quat");
static_assert(offsetof(Log_Array_Quat, InArray) == 0x000000, "Member 'Log_Array_Quat::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Quat, bCompact) == 0x000010, "Member 'Log_Array_Quat::bCompact' has a wrong offset!");
static_assert(offsetof(Log_Array_Quat, Prefix) == 0x000018, "Member 'Log_Array_Quat::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Quat, Suffix) == 0x000028, "Member 'Log_Array_Quat::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Quat, LoggingOption) == 0x000038, "Member 'Log_Array_Quat::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Quat, TimeToDisplay) == 0x00003C, "Member 'Log_Array_Quat::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Quat, ContextObject) == 0x000040, "Member 'Log_Array_Quat::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Rotator
// 0x0048 (0x0048 - 0x0000)
struct Log_Array_Rotator final 
{
public:
	TArray<struct FRotator>                       InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCompact;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1148[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1149[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Rotator) == 0x000008, "Wrong alignment on Log_Array_Rotator");
static_assert(sizeof(Log_Array_Rotator) == 0x000048, "Wrong size on Log_Array_Rotator");
static_assert(offsetof(Log_Array_Rotator, InArray) == 0x000000, "Member 'Log_Array_Rotator::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Rotator, bCompact) == 0x000010, "Member 'Log_Array_Rotator::bCompact' has a wrong offset!");
static_assert(offsetof(Log_Array_Rotator, Prefix) == 0x000018, "Member 'Log_Array_Rotator::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Rotator, Suffix) == 0x000028, "Member 'Log_Array_Rotator::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Rotator, LoggingOption) == 0x000038, "Member 'Log_Array_Rotator::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Rotator, TimeToDisplay) == 0x00003C, "Member 'Log_Array_Rotator::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Rotator, ContextObject) == 0x000040, "Member 'Log_Array_Rotator::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_String
// 0x0040 (0x0040 - 0x0000)
struct Log_Array_String final 
{
public:
	TArray<class FString>                         InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114A[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_String) == 0x000008, "Wrong alignment on Log_Array_String");
static_assert(sizeof(Log_Array_String) == 0x000040, "Wrong size on Log_Array_String");
static_assert(offsetof(Log_Array_String, InArray) == 0x000000, "Member 'Log_Array_String::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_String, Prefix) == 0x000010, "Member 'Log_Array_String::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_String, Suffix) == 0x000020, "Member 'Log_Array_String::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_String, LoggingOption) == 0x000030, "Member 'Log_Array_String::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_String, TimeToDisplay) == 0x000034, "Member 'Log_Array_String::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_String, ContextObject) == 0x000038, "Member 'Log_Array_String::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Text
// 0x0040 (0x0040 - 0x0000)
struct Log_Array_Text final 
{
public:
	TArray<class FText>                           InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114B[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Text) == 0x000008, "Wrong alignment on Log_Array_Text");
static_assert(sizeof(Log_Array_Text) == 0x000040, "Wrong size on Log_Array_Text");
static_assert(offsetof(Log_Array_Text, InArray) == 0x000000, "Member 'Log_Array_Text::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Text, Prefix) == 0x000010, "Member 'Log_Array_Text::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Text, Suffix) == 0x000020, "Member 'Log_Array_Text::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Text, LoggingOption) == 0x000030, "Member 'Log_Array_Text::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Text, TimeToDisplay) == 0x000034, "Member 'Log_Array_Text::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Text, ContextObject) == 0x000038, "Member 'Log_Array_Text::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Transform
// 0x0040 (0x0040 - 0x0000)
struct Log_Array_Transform final 
{
public:
	TArray<struct FTransform>                     InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114C[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Transform) == 0x000008, "Wrong alignment on Log_Array_Transform");
static_assert(sizeof(Log_Array_Transform) == 0x000040, "Wrong size on Log_Array_Transform");
static_assert(offsetof(Log_Array_Transform, InArray) == 0x000000, "Member 'Log_Array_Transform::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Transform, Prefix) == 0x000010, "Member 'Log_Array_Transform::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Transform, Suffix) == 0x000020, "Member 'Log_Array_Transform::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Transform, LoggingOption) == 0x000030, "Member 'Log_Array_Transform::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Transform, TimeToDisplay) == 0x000034, "Member 'Log_Array_Transform::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Transform, ContextObject) == 0x000038, "Member 'Log_Array_Transform::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Vector
// 0x0048 (0x0048 - 0x0000)
struct Log_Array_Vector final 
{
public:
	TArray<struct FVector>                        InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCompact;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114D[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114E[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Vector) == 0x000008, "Wrong alignment on Log_Array_Vector");
static_assert(sizeof(Log_Array_Vector) == 0x000048, "Wrong size on Log_Array_Vector");
static_assert(offsetof(Log_Array_Vector, InArray) == 0x000000, "Member 'Log_Array_Vector::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Vector, bCompact) == 0x000010, "Member 'Log_Array_Vector::bCompact' has a wrong offset!");
static_assert(offsetof(Log_Array_Vector, Prefix) == 0x000018, "Member 'Log_Array_Vector::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Vector, Suffix) == 0x000028, "Member 'Log_Array_Vector::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Vector, LoggingOption) == 0x000038, "Member 'Log_Array_Vector::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Vector, TimeToDisplay) == 0x00003C, "Member 'Log_Array_Vector::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Vector, ContextObject) == 0x000040, "Member 'Log_Array_Vector::ContextObject' has a wrong offset!");

// Function Debug.Log.Array_Vector2D
// 0x0048 (0x0048 - 0x0000)
struct Log_Array_Vector2D final 
{
public:
	TArray<struct FVector2D>                      InArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCompact;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1150[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Array_Vector2D) == 0x000008, "Wrong alignment on Log_Array_Vector2D");
static_assert(sizeof(Log_Array_Vector2D) == 0x000048, "Wrong size on Log_Array_Vector2D");
static_assert(offsetof(Log_Array_Vector2D, InArray) == 0x000000, "Member 'Log_Array_Vector2D::InArray' has a wrong offset!");
static_assert(offsetof(Log_Array_Vector2D, bCompact) == 0x000010, "Member 'Log_Array_Vector2D::bCompact' has a wrong offset!");
static_assert(offsetof(Log_Array_Vector2D, Prefix) == 0x000018, "Member 'Log_Array_Vector2D::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Array_Vector2D, Suffix) == 0x000028, "Member 'Log_Array_Vector2D::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Array_Vector2D, LoggingOption) == 0x000038, "Member 'Log_Array_Vector2D::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Array_Vector2D, TimeToDisplay) == 0x00003C, "Member 'Log_Array_Vector2D::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Array_Vector2D, ContextObject) == 0x000040, "Member 'Log_Array_Vector2D::ContextObject' has a wrong offset!");

// Function Debug.Log.Assert_False
// 0x0038 (0x0038 - 0x0000)
struct Log_Assert_False final 
{
public:
	bool                                          bCondition;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1151[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1152[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1153[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_Assert_False) == 0x000008, "Wrong alignment on Log_Assert_False");
static_assert(sizeof(Log_Assert_False) == 0x000038, "Wrong size on Log_Assert_False");
static_assert(offsetof(Log_Assert_False, bCondition) == 0x000000, "Member 'Log_Assert_False::bCondition' has a wrong offset!");
static_assert(offsetof(Log_Assert_False, Message) == 0x000008, "Member 'Log_Assert_False::Message' has a wrong offset!");
static_assert(offsetof(Log_Assert_False, bCrashOnFailure) == 0x000018, "Member 'Log_Assert_False::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_Assert_False, LoggingOption) == 0x000019, "Member 'Log_Assert_False::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Assert_False, TimeToDisplay) == 0x00001C, "Member 'Log_Assert_False::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Assert_False, ViewportKeyName) == 0x000020, "Member 'Log_Assert_False::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Assert_False, ContextObject) == 0x000028, "Member 'Log_Assert_False::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_Assert_False, ReturnValue) == 0x000030, "Member 'Log_Assert_False::ReturnValue' has a wrong offset!");

// Function Debug.Log.Assert_IsValid
// 0x0038 (0x0038 - 0x0000)
struct Log_Assert_IsValid final 
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1154[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1155[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_Assert_IsValid) == 0x000008, "Wrong alignment on Log_Assert_IsValid");
static_assert(sizeof(Log_Assert_IsValid) == 0x000038, "Wrong size on Log_Assert_IsValid");
static_assert(offsetof(Log_Assert_IsValid, Object) == 0x000000, "Member 'Log_Assert_IsValid::Object' has a wrong offset!");
static_assert(offsetof(Log_Assert_IsValid, Message) == 0x000008, "Member 'Log_Assert_IsValid::Message' has a wrong offset!");
static_assert(offsetof(Log_Assert_IsValid, bCrashOnFailure) == 0x000018, "Member 'Log_Assert_IsValid::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_Assert_IsValid, LoggingOption) == 0x000019, "Member 'Log_Assert_IsValid::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Assert_IsValid, TimeToDisplay) == 0x00001C, "Member 'Log_Assert_IsValid::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Assert_IsValid, ViewportKeyName) == 0x000020, "Member 'Log_Assert_IsValid::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Assert_IsValid, ContextObject) == 0x000028, "Member 'Log_Assert_IsValid::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_Assert_IsValid, ReturnValue) == 0x000030, "Member 'Log_Assert_IsValid::ReturnValue' has a wrong offset!");

// Function Debug.Log.Assert_True
// 0x0038 (0x0038 - 0x0000)
struct Log_Assert_True final 
{
public:
	bool                                          bCondition;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1156[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1157[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1158[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_Assert_True) == 0x000008, "Wrong alignment on Log_Assert_True");
static_assert(sizeof(Log_Assert_True) == 0x000038, "Wrong size on Log_Assert_True");
static_assert(offsetof(Log_Assert_True, bCondition) == 0x000000, "Member 'Log_Assert_True::bCondition' has a wrong offset!");
static_assert(offsetof(Log_Assert_True, Message) == 0x000008, "Member 'Log_Assert_True::Message' has a wrong offset!");
static_assert(offsetof(Log_Assert_True, bCrashOnFailure) == 0x000018, "Member 'Log_Assert_True::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_Assert_True, LoggingOption) == 0x000019, "Member 'Log_Assert_True::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Assert_True, TimeToDisplay) == 0x00001C, "Member 'Log_Assert_True::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Assert_True, ViewportKeyName) == 0x000020, "Member 'Log_Assert_True::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Assert_True, ContextObject) == 0x000028, "Member 'Log_Assert_True::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_Assert_True, ReturnValue) == 0x000030, "Member 'Log_Assert_True::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_Bool
// 0x0038 (0x0038 - 0x0000)
struct Log_AssertEqual_Bool final 
{
public:
	bool                                          bActual;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExpected;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1159[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115A[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115B[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_Bool) == 0x000008, "Wrong alignment on Log_AssertEqual_Bool");
static_assert(sizeof(Log_AssertEqual_Bool) == 0x000038, "Wrong size on Log_AssertEqual_Bool");
static_assert(offsetof(Log_AssertEqual_Bool, bActual) == 0x000000, "Member 'Log_AssertEqual_Bool::bActual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Bool, bExpected) == 0x000001, "Member 'Log_AssertEqual_Bool::bExpected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Bool, Message) == 0x000008, "Member 'Log_AssertEqual_Bool::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Bool, bCrashOnFailure) == 0x000018, "Member 'Log_AssertEqual_Bool::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Bool, LoggingOption) == 0x000019, "Member 'Log_AssertEqual_Bool::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Bool, TimeToDisplay) == 0x00001C, "Member 'Log_AssertEqual_Bool::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Bool, ViewportKeyName) == 0x000020, "Member 'Log_AssertEqual_Bool::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Bool, ContextObject) == 0x000028, "Member 'Log_AssertEqual_Bool::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Bool, ReturnValue) == 0x000030, "Member 'Log_AssertEqual_Bool::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_Color
// 0x0038 (0x0038 - 0x0000)
struct Log_AssertEqual_Color final 
{
public:
	struct FColor                                 Actual;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Expected;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115C[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115D[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_Color) == 0x000008, "Wrong alignment on Log_AssertEqual_Color");
static_assert(sizeof(Log_AssertEqual_Color) == 0x000038, "Wrong size on Log_AssertEqual_Color");
static_assert(offsetof(Log_AssertEqual_Color, Actual) == 0x000000, "Member 'Log_AssertEqual_Color::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Color, Expected) == 0x000004, "Member 'Log_AssertEqual_Color::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Color, Message) == 0x000008, "Member 'Log_AssertEqual_Color::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Color, bCrashOnFailure) == 0x000018, "Member 'Log_AssertEqual_Color::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Color, LoggingOption) == 0x000019, "Member 'Log_AssertEqual_Color::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Color, TimeToDisplay) == 0x00001C, "Member 'Log_AssertEqual_Color::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Color, ViewportKeyName) == 0x000020, "Member 'Log_AssertEqual_Color::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Color, ContextObject) == 0x000028, "Member 'Log_AssertEqual_Color::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Color, ReturnValue) == 0x000030, "Member 'Log_AssertEqual_Color::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_DateTime
// 0x0040 (0x0040 - 0x0000)
struct Log_AssertEqual_DateTime final 
{
public:
	struct FDateTime                              Actual;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Expected;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115E[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115F[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_DateTime) == 0x000008, "Wrong alignment on Log_AssertEqual_DateTime");
static_assert(sizeof(Log_AssertEqual_DateTime) == 0x000040, "Wrong size on Log_AssertEqual_DateTime");
static_assert(offsetof(Log_AssertEqual_DateTime, Actual) == 0x000000, "Member 'Log_AssertEqual_DateTime::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_DateTime, Expected) == 0x000008, "Member 'Log_AssertEqual_DateTime::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_DateTime, Message) == 0x000010, "Member 'Log_AssertEqual_DateTime::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_DateTime, bCrashOnFailure) == 0x000020, "Member 'Log_AssertEqual_DateTime::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_DateTime, LoggingOption) == 0x000021, "Member 'Log_AssertEqual_DateTime::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_DateTime, TimeToDisplay) == 0x000024, "Member 'Log_AssertEqual_DateTime::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_DateTime, ViewportKeyName) == 0x000028, "Member 'Log_AssertEqual_DateTime::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_DateTime, ContextObject) == 0x000030, "Member 'Log_AssertEqual_DateTime::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_DateTime, ReturnValue) == 0x000038, "Member 'Log_AssertEqual_DateTime::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_Float
// 0x0038 (0x0038 - 0x0000)
struct Log_AssertEqual_Float final 
{
public:
	float                                         Actual;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Expected;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1160[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1161[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_Float) == 0x000008, "Wrong alignment on Log_AssertEqual_Float");
static_assert(sizeof(Log_AssertEqual_Float) == 0x000038, "Wrong size on Log_AssertEqual_Float");
static_assert(offsetof(Log_AssertEqual_Float, Actual) == 0x000000, "Member 'Log_AssertEqual_Float::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Float, Expected) == 0x000004, "Member 'Log_AssertEqual_Float::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Float, Message) == 0x000008, "Member 'Log_AssertEqual_Float::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Float, bCrashOnFailure) == 0x000018, "Member 'Log_AssertEqual_Float::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Float, LoggingOption) == 0x000019, "Member 'Log_AssertEqual_Float::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Float, TimeToDisplay) == 0x00001C, "Member 'Log_AssertEqual_Float::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Float, ViewportKeyName) == 0x000020, "Member 'Log_AssertEqual_Float::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Float, ContextObject) == 0x000028, "Member 'Log_AssertEqual_Float::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Float, ReturnValue) == 0x000030, "Member 'Log_AssertEqual_Float::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_Integer
// 0x0038 (0x0038 - 0x0000)
struct Log_AssertEqual_Integer final 
{
public:
	int32                                         Actual;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expected;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1162[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1163[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_Integer) == 0x000008, "Wrong alignment on Log_AssertEqual_Integer");
static_assert(sizeof(Log_AssertEqual_Integer) == 0x000038, "Wrong size on Log_AssertEqual_Integer");
static_assert(offsetof(Log_AssertEqual_Integer, Actual) == 0x000000, "Member 'Log_AssertEqual_Integer::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Integer, Expected) == 0x000004, "Member 'Log_AssertEqual_Integer::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Integer, Message) == 0x000008, "Member 'Log_AssertEqual_Integer::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Integer, bCrashOnFailure) == 0x000018, "Member 'Log_AssertEqual_Integer::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Integer, LoggingOption) == 0x000019, "Member 'Log_AssertEqual_Integer::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Integer, TimeToDisplay) == 0x00001C, "Member 'Log_AssertEqual_Integer::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Integer, ViewportKeyName) == 0x000020, "Member 'Log_AssertEqual_Integer::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Integer, ContextObject) == 0x000028, "Member 'Log_AssertEqual_Integer::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Integer, ReturnValue) == 0x000030, "Member 'Log_AssertEqual_Integer::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_Name
// 0x0040 (0x0040 - 0x0000)
struct Log_AssertEqual_Name final 
{
public:
	class FName                                   Actual;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Expected;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1164[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1165[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_Name) == 0x000008, "Wrong alignment on Log_AssertEqual_Name");
static_assert(sizeof(Log_AssertEqual_Name) == 0x000040, "Wrong size on Log_AssertEqual_Name");
static_assert(offsetof(Log_AssertEqual_Name, Actual) == 0x000000, "Member 'Log_AssertEqual_Name::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Name, Expected) == 0x000008, "Member 'Log_AssertEqual_Name::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Name, Message) == 0x000010, "Member 'Log_AssertEqual_Name::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Name, bCrashOnFailure) == 0x000020, "Member 'Log_AssertEqual_Name::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Name, LoggingOption) == 0x000021, "Member 'Log_AssertEqual_Name::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Name, TimeToDisplay) == 0x000024, "Member 'Log_AssertEqual_Name::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Name, ViewportKeyName) == 0x000028, "Member 'Log_AssertEqual_Name::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Name, ContextObject) == 0x000030, "Member 'Log_AssertEqual_Name::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Name, ReturnValue) == 0x000038, "Member 'Log_AssertEqual_Name::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_Object
// 0x0040 (0x0040 - 0x0000)
struct Log_AssertEqual_Object final 
{
public:
	class UObject*                                Actual;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Expected;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1166[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1167[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_Object) == 0x000008, "Wrong alignment on Log_AssertEqual_Object");
static_assert(sizeof(Log_AssertEqual_Object) == 0x000040, "Wrong size on Log_AssertEqual_Object");
static_assert(offsetof(Log_AssertEqual_Object, Actual) == 0x000000, "Member 'Log_AssertEqual_Object::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Object, Expected) == 0x000008, "Member 'Log_AssertEqual_Object::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Object, Message) == 0x000010, "Member 'Log_AssertEqual_Object::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Object, bCrashOnFailure) == 0x000020, "Member 'Log_AssertEqual_Object::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Object, LoggingOption) == 0x000021, "Member 'Log_AssertEqual_Object::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Object, TimeToDisplay) == 0x000024, "Member 'Log_AssertEqual_Object::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Object, ViewportKeyName) == 0x000028, "Member 'Log_AssertEqual_Object::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Object, ContextObject) == 0x000030, "Member 'Log_AssertEqual_Object::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Object, ReturnValue) == 0x000038, "Member 'Log_AssertEqual_Object::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_Quat
// 0x0050 (0x0050 - 0x0000)
struct Log_AssertEqual_Quat final 
{
public:
	struct FQuat                                  Actual;                                            // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  Expected;                                          // 0x0010(0x0010)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1168[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1169[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_Quat) == 0x000010, "Wrong alignment on Log_AssertEqual_Quat");
static_assert(sizeof(Log_AssertEqual_Quat) == 0x000050, "Wrong size on Log_AssertEqual_Quat");
static_assert(offsetof(Log_AssertEqual_Quat, Actual) == 0x000000, "Member 'Log_AssertEqual_Quat::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Quat, Expected) == 0x000010, "Member 'Log_AssertEqual_Quat::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Quat, Message) == 0x000020, "Member 'Log_AssertEqual_Quat::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Quat, bCrashOnFailure) == 0x000030, "Member 'Log_AssertEqual_Quat::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Quat, LoggingOption) == 0x000031, "Member 'Log_AssertEqual_Quat::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Quat, TimeToDisplay) == 0x000034, "Member 'Log_AssertEqual_Quat::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Quat, ViewportKeyName) == 0x000038, "Member 'Log_AssertEqual_Quat::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Quat, ContextObject) == 0x000040, "Member 'Log_AssertEqual_Quat::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Quat, ReturnValue) == 0x000048, "Member 'Log_AssertEqual_Quat::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_Rotator
// 0x0048 (0x0048 - 0x0000)
struct Log_AssertEqual_Rotator final 
{
public:
	struct FRotator                               Actual;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Expected;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116A[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116B[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_Rotator) == 0x000008, "Wrong alignment on Log_AssertEqual_Rotator");
static_assert(sizeof(Log_AssertEqual_Rotator) == 0x000048, "Wrong size on Log_AssertEqual_Rotator");
static_assert(offsetof(Log_AssertEqual_Rotator, Actual) == 0x000000, "Member 'Log_AssertEqual_Rotator::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Rotator, Expected) == 0x00000C, "Member 'Log_AssertEqual_Rotator::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Rotator, Message) == 0x000018, "Member 'Log_AssertEqual_Rotator::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Rotator, bCrashOnFailure) == 0x000028, "Member 'Log_AssertEqual_Rotator::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Rotator, LoggingOption) == 0x000029, "Member 'Log_AssertEqual_Rotator::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Rotator, TimeToDisplay) == 0x00002C, "Member 'Log_AssertEqual_Rotator::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Rotator, ViewportKeyName) == 0x000030, "Member 'Log_AssertEqual_Rotator::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Rotator, ContextObject) == 0x000038, "Member 'Log_AssertEqual_Rotator::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Rotator, ReturnValue) == 0x000040, "Member 'Log_AssertEqual_Rotator::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_String
// 0x0050 (0x0050 - 0x0000)
struct Log_AssertEqual_String final 
{
public:
	class FString                                 Actual;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Expected;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116C[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116D[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_String) == 0x000008, "Wrong alignment on Log_AssertEqual_String");
static_assert(sizeof(Log_AssertEqual_String) == 0x000050, "Wrong size on Log_AssertEqual_String");
static_assert(offsetof(Log_AssertEqual_String, Actual) == 0x000000, "Member 'Log_AssertEqual_String::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_String, Expected) == 0x000010, "Member 'Log_AssertEqual_String::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_String, Message) == 0x000020, "Member 'Log_AssertEqual_String::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_String, bCrashOnFailure) == 0x000030, "Member 'Log_AssertEqual_String::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_String, LoggingOption) == 0x000031, "Member 'Log_AssertEqual_String::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_String, TimeToDisplay) == 0x000034, "Member 'Log_AssertEqual_String::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_String, ViewportKeyName) == 0x000038, "Member 'Log_AssertEqual_String::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_String, ContextObject) == 0x000040, "Member 'Log_AssertEqual_String::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_String, ReturnValue) == 0x000048, "Member 'Log_AssertEqual_String::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_Transform
// 0x0090 (0x0090 - 0x0000)
struct Log_AssertEqual_Transform final 
{
public:
	struct FTransform                             Actual;                                            // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Expected;                                          // 0x0030(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoScale;                                          // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116E[0x1];                                     // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116F[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_Transform) == 0x000010, "Wrong alignment on Log_AssertEqual_Transform");
static_assert(sizeof(Log_AssertEqual_Transform) == 0x000090, "Wrong size on Log_AssertEqual_Transform");
static_assert(offsetof(Log_AssertEqual_Transform, Actual) == 0x000000, "Member 'Log_AssertEqual_Transform::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Transform, Expected) == 0x000030, "Member 'Log_AssertEqual_Transform::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Transform, Message) == 0x000060, "Member 'Log_AssertEqual_Transform::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Transform, bNoScale) == 0x000070, "Member 'Log_AssertEqual_Transform::bNoScale' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Transform, bCrashOnFailure) == 0x000071, "Member 'Log_AssertEqual_Transform::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Transform, LoggingOption) == 0x000072, "Member 'Log_AssertEqual_Transform::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Transform, TimeToDisplay) == 0x000074, "Member 'Log_AssertEqual_Transform::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Transform, ViewportKeyName) == 0x000078, "Member 'Log_AssertEqual_Transform::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Transform, ContextObject) == 0x000080, "Member 'Log_AssertEqual_Transform::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Transform, ReturnValue) == 0x000088, "Member 'Log_AssertEqual_Transform::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_Vector
// 0x0048 (0x0048 - 0x0000)
struct Log_AssertEqual_Vector final 
{
public:
	struct FVector                                Actual;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Expected;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1170[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1171[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_Vector) == 0x000008, "Wrong alignment on Log_AssertEqual_Vector");
static_assert(sizeof(Log_AssertEqual_Vector) == 0x000048, "Wrong size on Log_AssertEqual_Vector");
static_assert(offsetof(Log_AssertEqual_Vector, Actual) == 0x000000, "Member 'Log_AssertEqual_Vector::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector, Expected) == 0x00000C, "Member 'Log_AssertEqual_Vector::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector, Message) == 0x000018, "Member 'Log_AssertEqual_Vector::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector, bCrashOnFailure) == 0x000028, "Member 'Log_AssertEqual_Vector::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector, LoggingOption) == 0x000029, "Member 'Log_AssertEqual_Vector::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector, TimeToDisplay) == 0x00002C, "Member 'Log_AssertEqual_Vector::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector, ViewportKeyName) == 0x000030, "Member 'Log_AssertEqual_Vector::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector, ContextObject) == 0x000038, "Member 'Log_AssertEqual_Vector::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector, ReturnValue) == 0x000040, "Member 'Log_AssertEqual_Vector::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertEqual_Vector2D
// 0x0040 (0x0040 - 0x0000)
struct Log_AssertEqual_Vector2D final 
{
public:
	struct FVector2D                              Actual;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Expected;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1172[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1173[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertEqual_Vector2D) == 0x000008, "Wrong alignment on Log_AssertEqual_Vector2D");
static_assert(sizeof(Log_AssertEqual_Vector2D) == 0x000040, "Wrong size on Log_AssertEqual_Vector2D");
static_assert(offsetof(Log_AssertEqual_Vector2D, Actual) == 0x000000, "Member 'Log_AssertEqual_Vector2D::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector2D, Expected) == 0x000008, "Member 'Log_AssertEqual_Vector2D::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector2D, Message) == 0x000010, "Member 'Log_AssertEqual_Vector2D::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector2D, bCrashOnFailure) == 0x000020, "Member 'Log_AssertEqual_Vector2D::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector2D, LoggingOption) == 0x000021, "Member 'Log_AssertEqual_Vector2D::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector2D, TimeToDisplay) == 0x000024, "Member 'Log_AssertEqual_Vector2D::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector2D, ViewportKeyName) == 0x000028, "Member 'Log_AssertEqual_Vector2D::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector2D, ContextObject) == 0x000030, "Member 'Log_AssertEqual_Vector2D::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertEqual_Vector2D, ReturnValue) == 0x000038, "Member 'Log_AssertEqual_Vector2D::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertNotEqual_Color
// 0x0038 (0x0038 - 0x0000)
struct Log_AssertNotEqual_Color final 
{
public:
	struct FColor                                 Actual;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Expected;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1174[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1175[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertNotEqual_Color) == 0x000008, "Wrong alignment on Log_AssertNotEqual_Color");
static_assert(sizeof(Log_AssertNotEqual_Color) == 0x000038, "Wrong size on Log_AssertNotEqual_Color");
static_assert(offsetof(Log_AssertNotEqual_Color, Actual) == 0x000000, "Member 'Log_AssertNotEqual_Color::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Color, Expected) == 0x000004, "Member 'Log_AssertNotEqual_Color::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Color, Message) == 0x000008, "Member 'Log_AssertNotEqual_Color::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Color, bCrashOnFailure) == 0x000018, "Member 'Log_AssertNotEqual_Color::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Color, LoggingOption) == 0x000019, "Member 'Log_AssertNotEqual_Color::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Color, TimeToDisplay) == 0x00001C, "Member 'Log_AssertNotEqual_Color::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Color, ViewportKeyName) == 0x000020, "Member 'Log_AssertNotEqual_Color::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Color, ContextObject) == 0x000028, "Member 'Log_AssertNotEqual_Color::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Color, ReturnValue) == 0x000030, "Member 'Log_AssertNotEqual_Color::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertNotEqual_Name
// 0x0040 (0x0040 - 0x0000)
struct Log_AssertNotEqual_Name final 
{
public:
	class FName                                   Actual;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Expected;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1176[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1177[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertNotEqual_Name) == 0x000008, "Wrong alignment on Log_AssertNotEqual_Name");
static_assert(sizeof(Log_AssertNotEqual_Name) == 0x000040, "Wrong size on Log_AssertNotEqual_Name");
static_assert(offsetof(Log_AssertNotEqual_Name, Actual) == 0x000000, "Member 'Log_AssertNotEqual_Name::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Name, Expected) == 0x000008, "Member 'Log_AssertNotEqual_Name::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Name, Message) == 0x000010, "Member 'Log_AssertNotEqual_Name::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Name, bCrashOnFailure) == 0x000020, "Member 'Log_AssertNotEqual_Name::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Name, LoggingOption) == 0x000021, "Member 'Log_AssertNotEqual_Name::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Name, TimeToDisplay) == 0x000024, "Member 'Log_AssertNotEqual_Name::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Name, ViewportKeyName) == 0x000028, "Member 'Log_AssertNotEqual_Name::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Name, ContextObject) == 0x000030, "Member 'Log_AssertNotEqual_Name::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Name, ReturnValue) == 0x000038, "Member 'Log_AssertNotEqual_Name::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertNotEqual_Object
// 0x0040 (0x0040 - 0x0000)
struct Log_AssertNotEqual_Object final 
{
public:
	class UObject*                                Actual;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Expected;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1178[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1179[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertNotEqual_Object) == 0x000008, "Wrong alignment on Log_AssertNotEqual_Object");
static_assert(sizeof(Log_AssertNotEqual_Object) == 0x000040, "Wrong size on Log_AssertNotEqual_Object");
static_assert(offsetof(Log_AssertNotEqual_Object, Actual) == 0x000000, "Member 'Log_AssertNotEqual_Object::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Object, Expected) == 0x000008, "Member 'Log_AssertNotEqual_Object::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Object, Message) == 0x000010, "Member 'Log_AssertNotEqual_Object::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Object, bCrashOnFailure) == 0x000020, "Member 'Log_AssertNotEqual_Object::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Object, LoggingOption) == 0x000021, "Member 'Log_AssertNotEqual_Object::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Object, TimeToDisplay) == 0x000024, "Member 'Log_AssertNotEqual_Object::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Object, ViewportKeyName) == 0x000028, "Member 'Log_AssertNotEqual_Object::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Object, ContextObject) == 0x000030, "Member 'Log_AssertNotEqual_Object::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Object, ReturnValue) == 0x000038, "Member 'Log_AssertNotEqual_Object::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertNotEqual_Quat
// 0x0050 (0x0050 - 0x0000)
struct Log_AssertNotEqual_Quat final 
{
public:
	struct FQuat                                  Actual;                                            // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  Expected;                                          // 0x0010(0x0010)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117A[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117B[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertNotEqual_Quat) == 0x000010, "Wrong alignment on Log_AssertNotEqual_Quat");
static_assert(sizeof(Log_AssertNotEqual_Quat) == 0x000050, "Wrong size on Log_AssertNotEqual_Quat");
static_assert(offsetof(Log_AssertNotEqual_Quat, Actual) == 0x000000, "Member 'Log_AssertNotEqual_Quat::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Quat, Expected) == 0x000010, "Member 'Log_AssertNotEqual_Quat::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Quat, Message) == 0x000020, "Member 'Log_AssertNotEqual_Quat::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Quat, bCrashOnFailure) == 0x000030, "Member 'Log_AssertNotEqual_Quat::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Quat, LoggingOption) == 0x000031, "Member 'Log_AssertNotEqual_Quat::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Quat, TimeToDisplay) == 0x000034, "Member 'Log_AssertNotEqual_Quat::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Quat, ViewportKeyName) == 0x000038, "Member 'Log_AssertNotEqual_Quat::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Quat, ContextObject) == 0x000040, "Member 'Log_AssertNotEqual_Quat::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Quat, ReturnValue) == 0x000048, "Member 'Log_AssertNotEqual_Quat::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertNotEqual_Rotator
// 0x0048 (0x0048 - 0x0000)
struct Log_AssertNotEqual_Rotator final 
{
public:
	struct FRotator                               Actual;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Expected;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117C[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117D[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertNotEqual_Rotator) == 0x000008, "Wrong alignment on Log_AssertNotEqual_Rotator");
static_assert(sizeof(Log_AssertNotEqual_Rotator) == 0x000048, "Wrong size on Log_AssertNotEqual_Rotator");
static_assert(offsetof(Log_AssertNotEqual_Rotator, Actual) == 0x000000, "Member 'Log_AssertNotEqual_Rotator::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Rotator, Expected) == 0x00000C, "Member 'Log_AssertNotEqual_Rotator::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Rotator, Message) == 0x000018, "Member 'Log_AssertNotEqual_Rotator::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Rotator, bCrashOnFailure) == 0x000028, "Member 'Log_AssertNotEqual_Rotator::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Rotator, LoggingOption) == 0x000029, "Member 'Log_AssertNotEqual_Rotator::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Rotator, TimeToDisplay) == 0x00002C, "Member 'Log_AssertNotEqual_Rotator::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Rotator, ViewportKeyName) == 0x000030, "Member 'Log_AssertNotEqual_Rotator::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Rotator, ContextObject) == 0x000038, "Member 'Log_AssertNotEqual_Rotator::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Rotator, ReturnValue) == 0x000040, "Member 'Log_AssertNotEqual_Rotator::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertNotEqual_String
// 0x0050 (0x0050 - 0x0000)
struct Log_AssertNotEqual_String final 
{
public:
	class FString                                 Actual;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Expected;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117E[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117F[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertNotEqual_String) == 0x000008, "Wrong alignment on Log_AssertNotEqual_String");
static_assert(sizeof(Log_AssertNotEqual_String) == 0x000050, "Wrong size on Log_AssertNotEqual_String");
static_assert(offsetof(Log_AssertNotEqual_String, Actual) == 0x000000, "Member 'Log_AssertNotEqual_String::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_String, Expected) == 0x000010, "Member 'Log_AssertNotEqual_String::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_String, Message) == 0x000020, "Member 'Log_AssertNotEqual_String::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_String, bCrashOnFailure) == 0x000030, "Member 'Log_AssertNotEqual_String::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_String, LoggingOption) == 0x000031, "Member 'Log_AssertNotEqual_String::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_String, TimeToDisplay) == 0x000034, "Member 'Log_AssertNotEqual_String::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_String, ViewportKeyName) == 0x000038, "Member 'Log_AssertNotEqual_String::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_String, ContextObject) == 0x000040, "Member 'Log_AssertNotEqual_String::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_String, ReturnValue) == 0x000048, "Member 'Log_AssertNotEqual_String::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertNotEqual_Transform
// 0x0090 (0x0090 - 0x0000)
struct Log_AssertNotEqual_Transform final 
{
public:
	struct FTransform                             Actual;                                            // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Expected;                                          // 0x0030(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoScale;                                          // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1180[0x1];                                     // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1181[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertNotEqual_Transform) == 0x000010, "Wrong alignment on Log_AssertNotEqual_Transform");
static_assert(sizeof(Log_AssertNotEqual_Transform) == 0x000090, "Wrong size on Log_AssertNotEqual_Transform");
static_assert(offsetof(Log_AssertNotEqual_Transform, Actual) == 0x000000, "Member 'Log_AssertNotEqual_Transform::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Transform, Expected) == 0x000030, "Member 'Log_AssertNotEqual_Transform::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Transform, Message) == 0x000060, "Member 'Log_AssertNotEqual_Transform::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Transform, bNoScale) == 0x000070, "Member 'Log_AssertNotEqual_Transform::bNoScale' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Transform, bCrashOnFailure) == 0x000071, "Member 'Log_AssertNotEqual_Transform::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Transform, LoggingOption) == 0x000072, "Member 'Log_AssertNotEqual_Transform::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Transform, TimeToDisplay) == 0x000074, "Member 'Log_AssertNotEqual_Transform::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Transform, ViewportKeyName) == 0x000078, "Member 'Log_AssertNotEqual_Transform::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Transform, ContextObject) == 0x000080, "Member 'Log_AssertNotEqual_Transform::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Transform, ReturnValue) == 0x000088, "Member 'Log_AssertNotEqual_Transform::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertNotEqual_Vector
// 0x0048 (0x0048 - 0x0000)
struct Log_AssertNotEqual_Vector final 
{
public:
	struct FVector                                Actual;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Expected;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1182[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1183[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertNotEqual_Vector) == 0x000008, "Wrong alignment on Log_AssertNotEqual_Vector");
static_assert(sizeof(Log_AssertNotEqual_Vector) == 0x000048, "Wrong size on Log_AssertNotEqual_Vector");
static_assert(offsetof(Log_AssertNotEqual_Vector, Actual) == 0x000000, "Member 'Log_AssertNotEqual_Vector::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector, Expected) == 0x00000C, "Member 'Log_AssertNotEqual_Vector::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector, Message) == 0x000018, "Member 'Log_AssertNotEqual_Vector::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector, bCrashOnFailure) == 0x000028, "Member 'Log_AssertNotEqual_Vector::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector, LoggingOption) == 0x000029, "Member 'Log_AssertNotEqual_Vector::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector, TimeToDisplay) == 0x00002C, "Member 'Log_AssertNotEqual_Vector::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector, ViewportKeyName) == 0x000030, "Member 'Log_AssertNotEqual_Vector::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector, ContextObject) == 0x000038, "Member 'Log_AssertNotEqual_Vector::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector, ReturnValue) == 0x000040, "Member 'Log_AssertNotEqual_Vector::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertNotEqual_Vector2D
// 0x0040 (0x0040 - 0x0000)
struct Log_AssertNotEqual_Vector2D final 
{
public:
	struct FVector2D                              Actual;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Expected;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1184[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1185[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertNotEqual_Vector2D) == 0x000008, "Wrong alignment on Log_AssertNotEqual_Vector2D");
static_assert(sizeof(Log_AssertNotEqual_Vector2D) == 0x000040, "Wrong size on Log_AssertNotEqual_Vector2D");
static_assert(offsetof(Log_AssertNotEqual_Vector2D, Actual) == 0x000000, "Member 'Log_AssertNotEqual_Vector2D::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector2D, Expected) == 0x000008, "Member 'Log_AssertNotEqual_Vector2D::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector2D, Message) == 0x000010, "Member 'Log_AssertNotEqual_Vector2D::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector2D, bCrashOnFailure) == 0x000020, "Member 'Log_AssertNotEqual_Vector2D::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector2D, LoggingOption) == 0x000021, "Member 'Log_AssertNotEqual_Vector2D::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector2D, TimeToDisplay) == 0x000024, "Member 'Log_AssertNotEqual_Vector2D::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector2D, ViewportKeyName) == 0x000028, "Member 'Log_AssertNotEqual_Vector2D::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector2D, ContextObject) == 0x000030, "Member 'Log_AssertNotEqual_Vector2D::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertNotEqual_Vector2D, ReturnValue) == 0x000038, "Member 'Log_AssertNotEqual_Vector2D::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertValue_DateTime
// 0x0048 (0x0048 - 0x0000)
struct Log_AssertValue_DateTime final 
{
public:
	struct FDateTime                              Actual;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Expected;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogComparisonMethod                     ShouldBe;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1186[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1187[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1188[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertValue_DateTime) == 0x000008, "Wrong alignment on Log_AssertValue_DateTime");
static_assert(sizeof(Log_AssertValue_DateTime) == 0x000048, "Wrong size on Log_AssertValue_DateTime");
static_assert(offsetof(Log_AssertValue_DateTime, Actual) == 0x000000, "Member 'Log_AssertValue_DateTime::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_DateTime, Expected) == 0x000008, "Member 'Log_AssertValue_DateTime::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_DateTime, ShouldBe) == 0x000010, "Member 'Log_AssertValue_DateTime::ShouldBe' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_DateTime, Message) == 0x000018, "Member 'Log_AssertValue_DateTime::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_DateTime, bCrashOnFailure) == 0x000028, "Member 'Log_AssertValue_DateTime::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_DateTime, LoggingOption) == 0x000029, "Member 'Log_AssertValue_DateTime::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_DateTime, TimeToDisplay) == 0x00002C, "Member 'Log_AssertValue_DateTime::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_DateTime, ViewportKeyName) == 0x000030, "Member 'Log_AssertValue_DateTime::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_DateTime, ContextObject) == 0x000038, "Member 'Log_AssertValue_DateTime::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_DateTime, ReturnValue) == 0x000040, "Member 'Log_AssertValue_DateTime::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertValue_Float
// 0x0040 (0x0040 - 0x0000)
struct Log_AssertValue_Float final 
{
public:
	float                                         Actual;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Expected;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogComparisonMethod                     ShouldBe;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1189[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118A[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118B[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertValue_Float) == 0x000008, "Wrong alignment on Log_AssertValue_Float");
static_assert(sizeof(Log_AssertValue_Float) == 0x000040, "Wrong size on Log_AssertValue_Float");
static_assert(offsetof(Log_AssertValue_Float, Actual) == 0x000000, "Member 'Log_AssertValue_Float::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Float, Expected) == 0x000004, "Member 'Log_AssertValue_Float::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Float, ShouldBe) == 0x000008, "Member 'Log_AssertValue_Float::ShouldBe' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Float, Message) == 0x000010, "Member 'Log_AssertValue_Float::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Float, bCrashOnFailure) == 0x000020, "Member 'Log_AssertValue_Float::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Float, LoggingOption) == 0x000021, "Member 'Log_AssertValue_Float::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Float, TimeToDisplay) == 0x000024, "Member 'Log_AssertValue_Float::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Float, ViewportKeyName) == 0x000028, "Member 'Log_AssertValue_Float::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Float, ContextObject) == 0x000030, "Member 'Log_AssertValue_Float::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Float, ReturnValue) == 0x000038, "Member 'Log_AssertValue_Float::ReturnValue' has a wrong offset!");

// Function Debug.Log.AssertValue_Integer
// 0x0040 (0x0040 - 0x0000)
struct Log_AssertValue_Integer final 
{
public:
	int32                                         Actual;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expected;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogComparisonMethod                     ShouldBe;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrashOnFailure;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118D[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118E[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_AssertValue_Integer) == 0x000008, "Wrong alignment on Log_AssertValue_Integer");
static_assert(sizeof(Log_AssertValue_Integer) == 0x000040, "Wrong size on Log_AssertValue_Integer");
static_assert(offsetof(Log_AssertValue_Integer, Actual) == 0x000000, "Member 'Log_AssertValue_Integer::Actual' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Integer, Expected) == 0x000004, "Member 'Log_AssertValue_Integer::Expected' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Integer, ShouldBe) == 0x000008, "Member 'Log_AssertValue_Integer::ShouldBe' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Integer, Message) == 0x000010, "Member 'Log_AssertValue_Integer::Message' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Integer, bCrashOnFailure) == 0x000020, "Member 'Log_AssertValue_Integer::bCrashOnFailure' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Integer, LoggingOption) == 0x000021, "Member 'Log_AssertValue_Integer::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Integer, TimeToDisplay) == 0x000024, "Member 'Log_AssertValue_Integer::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Integer, ViewportKeyName) == 0x000028, "Member 'Log_AssertValue_Integer::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Integer, ContextObject) == 0x000030, "Member 'Log_AssertValue_Integer::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_AssertValue_Integer, ReturnValue) == 0x000038, "Member 'Log_AssertValue_Integer::ReturnValue' has a wrong offset!");

// Function Debug.Log.Bool
// 0x0040 (0x0040 - 0x0000)
struct Log_Bool final 
{
public:
	bool                                          bBoolToTest;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1190[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Bool) == 0x000008, "Wrong alignment on Log_Bool");
static_assert(sizeof(Log_Bool) == 0x000040, "Wrong size on Log_Bool");
static_assert(offsetof(Log_Bool, bBoolToTest) == 0x000000, "Member 'Log_Bool::bBoolToTest' has a wrong offset!");
static_assert(offsetof(Log_Bool, Prefix) == 0x000008, "Member 'Log_Bool::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Bool, Suffix) == 0x000018, "Member 'Log_Bool::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Bool, LoggingOption) == 0x000028, "Member 'Log_Bool::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Bool, TimeToDisplay) == 0x00002C, "Member 'Log_Bool::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Bool, ViewportKeyName) == 0x000030, "Member 'Log_Bool::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Bool, ContextObject) == 0x000038, "Member 'Log_Bool::ContextObject' has a wrong offset!");

// Function Debug.Log.Bye
// 0x0018 (0x0018 - 0x0000)
struct Log_Bye final 
{
public:
	ELoggingOptions                               LoggingOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1191[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewportKeyName;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1192[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Bye) == 0x000008, "Wrong alignment on Log_Bye");
static_assert(sizeof(Log_Bye) == 0x000018, "Wrong size on Log_Bye");
static_assert(offsetof(Log_Bye, LoggingOption) == 0x000000, "Member 'Log_Bye::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Bye, ViewportKeyName) == 0x000004, "Member 'Log_Bye::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Bye, ContextObject) == 0x000010, "Member 'Log_Bye::ContextObject' has a wrong offset!");

// Function Debug.Log.CheckCondition
// 0x0018 (0x0018 - 0x0000)
struct Log_CheckCondition final 
{
public:
	bool                                          bCondition;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1193[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_CheckCondition) == 0x000008, "Wrong alignment on Log_CheckCondition");
static_assert(sizeof(Log_CheckCondition) == 0x000018, "Wrong size on Log_CheckCondition");
static_assert(offsetof(Log_CheckCondition, bCondition) == 0x000000, "Member 'Log_CheckCondition::bCondition' has a wrong offset!");
static_assert(offsetof(Log_CheckCondition, Message) == 0x000008, "Member 'Log_CheckCondition::Message' has a wrong offset!");

// Function Debug.Log.CheckObject
// 0x0018 (0x0018 - 0x0000)
struct Log_CheckObject final 
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_CheckObject) == 0x000008, "Wrong alignment on Log_CheckObject");
static_assert(sizeof(Log_CheckObject) == 0x000018, "Wrong size on Log_CheckObject");
static_assert(offsetof(Log_CheckObject, Object) == 0x000000, "Member 'Log_CheckObject::Object' has a wrong offset!");
static_assert(offsetof(Log_CheckObject, Message) == 0x000008, "Member 'Log_CheckObject::Message' has a wrong offset!");

// Function Debug.Log.Color
// 0x0050 (0x0050 - 0x0000)
struct Log_Color final 
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompact;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1194[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1195[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Color) == 0x000008, "Wrong alignment on Log_Color");
static_assert(sizeof(Log_Color) == 0x000050, "Wrong size on Log_Color");
static_assert(offsetof(Log_Color, InColor) == 0x000000, "Member 'Log_Color::InColor' has a wrong offset!");
static_assert(offsetof(Log_Color, bCompact) == 0x000010, "Member 'Log_Color::bCompact' has a wrong offset!");
static_assert(offsetof(Log_Color, Prefix) == 0x000018, "Member 'Log_Color::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Color, Suffix) == 0x000028, "Member 'Log_Color::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Color, LoggingOption) == 0x000038, "Member 'Log_Color::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Color, TimeToDisplay) == 0x00003C, "Member 'Log_Color::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Color, ViewportKeyName) == 0x000040, "Member 'Log_Color::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Color, ContextObject) == 0x000048, "Member 'Log_Color::ContextObject' has a wrong offset!");

// Function Debug.Log.Crash
// 0x0028 (0x0028 - 0x0000)
struct Log_Crash final 
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FromFunction;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Crash) == 0x000008, "Wrong alignment on Log_Crash");
static_assert(sizeof(Log_Crash) == 0x000028, "Wrong size on Log_Crash");
static_assert(offsetof(Log_Crash, Message) == 0x000000, "Member 'Log_Crash::Message' has a wrong offset!");
static_assert(offsetof(Log_Crash, FromFunction) == 0x000010, "Member 'Log_Crash::FromFunction' has a wrong offset!");
static_assert(offsetof(Log_Crash, ContextObject) == 0x000020, "Member 'Log_Crash::ContextObject' has a wrong offset!");

// Function Debug.Log.Cya
// 0x0018 (0x0018 - 0x0000)
struct Log_Cya final 
{
public:
	ELoggingOptions                               LoggingOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1196[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewportKeyName;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1197[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Cya) == 0x000008, "Wrong alignment on Log_Cya");
static_assert(sizeof(Log_Cya) == 0x000018, "Wrong size on Log_Cya");
static_assert(offsetof(Log_Cya, LoggingOption) == 0x000000, "Member 'Log_Cya::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Cya, ViewportKeyName) == 0x000004, "Member 'Log_Cya::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Cya, ContextObject) == 0x000010, "Member 'Log_Cya::ContextObject' has a wrong offset!");

// Function Debug.Log.Data
// 0x0040 (0x0040 - 0x0000)
struct Log_Data final 
{
public:
	float                                         InDataValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogDataUnit                             DataUnit;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertValueToInt;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1198[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1199[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Data) == 0x000008, "Wrong alignment on Log_Data");
static_assert(sizeof(Log_Data) == 0x000040, "Wrong size on Log_Data");
static_assert(offsetof(Log_Data, InDataValue) == 0x000000, "Member 'Log_Data::InDataValue' has a wrong offset!");
static_assert(offsetof(Log_Data, DataUnit) == 0x000004, "Member 'Log_Data::DataUnit' has a wrong offset!");
static_assert(offsetof(Log_Data, bConvertValueToInt) == 0x000005, "Member 'Log_Data::bConvertValueToInt' has a wrong offset!");
static_assert(offsetof(Log_Data, Prefix) == 0x000008, "Member 'Log_Data::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Data, Suffix) == 0x000018, "Member 'Log_Data::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Data, LoggingOption) == 0x000028, "Member 'Log_Data::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Data, TimeToDisplay) == 0x00002C, "Member 'Log_Data::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Data, ViewportKeyName) == 0x000030, "Member 'Log_Data::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Data, ContextObject) == 0x000038, "Member 'Log_Data::ContextObject' has a wrong offset!");

// Function Debug.Log.DateTime
// 0x0040 (0x0040 - 0x0000)
struct Log_DateTime final 
{
public:
	struct FDateTime                              InDateTime;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119A[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_DateTime) == 0x000008, "Wrong alignment on Log_DateTime");
static_assert(sizeof(Log_DateTime) == 0x000040, "Wrong size on Log_DateTime");
static_assert(offsetof(Log_DateTime, InDateTime) == 0x000000, "Member 'Log_DateTime::InDateTime' has a wrong offset!");
static_assert(offsetof(Log_DateTime, Prefix) == 0x000008, "Member 'Log_DateTime::Prefix' has a wrong offset!");
static_assert(offsetof(Log_DateTime, Suffix) == 0x000018, "Member 'Log_DateTime::Suffix' has a wrong offset!");
static_assert(offsetof(Log_DateTime, LoggingOption) == 0x000028, "Member 'Log_DateTime::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_DateTime, TimeToDisplay) == 0x00002C, "Member 'Log_DateTime::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_DateTime, ViewportKeyName) == 0x000030, "Member 'Log_DateTime::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_DateTime, ContextObject) == 0x000038, "Member 'Log_DateTime::ContextObject' has a wrong offset!");

// Function Debug.Log.DebugMessage
// 0x0030 (0x0030 - 0x0000)
struct Log_DebugMessage final 
{
public:
	EDebugLogType                                 LogSeverity;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPrefix;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119C[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_DebugMessage) == 0x000008, "Wrong alignment on Log_DebugMessage");
static_assert(sizeof(Log_DebugMessage) == 0x000030, "Wrong size on Log_DebugMessage");
static_assert(offsetof(Log_DebugMessage, LogSeverity) == 0x000000, "Member 'Log_DebugMessage::LogSeverity' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage, Message) == 0x000008, "Member 'Log_DebugMessage::Message' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage, LoggingOption) == 0x000018, "Member 'Log_DebugMessage::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage, bAddPrefix) == 0x000019, "Member 'Log_DebugMessage::bAddPrefix' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage, TimeToDisplay) == 0x00001C, "Member 'Log_DebugMessage::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage, ViewportKeyName) == 0x000020, "Member 'Log_DebugMessage::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage, ContextObject) == 0x000028, "Member 'Log_DebugMessage::ContextObject' has a wrong offset!");

// Function Debug.Log.DebugMessage_WithCondition
// 0x0030 (0x0030 - 0x0000)
struct Log_DebugMessage_WithCondition final 
{
public:
	EDebugLogType                                 LogSeverity;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCondition;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119D[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPrefix;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119E[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_DebugMessage_WithCondition) == 0x000008, "Wrong alignment on Log_DebugMessage_WithCondition");
static_assert(sizeof(Log_DebugMessage_WithCondition) == 0x000030, "Wrong size on Log_DebugMessage_WithCondition");
static_assert(offsetof(Log_DebugMessage_WithCondition, LogSeverity) == 0x000000, "Member 'Log_DebugMessage_WithCondition::LogSeverity' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage_WithCondition, bCondition) == 0x000001, "Member 'Log_DebugMessage_WithCondition::bCondition' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage_WithCondition, Message) == 0x000008, "Member 'Log_DebugMessage_WithCondition::Message' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage_WithCondition, LoggingOption) == 0x000018, "Member 'Log_DebugMessage_WithCondition::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage_WithCondition, bAddPrefix) == 0x000019, "Member 'Log_DebugMessage_WithCondition::bAddPrefix' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage_WithCondition, TimeToDisplay) == 0x00001C, "Member 'Log_DebugMessage_WithCondition::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage_WithCondition, ViewportKeyName) == 0x000020, "Member 'Log_DebugMessage_WithCondition::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_DebugMessage_WithCondition, ContextObject) == 0x000028, "Member 'Log_DebugMessage_WithCondition::ContextObject' has a wrong offset!");

// Function Debug.Log.Dollar
// 0x0040 (0x0040 - 0x0000)
struct Log_Dollar final 
{
public:
	float                                         InDollarValue;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertValueToInt;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119F[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A0[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Dollar) == 0x000008, "Wrong alignment on Log_Dollar");
static_assert(sizeof(Log_Dollar) == 0x000040, "Wrong size on Log_Dollar");
static_assert(offsetof(Log_Dollar, InDollarValue) == 0x000000, "Member 'Log_Dollar::InDollarValue' has a wrong offset!");
static_assert(offsetof(Log_Dollar, bConvertValueToInt) == 0x000004, "Member 'Log_Dollar::bConvertValueToInt' has a wrong offset!");
static_assert(offsetof(Log_Dollar, Prefix) == 0x000008, "Member 'Log_Dollar::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Dollar, Suffix) == 0x000018, "Member 'Log_Dollar::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Dollar, LoggingOption) == 0x000028, "Member 'Log_Dollar::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Dollar, TimeToDisplay) == 0x00002C, "Member 'Log_Dollar::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Dollar, ViewportKeyName) == 0x000030, "Member 'Log_Dollar::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Dollar, ContextObject) == 0x000038, "Member 'Log_Dollar::ContextObject' has a wrong offset!");

// Function Debug.Log.EnsureCondition
// 0x0018 (0x0018 - 0x0000)
struct Log_EnsureCondition final 
{
public:
	bool                                          bCondition;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysEnsure;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A1[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_EnsureCondition) == 0x000008, "Wrong alignment on Log_EnsureCondition");
static_assert(sizeof(Log_EnsureCondition) == 0x000018, "Wrong size on Log_EnsureCondition");
static_assert(offsetof(Log_EnsureCondition, bCondition) == 0x000000, "Member 'Log_EnsureCondition::bCondition' has a wrong offset!");
static_assert(offsetof(Log_EnsureCondition, bAlwaysEnsure) == 0x000001, "Member 'Log_EnsureCondition::bAlwaysEnsure' has a wrong offset!");
static_assert(offsetof(Log_EnsureCondition, Message) == 0x000008, "Member 'Log_EnsureCondition::Message' has a wrong offset!");

// Function Debug.Log.EnsureObject
// 0x0020 (0x0020 - 0x0000)
struct Log_EnsureObject final 
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysEnsure;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A2[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_EnsureObject) == 0x000008, "Wrong alignment on Log_EnsureObject");
static_assert(sizeof(Log_EnsureObject) == 0x000020, "Wrong size on Log_EnsureObject");
static_assert(offsetof(Log_EnsureObject, Object) == 0x000000, "Member 'Log_EnsureObject::Object' has a wrong offset!");
static_assert(offsetof(Log_EnsureObject, bAlwaysEnsure) == 0x000008, "Member 'Log_EnsureObject::bAlwaysEnsure' has a wrong offset!");
static_assert(offsetof(Log_EnsureObject, Message) == 0x000010, "Member 'Log_EnsureObject::Message' has a wrong offset!");

// Function Debug.Log.Error
// 0x0028 (0x0028 - 0x0000)
struct Log_Error final 
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPrefix;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A3[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Error) == 0x000008, "Wrong alignment on Log_Error");
static_assert(sizeof(Log_Error) == 0x000028, "Wrong size on Log_Error");
static_assert(offsetof(Log_Error, Message) == 0x000000, "Member 'Log_Error::Message' has a wrong offset!");
static_assert(offsetof(Log_Error, LoggingOption) == 0x000010, "Member 'Log_Error::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Error, bAddPrefix) == 0x000011, "Member 'Log_Error::bAddPrefix' has a wrong offset!");
static_assert(offsetof(Log_Error, TimeToDisplay) == 0x000014, "Member 'Log_Error::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Error, ViewportKeyName) == 0x000018, "Member 'Log_Error::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Error, ContextObject) == 0x000020, "Member 'Log_Error::ContextObject' has a wrong offset!");

// Function Debug.Log.Error_WithCondition
// 0x0028 (0x0028 - 0x0000)
struct Log_Error_WithCondition final 
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCondition;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPrefix;                                        // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A4[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Error_WithCondition) == 0x000008, "Wrong alignment on Log_Error_WithCondition");
static_assert(sizeof(Log_Error_WithCondition) == 0x000028, "Wrong size on Log_Error_WithCondition");
static_assert(offsetof(Log_Error_WithCondition, Message) == 0x000000, "Member 'Log_Error_WithCondition::Message' has a wrong offset!");
static_assert(offsetof(Log_Error_WithCondition, bCondition) == 0x000010, "Member 'Log_Error_WithCondition::bCondition' has a wrong offset!");
static_assert(offsetof(Log_Error_WithCondition, LoggingOption) == 0x000011, "Member 'Log_Error_WithCondition::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Error_WithCondition, bAddPrefix) == 0x000012, "Member 'Log_Error_WithCondition::bAddPrefix' has a wrong offset!");
static_assert(offsetof(Log_Error_WithCondition, TimeToDisplay) == 0x000014, "Member 'Log_Error_WithCondition::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Error_WithCondition, ViewportKeyName) == 0x000018, "Member 'Log_Error_WithCondition::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Error_WithCondition, ContextObject) == 0x000020, "Member 'Log_Error_WithCondition::ContextObject' has a wrong offset!");

// Function Debug.Log.Fatal
// 0x0010 (0x0010 - 0x0000)
struct Log_Fatal final 
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Fatal) == 0x000008, "Wrong alignment on Log_Fatal");
static_assert(sizeof(Log_Fatal) == 0x000010, "Wrong size on Log_Fatal");
static_assert(offsetof(Log_Fatal, Message) == 0x000000, "Member 'Log_Fatal::Message' has a wrong offset!");

// Function Debug.Log.Fatal_WithCondition
// 0x0018 (0x0018 - 0x0000)
struct Log_Fatal_WithCondition final 
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCondition;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A5[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_Fatal_WithCondition) == 0x000008, "Wrong alignment on Log_Fatal_WithCondition");
static_assert(sizeof(Log_Fatal_WithCondition) == 0x000018, "Wrong size on Log_Fatal_WithCondition");
static_assert(offsetof(Log_Fatal_WithCondition, Message) == 0x000000, "Member 'Log_Fatal_WithCondition::Message' has a wrong offset!");
static_assert(offsetof(Log_Fatal_WithCondition, bCondition) == 0x000010, "Member 'Log_Fatal_WithCondition::bCondition' has a wrong offset!");

// Function Debug.Log.Force
// 0x0040 (0x0040 - 0x0000)
struct Log_Force final 
{
public:
	float                                         InForceValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogForceUnit                            ForceUnit;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertValueToInt;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A6[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A7[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Force) == 0x000008, "Wrong alignment on Log_Force");
static_assert(sizeof(Log_Force) == 0x000040, "Wrong size on Log_Force");
static_assert(offsetof(Log_Force, InForceValue) == 0x000000, "Member 'Log_Force::InForceValue' has a wrong offset!");
static_assert(offsetof(Log_Force, ForceUnit) == 0x000004, "Member 'Log_Force::ForceUnit' has a wrong offset!");
static_assert(offsetof(Log_Force, bConvertValueToInt) == 0x000005, "Member 'Log_Force::bConvertValueToInt' has a wrong offset!");
static_assert(offsetof(Log_Force, Prefix) == 0x000008, "Member 'Log_Force::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Force, Suffix) == 0x000018, "Member 'Log_Force::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Force, LoggingOption) == 0x000028, "Member 'Log_Force::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Force, TimeToDisplay) == 0x00002C, "Member 'Log_Force::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Force, ViewportKeyName) == 0x000030, "Member 'Log_Force::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Force, ContextObject) == 0x000038, "Member 'Log_Force::ContextObject' has a wrong offset!");

// Function Debug.Log.Frequency
// 0x0040 (0x0040 - 0x0000)
struct Log_Frequency final 
{
public:
	float                                         InFrequencyValue;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogFrequencyUnit                        FrequencyUnit;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertValueToInt;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A8[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A9[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Frequency) == 0x000008, "Wrong alignment on Log_Frequency");
static_assert(sizeof(Log_Frequency) == 0x000040, "Wrong size on Log_Frequency");
static_assert(offsetof(Log_Frequency, InFrequencyValue) == 0x000000, "Member 'Log_Frequency::InFrequencyValue' has a wrong offset!");
static_assert(offsetof(Log_Frequency, FrequencyUnit) == 0x000004, "Member 'Log_Frequency::FrequencyUnit' has a wrong offset!");
static_assert(offsetof(Log_Frequency, bConvertValueToInt) == 0x000005, "Member 'Log_Frequency::bConvertValueToInt' has a wrong offset!");
static_assert(offsetof(Log_Frequency, Prefix) == 0x000008, "Member 'Log_Frequency::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Frequency, Suffix) == 0x000018, "Member 'Log_Frequency::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Frequency, LoggingOption) == 0x000028, "Member 'Log_Frequency::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Frequency, TimeToDisplay) == 0x00002C, "Member 'Log_Frequency::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Frequency, ViewportKeyName) == 0x000030, "Member 'Log_Frequency::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Frequency, ContextObject) == 0x000038, "Member 'Log_Frequency::ContextObject' has a wrong offset!");

// Function Debug.Log.Goodbye
// 0x0018 (0x0018 - 0x0000)
struct Log_Goodbye final 
{
public:
	ELoggingOptions                               LoggingOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewportKeyName;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Goodbye) == 0x000008, "Wrong alignment on Log_Goodbye");
static_assert(sizeof(Log_Goodbye) == 0x000018, "Wrong size on Log_Goodbye");
static_assert(offsetof(Log_Goodbye, LoggingOption) == 0x000000, "Member 'Log_Goodbye::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Goodbye, ViewportKeyName) == 0x000004, "Member 'Log_Goodbye::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Goodbye, ContextObject) == 0x000010, "Member 'Log_Goodbye::ContextObject' has a wrong offset!");

// Function Debug.Log.Hello
// 0x0018 (0x0018 - 0x0000)
struct Log_Hello final 
{
public:
	ELoggingOptions                               LoggingOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewportKeyName;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AD[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Hello) == 0x000008, "Wrong alignment on Log_Hello");
static_assert(sizeof(Log_Hello) == 0x000018, "Wrong size on Log_Hello");
static_assert(offsetof(Log_Hello, LoggingOption) == 0x000000, "Member 'Log_Hello::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Hello, ViewportKeyName) == 0x000004, "Member 'Log_Hello::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Hello, ContextObject) == 0x000010, "Member 'Log_Hello::ContextObject' has a wrong offset!");

// Function Debug.Log.Hey
// 0x0018 (0x0018 - 0x0000)
struct Log_Hey final 
{
public:
	ELoggingOptions                               LoggingOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewportKeyName;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AF[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Hey) == 0x000008, "Wrong alignment on Log_Hey");
static_assert(sizeof(Log_Hey) == 0x000018, "Wrong size on Log_Hey");
static_assert(offsetof(Log_Hey, LoggingOption) == 0x000000, "Member 'Log_Hey::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Hey, ViewportKeyName) == 0x000004, "Member 'Log_Hey::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Hey, ContextObject) == 0x000010, "Member 'Log_Hey::ContextObject' has a wrong offset!");

// Function Debug.Log.InBrackets_Name_Blueprint
// 0x0010 (0x0010 - 0x0000)
struct Log_InBrackets_Name_Blueprint final 
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_InBrackets_Name_Blueprint) == 0x000004, "Wrong alignment on Log_InBrackets_Name_Blueprint");
static_assert(sizeof(Log_InBrackets_Name_Blueprint) == 0x000010, "Wrong size on Log_InBrackets_Name_Blueprint");
static_assert(offsetof(Log_InBrackets_Name_Blueprint, Param_Name) == 0x000000, "Member 'Log_InBrackets_Name_Blueprint::Param_Name' has a wrong offset!");
static_assert(offsetof(Log_InBrackets_Name_Blueprint, ReturnValue) == 0x000008, "Member 'Log_InBrackets_Name_Blueprint::ReturnValue' has a wrong offset!");

// Function Debug.Log.InBrackets_String_Blueprint
// 0x0020 (0x0020 - 0x0000)
struct Log_InBrackets_String_Blueprint final 
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_InBrackets_String_Blueprint) == 0x000008, "Wrong alignment on Log_InBrackets_String_Blueprint");
static_assert(sizeof(Log_InBrackets_String_Blueprint) == 0x000020, "Wrong size on Log_InBrackets_String_Blueprint");
static_assert(offsetof(Log_InBrackets_String_Blueprint, String) == 0x000000, "Member 'Log_InBrackets_String_Blueprint::String' has a wrong offset!");
static_assert(offsetof(Log_InBrackets_String_Blueprint, ReturnValue) == 0x000010, "Member 'Log_InBrackets_String_Blueprint::ReturnValue' has a wrong offset!");

// Function Debug.Log.InBrackets_Text_Blueprint
// 0x0030 (0x0030 - 0x0000)
struct Log_InBrackets_Text_Blueprint final 
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_InBrackets_Text_Blueprint) == 0x000008, "Wrong alignment on Log_InBrackets_Text_Blueprint");
static_assert(sizeof(Log_InBrackets_Text_Blueprint) == 0x000030, "Wrong size on Log_InBrackets_Text_Blueprint");
static_assert(offsetof(Log_InBrackets_Text_Blueprint, Text) == 0x000000, "Member 'Log_InBrackets_Text_Blueprint::Text' has a wrong offset!");
static_assert(offsetof(Log_InBrackets_Text_Blueprint, ReturnValue) == 0x000018, "Member 'Log_InBrackets_Text_Blueprint::ReturnValue' has a wrong offset!");

// Function Debug.Log.Info
// 0x0028 (0x0028 - 0x0000)
struct Log_Info final 
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPrefix;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B0[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Info) == 0x000008, "Wrong alignment on Log_Info");
static_assert(sizeof(Log_Info) == 0x000028, "Wrong size on Log_Info");
static_assert(offsetof(Log_Info, Message) == 0x000000, "Member 'Log_Info::Message' has a wrong offset!");
static_assert(offsetof(Log_Info, LoggingOption) == 0x000010, "Member 'Log_Info::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Info, bAddPrefix) == 0x000011, "Member 'Log_Info::bAddPrefix' has a wrong offset!");
static_assert(offsetof(Log_Info, TimeToDisplay) == 0x000014, "Member 'Log_Info::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Info, ViewportKeyName) == 0x000018, "Member 'Log_Info::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Info, ContextObject) == 0x000020, "Member 'Log_Info::ContextObject' has a wrong offset!");

// Function Debug.Log.Info_WithCondition
// 0x0028 (0x0028 - 0x0000)
struct Log_Info_WithCondition final 
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCondition;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPrefix;                                        // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B1[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Info_WithCondition) == 0x000008, "Wrong alignment on Log_Info_WithCondition");
static_assert(sizeof(Log_Info_WithCondition) == 0x000028, "Wrong size on Log_Info_WithCondition");
static_assert(offsetof(Log_Info_WithCondition, Message) == 0x000000, "Member 'Log_Info_WithCondition::Message' has a wrong offset!");
static_assert(offsetof(Log_Info_WithCondition, bCondition) == 0x000010, "Member 'Log_Info_WithCondition::bCondition' has a wrong offset!");
static_assert(offsetof(Log_Info_WithCondition, LoggingOption) == 0x000011, "Member 'Log_Info_WithCondition::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Info_WithCondition, bAddPrefix) == 0x000012, "Member 'Log_Info_WithCondition::bAddPrefix' has a wrong offset!");
static_assert(offsetof(Log_Info_WithCondition, TimeToDisplay) == 0x000014, "Member 'Log_Info_WithCondition::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Info_WithCondition, ViewportKeyName) == 0x000018, "Member 'Log_Info_WithCondition::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Info_WithCondition, ContextObject) == 0x000020, "Member 'Log_Info_WithCondition::ContextObject' has a wrong offset!");

// Function Debug.Log.Invalid
// 0x0038 (0x0038 - 0x0000)
struct Log_Invalid final 
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B2[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewportKeyName;                                   // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B3[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Invalid) == 0x000008, "Wrong alignment on Log_Invalid");
static_assert(sizeof(Log_Invalid) == 0x000038, "Wrong size on Log_Invalid");
static_assert(offsetof(Log_Invalid, Prefix) == 0x000000, "Member 'Log_Invalid::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Invalid, Suffix) == 0x000010, "Member 'Log_Invalid::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Invalid, LoggingOption) == 0x000020, "Member 'Log_Invalid::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Invalid, ViewportKeyName) == 0x000024, "Member 'Log_Invalid::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Invalid, ContextObject) == 0x000030, "Member 'Log_Invalid::ContextObject' has a wrong offset!");

// Function Debug.Log.Length
// 0x0040 (0x0040 - 0x0000)
struct Log_Length final 
{
public:
	float                                         InLengthValue;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogLengthUnit                           LengthUnit;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertValueToInt;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B4[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B5[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Length) == 0x000008, "Wrong alignment on Log_Length");
static_assert(sizeof(Log_Length) == 0x000040, "Wrong size on Log_Length");
static_assert(offsetof(Log_Length, InLengthValue) == 0x000000, "Member 'Log_Length::InLengthValue' has a wrong offset!");
static_assert(offsetof(Log_Length, LengthUnit) == 0x000004, "Member 'Log_Length::LengthUnit' has a wrong offset!");
static_assert(offsetof(Log_Length, bConvertValueToInt) == 0x000005, "Member 'Log_Length::bConvertValueToInt' has a wrong offset!");
static_assert(offsetof(Log_Length, Prefix) == 0x000008, "Member 'Log_Length::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Length, Suffix) == 0x000018, "Member 'Log_Length::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Length, LoggingOption) == 0x000028, "Member 'Log_Length::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Length, TimeToDisplay) == 0x00002C, "Member 'Log_Length::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Length, ViewportKeyName) == 0x000030, "Member 'Log_Length::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Length, ContextObject) == 0x000038, "Member 'Log_Length::ContextObject' has a wrong offset!");

// Function Debug.Log.Light
// 0x0040 (0x0040 - 0x0000)
struct Log_Light final 
{
public:
	float                                         InLightValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogLightUnit                            LightUnit;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertValueToInt;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B6[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B7[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Light) == 0x000008, "Wrong alignment on Log_Light");
static_assert(sizeof(Log_Light) == 0x000040, "Wrong size on Log_Light");
static_assert(offsetof(Log_Light, InLightValue) == 0x000000, "Member 'Log_Light::InLightValue' has a wrong offset!");
static_assert(offsetof(Log_Light, LightUnit) == 0x000004, "Member 'Log_Light::LightUnit' has a wrong offset!");
static_assert(offsetof(Log_Light, bConvertValueToInt) == 0x000005, "Member 'Log_Light::bConvertValueToInt' has a wrong offset!");
static_assert(offsetof(Log_Light, Prefix) == 0x000008, "Member 'Log_Light::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Light, Suffix) == 0x000018, "Member 'Log_Light::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Light, LoggingOption) == 0x000028, "Member 'Log_Light::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Light, TimeToDisplay) == 0x00002C, "Member 'Log_Light::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Light, ViewportKeyName) == 0x000030, "Member 'Log_Light::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Light, ContextObject) == 0x000038, "Member 'Log_Light::ContextObject' has a wrong offset!");

// Function Debug.Log.LineBreak
// 0x0001 (0x0001 - 0x0000)
struct Log_LineBreak final 
{
public:
	ELoggingOptions                               LoggingOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_LineBreak) == 0x000001, "Wrong alignment on Log_LineBreak");
static_assert(sizeof(Log_LineBreak) == 0x000001, "Wrong size on Log_LineBreak");
static_assert(offsetof(Log_LineBreak, LoggingOption) == 0x000000, "Member 'Log_LineBreak::LoggingOption' has a wrong offset!");

// Function Debug.Log.LineBreak_Symbol
// 0x0018 (0x0018 - 0x0000)
struct Log_LineBreak_Symbol final 
{
public:
	class FString                                 Symbol;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_LineBreak_Symbol) == 0x000008, "Wrong alignment on Log_LineBreak_Symbol");
static_assert(sizeof(Log_LineBreak_Symbol) == 0x000018, "Wrong size on Log_LineBreak_Symbol");
static_assert(offsetof(Log_LineBreak_Symbol, Symbol) == 0x000000, "Member 'Log_LineBreak_Symbol::Symbol' has a wrong offset!");
static_assert(offsetof(Log_LineBreak_Symbol, LoggingOption) == 0x000010, "Member 'Log_LineBreak_Symbol::LoggingOption' has a wrong offset!");

// Function Debug.Log.Mass
// 0x0040 (0x0040 - 0x0000)
struct Log_Mass final 
{
public:
	float                                         InMassValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogMassUnit                             MassUnit;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertValueToInt;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B9[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BA[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Mass) == 0x000008, "Wrong alignment on Log_Mass");
static_assert(sizeof(Log_Mass) == 0x000040, "Wrong size on Log_Mass");
static_assert(offsetof(Log_Mass, InMassValue) == 0x000000, "Member 'Log_Mass::InMassValue' has a wrong offset!");
static_assert(offsetof(Log_Mass, MassUnit) == 0x000004, "Member 'Log_Mass::MassUnit' has a wrong offset!");
static_assert(offsetof(Log_Mass, bConvertValueToInt) == 0x000005, "Member 'Log_Mass::bConvertValueToInt' has a wrong offset!");
static_assert(offsetof(Log_Mass, Prefix) == 0x000008, "Member 'Log_Mass::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Mass, Suffix) == 0x000018, "Member 'Log_Mass::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Mass, LoggingOption) == 0x000028, "Member 'Log_Mass::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Mass, TimeToDisplay) == 0x00002C, "Member 'Log_Mass::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Mass, ViewportKeyName) == 0x000030, "Member 'Log_Mass::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Mass, ContextObject) == 0x000038, "Member 'Log_Mass::ContextObject' has a wrong offset!");

// Function Debug.Log.Matrix
// 0x0080 (0x0080 - 0x0000)
struct Log_Matrix final 
{
public:
	struct FMatrix                                InMatrix;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BB[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BC[0x8];                                     // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_Matrix) == 0x000010, "Wrong alignment on Log_Matrix");
static_assert(sizeof(Log_Matrix) == 0x000080, "Wrong size on Log_Matrix");
static_assert(offsetof(Log_Matrix, InMatrix) == 0x000000, "Member 'Log_Matrix::InMatrix' has a wrong offset!");
static_assert(offsetof(Log_Matrix, Prefix) == 0x000040, "Member 'Log_Matrix::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Matrix, Suffix) == 0x000050, "Member 'Log_Matrix::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Matrix, LoggingOption) == 0x000060, "Member 'Log_Matrix::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Matrix, TimeToDisplay) == 0x000064, "Member 'Log_Matrix::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Matrix, ViewportKeyName) == 0x000068, "Member 'Log_Matrix::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Matrix, ContextObject) == 0x000070, "Member 'Log_Matrix::ContextObject' has a wrong offset!");

// Function Debug.Log.MessageInWorld
// 0x0048 (0x0048 - 0x0000)
struct Log_MessageInWorld final 
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FontScale;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToDisplay;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BD[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_MessageInWorld) == 0x000008, "Wrong alignment on Log_MessageInWorld");
static_assert(sizeof(Log_MessageInWorld) == 0x000048, "Wrong size on Log_MessageInWorld");
static_assert(offsetof(Log_MessageInWorld, Message) == 0x000000, "Member 'Log_MessageInWorld::Message' has a wrong offset!");
static_assert(offsetof(Log_MessageInWorld, WorldLocation) == 0x000010, "Member 'Log_MessageInWorld::WorldLocation' has a wrong offset!");
static_assert(offsetof(Log_MessageInWorld, FontScale) == 0x00001C, "Member 'Log_MessageInWorld::FontScale' has a wrong offset!");
static_assert(offsetof(Log_MessageInWorld, Prefix) == 0x000020, "Member 'Log_MessageInWorld::Prefix' has a wrong offset!");
static_assert(offsetof(Log_MessageInWorld, Suffix) == 0x000030, "Member 'Log_MessageInWorld::Suffix' has a wrong offset!");
static_assert(offsetof(Log_MessageInWorld, TimeToDisplay) == 0x000040, "Member 'Log_MessageInWorld::TimeToDisplay' has a wrong offset!");

// Function Debug.Log.No
// 0x0038 (0x0038 - 0x0000)
struct Log_No final 
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BE[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewportKeyName;                                   // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BF[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_No) == 0x000008, "Wrong alignment on Log_No");
static_assert(sizeof(Log_No) == 0x000038, "Wrong size on Log_No");
static_assert(offsetof(Log_No, Prefix) == 0x000000, "Member 'Log_No::Prefix' has a wrong offset!");
static_assert(offsetof(Log_No, Suffix) == 0x000010, "Member 'Log_No::Suffix' has a wrong offset!");
static_assert(offsetof(Log_No, LoggingOption) == 0x000020, "Member 'Log_No::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_No, ViewportKeyName) == 0x000024, "Member 'Log_No::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_No, ContextObject) == 0x000030, "Member 'Log_No::ContextObject' has a wrong offset!");

// Function Debug.Log.Number_Float_Blueprint
// 0x0040 (0x0040 - 0x0000)
struct Log_Number_Float_Blueprint final 
{
public:
	float                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C1[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Number_Float_Blueprint) == 0x000008, "Wrong alignment on Log_Number_Float_Blueprint");
static_assert(sizeof(Log_Number_Float_Blueprint) == 0x000040, "Wrong size on Log_Number_Float_Blueprint");
static_assert(offsetof(Log_Number_Float_Blueprint, Number) == 0x000000, "Member 'Log_Number_Float_Blueprint::Number' has a wrong offset!");
static_assert(offsetof(Log_Number_Float_Blueprint, Prefix) == 0x000008, "Member 'Log_Number_Float_Blueprint::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Number_Float_Blueprint, Suffix) == 0x000018, "Member 'Log_Number_Float_Blueprint::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Number_Float_Blueprint, LoggingOption) == 0x000028, "Member 'Log_Number_Float_Blueprint::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Number_Float_Blueprint, TimeToDisplay) == 0x00002C, "Member 'Log_Number_Float_Blueprint::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Number_Float_Blueprint, ViewportKeyName) == 0x000030, "Member 'Log_Number_Float_Blueprint::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Number_Float_Blueprint, ContextObject) == 0x000038, "Member 'Log_Number_Float_Blueprint::ContextObject' has a wrong offset!");

// Function Debug.Log.Number_Int_Blueprint
// 0x0040 (0x0040 - 0x0000)
struct Log_Number_Int_Blueprint final 
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C2[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogNumberSystems                        NumberSystem;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C3[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Number_Int_Blueprint) == 0x000008, "Wrong alignment on Log_Number_Int_Blueprint");
static_assert(sizeof(Log_Number_Int_Blueprint) == 0x000040, "Wrong size on Log_Number_Int_Blueprint");
static_assert(offsetof(Log_Number_Int_Blueprint, Number) == 0x000000, "Member 'Log_Number_Int_Blueprint::Number' has a wrong offset!");
static_assert(offsetof(Log_Number_Int_Blueprint, Prefix) == 0x000008, "Member 'Log_Number_Int_Blueprint::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Number_Int_Blueprint, Suffix) == 0x000018, "Member 'Log_Number_Int_Blueprint::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Number_Int_Blueprint, NumberSystem) == 0x000028, "Member 'Log_Number_Int_Blueprint::NumberSystem' has a wrong offset!");
static_assert(offsetof(Log_Number_Int_Blueprint, LoggingOption) == 0x000029, "Member 'Log_Number_Int_Blueprint::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Number_Int_Blueprint, TimeToDisplay) == 0x00002C, "Member 'Log_Number_Int_Blueprint::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Number_Int_Blueprint, ViewportKeyName) == 0x000030, "Member 'Log_Number_Int_Blueprint::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Number_Int_Blueprint, ContextObject) == 0x000038, "Member 'Log_Number_Int_Blueprint::ContextObject' has a wrong offset!");

// Function Debug.Log.ObjectName
// 0x0020 (0x0020 - 0x0000)
struct Log_ObjectName final 
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSilenceOnError;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C4[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_ObjectName) == 0x000008, "Wrong alignment on Log_ObjectName");
static_assert(sizeof(Log_ObjectName) == 0x000020, "Wrong size on Log_ObjectName");
static_assert(offsetof(Log_ObjectName, InObject) == 0x000000, "Member 'Log_ObjectName::InObject' has a wrong offset!");
static_assert(offsetof(Log_ObjectName, bSilenceOnError) == 0x000008, "Member 'Log_ObjectName::bSilenceOnError' has a wrong offset!");
static_assert(offsetof(Log_ObjectName, LoggingOption) == 0x000009, "Member 'Log_ObjectName::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_ObjectName, TimeToDisplay) == 0x00000C, "Member 'Log_ObjectName::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_ObjectName, ViewportKeyName) == 0x000010, "Member 'Log_ObjectName::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_ObjectName, ContextObject) == 0x000018, "Member 'Log_ObjectName::ContextObject' has a wrong offset!");

// Function Debug.Log.ObjectValidity
// 0x0020 (0x0020 - 0x0000)
struct Log_ObjectValidity final 
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSilenceOnError;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C5[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_ObjectValidity) == 0x000008, "Wrong alignment on Log_ObjectValidity");
static_assert(sizeof(Log_ObjectValidity) == 0x000020, "Wrong size on Log_ObjectValidity");
static_assert(offsetof(Log_ObjectValidity, InObject) == 0x000000, "Member 'Log_ObjectValidity::InObject' has a wrong offset!");
static_assert(offsetof(Log_ObjectValidity, bSilenceOnError) == 0x000008, "Member 'Log_ObjectValidity::bSilenceOnError' has a wrong offset!");
static_assert(offsetof(Log_ObjectValidity, LoggingOption) == 0x000009, "Member 'Log_ObjectValidity::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_ObjectValidity, TimeToDisplay) == 0x00000C, "Member 'Log_ObjectValidity::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_ObjectValidity, ViewportKeyName) == 0x000010, "Member 'Log_ObjectValidity::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_ObjectValidity, ContextObject) == 0x000018, "Member 'Log_ObjectValidity::ContextObject' has a wrong offset!");

// Function Debug.Log.Percent
// 0x0040 (0x0040 - 0x0000)
struct Log_Percent final 
{
public:
	float                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C7[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Percent) == 0x000008, "Wrong alignment on Log_Percent");
static_assert(sizeof(Log_Percent) == 0x000040, "Wrong size on Log_Percent");
static_assert(offsetof(Log_Percent, Number) == 0x000000, "Member 'Log_Percent::Number' has a wrong offset!");
static_assert(offsetof(Log_Percent, Prefix) == 0x000008, "Member 'Log_Percent::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Percent, Suffix) == 0x000018, "Member 'Log_Percent::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Percent, LoggingOption) == 0x000028, "Member 'Log_Percent::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Percent, TimeToDisplay) == 0x00002C, "Member 'Log_Percent::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Percent, ViewportKeyName) == 0x000030, "Member 'Log_Percent::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Percent, ContextObject) == 0x000038, "Member 'Log_Percent::ContextObject' has a wrong offset!");

// Function Debug.Log.Quat
// 0x0050 (0x0050 - 0x0000)
struct Log_Quat final 
{
public:
	struct FQuat                                  Quaternion;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCompact;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C8[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C9[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Quat) == 0x000010, "Wrong alignment on Log_Quat");
static_assert(sizeof(Log_Quat) == 0x000050, "Wrong size on Log_Quat");
static_assert(offsetof(Log_Quat, Quaternion) == 0x000000, "Member 'Log_Quat::Quaternion' has a wrong offset!");
static_assert(offsetof(Log_Quat, bCompact) == 0x000010, "Member 'Log_Quat::bCompact' has a wrong offset!");
static_assert(offsetof(Log_Quat, Prefix) == 0x000018, "Member 'Log_Quat::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Quat, Suffix) == 0x000028, "Member 'Log_Quat::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Quat, LoggingOption) == 0x000038, "Member 'Log_Quat::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Quat, TimeToDisplay) == 0x00003C, "Member 'Log_Quat::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Quat, ViewportKeyName) == 0x000040, "Member 'Log_Quat::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Quat, ContextObject) == 0x000048, "Member 'Log_Quat::ContextObject' has a wrong offset!");

// Function Debug.Log.Rotator
// 0x0048 (0x0048 - 0x0000)
struct Log_Rotator final 
{
public:
	struct FRotator                               InRotator;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCompact;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CA[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CB[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Rotator) == 0x000008, "Wrong alignment on Log_Rotator");
static_assert(sizeof(Log_Rotator) == 0x000048, "Wrong size on Log_Rotator");
static_assert(offsetof(Log_Rotator, InRotator) == 0x000000, "Member 'Log_Rotator::InRotator' has a wrong offset!");
static_assert(offsetof(Log_Rotator, bCompact) == 0x00000C, "Member 'Log_Rotator::bCompact' has a wrong offset!");
static_assert(offsetof(Log_Rotator, Prefix) == 0x000010, "Member 'Log_Rotator::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Rotator, Suffix) == 0x000020, "Member 'Log_Rotator::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Rotator, LoggingOption) == 0x000030, "Member 'Log_Rotator::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Rotator, TimeToDisplay) == 0x000034, "Member 'Log_Rotator::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Rotator, ViewportKeyName) == 0x000038, "Member 'Log_Rotator::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Rotator, ContextObject) == 0x000040, "Member 'Log_Rotator::ContextObject' has a wrong offset!");

// Function Debug.Log.Speed
// 0x0040 (0x0040 - 0x0000)
struct Log_Speed final 
{
public:
	float                                         InSpeedValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogSpeedUnit                            SpeedUnit;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertValueToInt;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CC[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CD[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Speed) == 0x000008, "Wrong alignment on Log_Speed");
static_assert(sizeof(Log_Speed) == 0x000040, "Wrong size on Log_Speed");
static_assert(offsetof(Log_Speed, InSpeedValue) == 0x000000, "Member 'Log_Speed::InSpeedValue' has a wrong offset!");
static_assert(offsetof(Log_Speed, SpeedUnit) == 0x000004, "Member 'Log_Speed::SpeedUnit' has a wrong offset!");
static_assert(offsetof(Log_Speed, bConvertValueToInt) == 0x000005, "Member 'Log_Speed::bConvertValueToInt' has a wrong offset!");
static_assert(offsetof(Log_Speed, Prefix) == 0x000008, "Member 'Log_Speed::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Speed, Suffix) == 0x000018, "Member 'Log_Speed::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Speed, LoggingOption) == 0x000028, "Member 'Log_Speed::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Speed, TimeToDisplay) == 0x00002C, "Member 'Log_Speed::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Speed, ViewportKeyName) == 0x000030, "Member 'Log_Speed::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Speed, ContextObject) == 0x000038, "Member 'Log_Speed::ContextObject' has a wrong offset!");

// Function Debug.Log.StartDebugTimer
// 0x0010 (0x0010 - 0x0000)
struct Log_StartDebugTimer final 
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_StartDebugTimer) == 0x000008, "Wrong alignment on Log_StartDebugTimer");
static_assert(sizeof(Log_StartDebugTimer) == 0x000010, "Wrong size on Log_StartDebugTimer");
static_assert(offsetof(Log_StartDebugTimer, Description) == 0x000000, "Member 'Log_StartDebugTimer::Description' has a wrong offset!");

// Function Debug.Log.StopDebugTimer
// 0x0020 (0x0020 - 0x0000)
struct Log_StopDebugTimer final 
{
public:
	bool                                          bAutoDetermineTimeUnit;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogTimeUnit                             DisplayIn;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CE[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewportKeyName;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CF[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D0[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_StopDebugTimer) == 0x000008, "Wrong alignment on Log_StopDebugTimer");
static_assert(sizeof(Log_StopDebugTimer) == 0x000020, "Wrong size on Log_StopDebugTimer");
static_assert(offsetof(Log_StopDebugTimer, bAutoDetermineTimeUnit) == 0x000000, "Member 'Log_StopDebugTimer::bAutoDetermineTimeUnit' has a wrong offset!");
static_assert(offsetof(Log_StopDebugTimer, DisplayIn) == 0x000001, "Member 'Log_StopDebugTimer::DisplayIn' has a wrong offset!");
static_assert(offsetof(Log_StopDebugTimer, LoggingOption) == 0x000002, "Member 'Log_StopDebugTimer::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_StopDebugTimer, ViewportKeyName) == 0x000004, "Member 'Log_StopDebugTimer::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_StopDebugTimer, ContextObject) == 0x000010, "Member 'Log_StopDebugTimer::ContextObject' has a wrong offset!");
static_assert(offsetof(Log_StopDebugTimer, ReturnValue) == 0x000018, "Member 'Log_StopDebugTimer::ReturnValue' has a wrong offset!");

// Function Debug.Log.Success
// 0x0028 (0x0028 - 0x0000)
struct Log_Success final 
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPrefix;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D1[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Success) == 0x000008, "Wrong alignment on Log_Success");
static_assert(sizeof(Log_Success) == 0x000028, "Wrong size on Log_Success");
static_assert(offsetof(Log_Success, Message) == 0x000000, "Member 'Log_Success::Message' has a wrong offset!");
static_assert(offsetof(Log_Success, LoggingOption) == 0x000010, "Member 'Log_Success::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Success, bAddPrefix) == 0x000011, "Member 'Log_Success::bAddPrefix' has a wrong offset!");
static_assert(offsetof(Log_Success, TimeToDisplay) == 0x000014, "Member 'Log_Success::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Success, ViewportKeyName) == 0x000018, "Member 'Log_Success::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Success, ContextObject) == 0x000020, "Member 'Log_Success::ContextObject' has a wrong offset!");

// Function Debug.Log.Success_WithCondition
// 0x0028 (0x0028 - 0x0000)
struct Log_Success_WithCondition final 
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCondition;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPrefix;                                        // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D2[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Success_WithCondition) == 0x000008, "Wrong alignment on Log_Success_WithCondition");
static_assert(sizeof(Log_Success_WithCondition) == 0x000028, "Wrong size on Log_Success_WithCondition");
static_assert(offsetof(Log_Success_WithCondition, Message) == 0x000000, "Member 'Log_Success_WithCondition::Message' has a wrong offset!");
static_assert(offsetof(Log_Success_WithCondition, bCondition) == 0x000010, "Member 'Log_Success_WithCondition::bCondition' has a wrong offset!");
static_assert(offsetof(Log_Success_WithCondition, LoggingOption) == 0x000011, "Member 'Log_Success_WithCondition::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Success_WithCondition, bAddPrefix) == 0x000012, "Member 'Log_Success_WithCondition::bAddPrefix' has a wrong offset!");
static_assert(offsetof(Log_Success_WithCondition, TimeToDisplay) == 0x000014, "Member 'Log_Success_WithCondition::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Success_WithCondition, ViewportKeyName) == 0x000018, "Member 'Log_Success_WithCondition::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Success_WithCondition, ContextObject) == 0x000020, "Member 'Log_Success_WithCondition::ContextObject' has a wrong offset!");

// Function Debug.Log.Temperature
// 0x0040 (0x0040 - 0x0000)
struct Log_Temperature final 
{
public:
	float                                         InTemperatureValue;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogTemperatureUnit                      TemperatureUnit;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertValueToInt;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D3[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D4[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Temperature) == 0x000008, "Wrong alignment on Log_Temperature");
static_assert(sizeof(Log_Temperature) == 0x000040, "Wrong size on Log_Temperature");
static_assert(offsetof(Log_Temperature, InTemperatureValue) == 0x000000, "Member 'Log_Temperature::InTemperatureValue' has a wrong offset!");
static_assert(offsetof(Log_Temperature, TemperatureUnit) == 0x000004, "Member 'Log_Temperature::TemperatureUnit' has a wrong offset!");
static_assert(offsetof(Log_Temperature, bConvertValueToInt) == 0x000005, "Member 'Log_Temperature::bConvertValueToInt' has a wrong offset!");
static_assert(offsetof(Log_Temperature, Prefix) == 0x000008, "Member 'Log_Temperature::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Temperature, Suffix) == 0x000018, "Member 'Log_Temperature::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Temperature, LoggingOption) == 0x000028, "Member 'Log_Temperature::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Temperature, TimeToDisplay) == 0x00002C, "Member 'Log_Temperature::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Temperature, ViewportKeyName) == 0x000030, "Member 'Log_Temperature::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Temperature, ContextObject) == 0x000038, "Member 'Log_Temperature::ContextObject' has a wrong offset!");

// Function Debug.Log.Time
// 0x0040 (0x0040 - 0x0000)
struct Log_Time final 
{
public:
	float                                         InTimeValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogTimeUnit                             TimeUnit;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertValueToInt;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D5[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D6[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Time) == 0x000008, "Wrong alignment on Log_Time");
static_assert(sizeof(Log_Time) == 0x000040, "Wrong size on Log_Time");
static_assert(offsetof(Log_Time, InTimeValue) == 0x000000, "Member 'Log_Time::InTimeValue' has a wrong offset!");
static_assert(offsetof(Log_Time, TimeUnit) == 0x000004, "Member 'Log_Time::TimeUnit' has a wrong offset!");
static_assert(offsetof(Log_Time, bConvertValueToInt) == 0x000005, "Member 'Log_Time::bConvertValueToInt' has a wrong offset!");
static_assert(offsetof(Log_Time, Prefix) == 0x000008, "Member 'Log_Time::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Time, Suffix) == 0x000018, "Member 'Log_Time::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Time, LoggingOption) == 0x000028, "Member 'Log_Time::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Time, TimeToDisplay) == 0x00002C, "Member 'Log_Time::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Time, ViewportKeyName) == 0x000030, "Member 'Log_Time::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Time, ContextObject) == 0x000038, "Member 'Log_Time::ContextObject' has a wrong offset!");

// Function Debug.Log.Transform
// 0x0060 (0x0060 - 0x0000)
struct Log_Transform final 
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFormat;                                           // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D7[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D8[0x8];                                     // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Log_Transform) == 0x000010, "Wrong alignment on Log_Transform");
static_assert(sizeof(Log_Transform) == 0x000060, "Wrong size on Log_Transform");
static_assert(offsetof(Log_Transform, InTransform) == 0x000000, "Member 'Log_Transform::InTransform' has a wrong offset!");
static_assert(offsetof(Log_Transform, Prefix) == 0x000030, "Member 'Log_Transform::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Transform, bFormat) == 0x000040, "Member 'Log_Transform::bFormat' has a wrong offset!");
static_assert(offsetof(Log_Transform, LoggingOption) == 0x000041, "Member 'Log_Transform::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Transform, TimeToDisplay) == 0x000044, "Member 'Log_Transform::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Transform, ViewportKeyName) == 0x000048, "Member 'Log_Transform::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Transform, ContextObject) == 0x000050, "Member 'Log_Transform::ContextObject' has a wrong offset!");

// Function Debug.Log.Valid
// 0x0038 (0x0038 - 0x0000)
struct Log_Valid final 
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D9[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewportKeyName;                                   // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DA[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Valid) == 0x000008, "Wrong alignment on Log_Valid");
static_assert(sizeof(Log_Valid) == 0x000038, "Wrong size on Log_Valid");
static_assert(offsetof(Log_Valid, Prefix) == 0x000000, "Member 'Log_Valid::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Valid, Suffix) == 0x000010, "Member 'Log_Valid::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Valid, LoggingOption) == 0x000020, "Member 'Log_Valid::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Valid, ViewportKeyName) == 0x000024, "Member 'Log_Valid::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Valid, ContextObject) == 0x000030, "Member 'Log_Valid::ContextObject' has a wrong offset!");

// Function Debug.Log.Vector
// 0x0048 (0x0048 - 0x0000)
struct Log_Vector final 
{
public:
	struct FVector                                InVector;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompact;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DB[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DC[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Vector) == 0x000008, "Wrong alignment on Log_Vector");
static_assert(sizeof(Log_Vector) == 0x000048, "Wrong size on Log_Vector");
static_assert(offsetof(Log_Vector, InVector) == 0x000000, "Member 'Log_Vector::InVector' has a wrong offset!");
static_assert(offsetof(Log_Vector, bCompact) == 0x00000C, "Member 'Log_Vector::bCompact' has a wrong offset!");
static_assert(offsetof(Log_Vector, Prefix) == 0x000010, "Member 'Log_Vector::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Vector, Suffix) == 0x000020, "Member 'Log_Vector::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Vector, LoggingOption) == 0x000030, "Member 'Log_Vector::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Vector, TimeToDisplay) == 0x000034, "Member 'Log_Vector::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Vector, ViewportKeyName) == 0x000038, "Member 'Log_Vector::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Vector, ContextObject) == 0x000040, "Member 'Log_Vector::ContextObject' has a wrong offset!");

// Function Debug.Log.Vector2D
// 0x0048 (0x0048 - 0x0000)
struct Log_Vector2D final 
{
public:
	struct FVector2D                              InVector2D;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompact;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DD[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DE[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Vector2D) == 0x000008, "Wrong alignment on Log_Vector2D");
static_assert(sizeof(Log_Vector2D) == 0x000048, "Wrong size on Log_Vector2D");
static_assert(offsetof(Log_Vector2D, InVector2D) == 0x000000, "Member 'Log_Vector2D::InVector2D' has a wrong offset!");
static_assert(offsetof(Log_Vector2D, bCompact) == 0x000008, "Member 'Log_Vector2D::bCompact' has a wrong offset!");
static_assert(offsetof(Log_Vector2D, Prefix) == 0x000010, "Member 'Log_Vector2D::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Vector2D, Suffix) == 0x000020, "Member 'Log_Vector2D::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Vector2D, LoggingOption) == 0x000030, "Member 'Log_Vector2D::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Vector2D, TimeToDisplay) == 0x000034, "Member 'Log_Vector2D::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Vector2D, ViewportKeyName) == 0x000038, "Member 'Log_Vector2D::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Vector2D, ContextObject) == 0x000040, "Member 'Log_Vector2D::ContextObject' has a wrong offset!");

// Function Debug.Log.Volume
// 0x0040 (0x0040 - 0x0000)
struct Log_Volume final 
{
public:
	float                                         InVolumeValue;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugLogVolumeUnit                           VolumeUnit;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertValueToInt;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DF[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E0[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Volume) == 0x000008, "Wrong alignment on Log_Volume");
static_assert(sizeof(Log_Volume) == 0x000040, "Wrong size on Log_Volume");
static_assert(offsetof(Log_Volume, InVolumeValue) == 0x000000, "Member 'Log_Volume::InVolumeValue' has a wrong offset!");
static_assert(offsetof(Log_Volume, VolumeUnit) == 0x000004, "Member 'Log_Volume::VolumeUnit' has a wrong offset!");
static_assert(offsetof(Log_Volume, bConvertValueToInt) == 0x000005, "Member 'Log_Volume::bConvertValueToInt' has a wrong offset!");
static_assert(offsetof(Log_Volume, Prefix) == 0x000008, "Member 'Log_Volume::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Volume, Suffix) == 0x000018, "Member 'Log_Volume::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Volume, LoggingOption) == 0x000028, "Member 'Log_Volume::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Volume, TimeToDisplay) == 0x00002C, "Member 'Log_Volume::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Volume, ViewportKeyName) == 0x000030, "Member 'Log_Volume::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Volume, ContextObject) == 0x000038, "Member 'Log_Volume::ContextObject' has a wrong offset!");

// Function Debug.Log.Warning
// 0x0028 (0x0028 - 0x0000)
struct Log_Warning final 
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPrefix;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E1[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Warning) == 0x000008, "Wrong alignment on Log_Warning");
static_assert(sizeof(Log_Warning) == 0x000028, "Wrong size on Log_Warning");
static_assert(offsetof(Log_Warning, Message) == 0x000000, "Member 'Log_Warning::Message' has a wrong offset!");
static_assert(offsetof(Log_Warning, LoggingOption) == 0x000010, "Member 'Log_Warning::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Warning, bAddPrefix) == 0x000011, "Member 'Log_Warning::bAddPrefix' has a wrong offset!");
static_assert(offsetof(Log_Warning, TimeToDisplay) == 0x000014, "Member 'Log_Warning::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Warning, ViewportKeyName) == 0x000018, "Member 'Log_Warning::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Warning, ContextObject) == 0x000020, "Member 'Log_Warning::ContextObject' has a wrong offset!");

// Function Debug.Log.Warning_WithCondition
// 0x0028 (0x0028 - 0x0000)
struct Log_Warning_WithCondition final 
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCondition;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPrefix;                                        // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E2[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDisplay;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewportKeyName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Warning_WithCondition) == 0x000008, "Wrong alignment on Log_Warning_WithCondition");
static_assert(sizeof(Log_Warning_WithCondition) == 0x000028, "Wrong size on Log_Warning_WithCondition");
static_assert(offsetof(Log_Warning_WithCondition, Message) == 0x000000, "Member 'Log_Warning_WithCondition::Message' has a wrong offset!");
static_assert(offsetof(Log_Warning_WithCondition, bCondition) == 0x000010, "Member 'Log_Warning_WithCondition::bCondition' has a wrong offset!");
static_assert(offsetof(Log_Warning_WithCondition, LoggingOption) == 0x000011, "Member 'Log_Warning_WithCondition::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Warning_WithCondition, bAddPrefix) == 0x000012, "Member 'Log_Warning_WithCondition::bAddPrefix' has a wrong offset!");
static_assert(offsetof(Log_Warning_WithCondition, TimeToDisplay) == 0x000014, "Member 'Log_Warning_WithCondition::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(Log_Warning_WithCondition, ViewportKeyName) == 0x000018, "Member 'Log_Warning_WithCondition::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Warning_WithCondition, ContextObject) == 0x000020, "Member 'Log_Warning_WithCondition::ContextObject' has a wrong offset!");

// Function Debug.Log.Wassup
// 0x0018 (0x0018 - 0x0000)
struct Log_Wassup final 
{
public:
	ELoggingOptions                               LoggingOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewportKeyName;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E4[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Wassup) == 0x000008, "Wrong alignment on Log_Wassup");
static_assert(sizeof(Log_Wassup) == 0x000018, "Wrong size on Log_Wassup");
static_assert(offsetof(Log_Wassup, LoggingOption) == 0x000000, "Member 'Log_Wassup::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Wassup, ViewportKeyName) == 0x000004, "Member 'Log_Wassup::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Wassup, ContextObject) == 0x000010, "Member 'Log_Wassup::ContextObject' has a wrong offset!");

// Function Debug.Log.Yes
// 0x0038 (0x0038 - 0x0000)
struct Log_Yes final 
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoggingOptions                               LoggingOption;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E5[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewportKeyName;                                   // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E6[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Yes) == 0x000008, "Wrong alignment on Log_Yes");
static_assert(sizeof(Log_Yes) == 0x000038, "Wrong size on Log_Yes");
static_assert(offsetof(Log_Yes, Prefix) == 0x000000, "Member 'Log_Yes::Prefix' has a wrong offset!");
static_assert(offsetof(Log_Yes, Suffix) == 0x000010, "Member 'Log_Yes::Suffix' has a wrong offset!");
static_assert(offsetof(Log_Yes, LoggingOption) == 0x000020, "Member 'Log_Yes::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Yes, ViewportKeyName) == 0x000024, "Member 'Log_Yes::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Yes, ContextObject) == 0x000030, "Member 'Log_Yes::ContextObject' has a wrong offset!");

// Function Debug.Log.Yo
// 0x0018 (0x0018 - 0x0000)
struct Log_Yo final 
{
public:
	ELoggingOptions                               LoggingOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewportKeyName;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E8[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Log_Yo) == 0x000008, "Wrong alignment on Log_Yo");
static_assert(sizeof(Log_Yo) == 0x000018, "Wrong size on Log_Yo");
static_assert(offsetof(Log_Yo, LoggingOption) == 0x000000, "Member 'Log_Yo::LoggingOption' has a wrong offset!");
static_assert(offsetof(Log_Yo, ViewportKeyName) == 0x000004, "Member 'Log_Yo::ViewportKeyName' has a wrong offset!");
static_assert(offsetof(Log_Yo, ContextObject) == 0x000010, "Member 'Log_Yo::ContextObject' has a wrong offset!");

}

