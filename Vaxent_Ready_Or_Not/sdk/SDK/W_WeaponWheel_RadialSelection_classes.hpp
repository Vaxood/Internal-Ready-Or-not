#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WeaponWheel_RadialSelection

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "W_RadialSelectionBase_classes.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_WeaponWheel_RadialSelection.W_WeaponWheel_RadialSelection_C
// 0x00C0 (0x0338 - 0x0278)
class UW_WeaponWheel_RadialSelection_C final  : public UW_RadialSelectionBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_W_WeaponWheel_RadialSelection_C;    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_Expand;                                       // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Item_Icon;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           MainArea;                                          // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               MainArea_Overlay;                                  // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         RootWidget;                                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_420;                                        // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_WeaponWheel_MagazineDisplay_C*       WeaponWheel_MagazineDisplay;                       // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ABaseItem*                              Item;                                              // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ItemIconSize;                                      // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         CategoryIndex;                                     // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   ItemCategory;                                      // 0x02C8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<class ABaseItem*>                      Items;                                             // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UWeaponWheelScript*>             ExecutableItems;                                   // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UObject*>                        AllItems;                                          // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         WheelSize;                                         // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         MaxWheelSize;                                      // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UImage*>                         Icons;                                             // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UImage*>                         StackedItems;                                      // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_W_WeaponWheel_RadialSelection(int32 EntryPoint, bool Temp_bool_True_if_break_was_hit_Variable, int32 Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool K2Node_Event_IsDesignTime, class ABaseItem* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, class ABaseMagazineWeapon* K2Node_DynamicCast_AsBase_Magazine_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, class ABaseItem* CallFunc_Array_Get_Item_1, class ABaseMagazineWeapon* K2Node_DynamicCast_AsBase_Magazine_Weapon_1, bool K2Node_DynamicCast_bSuccess_1, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue_1);
	void On_Wheel_Created();
	void PreConstruct(bool IsDesignTime);
	void AddItemToCategory(class ABaseItem*& NewItem, int32 AtIndex, bool CallFunc_Greater_IntInt_ReturnValue, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue, class UClass* CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, const struct FSlateBrush& K2Node_MakeStruct_SlateBrush, class UImage* CallFunc_CreateIcon_ReturnValue, class UOverlaySlot* CallFunc_AddChildToOverlay_ReturnValue, int32 CallFunc_Array_AddUnique_ReturnValue, class UClass* CallFunc_GetObjectClass_ReturnValue_1, bool CallFunc_NotEqual_ClassClass_ReturnValue, int32 CallFunc_Array_LastIndex_ReturnValue, class ABaseItem* CallFunc_Array_Get_Item, class UClass* CallFunc_GetObjectClass_ReturnValue_2, const class FString& CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue_1, class FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int32 CallFunc_Array_AddUnique_ReturnValue_1);
	void RemoveItemFromCategory(class ABaseItem*& Param_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue_1);
	void OnSelected(bool Play_Animation, class UUMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);
	void MoveToFront(class ABaseItem* Param_Item, bool CallFunc_Array_RemoveItem_ReturnValue);
	void MoveToBack(class ABaseItem* Param_Item, int32 CallFunc_Array_LastIndex_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);
	void ShiftItemToNewSpot(class ABaseItem* Param_Item, int32 NewIndex, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);
	void ShuffleItems();
	void AddExecutableItemToCategory(class UWeaponWheelScript* WeaponWheelScript, int32 AtIndex, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int32 CallFunc_Array_AddUnique_ReturnValue_1);
	void RemoveExecutableItemFromCategory(class UWeaponWheelScript* WeaponWheelScript, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue_1, bool CallFunc_Array_Contains_ReturnValue);
	void RemoveNullItems();
	void RemoveNullItems__Internal_(TArray<class UObject*>& ItemArray, const TArray<int32>& Indicies_FoundNullItems, int32 Temp_int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, int32 Temp_int_Array_Index_Variable_1, class UObject* CallFunc_Array_Get_Item, int32 CallFunc_Array_Get_Item_1, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, int32 Temp_int_Loop_Counter_Variable_1, int32 CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue_1, int32 CallFunc_Add_IntInt_ReturnValue_1);
	class UImage* CreateIcon(struct FSlateBrush& InBrush, int32 CallFunc_Array_LastIndex_ReturnValue, class UImage* CallFunc_Array_Get_Item, class UImage* CallFunc_SpawnObject_ReturnValue, int32 CallFunc_Array_Add_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, const struct FVector2D& CallFunc_Add_Vector2DFloat_ReturnValue);
	void Next(bool* bSuccess, bool bSucceeded, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue_1, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Clamp_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Next_bSuccess);
	void Previous(bool* bSuccess, bool bSucceeded, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue_1, int32 CallFunc_Subtract_IntInt_ReturnValue_2, int32 CallFunc_Clamp_ReturnValue, bool CallFunc_Previous_bSuccess);
	void OnDeselected(bool Play_Animation, class UUMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);
	void ExecuteRadial(EGrenadeThrowSettingType CallFunc_LoadGrenadeSettings_GrenadeThrowType, bool CallFunc_LoadGrenadeSettings_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class UObject* CallFunc_Array_Get_Item, class ABaseItem* K2Node_DynamicCast_AsBase_Item, bool K2Node_DynamicCast_bSuccess, class UObject* CallFunc_Array_Get_Item_1, bool CallFunc_PutItemInHands_ReturnValue, class UWeaponWheelScript* K2Node_DynamicCast_AsWeapon_Wheel_Script, bool K2Node_DynamicCast_bSuccess_1, bool CallFunc_CanEquip_ReturnValue, bool CallFunc_IsValid_ReturnValue, class ABaseGrenade* K2Node_DynamicCast_AsBase_Grenade, bool K2Node_DynamicCast_bSuccess_2, bool CallFunc_IsValid_ReturnValue_1);
	void Select(int32 Param_Index, class UObject* CallFunc_Array_Get_Item, class ABaseMagazineWeapon* K2Node_DynamicCast_AsBase_Magazine_Weapon, bool K2Node_DynamicCast_bSuccess);
	void UpdateIcon(int32 SelectionIndex, const struct FSlateBrush& InBrush, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue, const struct FSlateBrush& K2Node_MakeStruct_SlateBrush, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue_1, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue_2, const struct FSlateBrush& K2Node_MakeStruct_SlateBrush_1, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue_3, class UObject* CallFunc_Array_Get_Item, class ABaseItem* K2Node_DynamicCast_AsBase_Item, bool K2Node_DynamicCast_bSuccess, class UWeaponWheelScript* K2Node_DynamicCast_AsWeapon_Wheel_Script, bool K2Node_DynamicCast_bSuccess_1, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, class UTexture2D* CallFunc_GetLazyLoadedImage_ReturnValue, const struct FSlateBrush& K2Node_MakeStruct_SlateBrush_2, const struct FSlateBrush& K2Node_MakeStruct_SlateBrush_3);

	void GetCategory(class FText* Category) const;
	void GetItemName(class FName* Item_Name, const class FString& FinalString, const class FString& Temp_string_Variable, int32 Temp_int_Array_Index_Variable, bool Temp_bool_Variable, class FName CallFunc_Conv_StringToName_ReturnValue, const class FString& Temp_string_Variable_1, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, class UObject* CallFunc_Array_Get_Item, class ABaseItem* K2Node_DynamicCast_AsBase_Item, bool K2Node_DynamicCast_bSuccess, class UWeaponWheelScript* K2Node_DynamicCast_AsWeapon_Wheel_Script, bool K2Node_DynamicCast_bSuccess_1, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, const class FString& CallFunc_Conv_TextToString_ReturnValue, const class FString& CallFunc_Conv_TextToString_ReturnValue_1, TArray<class FString>& CallFunc_ParseIntoArray_ReturnValue, class FName CallFunc_Conv_StringToName_ReturnValue_1, const class FString& CallFunc_Array_Get_Item_1, const class FString& CallFunc_Concat_StrStr_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const class FString& K2Node_Select_Default, const class FString& CallFunc_Concat_StrStr_ReturnValue_1) const;
	void IsEquipping(bool* Param_IsEquipping, TArray<EBlockingAnimationExclusion>& K2Node_MakeArray_Array, class ABaseItem* CallFunc_GetEquippedItem_ReturnValue, bool CallFunc_IsBlockingAnimationPlaying_ReturnValue) const;
	void IsInExecutablesArray(bool* Return_Value, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_WeaponWheel_RadialSelection_C">();
	}
	static class UW_WeaponWheel_RadialSelection_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_WeaponWheel_RadialSelection_C>();
	}
};
static_assert(alignof(UW_WeaponWheel_RadialSelection_C) == 0x000008, "Wrong alignment on UW_WeaponWheel_RadialSelection_C");
static_assert(sizeof(UW_WeaponWheel_RadialSelection_C) == 0x000338, "Wrong size on UW_WeaponWheel_RadialSelection_C");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, UberGraphFrame_W_WeaponWheel_RadialSelection_C) == 0x000278, "Member 'UW_WeaponWheel_RadialSelection_C::UberGraphFrame_W_WeaponWheel_RadialSelection_C' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, Anim_Expand) == 0x000280, "Member 'UW_WeaponWheel_RadialSelection_C::Anim_Expand' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, Item_Icon) == 0x000288, "Member 'UW_WeaponWheel_RadialSelection_C::Item_Icon' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, MainArea) == 0x000290, "Member 'UW_WeaponWheel_RadialSelection_C::MainArea' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, MainArea_Overlay) == 0x000298, "Member 'UW_WeaponWheel_RadialSelection_C::MainArea_Overlay' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, RootWidget) == 0x0002A0, "Member 'UW_WeaponWheel_RadialSelection_C::RootWidget' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, Spacer_420) == 0x0002A8, "Member 'UW_WeaponWheel_RadialSelection_C::Spacer_420' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, WeaponWheel_MagazineDisplay) == 0x0002B0, "Member 'UW_WeaponWheel_RadialSelection_C::WeaponWheel_MagazineDisplay' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, Item) == 0x0002B8, "Member 'UW_WeaponWheel_RadialSelection_C::Item' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, ItemIconSize) == 0x0002C0, "Member 'UW_WeaponWheel_RadialSelection_C::ItemIconSize' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, CategoryIndex) == 0x0002C4, "Member 'UW_WeaponWheel_RadialSelection_C::CategoryIndex' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, ItemCategory) == 0x0002C8, "Member 'UW_WeaponWheel_RadialSelection_C::ItemCategory' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, Items) == 0x0002E0, "Member 'UW_WeaponWheel_RadialSelection_C::Items' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, ExecutableItems) == 0x0002F0, "Member 'UW_WeaponWheel_RadialSelection_C::ExecutableItems' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, AllItems) == 0x000300, "Member 'UW_WeaponWheel_RadialSelection_C::AllItems' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, WheelSize) == 0x000310, "Member 'UW_WeaponWheel_RadialSelection_C::WheelSize' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, MaxWheelSize) == 0x000314, "Member 'UW_WeaponWheel_RadialSelection_C::MaxWheelSize' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, Icons) == 0x000318, "Member 'UW_WeaponWheel_RadialSelection_C::Icons' has a wrong offset!");
static_assert(offsetof(UW_WeaponWheel_RadialSelection_C, StackedItems) == 0x000328, "Member 'UW_WeaponWheel_RadialSelection_C::StackedItems' has a wrong offset!");

}

