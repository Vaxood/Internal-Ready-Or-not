#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Text

#include "Basic.hpp"

#include "E_TextStyles_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "ST_Style_Text_structs.hpp"
#include "Slate_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Text.W_Text_C
// 0x0280 (0x0558 - 0x02D8)
class UW_Text_C final  : public UTextWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	E_TextStyles                                  SelectTextStyle;                                   // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4013[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x02E8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FST_Style_Text                         TextStyleOld;                                      // 0x0300(0x00A0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ShadowOffset;                                      // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ShadowColor;                                       // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoWrapText;                                      // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SubString;                                         // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SingleWord;                                        // 0x03CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4014[0x1];                                     // 0x03CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LetterSpacing;                                     // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Truncate;                                          // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4015[0x3];                                     // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterLimit;                                    // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class FString                                 TruncationCharacters;                              // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	float                                         CalculatedSpacing;                                 // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  Justification;                                     // 0x03EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4016[0x3];                                     // 0x03ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CalculatedWidth;                                   // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLetterSpacing;                              // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CharacterCount;                                    // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4017[0x4];                                     // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CharacterArray;                                    // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, class UW_Text_C*>                 SpacedCharacterElements;                           // 0x0410(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UWrapBoxSlot*, class UW_Text_C*>   WordElements;                                      // 0x0460(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         WordCount;                                         // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4018[0x4];                                     // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBox*                         HB_Substring;                                      // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_SingleLine;                                     // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextTransformPolicy                          TransformPolicy;                                   // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4019[0x7];                                     // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             TextStyleDataTable;                                // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRichText;                                       // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401A[0x7];                                     // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFontOutlineSettings                   Outline_Settings;                                  // 0x04E0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   Typeface;                                          // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FontSize;                                          // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWidgetTransform                       TextRenderTransform;                               // 0x050C(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FLinearColor                           TextColor;                                         // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TextStyles                                  CurrentTextStyle;                                  // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_401B[0x3];                                     // 0x0539(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorOverride;                                     // 0x053C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FontSizeOverride;                                  // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TextStyle;                                         // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_W_Text(int32 EntryPoint, bool K2Node_Event_IsDesignTime, const class FString& CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, const class FString& CallFunc_RemoveSpacesFromString_ReturnString, class FText CallFunc_RemoveSpacesFromString_ReturnText, class FName CallFunc_RemoveSpacesFromString_ReturnName, const struct FST_Style_Text& CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_NotEqual_LinearColorLinearColor_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void SetText(class FText Param_Text, class FText CallFunc_TruncateText_TruncatedText);
	void SetStyle(const struct FST_Style_Text& Param_TextStyle);
	void UpdateFont(const struct FSlateFontInfo& Font);
	void TruncateText(bool Param_Truncate, int32 Param_CharacterLimit, const class FString& Param_TruncationCharacters, class FText* TruncatedText, int32 CallFunc_Len_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue_1, const class FString& CallFunc_Conv_TextToString_ReturnValue, bool Temp_bool_Variable, const class FString& CallFunc_Left_ReturnValue, int32 CallFunc_Len_ReturnValue_1, const class FString& CallFunc_Left_ReturnValue_1, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EndsWith_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const class FString& CallFunc_SelectString_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue, class FText CallFunc_Conv_StringToText_ReturnValue, class FText K2Node_Select_Default);
	void UpdateText(class FText Param_Text);
	void GetText(class FText* Param_CurrentText);
	void SetTextColor(const struct FLinearColor& Param_Color, const struct FSlateColor& K2Node_MakeStruct_SlateColor);
	void SetTextLetterSpacing(int32 Param_LetterSpacing, const struct FSlateFontInfo& K2Node_MakeStruct_SlateFontInfo);
	void SetTextShadow(const struct FVector2D& Param_ShadowOffset, const struct FLinearColor& Param_ShadowColor);
	void SetTextTransform(ETextTransformPolicy TextTransform);
	void SetFontSize(int32 Param_FontSize, const struct FSlateFontInfo& K2Node_MakeStruct_SlateFontInfo);
	void SetFont(const struct FSlateFontInfo& Font, const struct FST_Style_Text& K2Node_MakeStruct_ST_Style_Text);
	void SetOutline(const struct FFontOutlineSettings& FontOutlineSettings, const struct FSlateFontInfo& K2Node_MakeStruct_SlateFontInfo);
	void SetTextJustification(ETextJustify Param_Justification);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Text_C">();
	}
	static class UW_Text_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Text_C>();
	}
};
static_assert(alignof(UW_Text_C) == 0x000008, "Wrong alignment on UW_Text_C");
static_assert(sizeof(UW_Text_C) == 0x000558, "Wrong size on UW_Text_C");
static_assert(offsetof(UW_Text_C, UberGraphFrame) == 0x0002D8, "Member 'UW_Text_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Text_C, SelectTextStyle) == 0x0002E0, "Member 'UW_Text_C::SelectTextStyle' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Text) == 0x0002E8, "Member 'UW_Text_C::Text' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TextStyleOld) == 0x000300, "Member 'UW_Text_C::TextStyleOld' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Color) == 0x0003A0, "Member 'UW_Text_C::Color' has a wrong offset!");
static_assert(offsetof(UW_Text_C, ShadowOffset) == 0x0003B0, "Member 'UW_Text_C::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UW_Text_C, ShadowColor) == 0x0003B8, "Member 'UW_Text_C::ShadowColor' has a wrong offset!");
static_assert(offsetof(UW_Text_C, AutoWrapText) == 0x0003C8, "Member 'UW_Text_C::AutoWrapText' has a wrong offset!");
static_assert(offsetof(UW_Text_C, SubString) == 0x0003C9, "Member 'UW_Text_C::SubString' has a wrong offset!");
static_assert(offsetof(UW_Text_C, SingleWord) == 0x0003CA, "Member 'UW_Text_C::SingleWord' has a wrong offset!");
static_assert(offsetof(UW_Text_C, LetterSpacing) == 0x0003CC, "Member 'UW_Text_C::LetterSpacing' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Truncate) == 0x0003D0, "Member 'UW_Text_C::Truncate' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CharacterLimit) == 0x0003D4, "Member 'UW_Text_C::CharacterLimit' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TruncationCharacters) == 0x0003D8, "Member 'UW_Text_C::TruncationCharacters' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CalculatedSpacing) == 0x0003E8, "Member 'UW_Text_C::CalculatedSpacing' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Justification) == 0x0003EC, "Member 'UW_Text_C::Justification' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CalculatedWidth) == 0x0003F0, "Member 'UW_Text_C::CalculatedWidth' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CurrentLetterSpacing) == 0x0003F4, "Member 'UW_Text_C::CurrentLetterSpacing' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CharacterCount) == 0x0003F8, "Member 'UW_Text_C::CharacterCount' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CharacterArray) == 0x000400, "Member 'UW_Text_C::CharacterArray' has a wrong offset!");
static_assert(offsetof(UW_Text_C, SpacedCharacterElements) == 0x000410, "Member 'UW_Text_C::SpacedCharacterElements' has a wrong offset!");
static_assert(offsetof(UW_Text_C, WordElements) == 0x000460, "Member 'UW_Text_C::WordElements' has a wrong offset!");
static_assert(offsetof(UW_Text_C, WordCount) == 0x0004B0, "Member 'UW_Text_C::WordCount' has a wrong offset!");
static_assert(offsetof(UW_Text_C, HB_Substring) == 0x0004B8, "Member 'UW_Text_C::HB_Substring' has a wrong offset!");
static_assert(offsetof(UW_Text_C, HB_SingleLine) == 0x0004C0, "Member 'UW_Text_C::HB_SingleLine' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TransformPolicy) == 0x0004C8, "Member 'UW_Text_C::TransformPolicy' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TextStyleDataTable) == 0x0004D0, "Member 'UW_Text_C::TextStyleDataTable' has a wrong offset!");
static_assert(offsetof(UW_Text_C, UseRichText) == 0x0004D8, "Member 'UW_Text_C::UseRichText' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Outline_Settings) == 0x0004E0, "Member 'UW_Text_C::Outline_Settings' has a wrong offset!");
static_assert(offsetof(UW_Text_C, Typeface) == 0x000500, "Member 'UW_Text_C::Typeface' has a wrong offset!");
static_assert(offsetof(UW_Text_C, FontSize) == 0x000508, "Member 'UW_Text_C::FontSize' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TextRenderTransform) == 0x00050C, "Member 'UW_Text_C::TextRenderTransform' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TextColor) == 0x000528, "Member 'UW_Text_C::TextColor' has a wrong offset!");
static_assert(offsetof(UW_Text_C, CurrentTextStyle) == 0x000538, "Member 'UW_Text_C::CurrentTextStyle' has a wrong offset!");
static_assert(offsetof(UW_Text_C, ColorOverride) == 0x00053C, "Member 'UW_Text_C::ColorOverride' has a wrong offset!");
static_assert(offsetof(UW_Text_C, FontSizeOverride) == 0x00054C, "Member 'UW_Text_C::FontSizeOverride' has a wrong offset!");
static_assert(offsetof(UW_Text_C, TextStyle) == 0x000550, "Member 'UW_Text_C::TextStyle' has a wrong offset!");

}

