#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_FireModes

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function W_FireModes.W_FireModes_C.ExecuteUbergraph_W_FireModes
// 0x0038 (0x0038 - 0x0000)
struct W_FireModes_C_ExecuteUbergraph_W_FireModes final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseWeapon*                            K2Node_CustomEvent_NewWeapon;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseMagazineWeapon*                    K2Node_DynamicCast_AsBase_Magazine_Weapon;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CC8[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3CC9[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_FireModes_C_ExecuteUbergraph_W_FireModes) == 0x000008, "Wrong alignment on W_FireModes_C_ExecuteUbergraph_W_FireModes");
static_assert(sizeof(W_FireModes_C_ExecuteUbergraph_W_FireModes) == 0x000038, "Wrong size on W_FireModes_C_ExecuteUbergraph_W_FireModes");
static_assert(offsetof(W_FireModes_C_ExecuteUbergraph_W_FireModes, EntryPoint) == 0x000000, "Member 'W_FireModes_C_ExecuteUbergraph_W_FireModes::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_ExecuteUbergraph_W_FireModes, K2Node_CustomEvent_NewWeapon) == 0x000008, "Member 'W_FireModes_C_ExecuteUbergraph_W_FireModes::K2Node_CustomEvent_NewWeapon' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_ExecuteUbergraph_W_FireModes, K2Node_DynamicCast_AsBase_Magazine_Weapon) == 0x000010, "Member 'W_FireModes_C_ExecuteUbergraph_W_FireModes::K2Node_DynamicCast_AsBase_Magazine_Weapon' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_ExecuteUbergraph_W_FireModes, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'W_FireModes_C_ExecuteUbergraph_W_FireModes::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_ExecuteUbergraph_W_FireModes, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'W_FireModes_C_ExecuteUbergraph_W_FireModes::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_ExecuteUbergraph_W_FireModes, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000030, "Member 'W_FireModes_C_ExecuteUbergraph_W_FireModes::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function W_FireModes.W_FireModes_C.OnWeaponEquipped
// 0x0008 (0x0008 - 0x0000)
struct W_FireModes_C_OnWeaponEquipped final 
{
public:
	class ABaseWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_FireModes_C_OnWeaponEquipped) == 0x000008, "Wrong alignment on W_FireModes_C_OnWeaponEquipped");
static_assert(sizeof(W_FireModes_C_OnWeaponEquipped) == 0x000008, "Wrong size on W_FireModes_C_OnWeaponEquipped");
static_assert(offsetof(W_FireModes_C_OnWeaponEquipped, NewWeapon) == 0x000000, "Member 'W_FireModes_C_OnWeaponEquipped::NewWeapon' has a wrong offset!");

// Function W_FireModes.W_FireModes_C.SetFireMode
// 0x0020 (0x0020 - 0x0000)
struct W_FireModes_C_SetFireMode final 
{
public:
	EFireMode                                     NewFireMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CCA[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3CCB[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_FireModes_C_SetFireMode) == 0x000008, "Wrong alignment on W_FireModes_C_SetFireMode");
static_assert(sizeof(W_FireModes_C_SetFireMode) == 0x000020, "Wrong size on W_FireModes_C_SetFireMode");
static_assert(offsetof(W_FireModes_C_SetFireMode, NewFireMode) == 0x000000, "Member 'W_FireModes_C_SetFireMode::NewFireMode' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_SetFireMode, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'W_FireModes_C_SetFireMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_SetFireMode, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'W_FireModes_C_SetFireMode::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_SetFireMode, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'W_FireModes_C_SetFireMode::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function W_FireModes.W_FireModes_C.Select
// 0x0008 (0x0008 - 0x0000)
struct W_FireModes_C_Select final 
{
public:
	class UW_FireMode_C*                          FireModeWidget;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_FireModes_C_Select) == 0x000008, "Wrong alignment on W_FireModes_C_Select");
static_assert(sizeof(W_FireModes_C_Select) == 0x000008, "Wrong size on W_FireModes_C_Select");
static_assert(offsetof(W_FireModes_C_Select, FireModeWidget) == 0x000000, "Member 'W_FireModes_C_Select::FireModeWidget' has a wrong offset!");

// Function W_FireModes.W_FireModes_C.DeselectAllExpect
// 0x0050 (0x0050 - 0x0000)
struct W_FireModes_C_DeselectAllExpect final 
{
public:
	class UW_FireMode_C*                          FireModeWidget;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CCC[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CCD[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CCE[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_FireMode_C*                          K2Node_DynamicCast_AsW_Fire_Mode;                  // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_FireModes_C_DeselectAllExpect) == 0x000008, "Wrong alignment on W_FireModes_C_DeselectAllExpect");
static_assert(sizeof(W_FireModes_C_DeselectAllExpect) == 0x000050, "Wrong size on W_FireModes_C_DeselectAllExpect");
static_assert(offsetof(W_FireModes_C_DeselectAllExpect, FireModeWidget) == 0x000000, "Member 'W_FireModes_C_DeselectAllExpect::FireModeWidget' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAllExpect, Temp_int_Array_Index_Variable) == 0x000008, "Member 'W_FireModes_C_DeselectAllExpect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAllExpect, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'W_FireModes_C_DeselectAllExpect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAllExpect, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'W_FireModes_C_DeselectAllExpect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAllExpect, CallFunc_GetAllChildren_ReturnValue) == 0x000018, "Member 'W_FireModes_C_DeselectAllExpect::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAllExpect, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'W_FireModes_C_DeselectAllExpect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAllExpect, CallFunc_Array_Get_Item) == 0x000030, "Member 'W_FireModes_C_DeselectAllExpect::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAllExpect, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'W_FireModes_C_DeselectAllExpect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAllExpect, K2Node_DynamicCast_AsW_Fire_Mode) == 0x000040, "Member 'W_FireModes_C_DeselectAllExpect::K2Node_DynamicCast_AsW_Fire_Mode' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAllExpect, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'W_FireModes_C_DeselectAllExpect::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAllExpect, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000049, "Member 'W_FireModes_C_DeselectAllExpect::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function W_FireModes.W_FireModes_C.DeselectAll
// 0x0048 (0x0048 - 0x0000)
struct W_FireModes_C_DeselectAll final 
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CCF[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CD0[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CD1[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_FireMode_C*                          K2Node_DynamicCast_AsW_Fire_Mode;                  // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_FireModes_C_DeselectAll) == 0x000008, "Wrong alignment on W_FireModes_C_DeselectAll");
static_assert(sizeof(W_FireModes_C_DeselectAll) == 0x000048, "Wrong size on W_FireModes_C_DeselectAll");
static_assert(offsetof(W_FireModes_C_DeselectAll, Temp_int_Array_Index_Variable) == 0x000000, "Member 'W_FireModes_C_DeselectAll::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAll, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'W_FireModes_C_DeselectAll::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAll, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'W_FireModes_C_DeselectAll::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAll, CallFunc_GetAllChildren_ReturnValue) == 0x000010, "Member 'W_FireModes_C_DeselectAll::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAll, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'W_FireModes_C_DeselectAll::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAll, CallFunc_Array_Get_Item) == 0x000028, "Member 'W_FireModes_C_DeselectAll::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAll, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'W_FireModes_C_DeselectAll::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAll, K2Node_DynamicCast_AsW_Fire_Mode) == 0x000038, "Member 'W_FireModes_C_DeselectAll::K2Node_DynamicCast_AsW_Fire_Mode' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_DeselectAll, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'W_FireModes_C_DeselectAll::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function W_FireModes.W_FireModes_C.Deselect
// 0x0008 (0x0008 - 0x0000)
struct W_FireModes_C_Deselect final 
{
public:
	class UW_FireMode_C*                          FireModeWidget;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_FireModes_C_Deselect) == 0x000008, "Wrong alignment on W_FireModes_C_Deselect");
static_assert(sizeof(W_FireModes_C_Deselect) == 0x000008, "Wrong size on W_FireModes_C_Deselect");
static_assert(offsetof(W_FireModes_C_Deselect, FireModeWidget) == 0x000000, "Member 'W_FireModes_C_Deselect::FireModeWidget' has a wrong offset!");

// Function W_FireModes.W_FireModes_C.UpdateAvailableFireModes
// 0x0028 (0x0028 - 0x0000)
struct W_FireModes_C_UpdateAvailableFireModes final 
{
public:
	class ABaseWeapon*                            Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFireMode                                     Temp_byte_Variable;                                // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFireMode                                     Temp_byte_Variable_3;                              // 0x0013(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFireMode                                     Temp_byte_Variable_6;                              // 0x0019(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue_2;             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFireMode                                     Temp_byte_Variable_9;                              // 0x001F(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_3;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_FireModes_C_UpdateAvailableFireModes) == 0x000008, "Wrong alignment on W_FireModes_C_UpdateAvailableFireModes");
static_assert(sizeof(W_FireModes_C_UpdateAvailableFireModes) == 0x000028, "Wrong size on W_FireModes_C_UpdateAvailableFireModes");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Weapon) == 0x000000, "Member 'W_FireModes_C_UpdateAvailableFireModes::Weapon' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_byte_Variable) == 0x000008, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'W_FireModes_C_UpdateAvailableFireModes::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_bool_Variable) == 0x00000A, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, CallFunc_Array_Contains_ReturnValue) == 0x00000B, "Member 'W_FireModes_C_UpdateAvailableFireModes::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'W_FireModes_C_UpdateAvailableFireModes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_byte_Variable_1) == 0x000010, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000011, "Member 'W_FireModes_C_UpdateAvailableFireModes::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_byte_Variable_2) == 0x000012, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_byte_Variable_3) == 0x000013, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_bool_Variable_1) == 0x000014, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, CallFunc_Array_Contains_ReturnValue_1) == 0x000015, "Member 'W_FireModes_C_UpdateAvailableFireModes::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_byte_Variable_4) == 0x000016, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, K2Node_Select_Default) == 0x000017, "Member 'W_FireModes_C_UpdateAvailableFireModes::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_byte_Variable_5) == 0x000018, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_byte_Variable_6) == 0x000019, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_bool_Variable_2) == 0x00001A, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, CallFunc_Array_Contains_ReturnValue_2) == 0x00001B, "Member 'W_FireModes_C_UpdateAvailableFireModes::CallFunc_Array_Contains_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_byte_Variable_7) == 0x00001C, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, K2Node_Select_Default_1) == 0x00001D, "Member 'W_FireModes_C_UpdateAvailableFireModes::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_byte_Variable_8) == 0x00001E, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, Temp_byte_Variable_9) == 0x00001F, "Member 'W_FireModes_C_UpdateAvailableFireModes::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, CallFunc_Array_Contains_ReturnValue_3) == 0x000020, "Member 'W_FireModes_C_UpdateAvailableFireModes::CallFunc_Array_Contains_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, CallFunc_BooleanOR_ReturnValue) == 0x000021, "Member 'W_FireModes_C_UpdateAvailableFireModes::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_UpdateAvailableFireModes, K2Node_Select_Default_2) == 0x000022, "Member 'W_FireModes_C_UpdateAvailableFireModes::K2Node_Select_Default_2' has a wrong offset!");

// Function W_FireModes.W_FireModes_C.FadeOut
// 0x0010 (0x0010 - 0x0000)
struct W_FireModes_C_FadeOut final 
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_FireModes_C_FadeOut) == 0x000008, "Wrong alignment on W_FireModes_C_FadeOut");
static_assert(sizeof(W_FireModes_C_FadeOut) == 0x000010, "Wrong size on W_FireModes_C_FadeOut");
static_assert(offsetof(W_FireModes_C_FadeOut, CallFunc_PlayAnimationForward_ReturnValue) == 0x000000, "Member 'W_FireModes_C_FadeOut::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_FadeOut, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000008, "Member 'W_FireModes_C_FadeOut::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function W_FireModes.W_FireModes_C.SetStyle
// 0x0004 (0x0004 - 0x0000)
struct W_FireModes_C_SetStyle final 
{
public:
	int32                                         Option;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_FireModes_C_SetStyle) == 0x000004, "Wrong alignment on W_FireModes_C_SetStyle");
static_assert(sizeof(W_FireModes_C_SetStyle) == 0x000004, "Wrong size on W_FireModes_C_SetStyle");
static_assert(offsetof(W_FireModes_C_SetStyle, Option) == 0x000000, "Member 'W_FireModes_C_SetStyle::Option' has a wrong offset!");

// Function W_FireModes.W_FireModes_C.IsFadeOutTimerActive
// 0x0002 (0x0002 - 0x0000)
struct W_FireModes_C_IsFadeOutTimerActive final 
{
public:
	bool                                          Return_Value;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_FireModes_C_IsFadeOutTimerActive) == 0x000001, "Wrong alignment on W_FireModes_C_IsFadeOutTimerActive");
static_assert(sizeof(W_FireModes_C_IsFadeOutTimerActive) == 0x000002, "Wrong size on W_FireModes_C_IsFadeOutTimerActive");
static_assert(offsetof(W_FireModes_C_IsFadeOutTimerActive, Return_Value) == 0x000000, "Member 'W_FireModes_C_IsFadeOutTimerActive::Return_Value' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_IsFadeOutTimerActive, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000001, "Member 'W_FireModes_C_IsFadeOutTimerActive::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");

// Function W_FireModes.W_FireModes_C.IsFadingOut
// 0x0002 (0x0002 - 0x0000)
struct W_FireModes_C_IsFadingOut final 
{
public:
	bool                                          Return_Value;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_FireModes_C_IsFadingOut) == 0x000001, "Wrong alignment on W_FireModes_C_IsFadingOut");
static_assert(sizeof(W_FireModes_C_IsFadingOut) == 0x000002, "Wrong size on W_FireModes_C_IsFadingOut");
static_assert(offsetof(W_FireModes_C_IsFadingOut, Return_Value) == 0x000000, "Member 'W_FireModes_C_IsFadingOut::Return_Value' has a wrong offset!");
static_assert(offsetof(W_FireModes_C_IsFadingOut, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000001, "Member 'W_FireModes_C_IsFadingOut::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

}

