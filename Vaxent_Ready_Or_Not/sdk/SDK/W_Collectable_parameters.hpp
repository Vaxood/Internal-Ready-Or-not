#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Collectable

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonInput_structs.hpp"


namespace SDK::Params
{

// Function W_Collectable.W_Collectable_C.ExecuteUbergraph_W_Collectable
// 0x0060 (0x0060 - 0x0000)
struct W_Collectable_C_ExecuteUbergraph_W_Collectable final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DD8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_ComponentBoundEvent_ButtonID;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Delay;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsGamepad;                            // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DD9[0x1];                                     // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PageName;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACollectable*                           K2Node_Event_Collectable;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Delay_1;                              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BackPage_Handled;                         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECommonInputType                              K2Node_CustomEvent_bNewInputType;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DDA[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate;              // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DDB[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Collectable_C_ExecuteUbergraph_W_Collectable) == 0x000008, "Wrong alignment on W_Collectable_C_ExecuteUbergraph_W_Collectable");
static_assert(sizeof(W_Collectable_C_ExecuteUbergraph_W_Collectable) == 0x000060, "Wrong size on W_Collectable_C_ExecuteUbergraph_W_Collectable");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, EntryPoint) == 0x000000, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, K2Node_ComponentBoundEvent_ButtonID) == 0x000008, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::K2Node_ComponentBoundEvent_ButtonID' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, K2Node_Event_Delay) == 0x000018, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, K2Node_Event_Collapse) == 0x00001C, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x00001D, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, K2Node_Event_IsGamepad) == 0x00001E, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, K2Node_Event_PageName) == 0x000020, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, K2Node_Event_Collectable) == 0x000028, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::K2Node_Event_Collectable' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, K2Node_Event_Delay_1) == 0x000030, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, CallFunc_BackPage_Handled) == 0x000034, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::CallFunc_BackPage_Handled' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, K2Node_CustomEvent_bNewInputType) == 0x000035, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::K2Node_CustomEvent_bNewInputType' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, K2Node_CreateDelegate_OutputDelegate) == 0x000038, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000048, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000050, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_ExecuteUbergraph_W_Collectable, CallFunc_GetCurrentInputType_ReturnValue) == 0x000058, "Member 'W_Collectable_C_ExecuteUbergraph_W_Collectable::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");

// Function W_Collectable.W_Collectable_C.BndEvt__W_Collectable_W_PageHeader_208_K2Node_ComponentBoundEvent_0_OnFooterButtonClicked__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct W_Collectable_C_BndEvt__W_Collectable_W_PageHeader_208_K2Node_ComponentBoundEvent_0_OnFooterButtonClicked__DelegateSignature final 
{
public:
	class FString                                 ButtonID;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Collectable_C_BndEvt__W_Collectable_W_PageHeader_208_K2Node_ComponentBoundEvent_0_OnFooterButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_Collectable_C_BndEvt__W_Collectable_W_PageHeader_208_K2Node_ComponentBoundEvent_0_OnFooterButtonClicked__DelegateSignature");
static_assert(sizeof(W_Collectable_C_BndEvt__W_Collectable_W_PageHeader_208_K2Node_ComponentBoundEvent_0_OnFooterButtonClicked__DelegateSignature) == 0x000010, "Wrong size on W_Collectable_C_BndEvt__W_Collectable_W_PageHeader_208_K2Node_ComponentBoundEvent_0_OnFooterButtonClicked__DelegateSignature");
static_assert(offsetof(W_Collectable_C_BndEvt__W_Collectable_W_PageHeader_208_K2Node_ComponentBoundEvent_0_OnFooterButtonClicked__DelegateSignature, ButtonID) == 0x000000, "Member 'W_Collectable_C_BndEvt__W_Collectable_W_PageHeader_208_K2Node_ComponentBoundEvent_0_OnFooterButtonClicked__DelegateSignature::ButtonID' has a wrong offset!");

// Function W_Collectable.W_Collectable_C.InputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct W_Collectable_C_InputMethodChanged final 
{
public:
	ECommonInputType                              bNewInputType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Collectable_C_InputMethodChanged) == 0x000001, "Wrong alignment on W_Collectable_C_InputMethodChanged");
static_assert(sizeof(W_Collectable_C_InputMethodChanged) == 0x000001, "Wrong size on W_Collectable_C_InputMethodChanged");
static_assert(offsetof(W_Collectable_C_InputMethodChanged, bNewInputType) == 0x000000, "Member 'W_Collectable_C_InputMethodChanged::bNewInputType' has a wrong offset!");

// Function W_Collectable.W_Collectable_C.SetItem
// 0x0008 (0x0008 - 0x0000)
struct W_Collectable_C_SetItem final 
{
public:
	class ACollectable*                           Collectable;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Collectable_C_SetItem) == 0x000008, "Wrong alignment on W_Collectable_C_SetItem");
static_assert(sizeof(W_Collectable_C_SetItem) == 0x000008, "Wrong size on W_Collectable_C_SetItem");
static_assert(offsetof(W_Collectable_C_SetItem, Collectable) == 0x000000, "Member 'W_Collectable_C_SetItem::Collectable' has a wrong offset!");

// Function W_Collectable.W_Collectable_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_Collectable_C_ChangePage final 
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Collectable_C_ChangePage) == 0x000004, "Wrong alignment on W_Collectable_C_ChangePage");
static_assert(sizeof(W_Collectable_C_ChangePage) == 0x000008, "Wrong size on W_Collectable_C_ChangePage");
static_assert(offsetof(W_Collectable_C_ChangePage, PageName) == 0x000000, "Member 'W_Collectable_C_ChangePage::PageName' has a wrong offset!");

// Function W_Collectable.W_Collectable_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_Collectable_C_SetInputMode final 
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Collectable_C_SetInputMode) == 0x000001, "Wrong alignment on W_Collectable_C_SetInputMode");
static_assert(sizeof(W_Collectable_C_SetInputMode) == 0x000001, "Wrong size on W_Collectable_C_SetInputMode");
static_assert(offsetof(W_Collectable_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_Collectable_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_Collectable.W_Collectable_C.Hide
// 0x0008 (0x0008 - 0x0000)
struct W_Collectable_C_Hide final 
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Collectable_C_Hide) == 0x000004, "Wrong alignment on W_Collectable_C_Hide");
static_assert(sizeof(W_Collectable_C_Hide) == 0x000008, "Wrong size on W_Collectable_C_Hide");
static_assert(offsetof(W_Collectable_C_Hide, Delay) == 0x000000, "Member 'W_Collectable_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_Hide, Collapse) == 0x000004, "Member 'W_Collectable_C_Hide::Collapse' has a wrong offset!");

// Function W_Collectable.W_Collectable_C.Reveal
// 0x0004 (0x0004 - 0x0000)
struct W_Collectable_C_Reveal final 
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Collectable_C_Reveal) == 0x000004, "Wrong alignment on W_Collectable_C_Reveal");
static_assert(sizeof(W_Collectable_C_Reveal) == 0x000004, "Wrong size on W_Collectable_C_Reveal");
static_assert(offsetof(W_Collectable_C_Reveal, Delay) == 0x000000, "Member 'W_Collectable_C_Reveal::Delay' has a wrong offset!");

// Function W_Collectable.W_Collectable_C.OnMouseButtonDown_0
// 0x0218 (0x0218 - 0x0000)
struct W_Collectable_C_OnMouseButtonDown_0 final 
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0160(0x00B8)()
};
static_assert(alignof(W_Collectable_C_OnMouseButtonDown_0) == 0x000008, "Wrong alignment on W_Collectable_C_OnMouseButtonDown_0");
static_assert(sizeof(W_Collectable_C_OnMouseButtonDown_0) == 0x000218, "Wrong size on W_Collectable_C_OnMouseButtonDown_0");
static_assert(offsetof(W_Collectable_C_OnMouseButtonDown_0, MyGeometry) == 0x000000, "Member 'W_Collectable_C_OnMouseButtonDown_0::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_OnMouseButtonDown_0, MouseEvent) == 0x000038, "Member 'W_Collectable_C_OnMouseButtonDown_0::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_OnMouseButtonDown_0, ReturnValue) == 0x0000A8, "Member 'W_Collectable_C_OnMouseButtonDown_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_OnMouseButtonDown_0, CallFunc_Unhandled_ReturnValue) == 0x000160, "Member 'W_Collectable_C_OnMouseButtonDown_0::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function W_Collectable.W_Collectable_C.BP_OnHandleBackAction
// 0x0002 (0x0002 - 0x0000)
struct W_Collectable_C_BP_OnHandleBackAction final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BackPage_Handled;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Collectable_C_BP_OnHandleBackAction) == 0x000001, "Wrong alignment on W_Collectable_C_BP_OnHandleBackAction");
static_assert(sizeof(W_Collectable_C_BP_OnHandleBackAction) == 0x000002, "Wrong size on W_Collectable_C_BP_OnHandleBackAction");
static_assert(offsetof(W_Collectable_C_BP_OnHandleBackAction, ReturnValue) == 0x000000, "Member 'W_Collectable_C_BP_OnHandleBackAction::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Collectable_C_BP_OnHandleBackAction, CallFunc_BackPage_Handled) == 0x000001, "Member 'W_Collectable_C_BP_OnHandleBackAction::CallFunc_BackPage_Handled' has a wrong offset!");

// Function W_Collectable.W_Collectable_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_Collectable_C_BackPage final 
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Collectable_C_BackPage) == 0x000001, "Wrong alignment on W_Collectable_C_BackPage");
static_assert(sizeof(W_Collectable_C_BackPage) == 0x000001, "Wrong size on W_Collectable_C_BackPage");
static_assert(offsetof(W_Collectable_C_BackPage, Handled) == 0x000000, "Member 'W_Collectable_C_BackPage::Handled' has a wrong offset!");

// Function W_Collectable.W_Collectable_C.GetFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct W_Collectable_C_GetFocusTarget final 
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Collectable_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_Collectable_C_GetFocusTarget");
static_assert(sizeof(W_Collectable_C_GetFocusTarget) == 0x000008, "Wrong size on W_Collectable_C_GetFocusTarget");
static_assert(offsetof(W_Collectable_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_Collectable_C_GetFocusTarget::Focus' has a wrong offset!");

}

