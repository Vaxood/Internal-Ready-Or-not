#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Briefing_Audio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Briefing_Audio.W_Briefing_Audio_C
// 0x0160 (0x03C0 - 0x0260)
class UW_Briefing_Audio_C final  : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimHide;                                          // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UW_AudioPlayer_C*                       AudioControl;                                      // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Briefing_TimelineEvents_C*           Events;                                            // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Header_C*                            H_Audio;                                           // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Header_C*                            H_Audio_1;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Briefing_Timeline_TrackWave_Simple_C* TrackWave;                                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Briefing_Transcript_C*               Transcript;                                        // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_PlayTime;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_PlayTime_1;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_AudioPlayer_C*                       W_Briefing_AudioControls;                          // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Briefing_TImeline_C*                 W_Briefing_TImeline;                               // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_HotkeyBar_Entry_C*                   W_HotkeyBar_Entry;                                 // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDataTable*                             BriefingData;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MissionName;                                       // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundWave*                             AudioAsset;                                        // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DesignTime;                                        // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3558[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        AudioComponent;                                    // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoopAudio;                                         // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Rewinding;                                         // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Paused;                                            // 0x02F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3559[0x1];                                     // 0x02F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AudioDuration;                                     // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AudioLoopDelay;                                    // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AudioCurrentTime;                                  // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkipTimeIncrement;                                 // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volume;                                            // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentProgress;                                   // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_355A[0x4];                                     // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMissionAudio                          DebugMissionAudio;                                 // 0x0310(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FTimelineEvent>                 DebugTimelineEvents;                               // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PlaybackOffset;                                    // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_355B[0x4];                                     // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimerDurationText;                                 // 0x0388(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FTimelineEvent>                 TimelineEvents;                                    // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ReturnTime;                                        // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Snippet;                                           // 0x03B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_355C[0x3];                                     // 0x03B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SnippetResumeDelay;                                // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AudioStartDelay;                                   // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_W_Briefing_Audio(int32 EntryPoint, float K2Node_ComponentBoundEvent_ClipStartTime, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, struct FMissionAudio& K2Node_CustomEvent_Audio, TArray<struct FTimelineEvent>& K2Node_CustomEvent_TimelineEvents, float CallFunc_Subtract_FloatFloat_ReturnValue_1, float CallFunc_SelectFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, const struct FGeometry& K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool K2Node_Event_IsDesignTime, float K2Node_ComponentBoundEvent_EventID, float K2Node_ComponentBoundEvent_EventAudioStart, float K2Node_ComponentBoundEvent_EventAudioDuration, float CallFunc_Divide_FloatFloat_ReturnValue);
	void Destruct();
	void BndEvt__W_Briefing_AudioControls_K2Node_ComponentBoundEvent_4_Rewind__DelegateSignature();
	void BndEvt__Events_K2Node_ComponentBoundEvent_15_OnEventClicked__DelegateSignature(float EventAudioStart, float EventAudioDuration);
	void BndEvt__W_Briefing_AudioControls_K2Node_ComponentBoundEvent_5_FastForward__DelegateSignature();
	void BndEvt__W_Briefing_Timeline_TrackWave_Simple_K2Node_ComponentBoundEvent_13_TimelineEventFired__DelegateSignature(float EventId);
	void PreConstruct(bool IsDesignTime);
	void BndEvt__W_Briefing_AudioControls_1_K2Node_ComponentBoundEvent_12_FastForward__DelegateSignature();
	void BndEvt__W_Briefing_AudioControls_1_K2Node_ComponentBoundEvent_11_Loop__DelegateSignature();
	void BndEvt__W_Briefing_AudioControls_1_K2Node_ComponentBoundEvent_10_Restart__DelegateSignature();
	void BndEvt__W_Briefing_AudioControls_1_K2Node_ComponentBoundEvent_9_Rewind__DelegateSignature();
	void BndEvt__W_Briefing_AudioControls_1_K2Node_ComponentBoundEvent_8_Stop__DelegateSignature();
	void BndEvt__W_Briefing_AudioControls_1_K2Node_ComponentBoundEvent_3_Play__DelegateSignature();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Initialize(struct FMissionAudio& Audio, TArray<struct FTimelineEvent>& Param_TimelineEvents);
	void BndEvt__W_Briefing_Transcript_K2Node_ComponentBoundEvent_7_TranscriptClicked__DelegateSignature(float ClipStartTime);
	void BndEvt__W_Briefing_AudioControls_K2Node_ComponentBoundEvent_0_Play__DelegateSignature();
	void BndEvt__W_Briefing_AudioControls_K2Node_ComponentBoundEvent_6_Restart__DelegateSignature();
	void BndEvt__W_Briefing_AudioControls_K2Node_ComponentBoundEvent_1_Stop__DelegateSignature();
	void BndEvt__W_Briefing_AudioControls_K2Node_ComponentBoundEvent_2_Loop__DelegateSignature();
	void OnAudioFinished();
	void Play(float StartTime, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_IsPlaying_ReturnValue);
	void GetTimerText(float Time__sec_, class FText* TimerText, const struct FTimespan& CallFunc_FromSeconds_ReturnValue, int32 CallFunc_BreakTimespan_Days, int32 CallFunc_BreakTimespan_Hours, int32 CallFunc_BreakTimespan_Minutes, int32 CallFunc_BreakTimespan_Seconds, int32 CallFunc_BreakTimespan_Milliseconds, class FText CallFunc_Conv_IntToText_ReturnValue, class FText CallFunc_Conv_IntToText_ReturnValue_1, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_1, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, class FText CallFunc_Format_ReturnValue);
	void Stop(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlaying_ReturnValue);
	void Restart();
	void SetLoop(bool CallFunc_Not_PreBool_ReturnValue);
	void SetAudioPlayProgress(class USoundWave* PlayingSoundWave, float PlaybackPercent, bool CallFunc_IsPlaying_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);
	void GetEventEntries(bool ForceUpdate, TMap<float, struct FTimelineEvent>* EventEntries1, bool Initialized, const TMap<float, struct FTimelineEvent>& EventEntries, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const struct FTimelineEvent& CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
	void Set_Current_Audio_Text(float CurrentTime, class FText CallFunc_GetTimerText_TimerText, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_1, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, class FText CallFunc_Format_ReturnValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Briefing_Audio_C">();
	}
	static class UW_Briefing_Audio_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Briefing_Audio_C>();
	}
};
static_assert(alignof(UW_Briefing_Audio_C) == 0x000008, "Wrong alignment on UW_Briefing_Audio_C");
static_assert(sizeof(UW_Briefing_Audio_C) == 0x0003C0, "Wrong size on UW_Briefing_Audio_C");
static_assert(offsetof(UW_Briefing_Audio_C, UberGraphFrame) == 0x000260, "Member 'UW_Briefing_Audio_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, AnimHide) == 0x000268, "Member 'UW_Briefing_Audio_C::AnimHide' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, AudioControl) == 0x000270, "Member 'UW_Briefing_Audio_C::AudioControl' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, Events) == 0x000278, "Member 'UW_Briefing_Audio_C::Events' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, H_Audio) == 0x000280, "Member 'UW_Briefing_Audio_C::H_Audio' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, H_Audio_1) == 0x000288, "Member 'UW_Briefing_Audio_C::H_Audio_1' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, TrackWave) == 0x000290, "Member 'UW_Briefing_Audio_C::TrackWave' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, Transcript) == 0x000298, "Member 'UW_Briefing_Audio_C::Transcript' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, Txt_PlayTime) == 0x0002A0, "Member 'UW_Briefing_Audio_C::Txt_PlayTime' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, Txt_PlayTime_1) == 0x0002A8, "Member 'UW_Briefing_Audio_C::Txt_PlayTime_1' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, W_Briefing_AudioControls) == 0x0002B0, "Member 'UW_Briefing_Audio_C::W_Briefing_AudioControls' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, W_Briefing_TImeline) == 0x0002B8, "Member 'UW_Briefing_Audio_C::W_Briefing_TImeline' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, W_HotkeyBar_Entry) == 0x0002C0, "Member 'UW_Briefing_Audio_C::W_HotkeyBar_Entry' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, BriefingData) == 0x0002C8, "Member 'UW_Briefing_Audio_C::BriefingData' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, MissionName) == 0x0002D0, "Member 'UW_Briefing_Audio_C::MissionName' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, AudioAsset) == 0x0002D8, "Member 'UW_Briefing_Audio_C::AudioAsset' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, DesignTime) == 0x0002E0, "Member 'UW_Briefing_Audio_C::DesignTime' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, AudioComponent) == 0x0002E8, "Member 'UW_Briefing_Audio_C::AudioComponent' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, LoopAudio) == 0x0002F0, "Member 'UW_Briefing_Audio_C::LoopAudio' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, Rewinding) == 0x0002F1, "Member 'UW_Briefing_Audio_C::Rewinding' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, Paused) == 0x0002F2, "Member 'UW_Briefing_Audio_C::Paused' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, AudioDuration) == 0x0002F4, "Member 'UW_Briefing_Audio_C::AudioDuration' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, AudioLoopDelay) == 0x0002F8, "Member 'UW_Briefing_Audio_C::AudioLoopDelay' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, AudioCurrentTime) == 0x0002FC, "Member 'UW_Briefing_Audio_C::AudioCurrentTime' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, SkipTimeIncrement) == 0x000300, "Member 'UW_Briefing_Audio_C::SkipTimeIncrement' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, Volume) == 0x000304, "Member 'UW_Briefing_Audio_C::Volume' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, CurrentProgress) == 0x000308, "Member 'UW_Briefing_Audio_C::CurrentProgress' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, DebugMissionAudio) == 0x000310, "Member 'UW_Briefing_Audio_C::DebugMissionAudio' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, DebugTimelineEvents) == 0x000370, "Member 'UW_Briefing_Audio_C::DebugTimelineEvents' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, PlaybackOffset) == 0x000380, "Member 'UW_Briefing_Audio_C::PlaybackOffset' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, TimerDurationText) == 0x000388, "Member 'UW_Briefing_Audio_C::TimerDurationText' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, TimelineEvents) == 0x0003A0, "Member 'UW_Briefing_Audio_C::TimelineEvents' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, ReturnTime) == 0x0003B0, "Member 'UW_Briefing_Audio_C::ReturnTime' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, Snippet) == 0x0003B4, "Member 'UW_Briefing_Audio_C::Snippet' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, SnippetResumeDelay) == 0x0003B8, "Member 'UW_Briefing_Audio_C::SnippetResumeDelay' has a wrong offset!");
static_assert(offsetof(UW_Briefing_Audio_C, AudioStartDelay) == 0x0003BC, "Member 'UW_Briefing_Audio_C::AudioStartDelay' has a wrong offset!");

}

