#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PageWrapper

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CommonInput_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_PageWrapper.W_PageWrapper_C
// 0x0228 (0x0548 - 0x0320)
class UW_PageWrapper_C final  : public UPageWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimRefresh;                                       // 0x0328(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimReveal;                                        // 0x0330(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UAspectRatioConstraintBox*              AspectBox;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBackgroundBlur*                        BackgroundBlur_81;                                 // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_60;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_0;                                   // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_AnimatedHeaderFillLine;                        // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_FooterFade;                                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_HeaderFillLine;                                // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_HeaderFillLine_Unconstrained;                  // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_headerLine;                                    // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_HeaderLine_Refresh;                            // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             PageContent;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PageHeader_Carousel_C*               PageHeaderNav;                                     // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_HeaderText;                                    // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              Txt_PageTagline;                                   // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Vignette;                                          // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_ScreenFooter_C*                      W_ScreenFooter;                                    // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Tagline;                                           // 0x03C0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   HeaderText;                                        // 0x03D8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          DesignTime;                                        // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A02[0x7];                                     // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnNavOptionSelected;                               // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class FName, class FText>                NavOptionMap;                                      // 0x0408(0x0050)(Edit, BlueprintVisible)
	bool                                          NavIgnoreGamepad;                                  // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Revealed;                                          // 0x0459(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseGamepad;                                       // 0x045A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowVignette;                                     // 0x045B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_1A03[0x4];                                     // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CurrentNavOptions;                                 // 0x0460(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bUseFixedAspect;                                   // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A04[0x3];                                     // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedAspectRatio;                                  // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPreviewFixedAspect;                               // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A05[0x3];                                     // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviewAspectRatio;                                // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FScreenFooterEntry>             FooterEntriesArray;                                // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LineMax;                                           // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A06[0x4];                                     // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynMatLine;                                        // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnFooterButtonClicked;                             // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector2D                              ViewportSize;                                      // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBackgroundBlur;                                   // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bApplyAlphaToBlur;                                 // 0x04B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_1A07[0x2];                                     // 0x04BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlurStrength;                                      // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VignetteColor;                                     // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         VignetteIntensity;                                 // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A08[0x4];                                     // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynMatVignette;                                    // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LineMarginWidth;                                   // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SelectedNavOption;                                 // 0x04E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A09[0x4];                                     // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CurrentFocus;                                      // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, struct FScreenFooterEntry> FooterEntries;                                     // 0x04F8(0x0050)(Edit, BlueprintVisible)

public:
	void OnNavOptionSelected__DelegateSignature(class FName OptionNameID);
	void OnFooterButtonClicked__DelegateSignature(const class FString& ButtonID);
	void ExecuteUbergraph_W_PageWrapper(int32 EntryPoint, TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate, float K2Node_Event_Delay_1, bool K2Node_Event_Collapse, bool K2Node_Event_IsGamepad, class FName K2Node_Event_PageName, bool K2Node_Event_IsDesignTime, const struct FGeometry& K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, class FName K2Node_ComponentBoundEvent_OptionID, float K2Node_Event_Delay, class UCommonInputSubsystem* CallFunc_GetLocalPlayerSubsystem_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, ECommonInputType CallFunc_GetCurrentInputType_ReturnValue, ECommonInputType K2Node_CustomEvent_bNewInputType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, class UUMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, class UUMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue_1, class UW_ScreenFooterEntry_C* K2Node_ComponentBoundEvent_FooterEntry, const struct FVector2D& CallFunc_GetViewportSize_ReturnValue, const class FString& CallFunc_GetButtonID_ButtonID, bool CallFunc_NotEqual_Vector2DVector2D_ReturnValue, float CallFunc_GetLineWidthByConstraint_ReturnValue);
	void Animating();
	void Destruct();
	void OnInitialized();
	void BndEvt__W_PageHeader_W_ScreenFooter_K2Node_ComponentBoundEvent_3_OnFooterEntryClicked__DelegateSignature(class UW_ScreenFooterEntry_C* FooterEntry);
	void BndEvt__W_PageHeader_W_ScreenFooter_K2Node_ComponentBoundEvent_2_OnFooterEntriesUpdated__DelegateSignature();
	void InputMethodChanged(ECommonInputType bNewInputType);
	void Reveal(float Delay);
	void BndEvt__W_PageHeader_W_PageHeader_Carousel_K2Node_ComponentBoundEvent_0_OnOptionSelected__DelegateSignature(class FName OptionID);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void ChangePage(class FName PageName);
	void SetInputMode(bool IsGamepad);
	void Hide(float Delay, bool Collapse);
	void UpdateHeader(class FText NewHeader, class FText NewTagline, bool CallFunc_TextIsNotEmpty_NotEmpty, bool CallFunc_TextIsNotEmpty_NotEmpty_1);
	void SetHeaderNavOptions(const TMap<class FName, class FText>& OptionMap, TArray<class FName>& CallFunc_Map_Keys_Keys, bool CallFunc_Array_Identical_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, TArray<class FName>& CallFunc_Map_Keys_Keys_1, bool CallFunc_Array_IsValidIndex_ReturnValue);
	void AddHeaderNavOption(class FName OptionNameID, class FText OptionLabelText, bool DefaultSelection);
	void SetHeaderNavSelection(class FName OptionNameID);
	void DisableHeaderNavOption(class FName OptionNameID);
	void EnableHeaderNavOption(class FName OptionNameID);
	void RemoveHeaderNavOption(class FName OptionNameID, TArray<class FName>& CallFunc_Map_Keys_Keys, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Map_Remove_ReturnValue);
	void ToggleNavVisibility(bool Visible, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, bool Temp_bool_Variable_1, ESlateVisibility Temp_byte_Variable_2, ESlateVisibility Temp_byte_Variable_3, ESlateVisibility K2Node_Select_Default, ESlateVisibility K2Node_Select_Default_1);
	void UpdateCurrentNavOptions(TArray<class FName>& CallFunc_Map_Keys_Keys);
	void SetAspectConstraints();
	void InitializeFooter();
	void ShowFooter();
	void HideFooter();
	void SetFooterEntries(const TMap<class FString, struct FScreenFooterEntry>& Param_FooterEntries, TArray<class FString>& CallFunc_Map_Keys_Keys, bool CallFunc_Array_IsValidIndex_ReturnValue);
	void AddFooterEntry(int32 InsertAtIndex, class FString& EntryID, const struct FScreenFooterEntry& ScreenFooterEntry);
	void UpdateBackgroundBlur();
	void InitializeMaterials(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, class UMaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, class UMaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue_1);
	void InitializeNavigation();
	void InitializeHeader();
	void ClearHeadline();
	void ClearTagline();
	void UpdateVignette(bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, bool CallFunc_IsVisible_ReturnValue, ESlateVisibility K2Node_Select_Default);
	float GetLineWidthByConstraint(float RelativeScreenLength, float OpenSpace, bool CallFunc_IsAspectConstrained_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X_1, float CallFunc_BreakVector2D_Y_1, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X_2, float CallFunc_BreakVector2D_Y_2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue_1, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue_1, float CallFunc_SelectFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue_2, float CallFunc_Add_FloatFloat_ReturnValue_1);
	bool IsAspectConstrained(float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);
	void HideFooterEntryByID(const class FString& ID);
	void HideFooterEntryByIndex(int32 Param_Index);
	void UnhideFooterEntryByID(const class FString& ID);
	void UnhideFooterEntryByIndex(int32 Param_Index);
	void GetCurrentNavSelection(class FName* Param_SelectedNavOption);
	void SetFooterFocusByID(const class FString& ID, class UWidget* CallFunc_SetFocusByID_FocusedEntryButton, bool CallFunc_IsValid_ReturnValue);
	void HideRedLine();
	void BackPage(bool* Handled);

	class UWidget* BP_GetDesiredFocusTarget(class UWidget* CallFunc_GetFocusTarget_Focus) const;
	void GetFocusTarget(class UWidget** Focus, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_PageWrapper_C">();
	}
	static class UW_PageWrapper_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_PageWrapper_C>();
	}
};
static_assert(alignof(UW_PageWrapper_C) == 0x000008, "Wrong alignment on UW_PageWrapper_C");
static_assert(sizeof(UW_PageWrapper_C) == 0x000548, "Wrong size on UW_PageWrapper_C");
static_assert(offsetof(UW_PageWrapper_C, UberGraphFrame) == 0x000320, "Member 'UW_PageWrapper_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, AnimRefresh) == 0x000328, "Member 'UW_PageWrapper_C::AnimRefresh' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, AnimReveal) == 0x000330, "Member 'UW_PageWrapper_C::AnimReveal' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, AspectBox) == 0x000338, "Member 'UW_PageWrapper_C::AspectBox' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, BackgroundBlur_81) == 0x000340, "Member 'UW_PageWrapper_C::BackgroundBlur_81' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, CanvasPanel_0) == 0x000348, "Member 'UW_PageWrapper_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, CanvasPanel_60) == 0x000350, "Member 'UW_PageWrapper_C::CanvasPanel_60' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, HorizontalBox_0) == 0x000358, "Member 'UW_PageWrapper_C::HorizontalBox_0' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, Img_AnimatedHeaderFillLine) == 0x000360, "Member 'UW_PageWrapper_C::Img_AnimatedHeaderFillLine' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, Img_FooterFade) == 0x000368, "Member 'UW_PageWrapper_C::Img_FooterFade' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, Img_HeaderFillLine) == 0x000370, "Member 'UW_PageWrapper_C::Img_HeaderFillLine' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, Img_HeaderFillLine_Unconstrained) == 0x000378, "Member 'UW_PageWrapper_C::Img_HeaderFillLine_Unconstrained' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, Img_headerLine) == 0x000380, "Member 'UW_PageWrapper_C::Img_headerLine' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, Img_HeaderLine_Refresh) == 0x000388, "Member 'UW_PageWrapper_C::Img_HeaderLine_Refresh' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, PageContent) == 0x000390, "Member 'UW_PageWrapper_C::PageContent' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, PageHeaderNav) == 0x000398, "Member 'UW_PageWrapper_C::PageHeaderNav' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, Txt_HeaderText) == 0x0003A0, "Member 'UW_PageWrapper_C::Txt_HeaderText' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, Txt_PageTagline) == 0x0003A8, "Member 'UW_PageWrapper_C::Txt_PageTagline' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, Vignette) == 0x0003B0, "Member 'UW_PageWrapper_C::Vignette' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, W_ScreenFooter) == 0x0003B8, "Member 'UW_PageWrapper_C::W_ScreenFooter' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, Tagline) == 0x0003C0, "Member 'UW_PageWrapper_C::Tagline' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, HeaderText) == 0x0003D8, "Member 'UW_PageWrapper_C::HeaderText' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, DesignTime) == 0x0003F0, "Member 'UW_PageWrapper_C::DesignTime' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, OnNavOptionSelected) == 0x0003F8, "Member 'UW_PageWrapper_C::OnNavOptionSelected' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, NavOptionMap) == 0x000408, "Member 'UW_PageWrapper_C::NavOptionMap' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, NavIgnoreGamepad) == 0x000458, "Member 'UW_PageWrapper_C::NavIgnoreGamepad' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, Revealed) == 0x000459, "Member 'UW_PageWrapper_C::Revealed' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, bUseGamepad) == 0x00045A, "Member 'UW_PageWrapper_C::bUseGamepad' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, bShowVignette) == 0x00045B, "Member 'UW_PageWrapper_C::bShowVignette' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, CurrentNavOptions) == 0x000460, "Member 'UW_PageWrapper_C::CurrentNavOptions' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, bUseFixedAspect) == 0x000470, "Member 'UW_PageWrapper_C::bUseFixedAspect' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, FixedAspectRatio) == 0x000474, "Member 'UW_PageWrapper_C::FixedAspectRatio' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, bPreviewFixedAspect) == 0x000478, "Member 'UW_PageWrapper_C::bPreviewFixedAspect' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, PreviewAspectRatio) == 0x00047C, "Member 'UW_PageWrapper_C::PreviewAspectRatio' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, FooterEntriesArray) == 0x000480, "Member 'UW_PageWrapper_C::FooterEntriesArray' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, LineMax) == 0x000490, "Member 'UW_PageWrapper_C::LineMax' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, DynMatLine) == 0x000498, "Member 'UW_PageWrapper_C::DynMatLine' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, OnFooterButtonClicked) == 0x0004A0, "Member 'UW_PageWrapper_C::OnFooterButtonClicked' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, ViewportSize) == 0x0004B0, "Member 'UW_PageWrapper_C::ViewportSize' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, bBackgroundBlur) == 0x0004B8, "Member 'UW_PageWrapper_C::bBackgroundBlur' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, bApplyAlphaToBlur) == 0x0004B9, "Member 'UW_PageWrapper_C::bApplyAlphaToBlur' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, BlurStrength) == 0x0004BC, "Member 'UW_PageWrapper_C::BlurStrength' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, VignetteColor) == 0x0004C0, "Member 'UW_PageWrapper_C::VignetteColor' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, VignetteIntensity) == 0x0004D0, "Member 'UW_PageWrapper_C::VignetteIntensity' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, DynMatVignette) == 0x0004D8, "Member 'UW_PageWrapper_C::DynMatVignette' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, LineMarginWidth) == 0x0004E0, "Member 'UW_PageWrapper_C::LineMarginWidth' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, SelectedNavOption) == 0x0004E4, "Member 'UW_PageWrapper_C::SelectedNavOption' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, CurrentFocus) == 0x0004F0, "Member 'UW_PageWrapper_C::CurrentFocus' has a wrong offset!");
static_assert(offsetof(UW_PageWrapper_C, FooterEntries) == 0x0004F8, "Member 'UW_PageWrapper_C::FooterEntries' has a wrong offset!");

}

