#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_AudioPlayer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_Briefing_Audio_PlayStates_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_AudioPlayer.W_AudioPlayer_C
// 0x0180 (0x03E0 - 0x0260)
class UW_AudioPlayer_C final  : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_AudioPlayer_Button_C*                btn_FastForward;                                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_AudioPlayer_Button_C*                btn_Loop;                                          // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_AudioPlayer_Button_C*                btn_Play;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_AudioPlayer_Button_C*                btn_Restart;                                       // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_AudioPlayer_Button_C*                btn_Rewind;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_AudioPlayer_Button_C*                btn_Stop;                                          // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Controls;                                       // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Header_C*                            Header;                                            // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Txt_PlayTime;                                      // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_Player;                                         // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnPlay;                                            // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnPause;                                           // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnStop;                                            // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnRewind;                                          // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnRestart;                                         // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnLoop;                                            // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnFastForward;                                     // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UW_AudioPlayer_Button_C*                CurrentActiveButton;                               // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Briefing_Audio_PlayStates                   PlayState;                                         // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRewinding;                                        // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFastForward;                                      // 0x0332(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3523[0x5];                                     // 0x0333(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        Buttons;                                           // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          LastButton;                                        // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPaused;                                           // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3524[0x6];                                     // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    FMODComponent;                                     // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStopped;                                          // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3525[0x7];                                     // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TimerDurationText;                                 // 0x0360(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AudioDuration;                                     // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLoop;                                             // 0x037C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3526[0x3];                                     // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimelinePosition;                                  // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AudioLoopDelay;                                    // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   HeaderText;                                        // 0x0388(0x0018)(Edit, BlueprintVisible)
	int32                                         SkipTimeIncrement;                                 // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bScrubbing;                                        // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3527[0x3];                                     // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             FMODEvent;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     FMODEventInstance;                                 // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUsingEvent;                                       // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDesignTime;                                       // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3528[0x2];                                     // 0x03BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoStartDelay;                                    // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bExpandable;                                       // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_3529[0x3];                                     // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Volume;                                            // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnAudioCompleted;                                  // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bUseDarkTheme;                                     // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void OnPlay__DelegateSignature();
	void OnStop__DelegateSignature();
	void OnRewind__DelegateSignature();
	void OnRestart__DelegateSignature();
	void OnLoop__DelegateSignature();
	void OnFastForward__DelegateSignature();
	void OnPause__DelegateSignature();
	void OnAudioCompleted__DelegateSignature();
	void ExecuteUbergraph_W_AudioPlayer(int32 EntryPoint, int32 Temp_int_Array_Index_Variable, bool K2Node_Event_IsAwake, class UW_AudioPlayer_C* K2Node_Event_PlayerWidget, bool K2Node_Event_PlayerVisible, float K2Node_Event_Delay_1, float K2Node_Event_Delay, bool K2Node_Event_Collapse, bool K2Node_Event_IsGamepad, class FName K2Node_Event_PageName, bool K2Node_Event_IsDesignTime, const struct FGeometry& K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, int32 Temp_int_Loop_Counter_Variable, class UCommonButtonBase* K2Node_ComponentBoundEvent_Button_7, int32 CallFunc_Add_IntInt_ReturnValue, class UCommonButtonBase* K2Node_ComponentBoundEvent_Button_6, class UCommonButtonBase* K2Node_ComponentBoundEvent_Button_5, class UCommonButtonBase* K2Node_ComponentBoundEvent_Button_4, class UCommonButtonBase* K2Node_ComponentBoundEvent_Button_3, class UCommonButtonBase* K2Node_ComponentBoundEvent_Button_2, class UCommonButtonBase* K2Node_ComponentBoundEvent_Button_1, class UCommonButtonBase* K2Node_ComponentBoundEvent_Button, int32 CallFunc_GetTimelinePosition_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, class UFMODAudioComponent* K2Node_CustomEvent_FMODComponent, bool K2Node_CustomEvent_AutoPlay, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_IsPlaying_ReturnValue, bool K2Node_Event_UseDarkTheme, const struct FSlateColor& CallFunc_GetTextThemeColor_SlateColor, TArray<class UW_AudioPlayer_Button_C*>& CallFunc_WidgetGetChildrenOfClass_ChildWidgets, int32 CallFunc_Array_Length_ReturnValue, class UW_AudioPlayer_Button_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);
	void SetVisualTheme(bool UseDarkTheme);
	void AutoPlay();
	void Destruct();
	void InitializeFMODComponent(class UFMODAudioComponent* Param_FMODComponent, bool AutoPlay);
	void AudioEnd();
	void BndEvt__W_Briefing_AudioControls_btn_FastForward_K2Node_ComponentBoundEvent_19_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__W_Briefing_AudioControls_btn_FastForward_K2Node_ComponentBoundEvent_18_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__W_Briefing_AudioControls_btn_Rewind_K2Node_ComponentBoundEvent_17_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__W_Briefing_AudioControls_btn_Rewind_K2Node_ComponentBoundEvent_16_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__W_Briefing_AudioControls_btn_Loop_K2Node_ComponentBoundEvent_14_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__W_Briefing_AudioControls_btn_Restart_K2Node_ComponentBoundEvent_13_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__W_Briefing_AudioControls_btn_Stop_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__W_Briefing_AudioControls_btn_Play_K2Node_ComponentBoundEvent_4_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void ChangePage(class FName PageName);
	void SetInputMode(bool IsGamepad);
	void Hide(float Delay, bool Param_Collapse);
	void Reveal(float Delay);
	void AudioPlayerVisible(class UW_AudioPlayer_C* PlayerWidget, bool PlayerVisible);
	void SetTabletState(bool IsAwake);
	void SetState(E_Briefing_Audio_PlayStates AudioPlayState, bool K2Node_SwitchEnum_CmpSuccess);
	void SetLooping(bool IsLooping);
	void Play(bool CallFunc_IsValid_ReturnValue, class FText CallFunc_Get_Timer_Text_TimerText, int32 CallFunc_GetLength_ReturnValue, bool CallFunc_IsPlaying_ReturnValue, int32 CallFunc_GetLength_ReturnValue_1, class FText CallFunc_Get_Timer_Text_TimerText_1);
	void Get_Timer_Text(int32 Time, class FText* TimerText, float CallFunc_Conv_IntToFloat_ReturnValue, const struct FTimespan& CallFunc_FromMilliseconds_ReturnValue, int32 CallFunc_BreakTimespan_Days, int32 CallFunc_BreakTimespan_Hours, int32 CallFunc_BreakTimespan_Minutes, int32 CallFunc_BreakTimespan_Seconds, int32 CallFunc_BreakTimespan_Milliseconds, class FText CallFunc_Conv_IntToText_ReturnValue, class FText CallFunc_Conv_IntToText_ReturnValue_1, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_1, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, class FText CallFunc_Format_ReturnValue);
	void Stop(bool CallFunc_IsValid_ReturnValue);
	void ToggleLooping(bool CallFunc_Not_PreBool_ReturnValue);
	void Restart(bool CallFunc_IsValid_ReturnValue);
	void Set_Current_Audio_Text(int32 CurrentTime, class FText CallFunc_Get_Timer_Text_TimerText, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData_1, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, class FText CallFunc_Format_ReturnValue);
	int32 GetScrubbedTime(int32 CallFunc_Subtract_IntInt_ReturnValue, int32 CallFunc_Subtract_IntInt_ReturnValue_1, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_SelectInt_ReturnValue, int32 CallFunc_Clamp_ReturnValue);
	void ScrubTime(bool CallFunc_IsValid_ReturnValue, int32 CallFunc_GetScrubbedTime_ReturnValue);
	void Pause(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlaying_ReturnValue);
	void SetLabelText(class FText LabelText);
	void InitializeWithFMODEvent(class UFMODEvent* Param_FMODEvent, bool bAutoPlay, bool CallFunc_IsValid_ReturnValue, const struct FFMODEventInstance& CallFunc_PlayEvent2D_ReturnValue);
	void SetFMODEvent(class UFMODEvent* NewEvent, bool AutoPlay, bool CallFunc_IsValid_ReturnValue);
	void Expand(bool AutoPlay);
	void Collapse();
	void SetExpandable(bool Expandable, bool StartCollapsed);
	void SetVolume(float Param_Volume, bool CallFunc_IsValid_ReturnValue);
	bool IsPlaying(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlaying_ReturnValue);
	void GetTextThemeColor(struct FSlateColor* SlateColor, bool Temp_bool_Variable, const struct FLinearColor& CallFunc_GetColorByName_LinearColor, const struct FSlateColor& CallFunc_GetColorByName_SlateColor, const struct FLinearColor& CallFunc_GetColorByName_LinearColor_1, const struct FSlateColor& CallFunc_GetColorByName_SlateColor_1, const struct FSlateColor& K2Node_Select_Default);
	void BackPage(bool* Handled);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_AudioPlayer_C">();
	}
	static class UW_AudioPlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_AudioPlayer_C>();
	}
};
static_assert(alignof(UW_AudioPlayer_C) == 0x000008, "Wrong alignment on UW_AudioPlayer_C");
static_assert(sizeof(UW_AudioPlayer_C) == 0x0003E0, "Wrong size on UW_AudioPlayer_C");
static_assert(offsetof(UW_AudioPlayer_C, UberGraphFrame) == 0x000260, "Member 'UW_AudioPlayer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, btn_FastForward) == 0x000268, "Member 'UW_AudioPlayer_C::btn_FastForward' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, btn_Loop) == 0x000270, "Member 'UW_AudioPlayer_C::btn_Loop' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, btn_Play) == 0x000278, "Member 'UW_AudioPlayer_C::btn_Play' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, btn_Restart) == 0x000280, "Member 'UW_AudioPlayer_C::btn_Restart' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, btn_Rewind) == 0x000288, "Member 'UW_AudioPlayer_C::btn_Rewind' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, btn_Stop) == 0x000290, "Member 'UW_AudioPlayer_C::btn_Stop' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, HB_Controls) == 0x000298, "Member 'UW_AudioPlayer_C::HB_Controls' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, Header) == 0x0002A0, "Member 'UW_AudioPlayer_C::Header' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, Txt_PlayTime) == 0x0002A8, "Member 'UW_AudioPlayer_C::Txt_PlayTime' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, VB_Player) == 0x0002B0, "Member 'UW_AudioPlayer_C::VB_Player' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, OnPlay) == 0x0002B8, "Member 'UW_AudioPlayer_C::OnPlay' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, OnPause) == 0x0002C8, "Member 'UW_AudioPlayer_C::OnPause' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, OnStop) == 0x0002D8, "Member 'UW_AudioPlayer_C::OnStop' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, OnRewind) == 0x0002E8, "Member 'UW_AudioPlayer_C::OnRewind' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, OnRestart) == 0x0002F8, "Member 'UW_AudioPlayer_C::OnRestart' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, OnLoop) == 0x000308, "Member 'UW_AudioPlayer_C::OnLoop' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, OnFastForward) == 0x000318, "Member 'UW_AudioPlayer_C::OnFastForward' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, CurrentActiveButton) == 0x000328, "Member 'UW_AudioPlayer_C::CurrentActiveButton' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, PlayState) == 0x000330, "Member 'UW_AudioPlayer_C::PlayState' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, bRewinding) == 0x000331, "Member 'UW_AudioPlayer_C::bRewinding' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, bFastForward) == 0x000332, "Member 'UW_AudioPlayer_C::bFastForward' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, Buttons) == 0x000338, "Member 'UW_AudioPlayer_C::Buttons' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, LastButton) == 0x000348, "Member 'UW_AudioPlayer_C::LastButton' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, bPaused) == 0x000349, "Member 'UW_AudioPlayer_C::bPaused' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, FMODComponent) == 0x000350, "Member 'UW_AudioPlayer_C::FMODComponent' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, bStopped) == 0x000358, "Member 'UW_AudioPlayer_C::bStopped' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, TimerDurationText) == 0x000360, "Member 'UW_AudioPlayer_C::TimerDurationText' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, AudioDuration) == 0x000378, "Member 'UW_AudioPlayer_C::AudioDuration' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, bLoop) == 0x00037C, "Member 'UW_AudioPlayer_C::bLoop' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, TimelinePosition) == 0x000380, "Member 'UW_AudioPlayer_C::TimelinePosition' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, AudioLoopDelay) == 0x000384, "Member 'UW_AudioPlayer_C::AudioLoopDelay' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, HeaderText) == 0x000388, "Member 'UW_AudioPlayer_C::HeaderText' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, SkipTimeIncrement) == 0x0003A0, "Member 'UW_AudioPlayer_C::SkipTimeIncrement' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, bScrubbing) == 0x0003A4, "Member 'UW_AudioPlayer_C::bScrubbing' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, FMODEvent) == 0x0003A8, "Member 'UW_AudioPlayer_C::FMODEvent' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, FMODEventInstance) == 0x0003B0, "Member 'UW_AudioPlayer_C::FMODEventInstance' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, bUsingEvent) == 0x0003B8, "Member 'UW_AudioPlayer_C::bUsingEvent' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, bDesignTime) == 0x0003B9, "Member 'UW_AudioPlayer_C::bDesignTime' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, AutoStartDelay) == 0x0003BC, "Member 'UW_AudioPlayer_C::AutoStartDelay' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, bExpandable) == 0x0003C0, "Member 'UW_AudioPlayer_C::bExpandable' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, Volume) == 0x0003C4, "Member 'UW_AudioPlayer_C::Volume' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, OnAudioCompleted) == 0x0003C8, "Member 'UW_AudioPlayer_C::OnAudioCompleted' has a wrong offset!");
static_assert(offsetof(UW_AudioPlayer_C, bUseDarkTheme) == 0x0003D8, "Member 'UW_AudioPlayer_C::bUseDarkTheme' has a wrong offset!");

}

