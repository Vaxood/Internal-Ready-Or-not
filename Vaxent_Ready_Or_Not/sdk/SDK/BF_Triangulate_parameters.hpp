#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BF_Triangulate

#include "Basic.hpp"

#include "ST_LineSegment_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_VertexID_structs.hpp"


namespace SDK::Params
{

// Function BF_Triangulate.BF_Triangulate_C.PointInTriangle
// 0x00B0 (0x00B0 - 0x0000)
struct BF_Triangulate_C_PointInTriangle final 
{
public:
	struct FVector2D                              P;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              A;                                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              B;                                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              C;                                                 // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreSide;                                        // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_452C[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_452D[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_1;  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_2;  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_3;  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CrossProduct2D_ReturnValue;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CrossProduct2D_ReturnValue_1;             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_4;  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_5;  // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_452E[0x2];                                     // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_6;  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_7;  // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CrossProduct2D_ReturnValue_2;             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CrossProduct2D_ReturnValue_3;             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_8;  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CrossProduct2D_ReturnValue_4;             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_452F[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CrossProduct2D_ReturnValue_5;             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BF_Triangulate_C_PointInTriangle) == 0x000008, "Wrong alignment on BF_Triangulate_C_PointInTriangle");
static_assert(sizeof(BF_Triangulate_C_PointInTriangle) == 0x0000B0, "Wrong size on BF_Triangulate_C_PointInTriangle");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, P) == 0x000000, "Member 'BF_Triangulate_C_PointInTriangle::P' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, A) == 0x000008, "Member 'BF_Triangulate_C_PointInTriangle::A' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, B) == 0x000010, "Member 'BF_Triangulate_C_PointInTriangle::B' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, C) == 0x000018, "Member 'BF_Triangulate_C_PointInTriangle::C' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, IgnoreSide) == 0x000020, "Member 'BF_Triangulate_C_PointInTriangle::IgnoreSide' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, __WorldContext) == 0x000028, "Member 'BF_Triangulate_C_PointInTriangle::__WorldContext' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, ReturnValue) == 0x000030, "Member 'BF_Triangulate_C_PointInTriangle::ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000034, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000038, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Subtract_Vector2DVector2D_ReturnValue_1) == 0x000040, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Subtract_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Subtract_Vector2DVector2D_ReturnValue_2) == 0x000048, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Subtract_Vector2DVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Subtract_Vector2DVector2D_ReturnValue_3) == 0x000050, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Subtract_Vector2DVector2D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_CrossProduct2D_ReturnValue) == 0x000058, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_CrossProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_CrossProduct2D_ReturnValue_1) == 0x00005C, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_CrossProduct2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Subtract_Vector2DVector2D_ReturnValue_4) == 0x000060, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Subtract_Vector2DVector2D_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000068, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Subtract_Vector2DVector2D_ReturnValue_5) == 0x00006C, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Subtract_Vector2DVector2D_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Less_FloatFloat_ReturnValue) == 0x000074, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000075, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Subtract_Vector2DVector2D_ReturnValue_6) == 0x000078, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Subtract_Vector2DVector2D_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Subtract_Vector2DVector2D_ReturnValue_7) == 0x000080, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Subtract_Vector2DVector2D_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_CrossProduct2D_ReturnValue_2) == 0x000088, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_CrossProduct2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_CrossProduct2D_ReturnValue_3) == 0x00008C, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_CrossProduct2D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Subtract_Vector2DVector2D_ReturnValue_8) == 0x000090, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Subtract_Vector2DVector2D_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000098, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_CrossProduct2D_ReturnValue_4) == 0x00009C, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_CrossProduct2D_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0000A0, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0000A1, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_CrossProduct2D_ReturnValue_5) == 0x0000A4, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_CrossProduct2D_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000A8, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x0000AC, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_PointInTriangle, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x0000AD, "Member 'BF_Triangulate_C_PointInTriangle::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function BF_Triangulate.BF_Triangulate_C.LineSegIntersectionTest
// 0x0090 (0x0090 - 0x0000)
struct BF_Triangulate_C_LineSegIntersectionTest final 
{
public:
	struct FVector2D                              A1;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              b1;                                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              A2;                                                // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              b2;                                                // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreSide;                                        // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4530[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4531[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_1;  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_2;  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_3;  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CrossProduct2D_ReturnValue;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CrossProduct2D_ReturnValue_1;             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_4;  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_5;  // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4532[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CrossProduct2D_ReturnValue_2;             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CrossProduct2D_ReturnValue_3;             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4533[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BF_Triangulate_C_LineSegIntersectionTest) == 0x000008, "Wrong alignment on BF_Triangulate_C_LineSegIntersectionTest");
static_assert(sizeof(BF_Triangulate_C_LineSegIntersectionTest) == 0x000090, "Wrong size on BF_Triangulate_C_LineSegIntersectionTest");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, A1) == 0x000000, "Member 'BF_Triangulate_C_LineSegIntersectionTest::A1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, b1) == 0x000008, "Member 'BF_Triangulate_C_LineSegIntersectionTest::b1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, A2) == 0x000010, "Member 'BF_Triangulate_C_LineSegIntersectionTest::A2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, b2) == 0x000018, "Member 'BF_Triangulate_C_LineSegIntersectionTest::b2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, IgnoreSide) == 0x000020, "Member 'BF_Triangulate_C_LineSegIntersectionTest::IgnoreSide' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, __WorldContext) == 0x000028, "Member 'BF_Triangulate_C_LineSegIntersectionTest::__WorldContext' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, Return) == 0x000030, "Member 'BF_Triangulate_C_LineSegIntersectionTest::Return' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000034, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000038, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_Subtract_Vector2DVector2D_ReturnValue_1) == 0x000040, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_Subtract_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_Subtract_Vector2DVector2D_ReturnValue_2) == 0x000048, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_Subtract_Vector2DVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_Subtract_Vector2DVector2D_ReturnValue_3) == 0x000050, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_Subtract_Vector2DVector2D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_CrossProduct2D_ReturnValue) == 0x000058, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_CrossProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_CrossProduct2D_ReturnValue_1) == 0x00005C, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_CrossProduct2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_Subtract_Vector2DVector2D_ReturnValue_4) == 0x000060, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_Subtract_Vector2DVector2D_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000068, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_Subtract_Vector2DVector2D_ReturnValue_5) == 0x00006C, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_Subtract_Vector2DVector2D_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000074, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_CrossProduct2D_ReturnValue_2) == 0x000078, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_CrossProduct2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_CrossProduct2D_ReturnValue_3) == 0x00007C, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_CrossProduct2D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000080, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000084, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000088, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LineSegIntersectionTest, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000089, "Member 'BF_Triangulate_C_LineSegIntersectionTest::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BF_Triangulate.BF_Triangulate_C.FlipPoligon
// 0x00E0 (0x00E0 - 0x0000)
struct BF_Triangulate_C_FlipPoligon final 
{
public:
	TArray<struct FST_VertexID>                   Vert;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FST_VertexID>                   Return;                                            // 0x0018(0x0010)(Parm, OutParm)
	TArray<struct FST_VertexID>                   F;                                                 // 0x0028(0x0010)(Edit, BlueprintVisible)
	float                                         D;                                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_VertexID                           CallFunc_Array_Get_Item;                           // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4534[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_VertexID                           K2Node_MakeStruct_ST_VertexID;                     // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoopArrayIndex_Return;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoopArrayIndex_Return_1;                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_VertexID                           CallFunc_Array_Get_Item_1;                         // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_VertexID                           CallFunc_Array_Get_Item_2;                         // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_1;  // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue_1;                   // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CrossProduct2D_ReturnValue;               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DotProduct2D_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4535[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BF_Triangulate_C_FlipPoligon) == 0x000008, "Wrong alignment on BF_Triangulate_C_FlipPoligon");
static_assert(sizeof(BF_Triangulate_C_FlipPoligon) == 0x0000E0, "Wrong size on BF_Triangulate_C_FlipPoligon");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, Vert) == 0x000000, "Member 'BF_Triangulate_C_FlipPoligon::Vert' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, __WorldContext) == 0x000010, "Member 'BF_Triangulate_C_FlipPoligon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, Return) == 0x000018, "Member 'BF_Triangulate_C_FlipPoligon::Return' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, F) == 0x000028, "Member 'BF_Triangulate_C_FlipPoligon::F' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, D) == 0x000038, "Member 'BF_Triangulate_C_FlipPoligon::D' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Array_Length_ReturnValue_1) == 0x000040, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, Temp_int_Array_Index_Variable) == 0x000044, "Member 'BF_Triangulate_C_FlipPoligon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'BF_Triangulate_C_FlipPoligon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Array_Get_Item) == 0x00004C, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x00005C, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, K2Node_MakeStruct_ST_VertexID) == 0x000064, "Member 'BF_Triangulate_C_FlipPoligon::K2Node_MakeStruct_ST_VertexID' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_LoopArrayIndex_Return) == 0x000074, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_LoopArrayIndex_Return' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_LoopArrayIndex_Return_1) == 0x000078, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_LoopArrayIndex_Return_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Array_Get_Item_1) == 0x00007C, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Array_Get_Item_2) == 0x000088, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000094, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Subtract_Vector2DVector2D_ReturnValue_1) == 0x00009C, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Subtract_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Normal2D_ReturnValue) == 0x0000A4, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Normal2D_ReturnValue_1) == 0x0000AC, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Normal2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_CrossProduct2D_ReturnValue) == 0x0000B4, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_CrossProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_DotProduct2D_ReturnValue) == 0x0000B8, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_DotProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000BC, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_DegAcos_ReturnValue) == 0x0000C0, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000C4, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_SelectFloat_ReturnValue) == 0x0000C8, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Array_Add_ReturnValue) == 0x0000CC, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_FTrunc_ReturnValue) == 0x0000D0, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Percent_IntInt_ReturnValue) == 0x0000D4, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000D8, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000DC, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000DD, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_FlipPoligon, CallFunc_BooleanOR_ReturnValue) == 0x0000DE, "Member 'BF_Triangulate_C_FlipPoligon::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BF_Triangulate.BF_Triangulate_C.RecursiveTriangulate
// 0x01E0 (0x01E0 - 0x0000)
struct BF_Triangulate_C_RecursiveTriangulate final 
{
public:
	TArray<struct FST_VertexID>                   Vert;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FST_VertexID>                   FullSetVert;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FST_LineSegment>                BuiltSeg;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Thread;                                            // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4536[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Triangles;                                         // 0x0040(0x0010)(Parm, OutParm)
	int32                                         P3;                                                // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P2;                                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         P1;                                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          C;                                                 // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4537[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_LineSegment>                Seg;                                               // 0x0060(0x0010)(Edit, BlueprintVisible)
	TArray<struct FST_VertexID>                   V;                                                 // 0x0070(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Tri;                                               // 0x0080(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4538[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4539[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_453A[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_VertexID                           CallFunc_Array_Get_Item;                           // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoopArrayIndex_Return;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_VertexID                           CallFunc_Array_Get_Item_1;                         // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_453B[0x2];                                     // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_2;        // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_453C[0x2];                                     // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_453D[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x00F0(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_453E[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x0108(0x0010)(ReferenceParm)
	struct FST_LineSegment                        CallFunc_Array_Get_Item_2;                         // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0136(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0137(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoopArrayIndex_Return_1;                  // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_453F[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_RecursiveTriangulate_Triangles;           // 0x0148(0x0010)(ReferenceParm)
	int32                                         CallFunc_LoopArrayIndex_Return_2;                  // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoopArrayIndex_Return_3;                  // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_VertexID                           CallFunc_Array_Get_Item_3;                         // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FST_VertexID                           CallFunc_Array_Get_Item_4;                         // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4540[0x2];                                     // 0x0182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0184(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4541[0x2];                                     // 0x018E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_VertexID                           CallFunc_Array_Get_Item_5;                         // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4542[0x4];                                     // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_2;                          // 0x01A0(0x0010)(ReferenceParm)
	bool                                          CallFunc_PointInTriangle_ReturnValue;              // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4543[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LineSegIntersectionTest_Return;           // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LineSegIntersectionTest_Return_1;         // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4544[0x1];                                     // 0x01BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_LineSegment                        K2Node_MakeStruct_ST_LineSegment;                  // 0x01BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue_1;  // 0x01CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CrossProduct2D_ReturnValue;               // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BF_Triangulate_C_RecursiveTriangulate) == 0x000008, "Wrong alignment on BF_Triangulate_C_RecursiveTriangulate");
static_assert(sizeof(BF_Triangulate_C_RecursiveTriangulate) == 0x0001E0, "Wrong size on BF_Triangulate_C_RecursiveTriangulate");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Vert) == 0x000000, "Member 'BF_Triangulate_C_RecursiveTriangulate::Vert' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, FullSetVert) == 0x000010, "Member 'BF_Triangulate_C_RecursiveTriangulate::FullSetVert' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, BuiltSeg) == 0x000020, "Member 'BF_Triangulate_C_RecursiveTriangulate::BuiltSeg' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Thread) == 0x000030, "Member 'BF_Triangulate_C_RecursiveTriangulate::Thread' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, __WorldContext) == 0x000038, "Member 'BF_Triangulate_C_RecursiveTriangulate::__WorldContext' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Triangles) == 0x000040, "Member 'BF_Triangulate_C_RecursiveTriangulate::Triangles' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, P3) == 0x000050, "Member 'BF_Triangulate_C_RecursiveTriangulate::P3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, P2) == 0x000054, "Member 'BF_Triangulate_C_RecursiveTriangulate::P2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, P1) == 0x000058, "Member 'BF_Triangulate_C_RecursiveTriangulate::P1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, C) == 0x00005C, "Member 'BF_Triangulate_C_RecursiveTriangulate::C' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Seg) == 0x000060, "Member 'BF_Triangulate_C_RecursiveTriangulate::Seg' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, V) == 0x000070, "Member 'BF_Triangulate_C_RecursiveTriangulate::V' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Tri) == 0x000080, "Member 'BF_Triangulate_C_RecursiveTriangulate::Tri' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Temp_int_Loop_Counter_Variable) == 0x000090, "Member 'BF_Triangulate_C_RecursiveTriangulate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Add_IntInt_ReturnValue) == 0x000094, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Add_IntInt_ReturnValue_1) == 0x000098, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Less_IntInt_ReturnValue) == 0x00009C, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Length_ReturnValue) == 0x0000A0, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Length_ReturnValue_1) == 0x0000A4, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A8, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Length_ReturnValue_2) == 0x0000AC, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Greater_IntInt_ReturnValue) == 0x0000B0, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_BooleanAND_ReturnValue) == 0x0000B1, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Temp_bool_True_if_break_was_hit_Variable) == 0x0000B2, "Member 'BF_Triangulate_C_RecursiveTriangulate::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Not_PreBool_ReturnValue) == 0x0000B3, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B4, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Temp_int_Array_Index_Variable) == 0x0000B8, "Member 'BF_Triangulate_C_RecursiveTriangulate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Get_Item) == 0x0000BC, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_LoopArrayIndex_Return) == 0x0000C8, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_LoopArrayIndex_Return' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Get_Item_1) == 0x0000CC, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Temp_bool_True_if_break_was_hit_Variable_1) == 0x0000D8, "Member 'BF_Triangulate_C_RecursiveTriangulate::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000D9, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Temp_int_Array_Index_Variable_1) == 0x0000DC, "Member 'BF_Triangulate_C_RecursiveTriangulate::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Temp_bool_True_if_break_was_hit_Variable_2) == 0x0000E0, "Member 'BF_Triangulate_C_RecursiveTriangulate::Temp_bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000E1, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Temp_int_Loop_Counter_Variable_1) == 0x0000E4, "Member 'BF_Triangulate_C_RecursiveTriangulate::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000E8, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, K2Node_MakeArray_Array) == 0x0000F0, "Member 'BF_Triangulate_C_RecursiveTriangulate::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Temp_int_Array_Index_Variable_2) == 0x000100, "Member 'BF_Triangulate_C_RecursiveTriangulate::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, K2Node_MakeArray_Array_1) == 0x000108, "Member 'BF_Triangulate_C_RecursiveTriangulate::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Get_Item_2) == 0x000118, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Length_ReturnValue_3) == 0x000128, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, Temp_int_Loop_Counter_Variable_2) == 0x00012C, "Member 'BF_Triangulate_C_RecursiveTriangulate::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Length_ReturnValue_4) == 0x000130, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Less_IntInt_ReturnValue_2) == 0x000134, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Less_IntInt_ReturnValue_3) == 0x000135, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_BooleanAND_ReturnValue_2) == 0x000136, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_BooleanAND_ReturnValue_3) == 0x000137, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Add_IntInt_ReturnValue_3) == 0x000138, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Length_ReturnValue_5) == 0x00013C, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_LoopArrayIndex_Return_1) == 0x000140, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_LoopArrayIndex_Return_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_RecursiveTriangulate_Triangles) == 0x000148, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_RecursiveTriangulate_Triangles' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_LoopArrayIndex_Return_2) == 0x000158, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_LoopArrayIndex_Return_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_LoopArrayIndex_Return_3) == 0x00015C, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_LoopArrayIndex_Return_3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Length_ReturnValue_6) == 0x000160, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Get_Item_3) == 0x000164, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000170, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000171, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000172, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000173, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Get_Item_4) == 0x000174, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_BooleanAND_ReturnValue_4) == 0x000180, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_BooleanAND_ReturnValue_5) == 0x000181, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000184, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Not_PreBool_ReturnValue_3) == 0x00018C, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_BooleanAND_ReturnValue_6) == 0x00018D, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Get_Item_5) == 0x000190, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, K2Node_MakeArray_Array_2) == 0x0001A0, "Member 'BF_Triangulate_C_RecursiveTriangulate::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_PointInTriangle_ReturnValue) == 0x0001B0, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_PointInTriangle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Find_ReturnValue) == 0x0001B4, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x0001B8, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_LineSegIntersectionTest_Return) == 0x0001B9, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_LineSegIntersectionTest_Return' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_LineSegIntersectionTest_Return_1) == 0x0001BA, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_LineSegIntersectionTest_Return_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, K2Node_MakeStruct_ST_LineSegment) == 0x0001BC, "Member 'BF_Triangulate_C_RecursiveTriangulate::K2Node_MakeStruct_ST_LineSegment' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Subtract_Vector2DVector2D_ReturnValue_1) == 0x0001CC, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Subtract_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_Array_Add_ReturnValue) == 0x0001D4, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_CrossProduct2D_ReturnValue) == 0x0001D8, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_CrossProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_RecursiveTriangulate, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0001DC, "Member 'BF_Triangulate_C_RecursiveTriangulate::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BF_Triangulate.BF_Triangulate_C.LoopArrayIndex
// 0x0028 (0x0028 - 0x0000)
struct BF_Triangulate_C_LoopArrayIndex final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Shift;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ArrayLength;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4545[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Return;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BF_Triangulate_C_LoopArrayIndex) == 0x000008, "Wrong alignment on BF_Triangulate_C_LoopArrayIndex");
static_assert(sizeof(BF_Triangulate_C_LoopArrayIndex) == 0x000028, "Wrong size on BF_Triangulate_C_LoopArrayIndex");
static_assert(offsetof(BF_Triangulate_C_LoopArrayIndex, Param_Index) == 0x000000, "Member 'BF_Triangulate_C_LoopArrayIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LoopArrayIndex, Shift) == 0x000004, "Member 'BF_Triangulate_C_LoopArrayIndex::Shift' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LoopArrayIndex, ArrayLength) == 0x000008, "Member 'BF_Triangulate_C_LoopArrayIndex::ArrayLength' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LoopArrayIndex, __WorldContext) == 0x000010, "Member 'BF_Triangulate_C_LoopArrayIndex::__WorldContext' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LoopArrayIndex, Return) == 0x000018, "Member 'BF_Triangulate_C_LoopArrayIndex::Return' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LoopArrayIndex, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BF_Triangulate_C_LoopArrayIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_LoopArrayIndex, CallFunc_Percent_IntInt_ReturnValue) == 0x000020, "Member 'BF_Triangulate_C_LoopArrayIndex::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

// Function BF_Triangulate.BF_Triangulate_C.TriangulatePolygon
// 0x0178 (0x0178 - 0x0000)
struct BF_Triangulate_C_TriangulatePolygon final 
{
public:
	TArray<struct FVector>                        Vertices;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Triangles;                                         // 0x0018(0x0010)(Parm, OutParm)
	struct FRotator                               Rot;                                               // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4546[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_VertexID>                   Vert;                                              // 0x0038(0x0010)(Edit, BlueprintVisible)
	struct FVector                                Normal;                                            // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Center;                                            // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorArrayAverage_ReturnValue;        // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4547[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoopArrayIndex_Return;                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4548[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_LineSegment>                K2Node_MakeArray_Array;                            // 0x00B8(0x0010)(ReferenceParm)
	TArray<struct FST_VertexID>                   CallFunc_FlipPoligon_Return;                       // 0x00C8(0x0010)(ReferenceParm)
	TArray<int32>                                 CallFunc_RecursiveTriangulate_Triangles;           // 0x00D8(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_VertexID                           K2Node_MakeStruct_ST_VertexID;                     // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4549[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BF_Triangulate_C_TriangulatePolygon) == 0x000008, "Wrong alignment on BF_Triangulate_C_TriangulatePolygon");
static_assert(sizeof(BF_Triangulate_C_TriangulatePolygon) == 0x000178, "Wrong size on BF_Triangulate_C_TriangulatePolygon");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, Vertices) == 0x000000, "Member 'BF_Triangulate_C_TriangulatePolygon::Vertices' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, __WorldContext) == 0x000010, "Member 'BF_Triangulate_C_TriangulatePolygon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, Triangles) == 0x000018, "Member 'BF_Triangulate_C_TriangulatePolygon::Triangles' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, Rot) == 0x000028, "Member 'BF_Triangulate_C_TriangulatePolygon::Rot' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, Vert) == 0x000038, "Member 'BF_Triangulate_C_TriangulatePolygon::Vert' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, Normal) == 0x000048, "Member 'BF_Triangulate_C_TriangulatePolygon::Normal' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, Center) == 0x000054, "Member 'BF_Triangulate_C_TriangulatePolygon::Center' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Array_Length_ReturnValue_1) == 0x000064, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Array_Length_ReturnValue_2) == 0x000068, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_GetVectorArrayAverage_ReturnValue) == 0x00006C, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_GetVectorArrayAverage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, Temp_int_Loop_Counter_Variable) == 0x000078, "Member 'BF_Triangulate_C_TriangulatePolygon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, Temp_int_Array_Index_Variable) == 0x000084, "Member 'BF_Triangulate_C_TriangulatePolygon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, Temp_int_Array_Index_Variable_1) == 0x000088, "Member 'BF_Triangulate_C_TriangulatePolygon::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Array_Get_Item) == 0x00008C, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Array_Get_Item_1) == 0x000098, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_LoopArrayIndex_Return) == 0x0000A4, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_LoopArrayIndex_Return' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Array_Get_Item_2) == 0x0000A8, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, K2Node_MakeArray_Array) == 0x0000B8, "Member 'BF_Triangulate_C_TriangulatePolygon::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_FlipPoligon_Return) == 0x0000C8, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_FlipPoligon_Return' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_RecursiveTriangulate_Triangles) == 0x0000D8, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_RecursiveTriangulate_Triangles' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000E8, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x0000F4, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_BreakVector_X) == 0x000100, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_BreakVector_Y) == 0x000104, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_BreakVector_Z) == 0x000108, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, Temp_int_Loop_Counter_Variable_1) == 0x00010C, "Member 'BF_Triangulate_C_TriangulatePolygon::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_MakeVector2D_ReturnValue) == 0x000110, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, K2Node_MakeStruct_ST_VertexID) == 0x000118, "Member 'BF_Triangulate_C_TriangulatePolygon::K2Node_MakeStruct_ST_VertexID' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Less_IntInt_ReturnValue_1) == 0x000124, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Array_Add_ReturnValue) == 0x000128, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Add_IntInt_ReturnValue_1) == 0x00012C, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Normal_ReturnValue) == 0x000130, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x00013C, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000148, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Cross_VectorVector_ReturnValue) == 0x000154, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_MakeRotFromZ_ReturnValue) == 0x000160, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BF_Triangulate_C_TriangulatePolygon, CallFunc_Add_VectorVector_ReturnValue) == 0x00016C, "Member 'BF_Triangulate_C_TriangulatePolygon::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

}

