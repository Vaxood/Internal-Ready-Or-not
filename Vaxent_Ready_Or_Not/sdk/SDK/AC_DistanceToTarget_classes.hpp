#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_DistanceToTarget

#include "Basic.hpp"

#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_DistanceToTarget.AC_DistanceToTarget_C
// 0x0008 (0x00E0 - 0x00D8)
class UAC_DistanceToTarget_C final  : public UAIActionConsideration
{
public:
	bool                                          Allow_Last_Tracked_Target;                         // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bAllowEnemy;                                       // 0x00D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bAllowFriendly;                                    // 0x00DA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bAllowNeutral;                                     // 0x00DB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	float Score(struct FAIActionDecisionContext& Context, bool* bSuccess, class AReadyOrNotCharacter* Target, bool CallFunc_IsValid_ReturnValue, class AReadyOrNotCharacter* CallFunc_GetLastTrackedTarget_ReturnValue, class AReadyOrNotCharacter* CallFunc_GetTrackedTarget_ReturnValue, bool CallFunc_IsTrackedInKnownNeutrals_ReturnValue, bool CallFunc_IsTrackedInKnownFriendlies_ReturnValue, bool CallFunc_IsTrackedInKnownEnemies_ReturnValue, class APawn* CallFunc_K2_GetPawn_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_2, bool CallFunc_BooleanOR_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue_1, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue) const;
	float CalculateCurve(float X, float CallFunc_Divide_FloatFloat_ReturnValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_DistanceToTarget_C">();
	}
	static class UAC_DistanceToTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_DistanceToTarget_C>();
	}
};
static_assert(alignof(UAC_DistanceToTarget_C) == 0x000008, "Wrong alignment on UAC_DistanceToTarget_C");
static_assert(sizeof(UAC_DistanceToTarget_C) == 0x0000E0, "Wrong size on UAC_DistanceToTarget_C");
static_assert(offsetof(UAC_DistanceToTarget_C, Allow_Last_Tracked_Target) == 0x0000D8, "Member 'UAC_DistanceToTarget_C::Allow_Last_Tracked_Target' has a wrong offset!");
static_assert(offsetof(UAC_DistanceToTarget_C, bAllowEnemy) == 0x0000D9, "Member 'UAC_DistanceToTarget_C::bAllowEnemy' has a wrong offset!");
static_assert(offsetof(UAC_DistanceToTarget_C, bAllowFriendly) == 0x0000DA, "Member 'UAC_DistanceToTarget_C::bAllowFriendly' has a wrong offset!");
static_assert(offsetof(UAC_DistanceToTarget_C, bAllowNeutral) == 0x0000DB, "Member 'UAC_DistanceToTarget_C::bAllowNeutral' has a wrong offset!");

}

