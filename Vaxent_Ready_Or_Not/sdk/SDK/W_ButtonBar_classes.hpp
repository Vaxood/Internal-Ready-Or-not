#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ButtonBar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonUI_classes.hpp"
#include "CommonInput_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_ButtonBar.W_ButtonBar_C
// 0x0150 (0x03D8 - 0x0288)
class UW_ButtonBar_C final  : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_Button_C*                            btn_FocusIntercept;                                // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_null;                                          // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Options;                                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_null;                                          // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Lbl_Empty;                                         // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMap<class FString, class FText>              ButtonOptions;                                     // 0x02B8(0x0050)(Edit, BlueprintVisible)
	class UClass*                                 ButtonStyle;                                       // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonPadding;                                     // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F90[0x4];                                     // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UW_Button_C*>       ButtonMap;                                         // 0x0318(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class FString                                 CurrentSelection;                                  // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UW_Button_C*                            CurrentActiveButton;                               // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnOptionClicked;                                   // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnOptionHovered;                                   // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnOptionUnhovered;                                 // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UW_Button_C*                            LastHovered;                                       // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 EquippedButtonStyle;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseGamepad;                                        // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F91[0x7];                                     // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Focus;                                             // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Disabled;                                          // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnOptionClicked__DelegateSignature(const class FString& ButtonID, class UW_Button_C* TriggeringButton);
	void OnOptionHovered__DelegateSignature(const class FString& ButtonID, class UW_Button_C* TriggeringButton);
	void OnOptionUnhovered__DelegateSignature();
	void ExecuteUbergraph_W_ButtonBar(int32 EntryPoint, class UWidget* CallFunc_GetFocusTarget_Focus, class UCommonInputSubsystem* CallFunc_GetLocalPlayerSubsystem_ReturnValue, ECommonInputType CallFunc_GetCurrentInputType_ReturnValue, TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, float K2Node_Event_Delay_1, float K2Node_Event_Delay, bool K2Node_Event_Collapse, ESlateVisibility K2Node_Select_Default, bool K2Node_Event_IsGamepad, class FName K2Node_Event_PageName, bool K2Node_Event_IsDesignTime, class UW_Button_C* K2Node_CustomEvent_Button_1, const class FString& CallFunc_GetButtonID_ID, class UW_Button_C* K2Node_CustomEvent_Button, const class FString& CallFunc_GetButtonID_ID_1, ESlateVisibility Temp_byte_Variable_2, bool CallFunc_GetHasOptions_ReturnValue, ESlateVisibility Temp_byte_Variable_3, bool CallFunc_Not_PreBool_ReturnValue, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_2, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_3, bool Temp_bool_Variable_1, ECommonInputType K2Node_CustomEvent_bNewInputType, ESlateVisibility K2Node_Select_Default_1, bool CallFunc_EqualEqual_ByteByte_ReturnValue, const struct FGeometry& K2Node_Event_MyGeometry, struct FPointerEvent& K2Node_Event_MouseEvent_1, struct FPointerEvent& K2Node_Event_MouseEvent);
	void OnMouseLeave(struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent);
	void InputMethodChanged(ECommonInputType bNewInputType);
	void OnInitialized();
	void OptionUnhovered();
	void OptionHovered(class UW_Button_C* Button);
	void OptionClicked(class UW_Button_C* Button);
	void PreConstruct(bool IsDesignTime);
	void ChangePage(class FName PageName);
	void SetInputMode(bool IsGamepad);
	void Hide(float Delay, bool Collapse);
	void Reveal(float Delay);
	void PopulateButtons(int32 CurrentIndex, int32 LastIndex, class UW_Button_C* NewButton, const class FString& NewID, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, const struct FMargin& K2Node_MakeStruct_Margin, class UHorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, const struct FSlateChildSize& K2Node_MakeStruct_SlateChildSize, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_SelectFloat_ReturnValue, const struct FMargin& K2Node_MakeStruct_Margin_1, class UHorizontalBoxSlot* CallFunc_AddChildToHorizontalBox_ReturnValue, class FText CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, class UW_Button_C* CallFunc_CreateButtonWidget_NewButton, TArray<class FString>& CallFunc_Map_Keys_Keys, const class FString& CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue_1, int32 CallFunc_Array_LastIndex_ReturnValue);
	void RemoveButtonByID(const class FString& ID, const struct FMargin& K2Node_MakeStruct_Margin, TArray<class UWidget*>& CallFunc_GetAllChildren_ReturnValue, class UW_Button_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int32 CallFunc_Array_LastIndex_ReturnValue, class UWidget* CallFunc_GetChildAt_ReturnValue, class UHorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue);
	void SetEquippedButtonByID(const class FString& ButtonID, class UW_Button_C* FoundButton, TSubclassOf<class UCommonButtonStyle> Temp_class_Variable, bool CallFunc_IsValid_ReturnValue, class UWidget* CallFunc_GetFocusTarget_Focus, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool Temp_bool_Variable, TSubclassOf<class UCommonButtonStyle> K2Node_Select_Default, bool CallFunc_NotEqual_ObjectObject_ReturnValue, class UW_Button_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
	void GetButtonID(class UW_Button_C*& ButtonToFind, class FString* ID, TArray<class UW_Button_C*>& CallFunc_Map_Values_Values, TArray<class FString>& CallFunc_Map_Keys_Keys, int32 CallFunc_Array_Find_ReturnValue, const class FString& CallFunc_Array_Get_Item);
	bool GetHasOptions(TArray<class FString>& CallFunc_Map_Keys_Keys, bool CallFunc_Array_IsValidIndex_ReturnValue);
	void SetOptions(const TMap<class FString, class FText>& Param_ButtonOptions);
	void AddOption(const class FString& ID, class FText ButtonText, class UW_Button_C* NewButton, const struct FSlateChildSize& K2Node_MakeStruct_SlateChildSize, const struct FMargin& K2Node_MakeStruct_Margin, TArray<class UWidget*>& CallFunc_GetAllChildren_ReturnValue, int32 CallFunc_Array_LastIndex_ReturnValue, class UWidget* CallFunc_GetChildAt_ReturnValue, class UHorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, class UHorizontalBoxSlot* CallFunc_AddChildToHorizontalBox_ReturnValue, class UW_Button_C* CallFunc_CreateButtonWidget_NewButton);
	void CreateButtonWidget(class FText& ButtonText, class UW_Button_C** NewButton, class UW_Button_C* CallFunc_Create_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void(class UW_Button_C* Button)> K2Node_CreateDelegate_OutputDelegate_2);
	void InsertOptionAtIndex(int32 Param_Index, const class FString& ButtonID, class FText ButtonText, const TMap<class FString, class FText>& RebuiltMap, const TArray<class FText>& ButtonValues, const TArray<class FString>& ButtonIDs, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const class FString& CallFunc_Array_Get_Item, TArray<class FText>& CallFunc_Map_Values_Values, class FText CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, TArray<class FString>& CallFunc_Map_Keys_Keys, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);
	void SetOptionsMap(const TMap<class FString, class FText>& Param_ButtonOptions);
	void Disable(bool Param_Disable, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, bool CallFunc_Not_PreBool_ReturnValue, ESlateVisibility K2Node_Select_Default);
	void BackPage(bool* Handled);

	void GetFocusTarget(class UWidget** Param_Focus, bool CallFunc_IsValid_ReturnValue, class UWidget* CallFunc_GetChildAt_ReturnValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_ButtonBar_C">();
	}
	static class UW_ButtonBar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_ButtonBar_C>();
	}
};
static_assert(alignof(UW_ButtonBar_C) == 0x000008, "Wrong alignment on UW_ButtonBar_C");
static_assert(sizeof(UW_ButtonBar_C) == 0x0003D8, "Wrong size on UW_ButtonBar_C");
static_assert(offsetof(UW_ButtonBar_C, UberGraphFrame) == 0x000288, "Member 'UW_ButtonBar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, btn_FocusIntercept) == 0x000290, "Member 'UW_ButtonBar_C::btn_FocusIntercept' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, btn_null) == 0x000298, "Member 'UW_ButtonBar_C::btn_null' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, HB_Options) == 0x0002A0, "Member 'UW_ButtonBar_C::HB_Options' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, Img_null) == 0x0002A8, "Member 'UW_ButtonBar_C::Img_null' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, Lbl_Empty) == 0x0002B0, "Member 'UW_ButtonBar_C::Lbl_Empty' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, ButtonOptions) == 0x0002B8, "Member 'UW_ButtonBar_C::ButtonOptions' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, ButtonStyle) == 0x000308, "Member 'UW_ButtonBar_C::ButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, ButtonPadding) == 0x000310, "Member 'UW_ButtonBar_C::ButtonPadding' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, ButtonMap) == 0x000318, "Member 'UW_ButtonBar_C::ButtonMap' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, CurrentSelection) == 0x000368, "Member 'UW_ButtonBar_C::CurrentSelection' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, CurrentActiveButton) == 0x000378, "Member 'UW_ButtonBar_C::CurrentActiveButton' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, OnOptionClicked) == 0x000380, "Member 'UW_ButtonBar_C::OnOptionClicked' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, OnOptionHovered) == 0x000390, "Member 'UW_ButtonBar_C::OnOptionHovered' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, OnOptionUnhovered) == 0x0003A0, "Member 'UW_ButtonBar_C::OnOptionUnhovered' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, LastHovered) == 0x0003B0, "Member 'UW_ButtonBar_C::LastHovered' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, EquippedButtonStyle) == 0x0003B8, "Member 'UW_ButtonBar_C::EquippedButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, UseGamepad) == 0x0003C0, "Member 'UW_ButtonBar_C::UseGamepad' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, Focus) == 0x0003C8, "Member 'UW_ButtonBar_C::Focus' has a wrong offset!");
static_assert(offsetof(UW_ButtonBar_C, Disabled) == 0x0003D0, "Member 'UW_ButtonBar_C::Disabled' has a wrong offset!");

}

