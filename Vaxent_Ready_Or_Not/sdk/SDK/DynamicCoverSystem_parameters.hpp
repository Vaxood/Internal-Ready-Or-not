#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicCoverSystem

#include "Basic.hpp"

#include "DynamicCoverSystem_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function DynamicCoverSystem.CoverPoint.SetCrouchCoverType
// 0x0001 (0x0001 - 0x0000)
struct CoverPoint_SetCrouchCoverType final 
{
public:
	ECrouchCoverType                              NewCoverType;                                      // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoverPoint_SetCrouchCoverType) == 0x000001, "Wrong alignment on CoverPoint_SetCrouchCoverType");
static_assert(sizeof(CoverPoint_SetCrouchCoverType) == 0x000001, "Wrong size on CoverPoint_SetCrouchCoverType");
static_assert(offsetof(CoverPoint_SetCrouchCoverType, NewCoverType) == 0x000000, "Member 'CoverPoint_SetCrouchCoverType::NewCoverType' has a wrong offset!");

// Function DynamicCoverSystem.CoverPoint.SetStandCoverType
// 0x0001 (0x0001 - 0x0000)
struct CoverPoint_SetStandCoverType final 
{
public:
	EStandCoverType                               NewCoverType;                                      // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoverPoint_SetStandCoverType) == 0x000001, "Wrong alignment on CoverPoint_SetStandCoverType");
static_assert(sizeof(CoverPoint_SetStandCoverType) == 0x000001, "Wrong size on CoverPoint_SetStandCoverType");
static_assert(offsetof(CoverPoint_SetStandCoverType, NewCoverType) == 0x000000, "Member 'CoverPoint_SetStandCoverType::NewCoverType' has a wrong offset!");

// Function DynamicCoverSystem.CoverSystem.OccupyCover
// 0x0010 (0x0010 - 0x0000)
struct CoverSystem_OccupyCover final 
{
public:
	struct FVector                                InCoverPoint;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1625[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoverSystem_OccupyCover) == 0x000004, "Wrong alignment on CoverSystem_OccupyCover");
static_assert(sizeof(CoverSystem_OccupyCover) == 0x000010, "Wrong size on CoverSystem_OccupyCover");
static_assert(offsetof(CoverSystem_OccupyCover, InCoverPoint) == 0x000000, "Member 'CoverSystem_OccupyCover::InCoverPoint' has a wrong offset!");
static_assert(offsetof(CoverSystem_OccupyCover, ReturnValue) == 0x00000C, "Member 'CoverSystem_OccupyCover::ReturnValue' has a wrong offset!");

// Function DynamicCoverSystem.CoverSystem.ReleaseCover
// 0x0010 (0x0010 - 0x0000)
struct CoverSystem_ReleaseCover final 
{
public:
	struct FVector                                InCoverPoint;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1626[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoverSystem_ReleaseCover) == 0x000004, "Wrong alignment on CoverSystem_ReleaseCover");
static_assert(sizeof(CoverSystem_ReleaseCover) == 0x000010, "Wrong size on CoverSystem_ReleaseCover");
static_assert(offsetof(CoverSystem_ReleaseCover, InCoverPoint) == 0x000000, "Member 'CoverSystem_ReleaseCover::InCoverPoint' has a wrong offset!");
static_assert(offsetof(CoverSystem_ReleaseCover, ReturnValue) == 0x00000C, "Member 'CoverSystem_ReleaseCover::ReturnValue' has a wrong offset!");

// Function DynamicCoverSystem.CoverSystem.IsCoverPointOccupied
// 0x0010 (0x0010 - 0x0000)
struct CoverSystem_IsCoverPointOccupied final 
{
public:
	struct FVector                                InCoverLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1627[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoverSystem_IsCoverPointOccupied) == 0x000004, "Wrong alignment on CoverSystem_IsCoverPointOccupied");
static_assert(sizeof(CoverSystem_IsCoverPointOccupied) == 0x000010, "Wrong size on CoverSystem_IsCoverPointOccupied");
static_assert(offsetof(CoverSystem_IsCoverPointOccupied, InCoverLocation) == 0x000000, "Member 'CoverSystem_IsCoverPointOccupied::InCoverLocation' has a wrong offset!");
static_assert(offsetof(CoverSystem_IsCoverPointOccupied, ReturnValue) == 0x00000C, "Member 'CoverSystem_IsCoverPointOccupied::ReturnValue' has a wrong offset!");

}

