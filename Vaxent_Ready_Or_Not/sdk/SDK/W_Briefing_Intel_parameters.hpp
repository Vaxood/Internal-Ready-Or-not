#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Briefing_Intel

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "ST_Briefing_Evidence_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "ST_Briefing_Intel_structs.hpp"


namespace SDK::Params
{

// Function W_Briefing_Intel.W_Briefing_Intel_C.ExecuteUbergraph_W_Briefing_Intel
// 0x02C0 (0x02C0 - 0x0000)
struct W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel final 
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CE4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_Briefing_Intel                     K2Node_CustomEvent_Intel;                          // 0x0008(0x0030)(HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CE5[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterBio                          K2Node_ComponentBoundEvent_Bio_1;                  // 0x0040(0x0140)()
	struct FCharacterBio                          K2Node_ComponentBoundEvent_Bio;                    // 0x0180(0x0140)()
};
static_assert(alignof(W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel) == 0x000008, "Wrong alignment on W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel");
static_assert(sizeof(W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel) == 0x0002C0, "Wrong size on W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel");
static_assert(offsetof(W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel, EntryPoint) == 0x000000, "Member 'W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel, K2Node_CustomEvent_Intel) == 0x000008, "Member 'W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel::K2Node_CustomEvent_Intel' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel, K2Node_Event_IsDesignTime) == 0x000038, "Member 'W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel, K2Node_ComponentBoundEvent_Bio_1) == 0x000040, "Member 'W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel::K2Node_ComponentBoundEvent_Bio_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel, K2Node_ComponentBoundEvent_Bio) == 0x000180, "Member 'W_Briefing_Intel_C_ExecuteUbergraph_W_Briefing_Intel::K2Node_ComponentBoundEvent_Bio' has a wrong offset!");

// Function W_Briefing_Intel.W_Briefing_Intel_C.BndEvt__CivilianIntelList_K2Node_ComponentBoundEvent_1_BioIntelClicked__DelegateSignature
// 0x0140 (0x0140 - 0x0000)
struct W_Briefing_Intel_C_BndEvt__CivilianIntelList_K2Node_ComponentBoundEvent_1_BioIntelClicked__DelegateSignature final 
{
public:
	struct FCharacterBio                          Bio;                                               // 0x0000(0x0140)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_Briefing_Intel_C_BndEvt__CivilianIntelList_K2Node_ComponentBoundEvent_1_BioIntelClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_Briefing_Intel_C_BndEvt__CivilianIntelList_K2Node_ComponentBoundEvent_1_BioIntelClicked__DelegateSignature");
static_assert(sizeof(W_Briefing_Intel_C_BndEvt__CivilianIntelList_K2Node_ComponentBoundEvent_1_BioIntelClicked__DelegateSignature) == 0x000140, "Wrong size on W_Briefing_Intel_C_BndEvt__CivilianIntelList_K2Node_ComponentBoundEvent_1_BioIntelClicked__DelegateSignature");
static_assert(offsetof(W_Briefing_Intel_C_BndEvt__CivilianIntelList_K2Node_ComponentBoundEvent_1_BioIntelClicked__DelegateSignature, Bio) == 0x000000, "Member 'W_Briefing_Intel_C_BndEvt__CivilianIntelList_K2Node_ComponentBoundEvent_1_BioIntelClicked__DelegateSignature::Bio' has a wrong offset!");

// Function W_Briefing_Intel.W_Briefing_Intel_C.BndEvt__SuspectIntelList_K2Node_ComponentBoundEvent_0_BioIntelClicked__DelegateSignature
// 0x0140 (0x0140 - 0x0000)
struct W_Briefing_Intel_C_BndEvt__SuspectIntelList_K2Node_ComponentBoundEvent_0_BioIntelClicked__DelegateSignature final 
{
public:
	struct FCharacterBio                          Bio;                                               // 0x0000(0x0140)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_Briefing_Intel_C_BndEvt__SuspectIntelList_K2Node_ComponentBoundEvent_0_BioIntelClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_Briefing_Intel_C_BndEvt__SuspectIntelList_K2Node_ComponentBoundEvent_0_BioIntelClicked__DelegateSignature");
static_assert(sizeof(W_Briefing_Intel_C_BndEvt__SuspectIntelList_K2Node_ComponentBoundEvent_0_BioIntelClicked__DelegateSignature) == 0x000140, "Wrong size on W_Briefing_Intel_C_BndEvt__SuspectIntelList_K2Node_ComponentBoundEvent_0_BioIntelClicked__DelegateSignature");
static_assert(offsetof(W_Briefing_Intel_C_BndEvt__SuspectIntelList_K2Node_ComponentBoundEvent_0_BioIntelClicked__DelegateSignature, Bio) == 0x000000, "Member 'W_Briefing_Intel_C_BndEvt__SuspectIntelList_K2Node_ComponentBoundEvent_0_BioIntelClicked__DelegateSignature::Bio' has a wrong offset!");

// Function W_Briefing_Intel.W_Briefing_Intel_C.Initialize
// 0x0030 (0x0030 - 0x0000)
struct W_Briefing_Intel_C_Initialize final 
{
public:
	struct FST_Briefing_Intel                     Intel;                                             // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Intel_C_Initialize) == 0x000008, "Wrong alignment on W_Briefing_Intel_C_Initialize");
static_assert(sizeof(W_Briefing_Intel_C_Initialize) == 0x000030, "Wrong size on W_Briefing_Intel_C_Initialize");
static_assert(offsetof(W_Briefing_Intel_C_Initialize, Intel) == 0x000000, "Member 'W_Briefing_Intel_C_Initialize::Intel' has a wrong offset!");

// Function W_Briefing_Intel.W_Briefing_Intel_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Briefing_Intel_C_PreConstruct final 
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Briefing_Intel_C_PreConstruct) == 0x000001, "Wrong alignment on W_Briefing_Intel_C_PreConstruct");
static_assert(sizeof(W_Briefing_Intel_C_PreConstruct) == 0x000001, "Wrong size on W_Briefing_Intel_C_PreConstruct");
static_assert(offsetof(W_Briefing_Intel_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Briefing_Intel_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Briefing_Intel.W_Briefing_Intel_C.CreateLists
// 0x0050 (0x0050 - 0x0000)
struct W_Briefing_Intel_C_CreateLists final 
{
public:
	TDelegate<void(const struct FCharacterBio& Bio)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(const struct FCharacterBio& Bio)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class UW_Briefing_IntelList_Entry_C*          CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Briefing_IntelList_Entry_C*          CallFunc_Create_ReturnValue_1;                     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FST_Briefing_Evidence& Media)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	class UW_Briefing_IntelList_Entry_C*          CallFunc_Create_ReturnValue_2;                     // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Intel_C_CreateLists) == 0x000008, "Wrong alignment on W_Briefing_Intel_C_CreateLists");
static_assert(sizeof(W_Briefing_Intel_C_CreateLists) == 0x000050, "Wrong size on W_Briefing_Intel_C_CreateLists");
static_assert(offsetof(W_Briefing_Intel_C_CreateLists, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'W_Briefing_Intel_C_CreateLists::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_CreateLists, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'W_Briefing_Intel_C_CreateLists::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_CreateLists, CallFunc_Create_ReturnValue) == 0x000020, "Member 'W_Briefing_Intel_C_CreateLists::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_CreateLists, CallFunc_Create_ReturnValue_1) == 0x000028, "Member 'W_Briefing_Intel_C_CreateLists::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_CreateLists, K2Node_CreateDelegate_OutputDelegate_2) == 0x000030, "Member 'W_Briefing_Intel_C_CreateLists::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_CreateLists, CallFunc_Create_ReturnValue_2) == 0x000040, "Member 'W_Briefing_Intel_C_CreateLists::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_CreateLists, CallFunc_MakeLiteralByte_ReturnValue) == 0x000048, "Member 'W_Briefing_Intel_C_CreateLists::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_CreateLists, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000049, "Member 'W_Briefing_Intel_C_CreateLists::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");

// Function W_Briefing_Intel.W_Briefing_Intel_C.AddToList
// 0x0020 (0x0020 - 0x0000)
struct W_Briefing_Intel_C_AddToList final 
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Intel_C_AddToList) == 0x000008, "Wrong alignment on W_Briefing_Intel_C_AddToList");
static_assert(sizeof(W_Briefing_Intel_C_AddToList) == 0x000020, "Wrong size on W_Briefing_Intel_C_AddToList");
static_assert(offsetof(W_Briefing_Intel_C_AddToList, Content) == 0x000000, "Member 'W_Briefing_Intel_C_AddToList::Content' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_AddToList, K2Node_MakeStruct_Margin) == 0x000008, "Member 'W_Briefing_Intel_C_AddToList::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_AddToList, CallFunc_AddChildToVerticalBox_ReturnValue) == 0x000018, "Member 'W_Briefing_Intel_C_AddToList::CallFunc_AddChildToVerticalBox_ReturnValue' has a wrong offset!");

// Function W_Briefing_Intel.W_Briefing_Intel_C.UpdateMediaIntel
// 0x00A0 (0x00A0 - 0x0000)
struct W_Briefing_Intel_C_UpdateMediaIntel final 
{
public:
	struct FST_Briefing_Evidence                  Media;                                             // 0x0000(0x00A0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(W_Briefing_Intel_C_UpdateMediaIntel) == 0x000008, "Wrong alignment on W_Briefing_Intel_C_UpdateMediaIntel");
static_assert(sizeof(W_Briefing_Intel_C_UpdateMediaIntel) == 0x0000A0, "Wrong size on W_Briefing_Intel_C_UpdateMediaIntel");
static_assert(offsetof(W_Briefing_Intel_C_UpdateMediaIntel, Media) == 0x000000, "Member 'W_Briefing_Intel_C_UpdateMediaIntel::Media' has a wrong offset!");

// Function W_Briefing_Intel.W_Briefing_Intel_C.UpdateBioIntel
// 0x0140 (0x0140 - 0x0000)
struct W_Briefing_Intel_C_UpdateBioIntel final 
{
public:
	struct FCharacterBio                          Bio;                                               // 0x0000(0x0140)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_Briefing_Intel_C_UpdateBioIntel) == 0x000008, "Wrong alignment on W_Briefing_Intel_C_UpdateBioIntel");
static_assert(sizeof(W_Briefing_Intel_C_UpdateBioIntel) == 0x000140, "Wrong size on W_Briefing_Intel_C_UpdateBioIntel");
static_assert(offsetof(W_Briefing_Intel_C_UpdateBioIntel, Bio) == 0x000000, "Member 'W_Briefing_Intel_C_UpdateBioIntel::Bio' has a wrong offset!");

// Function W_Briefing_Intel.W_Briefing_Intel_C.InitSuspects
// 0x0028 (0x0028 - 0x0000)
struct W_Briefing_Intel_C_InitSuspects final 
{
public:
	TArray<struct FCharacterBio>                  SuspectBios;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CE6[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FCharacterBio& Bio)> K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(W_Briefing_Intel_C_InitSuspects) == 0x000008, "Wrong alignment on W_Briefing_Intel_C_InitSuspects");
static_assert(sizeof(W_Briefing_Intel_C_InitSuspects) == 0x000028, "Wrong size on W_Briefing_Intel_C_InitSuspects");
static_assert(offsetof(W_Briefing_Intel_C_InitSuspects, SuspectBios) == 0x000000, "Member 'W_Briefing_Intel_C_InitSuspects::SuspectBios' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_InitSuspects, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000010, "Member 'W_Briefing_Intel_C_InitSuspects::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_InitSuspects, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'W_Briefing_Intel_C_InitSuspects::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function W_Briefing_Intel.W_Briefing_Intel_C.InitCivilians
// 0x0028 (0x0028 - 0x0000)
struct W_Briefing_Intel_C_InitCivilians final 
{
public:
	TArray<struct FCharacterBio>                  CivilianBios;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CE7[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FCharacterBio& Bio)> K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(W_Briefing_Intel_C_InitCivilians) == 0x000008, "Wrong alignment on W_Briefing_Intel_C_InitCivilians");
static_assert(sizeof(W_Briefing_Intel_C_InitCivilians) == 0x000028, "Wrong size on W_Briefing_Intel_C_InitCivilians");
static_assert(offsetof(W_Briefing_Intel_C_InitCivilians, CivilianBios) == 0x000000, "Member 'W_Briefing_Intel_C_InitCivilians::CivilianBios' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_InitCivilians, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000010, "Member 'W_Briefing_Intel_C_InitCivilians::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_InitCivilians, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'W_Briefing_Intel_C_InitCivilians::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function W_Briefing_Intel.W_Briefing_Intel_C.InitMedia
// 0x0028 (0x0028 - 0x0000)
struct W_Briefing_Intel_C_InitMedia final 
{
public:
	TArray<struct FST_Briefing_Evidence>          MediaIntel;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CE8[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FST_Briefing_Evidence& Media)> K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(W_Briefing_Intel_C_InitMedia) == 0x000008, "Wrong alignment on W_Briefing_Intel_C_InitMedia");
static_assert(sizeof(W_Briefing_Intel_C_InitMedia) == 0x000028, "Wrong size on W_Briefing_Intel_C_InitMedia");
static_assert(offsetof(W_Briefing_Intel_C_InitMedia, MediaIntel) == 0x000000, "Member 'W_Briefing_Intel_C_InitMedia::MediaIntel' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_InitMedia, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000010, "Member 'W_Briefing_Intel_C_InitMedia::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Briefing_Intel_C_InitMedia, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'W_Briefing_Intel_C_InitMedia::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

}

